{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","queries/system/get_user.js","tools/user_tools.js","components/HasPermissionWrapper.js","components/home/home/queries.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/ui/ButtonBack.jsx","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationBase.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/ui/CSDatePicker.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/finance/FinanceMenu.jsx","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","tools/confirm_delete.js","components/finance/invoices/FinanceInvoices.jsx","tools/refresh_token_and_open_export_link.js","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","tools/date_tools.js","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/yupSchema.js","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/OrganizationMenu.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","tools/custom_file_input_label_style.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBranding.jsx","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/appointment_categories/appointments/queries.js","components/organization/appointment_categories/appointments/OrganizationAppointments.jsx","components/organization/appointment_categories/appointments/yupSchema.js","components/organization/appointment_categories/appointments/OrganizationAppointmentForm.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentAdd.jsx","components/organization/appointment_categories/appointments/OrganizationAppointmentEdit.jsx","components/organization/appointment_categories/queries.js","components/organization/appointment_categories/OrganizationAppointmentCategories.jsx","components/organization/appointment_categories/yupSchema.js","components/organization/appointment_categories/OrganizationAppointmentCategoryForm.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryAdd.jsx","components/organization/appointment_categories/OrganizationAppointmentCategoryEdit.jsx","components/organization/appointment_categories/appointments/prices/queries.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices.jsx","components/organization/appointment_categories/appointments/prices/yupSchema.js","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceForm.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd.jsx","components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/yupSchema.js","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/ui/Validity.jsx","components/organization/memberships/queries.js","components/organization/memberships/OrganizationMemberships.jsx","components/organization/memberships/yupSchema.js","components/organization/memberships/OrganizationMembershipAdd.jsx","components/organization/memberships/OrganizationMembershipEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/ui/AlertInfo.jsx","components/organization/subscriptions/prices/queries.js","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/relations/RelationsMenu.jsx","components/organization/subscriptions/prices/yupSchema.js","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountsBack.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/ui/FileProtectedDownloadTableButton.jsx","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/yupSchema.js","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/relations/accounts/memberships/queries.js","components/relations/accounts/memberships/AccountMemberships.jsx","components/relations/accounts/memberships/yupSchema.js","components/relations/accounts/memberships/AccountMembershipForm.jsx","components/relations/accounts/memberships/AccountMembershipAdd.jsx","components/relations/accounts/memberships/AccountMembershipEdit.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","components/relations/accounts/schedule_event_tickets/queries.js","queries/accounts/get_account.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/ui/ButtonAddSecondaryMenu.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/ui/SubscriptionCreditsMutationType.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","tools/confirm_archive.js","tools/confirm_unarchive.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/schedule/ScheduleMenu.jsx","components/schedule/home/ScheduleHome.jsx","components/schedule/appointments/tools.js","components/schedule/appointments/ScheduleAppointmentsFilter.jsx","components/schedule/appointments/queries.js","components/schedule/appointments/ScheduleAppointments.jsx","components/schedule/appointments/all/AppointmentEditMenu.jsx","components/schedule/appointments/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/appointments/ScheduleAppointmentForm.jsx","components/schedule/appointments/ScheduleAppointmentAdd.jsx","components/schedule/appointments/all/AppointmentEditBack.jsx","components/schedule/appointments/all/AppointmentEditBase.jsx","components/schedule/appointments/all/tools.js","components/schedule/appointments/all/edit/ScheduleAppointmentEditAll.jsx","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/queries.js","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","components/schedule/classes/class/tools.js","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/ButtonAdd.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/yupSchema.js","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBack.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdsBack.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketListBase.jsx","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/SettingsMailTemplatesBase.jsx","components/settings/mail/queries.js","components/settings/mail/SettingsMailTemplates.jsx","components/settings/mail/SettingsMailTemplateEditBase.jsx","components/settings/mail/SettingsMailTemplateEditForm.jsx","components/settings/mail/SettingsMailTemplateEdit.jsx","components/settings/mail/tools.js","components/settings/shop/features/queries.js","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","queries/system/get_user_profile.js","components/SiteWrapperShop.js","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/account/bank_account/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/ShopCheckoutProgress.jsx","components/shop/ShopBase.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","token","payload","exp","origIat","refreshToken","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","logout","expired","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","withTranslation","t","urlLogo","children","className","Row","src","alt","autoClose","transition","Slide","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_USER","get_all_permissions","user","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","HasPermissionWrapper","useQuery","loading","error","data","check_permission","GET_BACKEND_ANNOUNCEMENTS_QUERY","getNavBarItems","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","now","Date","match","history","fetchMore","avatarURL","urlImageThumbnailSmall","Wrapper","headerProps","href","imageURL","navItems","Item","type","outline","size","color","accountDropdown","name","firstName","lastName","description","options","isDivider","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","getFullYear","target","rel","nav","Col","auto","Header","title","announcements","organizationAnnouncements","length","cards","deck","map","md","Body","dangerouslySetInnerHTML","__html","content","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","addEventListener","removeEventListener","cardTitle","headerContent","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","returnUrl","status","dateTimeFormatMoment","useContext","variables","taskName","headerOptions","Options","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","ColHeader","v4","moment","dateDone","format","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","Group","label","autoComplete","component","disabled","ADD_TASK","useMutation","addTask","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","useState","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","dateFormat","selected","onChange","onBlur","isClearable","placeholderText","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","date","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","invoices_active","orders_active","costcenters_active","glaccounts_active","taxrates_active","taxrates_summary_active","payment_methods_active","payment_batch_collections_active","payment_batch_payments_active","payment_batch_categories_active","activeLink","transparent","GroupItem","FinanceHome","id","linkTitleView","lg","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","showBack","prefix","archived","setArchived","refetch","archiveCostcenter","costcenters","financeCostcenters","code","COSTCENTER_SCHEMA","addCostcenter","updateCostcenter","initialData","financeCostcenter","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","glaccounts","financeGlaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","financeGlaccount","get_list_query_variables","queryVars","getItem","undefined","getDefaultValue","defaultValue","event","key","updateLocalStorageAndRefetch","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","confirm_delete","msgConfirm","msgDescription","msgSuccess","deleteFunction","functionVariables","confirmAlert","customUI","onClose","location","pathname","fetchPolicy","deleteFinanceInvoice","invoices","financeInvoices","invoiceNumber","account","relationCompany","relationContactName","Small","summary","trunc","dateSent","dateDue","totalDisplay","balanceDisplay","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","url","open","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","touched","handleChange","setFieldTouched","inputData","e","quantity","price","financeTaxRate","financeTaxRates","percentage","rateType","Object","keys","updateInvoiceItem","setTouched","refetchInvoice","updateItem","updating","setUpdating","onDragEnd","useCallback","draggableId","destination","source","reason","droppableId","index","updateLineNumber","node_id","line_number","lineNumber","setTimeout","statusColor","provided","snapshot","ref","innerRef","droppableProps","idx","draggableProps","dragHandleProps","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","setFieldValue","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","initialTab","subtotalDisplay","taxDisplay","paidDisplay","dateToLocalISO","dateToLocalISOTime","getHours","getMinutes","slice","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","financePaymentMethod","financePaymentMethods","initialPaymentMethod","organization","address","phone","email","registration","taxRegistration","creditInvoiceNumber","relationCompanyRegistration","relationCompanyTaxRegistration","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","cancelAndCreateCreditInvoice","return_url","export_url","payment_add_url","toggle","triggerContent","creditInvoiceId","cancelAndCreateCreditFinanceInvoice","ml","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","archiveInvoiceGroup","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","Label","checked","addInvoiceGroup","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","GET_INVOICE_PAYMENT_QUERY","UPDATE_FINANCE_INVOICE_PAYMENT","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","fullName","amount","role","ADD_FINANCE_INVOICE_PAYMENT","onCompleted","addInvoicePayment","mutationData","mutationLoading","mutationError","balance","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","orders","financeOrders","createdAt","batchType","toUpperCase","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","financePaymentBatches","executionDate","financePaymentBatchCategory","FinancePaymentBatchCategory","categoryType","unstyled","get_add_options_collection","get_add_options_payment","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","subTitle","List","create","category","financePaymentBatchCategories","includeZeroAmounts","appSettings","timeFormatMoment","financePaymentBatch","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","order","financeOrder","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","updatePaymentMethod","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","dateStart","dateEnd","startOf","endOf","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_CLASSPASSES_SOLD_QUERY","GET_CLASSPASSES_ACTIVE_QUERY","refetchData","previousYear","parseInt","currentYear","nextYear","export_url_active","export_url_sold","loadingSold","errorSold","dataSold","refetchSold","loadingActive","errorActive","dataActive","refetchActive","data_sold_label","chart_data_sold","insightAccountClasspassesSold","data_active_label","chart_data_active","insightAccountClasspassesActive","style","height","x","columns","colors","sold","names","axis","y","bottom","show","left","right","tooltip","point","RootComponent","GET_REVENUE_TOTAL_QUERY","GET_REVENUE_SUBTOTAL_QUERY","GET_REVENUE_TAX_QUERY","loadingTotal","errorTotal","dataTotal","refetchTotal","loadingSubtotal","errorSubtotal","dataSubtotal","refetchSubtotal","loadingTax","errorTax","dataTax","refetchTax","data_label_total","chart_data_total","insightRevenueTotal","data_label_subtotal","chart_data_subtotal","insightRevenueSubtotal","data_label_tax","chart_data_tax","insightRevenueTax","total","subtotal","tax","GET_SUBSCRIPTIONS_SOLD_QUERY","GET_SUBSCRIPTIONS_ACTIVE_QUERY","insightAccountSubscriptionsSold","insightAccountSubscriptionsActive","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","classpasses_active","classtypes_active","discoveries_active","documents_active","languages_active","locations_active","levels_active","holidays_active","subscriptions_active","organization_active","organization_branding_active","announcements_active","accountClasspasses","organizationClasspass","classpasses","subscriptions","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","customFileInputLabelStyle","whiteSpace","display","overflow","UPDATE_ORGANIZATION","updateOrganization","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoShopHeader","urlLogoSelfCheckin","formTitle","inputFileName","fileInputLabel","handleFileInputChange","updateField","update_field","fileName","setFileName","useRef","files","inputVars","reader","FileReader","onload","reader_event","b64_enc_file","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","file","current","readAsDataURL","showEditBack","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","announcementId","updateAnnouncement","organizationAnnouncement","GET_APPOINTMENTS_QUERY","GET_APPOINTMENT_QUERY","GET_INPUT_VALUES_QUERY","ARCHIVE_APPOINTMENT","organizationAppointmentCategory","category_id","appointments","organizationAppointments","organizationAppointmentPrices","mutation","archiveAppointmentCategorysRoom","APPOINTMENT_SCHEMA","ADD_APPOINTMENT","addAppointment","UPDATE_APPOINTMENT","OrganizationAppointmentEdit","organizationAppointment","initialGlaccount","initialCostcenter","updateLocation","GET_APPOINTMENT_CATEGORIES_QUERY","GET_APPOINTMENT_CATEGORY_QUERY","ARCHIVE_APPOINTMENT_CATEGORY","appointment_categories","organizationAppointmentCategories","archiveLocation","APPOINTMENT_CATEGORY_SCHEMA","ADD_ORGANIZATION_APPOINTMENT_CATEGORY","addAppointmentCategory","UPDATE_APPOINTMENT_CATEGORY","OrganizationAppointmentCategoryEdit","updateAppointmentCategory","GET_APPOINTMENT_PRICES_QUERY","GET_APPOINTMENT_PRICE_QUERY","DELETE_APPOINTMENT_PRICE","appointment_id","prices","deleteAppointmentPrice","APPOINTMENT_PRICE_SCHEMA","accountInstructorProfiles","ADD_APPOINTMENT_PRICE","OrganizationAppointmentPriceForm","UPDATE_APPOINTMENT_PRICE","OrganizationAppointmentPriceEdit","organizationAppointmentPrice","initialAccount","initialFinanceTaxRate","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","organizationClasspasses","trialPass","unlimited","classes","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","organizationMembership","updateClasspass","initialMembership","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","classtypes","organizationClasstypes","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","organizationClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","headerLinks","sidebarButton","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","back","organizationDocuments","ISODateString","urlDocument","addDocument","documentFileName","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday","holiday_locations","locationId","organizationLocation","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","LOCATION_SCHEMA","addLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","updateLocationRoom","organizationLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","levels","organizationLevels","LEVEL_SCHEMA","addLevel","updateLevel","organizationLevel","Validity","GET_MEMBERSHIPS_QUERY","GET_MEMBERSHIP_QUERY","ARCHIVE_MEMBERSHIP","memberships","organizationMemberships","archiveMembership","MEMBERSHIP_SCHEMA","CREATE_MEMBERSHIP","OrganizationMembershipAdd","createMembership","termsAndConditions","UPDATE_MEMBERSHIP","OrganizationMembershipEdit","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","creditAccumulationDays","createSubscription","reconciliationClasses","updateSubscription","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","DELETE_SUBSCRIPTION_PRICE","accounts_active","b2b_active","subscription_id","subscription_prices","organizationSubscriptionPrices","subscription","organizationSubscriptionsPrices","deleteSubscriptionPrice","SUBSCRIPTION_PRICE_SCHEMA","ADD_SUBSCRIPTION_PRICE","addSubscription","UPDATE_SUBSCRIPTION_PRICE","OrganizationSubscriptionPriceEdit","organizationSubscriptionPrice","updateSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","setState","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","instructor","employee","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","updateAccountActive","deleteAccount","accounts","reverse","classpass","classesRemainingDisplay","first_name","last_name","ACCOUNT_SCHEMA","addAccount","accountId","createAccount","profile_active","classes_active","tickets_active","instructor_profile_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","avatarSize","inline","placement","mobile","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","keyNumber","account_id","headerTitle","updateAccount","gender","input_vars","updateImage","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","accountBankAccount","accountBankAccounts","mandates","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","timeFormat","deleteScheduleItemAttendance","scheduleItem","timeStart","scheduleItemAttendances","bookingStatus","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","protectedMediaUrl","deleteAccountDocument","accountDocuments","urlProtectedDocument","addAccountDocument","DOCUMENT_SCHEMA","accountDocument","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","FinanceInvoiceStatus","registrationFeePaid","createInvoice","createFinanceInvoice","GET_ACCOUNT_MEMBERSHIPS_QUERY","GET_ACCOUNT_MEMBERSHIP_QUERY","DELETE_ACCOUNT_MEMBERSHIP","accountMemberships","deleteAccountMembership","frequencyType","CREATE_ACCOUNT_MEMBERSHIP","AccountMembershipAdd","UPDATE_ACCOUNT_MEMBERSHIP","AccountMembershipEdit","accountMembership","updateMembership","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","deleteAccountNote","notes","accountNotes","injury","noteBy","addNote","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrderDelete","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","GET_ACCOUNT","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","invoiceItems","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","Enddate","creditTotal","createAccountSubscription","subscriptionId","accountSubscription","tabs","class_tabs_position","activeTab","activeTab","linkTo","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","onLoaMore","deleteAccountSubscriptionAltPrice","query_vars","buttonAdd","accountSubscriptionAltPrices","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","mutationType","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","mutationAmount","ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","addSubscriptionCredit","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","updateSubscriptionCredit","accountSubscriptionCredit","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","financeInvoiceId","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","events","education","bio","urlBio","updateAccountInstructorProfile","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","confirm_archive","archiveFunction","confirm_unarchive","DELETE_BUSINESS","updateBusiness","deleteBusiness","businesses","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","business","emailContact","emailBilling","phone2","events_active","business_id","ScheduleHome","orderBy","dateFrom","dateUntil","DELETE_SCHEDULE_APPOINTMENT","edit_active","instructors_available_active","scheduleAppointments","nextWeekFrom","nextWeekUntil","subtract","currentWeekFrom","currentWeekUntil","scheduleItemId","timeEnd","ItemDivider","badge","badgeType","deleteScheduleAppointment","SCHEDULE_APPOINTMENTS_FILTER_LEVEL","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","frequencyInterval","CREATE_APPOINTMENT","ScheduleAppointmentAdd","appointmentId","AppointmentEditBase","menu_activeLink","default_card","sidebar_button","initialTimeStart","subtitle","locationRoom","starttime","appointment_edit_all_subtitle","card_title","ScheduleAppointmentEditAll","initialTimeEnd","updateScheduleAppointment","attendanceCountType","represent_instructor","textColor","represent_class_status","get_class_messages","holidayName","selectClass","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","DELETE_SCHEDULE_CLASS","deleteScheduleClass","scheduleClasses","account2","role2","CLASS_SCHEMA","spaces","walkInSpaces","infoMailContent","instructors_active","prices_active","createScheduleClass","UPDATE_CLASS","classId","defaultCard","menuActiveLink","class_id","class_edit_all_subtitle","classtype","represent_instructor_role","updateScheduleClass","initialLevelID","shopBook","attend","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAdd","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","addScheduleClassInstructor","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","class_subtitle","class_date","attendance_active","attendancechart_active","setAttendanceStatus","updateAttendance","showSearch","setShowSearch","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","useLazyQuery","getAccounts","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","queryAccountsData","checkedInIds","includes","classDate","GET_CLASS_ATTENDANCE_COUNT_YEAR","dataLabelCurrentYear","chartDataCurrentYear","insightClassAttendanceCountYear","dataCurrent","dataLabelPreviousYear","chartDataPreviousYear","dataPrevious","startAt","Array","i","range","previous","tick","d","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","allowed","blocked","paused","priceDropin","locationID","priceTrial","listType","scheduleClassBookingOptions","scheduleItemPrices","organizationClasspassDropin","organizationClasspassTrial","hasReachedTrialLimit","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","addScheduleClassPrice","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","sidebarContent","displayMenu","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","archiveScheduleEvent","cardHeaderContent","scheduleEvents","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","general_active","earlybirds_active","activities_active","media_active","createScheduleEvent","autoSentInfoMail","eventId","pageHeaderOptions","event_id","ScheduleEventEditMenu","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","scheduleItems","countAttendance","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","scheduleItemType","loadingActivity","errorActivity","dataActivity","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","updateMedia","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","deletable","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","fullEvent","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","addAccountScheduleEventTicket","accountIdsWithTickets","refetchAttendance","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","toLowerCase","settings","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","DATETIME_SCHEMA","system_hostname","queryVariables","hostname","mollie_api_key","mollieApiKey","H4","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","SHOP_FEATURES_SCHEMA","shopFeatures","systemFeatureShop","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","GET_USER_PROFILE","refreshTokenExp","accountTitle","accountLink","headerImageUrl","getHeaderImageUrl","buttonText","xs","sm","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","accountName","ACCOUNT_BANK_ACCOUNT_SCHEMA","nextUrl","loadingUser","errorUser","dataUser","skip","updateBankAccount","bankAccount","DisplayClassInfo","classData","scheduleClass","GET_ACCOUNT_CLASS_QUERY","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","scheduleItemAttendance","cancellationPossible","GET_SCHEDULE_CLASS_QUERY","complete","QUERY_ACCOUNT_CLASSPASSES","ShopAccountClasspassesBase","eventTickets","CREATE_PAYMENT_LINK","onlinePaymentsAvailable","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","alert","QUERY_ACCOUNT_INVOICES","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","cancelFunction","cancelOrder","UPDATE_PROFILE","updateProfile","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","checkoutProgress","color_order","color_payment","color_complete","addOn","alreadyBooked","classType","class_info","bookingOpenOn","CREATE_ORDER","buttonBook","capitalize","word","lower","charAt","isBefore","prevWeekFrom","prevWeekUntil","media","urlImageThumbnailLarge","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","Category","isEarlybirdPrice","Price","totalPriceDisplay","AttributeList","AttributeItem","Button","tickets","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","GET_ORDER_QUERY","orderItems","attendanceDate","msgNextStep","buttonNext","createFinanceOrderPaymentLink","financeOrderPaymentLink","subHeader","contentText","paymentText","schduleItemAttendances","btnLink","GET_ORGANIZATION_CLASSPASSES_QUERY","loadingClass","errorClass","dataClass","displayCheckoutInfo","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","ShopSubscriptionPricingCard","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","accountSubscriptionId","CheckoutCardDirectDebitForm","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","vars","messages","etFieldValue","esetFieldTouched","preventDefault","password","doTokenAuth","username","next","tokenAuth","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","SetCurrentUrlAsNext","PrivateRoute","rest","authTokenExpired","path","ContinueAsYouAre","render","LoginRequired","SessionExpired","tokenExp","reload","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","exact","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionCreditExpiration","AutomationAccountSubscriptionCreditExpirationAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceInvoices","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationMemberships","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","ScheduleAppointments","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","InsightClasspasses","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMollie","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","errorLink","onError","networkError","operation","forward","response","forEach","refreshTokenExpired","Observable","observer","client","mutate","subscriber","subscribe","httpLink","createHttpLink","uri","credentials","authLink","setContext","request","a","headers","Authorization","ApolloClient","from","cache","InMemoryCache","App","ApolloProvider","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"oq+DAgBMA,EAAY,CACdC,MAAO,CACHC,O,SAIRC,QAAQC,IAAIJ,GAGZK,IAMGC,IAAIC,KAEJD,IAAIE,KAGJC,KAAK,CACJT,YACAU,IAAK,QACLC,YAAa,QACbC,GAAI,CAAC,UACLC,UAAW,SACXC,OAAO,EAGPC,aAAc,IAEdC,cAAe,CACbC,aAAa,KAIFZ,EAAf,E,cAAeA,I,oJCjDJa,EAAaC,YAAH,4OAqBVC,GATeD,YAAH,oIASIA,YAAH,qNAqBbE,GATeF,YAAH,yJASUA,YAAH,+FASnBG,EAA8BH,YAAH,qGAS3BI,EAA0BJ,YAAH,uKChBrBK,EA/Ce,CAC1BC,WAAY,wBACZC,eAAgB,2BAChBC,mBAAoB,+BACpBC,mBAAoB,+BACpBC,uBAAwB,8BACxBC,gBAAiB,4BACjBC,+BAAgC,0CAChCC,6BAA8B,uCAC9BC,6BAA8B,wCAC9BC,8CAA+C,uDAC/CC,yBAA0B,qCAC1BC,qBAAsB,iCACtBC,2BAA4B,uCAC5BC,yBAA0B,qCAC1BC,0BAA2B,sCAC3BC,iCAAkC,6CAClCC,+BAAgC,0CAChCC,0BAA2B,sCAC3BC,6BAA8B,wCAC9BC,kCAAmC,4CACnCC,kCAAmC,6CACnCC,4BAA6B,uCAC7BC,gCAAiC,2CACjCC,iCAAkC,4CAClCC,+BAAgC,0CAChCC,uCAAwC,kDACxCC,sCAAuC,iDACvCC,2BAA4B,sCAC5BC,4BAA6B,uCAC7BC,0BAA2B,qCAC3BC,kCAAmC,6CACnCC,8BAA+B,yCAC/BC,iCAAkC,4CAClCC,yCAA0C,mDAC1CC,yBAA0B,qCAC1BC,yCAA0C,mDAC1CC,2BAA4B,uCAC5BC,+BAAgC,yCAChCC,uBAAwB,kCACxBC,wBAAyB,mCACzBC,sBAAuB,iCACvBC,8BAA+B,yCAC/BC,0BAA2B,qCAC3BC,6BAA8B,yCCzCrBC,EAAS,CAClBC,MADkB,SACZC,GACFC,aAAaC,QAAQC,EAAKjD,WAAY8C,EAAUI,OAChDH,aAAaC,QAAQC,EAAKhD,eAAgB6C,EAAUK,QAAQC,KAC5DL,aAAaC,QAAQC,EAAK/C,mBAAoB4C,EAAUK,QAAQE,SAChEN,aAAaC,QAAQC,EAAK9C,mBAAoB2C,EAAUQ,cACxDP,aAAaC,QAAQC,EAAK7C,uBAAwB0C,EAAUS,kBAC5DR,aAAaS,WAAWP,EAAK5C,kBAEjCoD,gBATkB,SASFC,GACZhF,QAAQC,IAAI,kBACZD,QAAQC,IAAI+E,GACZX,aAAaC,QAAQC,EAAKjD,WAAY0D,EAAiBR,OACvDH,aAAaC,QAAQC,EAAKhD,eAAgByD,EAAiBP,QAAQC,KACnEL,aAAaC,QAAQC,EAAK/C,mBAAoBwD,EAAiBP,QAAQE,SACvEN,aAAaC,QAAQC,EAAK9C,mBAAoBuD,EAAiBJ,cAC/DP,aAAaC,QAAQC,EAAK7C,uBAAwBsD,EAAiBH,mBAEvEI,QAlBkB,WAqBdZ,aAAaS,WAAWP,EAAKjD,YAC7B+C,aAAaS,WAAWP,EAAKhD,gBAC7B8C,aAAaS,WAAWP,EAAK/C,oBAC7B6C,aAAaS,WAAWP,EAAK9C,oBAC7B4C,aAAaS,WAAWP,EAAK7C,yBAEjCwD,OA3BkB,WA2BK,IAAhBC,EAAe,wDACbA,IAEDC,KAAKH,UACLZ,aAAaS,WAAWP,EAAK5C,oB,iEC/B5B0D,EAAyBrE,YAAH,yOAatBsE,EAAsBtE,YAAH,2LCbnBuE,GAAyBvE,YAAH,iU,uDCkCpBwE,sBAxBf,YAA0D,EAA1BC,EAA2B,IAAD,IAAvBC,eAAuB,MAAf,GAAe,EAAXC,EAAW,EAAXA,SAE7C,OACE,eAAC,KAAD,UACE,sBAAKC,UAAU,cAAf,SACE,eAAC,KAAD,UACE,eAAC,KAAKC,IAAN,UACE,uBAAKD,UAAU,cAAf,UACE,sBAAKA,UAAU,mBAAf,SACKF,EAAW,sBAAKI,IAAKJ,EAASE,UAAU,MAAMG,IAAI,SAAY,KAElEJ,EACD,eAAC,IAAD,CACEK,UAAW,IACXC,WAAYC,oBCLbV,I,GAAAA,kBAXf,YAEE,OAFmC,gBAGjC,eAAC,GAAD,UACA,sBAAKI,UAAU,cAAf,SACE,eAAC,KAAD,CAAQO,QAAQ,EAAMC,QAAQ,WCd9BC,GAAqBC,IAAMC,cAAc,IAElCC,GAAsBH,GAAmBI,SAGvCJ,IAFoBA,GAAmBK,SAEvCL,ICLTM,GAAsBL,IAAMC,cAAc,IAEnCK,GAAuBD,GAAoBF,SAGzCE,IAFqBA,GAAoBD,SAEzCC,ICiCAE,GAtCE7F,YAAH,wwBCFP,SAAS8F,GAAoBC,GAChC,IAAMC,EAAc,GACdC,EAASF,EAAKE,OACpB,GAAIA,EAAOC,MACT,IAAK,IAAIC,KAAcF,EAAOC,MAAO,CACnC,IAAIE,EAAaH,EAAOC,MAAMC,GAC9B,GAAIC,EAAWC,KAAM,CACnB,IAAIC,EAAaF,EAAWC,KAC5B,GAAIC,EAAWN,YAAYE,MACzB,IAAK,IAAIK,KAAoBD,EAAWN,YAAYE,MAAO,CACzD,IAAIM,EAAkBF,EAAWN,YAAYE,MAAMK,GACnD,GAAIC,EAAgBH,KAAM,CACtB,IAEII,EAFkBD,EAAgBH,KACPK,SACDC,MAAM,KAE9BF,EAAe,KAAMT,IAC3BA,EAAYS,EAAe,IAAM,IAAIG,KAGrCZ,EAAYS,EAAe,IAAII,IAAIJ,EAAe,OAQhE,OAAOT,EAIJ,IAAMc,GAAiB,SAACd,EAAae,EAAYC,GACtD,IAAIC,GAAqB,EASzB,OAPID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5B/H,QAAQC,IAAI,oBACZgI,GAAqB,IAIjBA,GCRKE,I,GAAAA,GAff,YAAiE,IAAlCJ,EAAiC,EAAjCA,WAAYC,EAAqB,EAArBA,SAAUrC,EAAW,EAAXA,SACnD,EAA+ByC,YAASvB,IAAjCwB,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAEvB,OAAIF,EAAgB,4CAChBC,EAAc,0DAhBpB,SAA0BtB,EAAae,EAAYC,GACjD,IAAIC,GAAqB,EAQzB,OANID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5BE,GAAqB,IAIjBA,EAWJO,CAFgB1B,GAAoByB,EAAKxB,MAEXgB,EAAYC,GACrCrC,EAEA,IC5BE8C,GAAkCzH,YAAH,6iBCkDtC0H,I,cAAiB,SAACjD,EAAGsB,GACzB,IAAI4B,EAAwB,GACxB3B,EAAcF,GAAoBC,GAgHtC,OA9GA4B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,cACTqD,GAAI,WACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAKTrB,GAAed,EAAa,OAAQ,YAErC2B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,mBACTqD,GAAI,aACJC,KAAM,QACNC,cAAeC,YAAWC,QAM3BpB,GAAed,EAAa,OAAQ,kBACpCc,GAAed,EAAa,OAAQ,mBAErC2B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,kBACTqD,GAAI,YACJC,KAAM,WACNC,cAAeC,YAAWC,QAM3BpB,GAAed,EAAa,OAAQ,sBACpCc,GAAed,EAAa,OAAQ,qBACpCc,GAAed,EAAa,OAAQ,oBAErC2B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,iBACTqD,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,QAM3BpB,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,yBACpCc,GAAed,EAAa,OAAQ,2BACpCc,GAAed,EAAa,OAAQ,kBAEtC2B,EAAMC,KAAK,CACRC,MAAOpD,EAAE,sBACTqD,GAAI,gBACJC,KAAM,UACNC,cAAeC,YAAWC,OAM3BpB,GAAed,EAAa,OAAQ,YAErC2B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,iBACTqD,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,OAM3BpB,GAAed,EAAa,OAAQ,eAErC2B,EAAMC,KAAK,CACTC,MAAOpD,EAAE,oBACTqD,GAAI,cACJC,KAAM,SACNC,cAAeC,YAAWC,OA0BvBP,IAIHS,GAAM,IAAIC,KAuJD7D,sBArJf,YAAqD,IAA/BC,EAA8B,EAA9BA,EAAmBE,GAAW,EAA3B2D,MAA2B,EAApBC,QAAoB,EAAX5D,UACvC,EAA4CyC,YAASvB,IAA7CyB,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAExB,GAFA,EAA8BiB,UAE1BnB,EAAS,OAAO,eAAC,GAAD,IACpB,GAAIC,EAAO,OAAO,6BAAI7C,EAAE,+BAExBzF,QAAQC,IAAIsI,GAEZ,IAAIkB,EAAY,IAKhB,OAJIlB,EAAKxB,KAAK2C,yBACZD,EAAYlB,EAAKxB,KAAK2C,wBAItB,gBAAC,KAAKC,QAAN,CACEC,YAAa,CACTC,KAAM,IACN9D,IAAK,cACL+D,SAAU,+CACVC,SACE,gBAAC,KAAIC,KAAL,CAAUC,KAAK,MAAMrE,UAAU,mBAA/B,UACE,eAAC,IAAD,CAAMkD,GAAG,YAAT,SACE,eAAC,KAAD,CACElD,UAAU,OACVmD,KAAK,WACLmB,SAAO,EACPC,KAAK,KACLC,MAAM,UALR,SAOG3E,EAAE,wBAGP,eAAC,IAAD,CAAMqD,GAAG,gBAAT,SACE,eAAC,KAAD,CACElD,UAAU,OACVmD,KAAK,OACLmB,SAAO,EACPC,KAAK,KACLC,MAAM,UALR,SAOG3E,EAAE,qBA2BX4E,gBAAiB,CACjBZ,UAAWA,EACXa,KAAM/B,EAAKxB,KAAKwD,UAAY,IAAMhC,EAAKxB,KAAKyD,SAC5CC,YAAa,GACbC,QAAS,CAEP,CAAE3B,KAAM,OAAQF,MAAOpD,EAAE,8BAA+BqD,GAAI,4BAC5D,CAAE6B,WAAW,GACb,CAAE5B,KAAM,OAAQF,MAAOpD,EAAE,sBAAuBqD,GAAI,oBACpD,CAAE6B,WAAW,GACb,CAAE5B,KAAM,UAAWF,MAAOpD,EAAE,qBAAsBqD,GAAI,sBAK1D8B,SAAU,CAAEC,aAAcnC,GAAejD,EAAG8C,EAAKxB,OACjD+D,2BAA4B7B,YAAW8B,MACvCC,YAAa,CAaXC,UACE,eAAC,WAAD,UACE,oDACc7B,GAAI8B,cADlB,IAEE,qBACErB,KAAK,8BACLsB,OAAO,SACPC,IAAI,sBAHN,UAKG,IALH,sBAOK,KATP,4BAcJC,IACE,gBAAC,WAAD,WACE,eAAC,KAAKC,IAAN,CAAUC,MAAM,IAUhB,eAAC,KAAKD,IAAN,CAAUC,MAAM,QA/G1B,UA8HK5F,EACD,eAAC,IAAD,CACEK,UAAW,IACXC,WAAYC,YC9RPV,qBAAkByD,aAfjC,YAAwD,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAEzC,OACE,eAAC,GAAD,UACE,sBAAKC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sCACrBE,aCoFIH,qBAAkByD,aApFjC,YAAiC,IAAbxD,EAAY,EAAZA,EAClB,GAD8B,EAAT6D,MACYlB,YAASK,KAAlCJ,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,2CAIPzF,QAAQC,IAAI,yBACZD,QAAQC,IAAIsI,GAEZ,IAAMmD,EAAgBnD,EAAKoD,0BAG3B,OAAKD,EAAcxE,MAAM0E,OAQvB,eAAC,GAAD,UACE,eAAC,KAAK/F,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,SACIJ,EAAcxE,MAAM0E,OAAUF,EAAcxE,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtD,eAAC,KAAKiE,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOpE,EAAKoE,MAAlB,SACE,eAAC,KAAKQ,KAAN,UACE,sBAAKC,wBAAyB,CAAEC,OAAO9E,EAAK+E,oBAI/C,OAjBT,eAAC,GAAD,UACG3G,EAAE,4CCjBMD,qBAAkByD,aAdjC,YAA8D,IAA5BxD,EAA2B,EAA3BA,EAAG4G,EAAwB,EAAxBA,KAAwB,IAAlBC,iBAAkB,MAAR,KAAQ,EAC3D,OACE,eAAC,IAAD,CAAMxD,GAAIuD,EAAV,SACE,gBAAC,KAAD,CACEnC,SAAO,EACPqC,OAAK,EACLnC,MAAM,UAHR,UAKGkC,GAAuB7G,EAAE,6BAL5B,IAK0D,eAAC,KAAD,CAAM6E,KAAK,2BCyD5D9E,qBAAkByD,aAzDjC,YAA+C,IAArBxD,EAAoB,EAApBA,EACxB,OAD4C,EAAjB6D,MAAiB,EAAVkD,OAEhC,eAAC,GAAD,UACE,sBAAK5G,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,8CAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,qDACNA,EAAE,yDACH,wBAAM,wBACN,eAACgH,GAAD,CAA0BJ,KAAK,sDAIrC,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,oDACNA,EAAE,wDACH,wBAAM,wBACN,eAACgH,GAAD,CAA0BJ,KAAK,qDAIrC,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,+DACNA,EAAE,mEACH,wBAAM,wBACN,eAACgH,GAAD,CAA0BJ,KAAK,gEAIrC,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,8DACNA,EAAE,kEACH,wBAAM,wBACN,eAACgH,GAAD,CAA0BJ,KAAK,8E,uDCzD3CK,G,+MASFC,eAAiB,WAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,IAAMM,EAAW,EAAKC,MAAMD,SACxBA,GACEA,EAASE,aACX,EAAKD,MAAME,e,wDAvBnB,WACEP,OAAOQ,iBAAiB,SAAUtI,KAAKuH,kB,kCAGzC,WACEO,OAAOS,oBAAoB,SAAUvI,KAAKuH,kB,oBAwB5C,WACE,IAAMlH,EAAIL,KAAKmI,MAAM9H,EACfmI,EAAYxI,KAAKmI,MAAMK,UACvBC,EAAgBzI,KAAKmI,MAAMM,cAC3BJ,EAAarI,KAAKmI,MAAME,WACxBH,EAAWlI,KAAKmI,MAAMD,SACtB3H,EAAWP,KAAKmI,MAAM5H,SACtBmI,EAAW1I,KAAKmI,MAAMO,SACtBC,EAAc3I,KAAKmI,MAAMQ,YAG/B,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKvC,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAaJ,IACZC,KAEFC,EACCC,EACA,eAAC,KAAK9B,KAAN,UAAYtG,IACZA,EAEF,eAAC,KAAKsI,OAAN,UACKX,EACAA,EAASE,YACR,eAAC,KAAD,CACEnB,MAAI,EACJ6B,QAAST,EAFX,SAIGhI,EAAE,uBAEJA,EAAE,sBARQ,Y,GArDD0I,aAqE1BzB,GAAY0B,aAAe,CACzBX,WAAY,SAAAY,GAAC,OAAEA,GACfN,aAAa,GAGAvI,I,GAAAA,iBAAkBkH,ICjFpB4B,GAAwBtN,YAAH,ujBCgBnBwE,kBAVI,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAG8I,EAAN,EAAMA,UAAN,OACjB,eAAC,IAAD,CAAMzF,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEnE,MAAM,YACNrB,KAAK,aAFP,SAGKtD,EAAE,uBCFID,sBANf,YAAwD,EAA9BC,EAA+B,IAAD,IAA3B8I,iBAA2B,MAAjB,cAAiB,EACtD,OACE,eAAC,GAAD,CAAYA,UAAWA,OC8BZ/I,qBAAkByD,aArBjC,YAA2G,IAAxDxD,EAAuD,EAAvDA,EAAmBE,GAAoC,EAApD4D,QAAoD,EAA3CD,MAA2C,EAApC3D,UAAoC,IAA1B4I,iBAA0B,MAAhB,cAAgB,EACxG,OACE,eAAC,GAAD,UACE,sBAAK3I,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CAAgB2I,UAAWA,QAG/B,eAAC,KAAK1I,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,iBCWAH,qBAAkByD,aAzBjC,YAAkE,IAA7BxD,EAA4B,EAA5BA,EACnC,OAD+D,EAAzB8D,QAAyB,EAAhBD,MAAgB,EAATkF,QAEpD,IAAK,UACH,OAAO,eAAC,KAAD,CAAOpE,MAAM,YAAb,SAA0B3E,EAAE,8CAErC,IAAK,UACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,8CAEnC,IAAK,UACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,8CAEnC,IAAK,UACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,8CAElC,IAAK,QACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,4CAEnC,IAAK,UACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,8CAEnC,QACE,MAAO,sBC+HED,qBAAkByD,aArHjC,YAAoE,IAArBxD,EAAoB,EAApBA,EAEvCgJ,GAF2D,EAAjBlF,QAAiB,EAARD,MACrCoF,qBAAWrI,IACUoI,sBAEzC,EAA4CrG,YAASkG,GAAuB,CAC1EK,UAAW,CACTC,SAAU,qGAFNtG,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAMxBqF,EAAgB,eAAC,KAAKC,QAAN,UACpB,eAAC,IAAD,CAAMhG,GAAI,gDAAV,SACE,eAAC,KAAD,CAAQsB,MAAM,UACND,KAAK,KADb,SAGC1E,EAAE,0BAOP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAI,4BACZD,QAAQC,IAAIsI,GACZ,IAAMwG,EAAcxG,EAAKyG,8BAKzB,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEpB,UAAWnI,EAAE,uDACb6H,SAAUyB,EAAYzB,SACtBO,cAAegB,EACfpB,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOF,EAAYzB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBL,8BAA8B9H,MACzDoG,EAAW+B,EAAgBL,8BAA8B1B,SAE/D,OAAOgC,EAAS1D,OACZ,CAGEoD,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeJ,8BAA8B9H,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAvBZ,SA4BQL,EAAY7H,MAAM0E,OAKpB,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACG8C,EAAY7H,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAA4BkD,OAAQnH,EAAKmH,WAE3C,eAAC,KAAMlD,IAAP,UACGoE,KAAOrI,EAAKsI,UAAUC,OAAOnB,KAEhC,eAAC,KAAMnD,IAAP,UACGjE,EAAKwI,aAER,eAAC,KAAMvE,IAAP,UACGjE,EAAKyI,SAER,eAAC,KAAMxE,IAAP,MAbcmE,wBAftB,6BAAIhK,EAAE,iE,iBCtHLsK,GAAgDC,OAAaC,MAAM,CAC9EC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC8CM9K,I,GAAAA,iBAAkByD,aA5CjC,YAAkG,IAA/CxD,EAA8C,EAA9CA,EAAY+K,GAAkC,EAA3CjH,QAA2C,EAAlCiH,cAAcC,EAAoB,EAApBA,OAAQlC,EAAY,EAAZA,UACnF,OACE,gBAAC,KAAD,WACE,eAAC,KAAKtC,KAAN,UACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,mBACL1E,UAAY6K,EAAOP,iBAAoB,0BAA4B,eACnEU,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,oBACL1E,UAAY6K,EAAOF,kBAAqB,0BAA4B,eACpEK,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,+BAK1E,gBAAC,KAAKqI,OAAN,WACE,gBAAC,KAAD,CACC7D,MAAM,UACLxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,UAMG/K,EAAE,oBANL,IAM0B,eAAC,KAAD,CAAM6E,KAAK,qBAErC,eAAC,IAAD,CAAMxB,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,gCC1BTsL,GAAW/P,YAAH,8NAgECwE,qBAAkByD,aAvDjC,YAAiE,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QACnD,EAAkByH,YAAYD,IAAvBE,EAAP,oBACM1C,EAAY,4CAElB,OACE,eAAC,GAAD,CAA0CA,UAAWA,EAArD,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,0DAEjB,eAAC,KAAD,CACEyL,cAAe,CACbhB,kBAAkB,IAAI7G,MAAO6B,cAC7BqF,mBAAmB,IAAIlH,MAAO8H,WAAa,GAC7CC,iBAAkBrB,GAClBsB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBN,EAAQ,CAAEtC,UAAW,CACnB6C,MAAO,CACLC,MAAOH,EAAOf,kBACdmB,KAAMJ,EAAOpB,mBAEdyB,eAAgB,CACf,CAACC,MAAOtD,GACNK,UAAW,CACTC,SAAU,uGAGjBiD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8DAAgE,CAC7EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BxB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBC3CZ/I,qBAAkByD,aArBjC,YAAoH,IAAxDxD,EAAuD,EAAvDA,EAAmBE,GAAoC,EAApD4D,QAAoD,EAA3CD,MAA2C,EAApC3D,UAAoC,IAA1B4I,iBAA0B,MAAhB,cAAgB,EACjH,OACE,eAAC,GAAD,UACE,sBAAK3I,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CAAgB2I,UAAWA,QAG/B,eAAC,KAAK1I,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,iBCmHAH,I,GAAAA,iBAAkByD,aAnHjC,YAA6E,IAArBxD,EAAoB,EAApBA,EAEhDgJ,GAFoE,EAAjBlF,QAAiB,EAARD,MAC9CoF,qBAAWrI,IACUoI,sBAEzC,EAA4CrG,YAASkG,GAAuB,CAC1EK,UAAW,CACTC,SAAU,8FAFNtG,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAMxBqF,EAAgB,eAAC,KAAKC,QAAN,UACpB,eAAC,IAAD,CAAMhG,GAAI,2DAAV,SACE,eAAC,KAAD,CAAQsB,MAAM,UACND,KAAK,KADb,SAGC1E,EAAE,0BAOP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAI,4BACZD,QAAQC,IAAIsI,GACZ,IAAMwG,EAAcxG,EAAKyG,8BAGzB,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEpB,UAAWnI,EAAE,kEACb6H,SAAUyB,EAAYzB,SACtBO,cAAegB,EACfpB,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOF,EAAYzB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBL,8BAA8B9H,MACzDoG,EAAW+B,EAAgBL,8BAA8B1B,SAE/D,OAAOgC,EAAS1D,OACZ,CAGEoD,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeJ,8BAA8B9H,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAvBZ,SA4BQL,EAAY7H,MAAM0E,OAKpB,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACG8C,EAAY7H,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAA4BkD,OAAQnH,EAAKmH,WAE3C,eAAC,KAAMlD,IAAP,UACGoE,KAAOrI,EAAKsI,UAAUC,OAAOnB,KAEhC,eAAC,KAAMnD,IAAP,UACGjE,EAAKwI,aAER,eAAC,KAAMvE,IAAP,UACGjE,EAAKyI,SAER,eAAC,KAAMxE,IAAP,MAbcmE,wBAftB,6BAAIhK,EAAE,iEC7EZsL,GAAW/P,YAAH,sMAuECwE,qBAAkByD,aA9DjC,YAA2E,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC7D,EAAkByH,YAAYD,IAAvBE,EAAP,oBACA,EAAoCmB,oBAAS,GAA7C,mBAAK5B,EAAL,KAAmBe,EAAnB,KACMhD,EAAY,uDAElB,OACE,eAAC,GAAD,CAAmDA,UAAWA,EAA9D,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,qEAEjB,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACG7F,EAAE,wFAIT,gBAAC,KAAKwI,OAAN,WACE,gBAAC,KAAD,CACA7D,MAAM,UACJxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EACVtC,QAAS,WACPqD,GAAc,GACdN,EAAQ,CAAEtC,UAAW,CACnB6C,MAAO,IACNG,eAAgB,CACjB,CAACC,MAAOtD,GACNK,UAAW,CACTC,SAAU,gGAGfiD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,yEAA2E,CACxFuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1BtB,UA8BG9L,EAAE,oBA9BL,IA8B0B,eAAC,KAAD,CAAM6E,KAAK,qBAErC,eAAC,IAAD,CAAMxB,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,kCClDFD,qBAAkByD,aArBjC,YAA4G,IAAxDxD,EAAuD,EAAvDA,EAAmBE,GAAoC,EAApD4D,QAAoD,EAA3CD,MAA2C,EAApC3D,UAAoC,IAA1B4I,iBAA0B,MAAhB,cAAgB,EACzG,OACE,eAAC,GAAD,UACE,sBAAK3I,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CAAgB2I,UAAWA,QAG/B,eAAC,KAAK1I,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,iBCsIAH,qBAAkByD,aArHjC,YAAqE,IAArBxD,EAAoB,EAApBA,EAExCgJ,GAF4D,EAAjBlF,QAAiB,EAARD,MACtCoF,qBAAWrI,IACUoI,sBAEzC,EAA4CrG,YAASkG,GAAuB,CAC1EK,UAAW,CACTC,SAAU,uGAFNtG,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAMxBqF,EAAgB,eAAC,KAAKC,QAAN,UACpB,eAAC,IAAD,CAAMhG,GAAI,iDAAV,SACE,eAAC,KAAD,CAAQsB,MAAM,UACND,KAAK,KADb,SAGC1E,EAAE,0BAOP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAI,6BACZD,QAAQC,IAAIsI,GACZ,IAAMwG,EAAcxG,EAAKyG,8BAKzB,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEpB,UAAWnI,EAAE,wDACb6H,SAAUyB,EAAYzB,SACtBO,cAAegB,EACfpB,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOF,EAAYzB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBL,8BAA8B9H,MACzDoG,EAAW+B,EAAgBL,8BAA8B1B,SAE/D,OAAOgC,EAAS1D,OACZ,CAGEoD,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeJ,8BAA8B9H,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAvBZ,SA4BQL,EAAY7H,MAAM0E,OAKpB,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACG8C,EAAY7H,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAA4BkD,OAAQnH,EAAKmH,WAE3C,eAAC,KAAMlD,IAAP,UACGoE,KAAOrI,EAAKsI,UAAUC,OAAOnB,KAEhC,eAAC,KAAMnD,IAAP,UACGjE,EAAKwI,aAER,eAAC,KAAMvE,IAAP,UACGjE,EAAKyI,SAER,eAAC,KAAMxE,IAAP,MAbcmE,wBAftB,6BAAIhK,EAAE,kECtHL4M,GAAkDrC,OAAaC,MAAM,CAChFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPgC,YAAatC,OACVG,a,qBC0BU3K,sBAlCf,YAAmI,IAG7H+M,EAHkB9M,EAA0G,EAA1GA,EAAG+M,EAAuG,EAAvGA,SAAuG,IAA7FC,gBAA6F,MAApF,SAAApE,GAAC,OAAEA,GAAiF,MAA9EqE,cAA8E,MAAvE,SAAArE,GAAC,OAAEA,GAAoE,MAAjEzI,iBAAiE,MAAvD,eAAuD,MAAvC+M,mBAAuC,aAArBC,uBAAqB,MAAL,GAAK,EAKhI,OAJoBlE,qBAAWrI,IACGkM,YAIhC,IAAK,aACHA,EAAa,aACb,MACF,IAAK,aACHA,EAAa,aACb,MACF,QACEA,EAAa,aAIjB,OACE,eAAC,KAAD,CACIM,YAAapN,EAAE,iBACf8M,WAAYA,EACZC,SAAUA,EACVI,gBAAkBA,GAAqCnN,EAAE,0BACzDkN,YAAaA,EACb/M,UAAWA,EACXkN,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,SACbP,SAAU,SAACQ,GAAD,OAAUR,EAASQ,IAC7BP,OAAQ,kBAAMA,UCiDPlN,I,GAAAA,iBAAkByD,aAnEjC,YAAoG,IAA/CxD,EAA8C,EAA9CA,EAAY+K,GAAkC,EAA3CjH,QAA2C,EAAlCiH,cAAcC,EAAoB,EAApBA,OAAQlC,EAAY,EAAZA,UACrF,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,mBACL1E,UAAY6K,EAAOP,iBAAoB,0BAA4B,eACnEU,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,oBACL1E,UAAY6K,EAAOF,kBAAqB,0BAA4B,eACpEK,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,0BAGtE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0DAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,cACL1E,UAAY6K,EAAO6B,YAAe,0BAA4B,eAC9D1B,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,QAAd,SAAkCpD,EAAE,oDAATgK,gBAC3B,yBAAQ5G,MAAM,iBAAd,SAA2CpD,EAAE,2EAATgK,mBAEtC,eAAC,KAAD,CAAcnF,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,6BAIlE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKpE,gBAAC,KAAKqI,OAAN,WACE,gBAAC,KAAD,CACC7D,MAAM,UACLxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,UAMG/K,EAAE,oBANL,IAM0B,eAAC,KAAD,CAAM6E,KAAK,qBAErC,eAAC,IAAD,CAAMxB,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,gCCpDTsL,GAAW/P,YAAH,oOAqECwE,qBAAkByD,aA5DjC,YAAiE,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QACnD,EAAkByH,YAAYD,IAAvBE,EAAP,oBACM1C,EAAY,6CAElB,OACE,eAAC,GAAD,CAA2CA,UAAWA,EAAtD,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,2DAEjB,eAAC,KAAD,CACEyL,cAAe,CACbhB,kBAAkB,IAAI7G,MAAO6B,cAC7BqF,mBAAmB,IAAIlH,MAAO8H,WAAa,EAC3C1G,YAAa,GACb6H,YAAa,SAEflB,iBAAkBiB,GAClBhB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBN,EAAQ,CAAEtC,UAAW,CACnB6C,MAAO,CACLC,MAAOH,EAAOf,kBACdmB,KAAMJ,EAAOpB,iBACbzF,YAAa6G,EAAO7G,YACpB6H,YAAahB,EAAOgB,cAErBX,eAAgB,CACf,CAACC,MAAOtD,GACNK,UAAW,CACTC,SAAU,yGAGjBiD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,+DAAiE,CAC9EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCxB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBChDZ/I,qBAAkByD,aArBjC,YAAoH,IAAxDxD,EAAuD,EAAvDA,EAAmBE,GAAoC,EAApD4D,QAAoD,EAA3CD,MAA2C,EAApC3D,UAAoC,IAA1B4I,iBAA0B,MAAhB,cAAgB,EACjH,OACE,eAAC,GAAD,UACE,sBAAK3I,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CAAgB2I,UAAWA,QAG/B,eAAC,KAAK1I,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,iBC4HAH,qBAAkByD,aArHjC,YAA8E,IAArBxD,EAAoB,EAApBA,EAEjDgJ,GAFqE,EAAjBlF,QAAiB,EAARD,MAC/CoF,qBAAWrI,IACUoI,sBAEzC,EAA4CrG,YAASkG,GAAuB,CAC1EK,UAAW,CACTC,SAAU,yHAFNtG,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAMxBqF,EAAgB,eAAC,KAAKC,QAAN,UACpB,eAAC,IAAD,CAAMhG,GAAI,2DAAV,SACE,eAAC,KAAD,CAAQsB,MAAM,UACND,KAAK,KADb,SAGC1E,EAAE,0BAOP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAI,sCACZD,QAAQC,IAAIsI,GACZ,IAAMwG,EAAcxG,EAAKyG,8BAIzB,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CACEpB,UAAWnI,EAAE,iEACb6H,SAAUyB,EAAYzB,SACtBO,cAAegB,EACfpB,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOF,EAAYzB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBL,8BAA8B9H,MACzDoG,EAAW+B,EAAgBL,8BAA8B1B,SAE/D,OAAOgC,EAAS1D,OACZ,CAGEoD,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeJ,8BAA8B9H,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAvBZ,SA4BOL,EAAY7H,MAAM0E,OAKnB,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACG8C,EAAY7H,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAA4BkD,OAAQnH,EAAKmH,WAE3C,eAAC,KAAMlD,IAAP,UACGoE,KAAOrI,EAAKsI,UAAUC,OAAOnB,KAEhC,eAAC,KAAMnD,IAAP,UACGjE,EAAKwI,aAER,eAAC,KAAMvE,IAAP,UACGjE,EAAKyI,SAER,eAAC,KAAMxE,IAAP,MAbcmE,wBAftB,6BAAIhK,EAAE,2EC3GLyN,GAA2DlD,OAAaC,MAAM,CACzFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC8CM9K,I,GAAAA,iBAAkByD,aA5CjC,YAA4G,IAA/CxD,EAA8C,EAA9CA,EAAY+K,GAAkC,EAA3CjH,QAA2C,EAAlCiH,cAAcC,EAAoB,EAApBA,OAAQlC,EAAY,EAAZA,UAC7F,OACE,gBAAC,KAAD,WACE,eAAC,KAAKtC,KAAN,UACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,mBACL1E,UAAY6K,EAAOP,iBAAoB,0BAA4B,eACnEU,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,oBACL1E,UAAY6K,EAAOF,kBAAqB,0BAA4B,eACpEK,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,+BAK1E,gBAAC,KAAKqI,OAAN,WACE,gBAAC,KAAD,CACC7D,MAAM,UACLxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,UAMG/K,EAAE,oBANL,IAM0B,eAAC,KAAD,CAAM6E,KAAK,qBAErC,eAAC,IAAD,CAAMxB,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,gCC1BTsL,GAAW/P,YAAH,8RAkECwE,qBAAkByD,aAvDjC,YAA2E,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC7D,EAAkByH,YAAYD,IAAvBE,EAAP,oBACM1C,EAAY,uDAElB,OACE,eAAC,GAAD,CAA0CA,UAAWA,EAArD,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oEAEjB,eAAC,KAAD,CACEyL,cAAe,CACbhB,kBAAkB,IAAI7G,MAAO6B,cAC7BqF,mBAAmB,IAAIlH,MAAO8H,WAAa,GAC7CC,iBAAkB8B,GAClB7B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBN,EAAQ,CAAEtC,UAAW,CACnB6C,MAAO,CACLC,MAAOH,EAAOf,kBACdmB,KAAMJ,EAAOpB,mBAEdyB,eAAgB,CACf,CAACC,MAAOtD,GACNK,UAAW,CACTC,SAAU,iHAGjBiD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,wEAA0E,CACvFuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BxB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBC1DZ/I,ICZX2N,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,G,eDGWpO,iBAAkByD,aAdjC,YAAsD,IAA5BxD,EAA2B,EAA3BA,EAAG4G,EAAwB,EAAxBA,KAAwB,IAAlBC,iBAAkB,MAAR,KAAQ,EACnD,OACE,eAAC,IAAD,CAAMxD,GAAIuD,EAAV,SACE,gBAAC,KAAD,CACEnC,SAAO,EACPqC,OAAK,EACLnC,MAAM,UAHR,UAKGkC,GAAuB7G,EAAE,2BAL5B,IAKwD,eAAC,KAAD,CAAM6E,KAAK,2BC4H1D9E,kBAvHK,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAN,OAChB,gBAAC,KAAKnD,MAAN,CAAYoD,aAAa,EAAzB,UACmCX,GAAd,aAAfU,EAC2BT,GAAZ,WAAfS,EACgCR,GAAjB,gBAAfQ,EAC+BP,GAAhB,eAAfO,EAC6BN,GAAd,aAAfM,EACqCL,GAAtB,qBAAfK,EACoCJ,GAArB,oBAAfI,EAC8CH,GAA/B,8BAAfG,EAC2CF,GAA5B,2BAAfE,EAC6CD,GAA9B,6BAAfC,EAGF,eAAC,KAAKE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,qBACHC,KAAK,YACL5C,OAAQgN,GALZ,SAOK1N,EAAE,2BANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,mBACHC,KAAK,YACL5C,OAAQiN,GALZ,SAOK3N,EAAE,yBANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,uBACHC,KAAK,OACL5C,OAAQmN,GALZ,SAOK7N,EAAE,6BANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,wBACHC,KAAK,UACL5C,OAAQkN,GALZ,SAOK5N,EAAE,8BANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,qBACHC,KAAK,YACL5C,OAAQoN,GALZ,SAOK9N,EAAE,2BANEgK,gBAQT,eAAC,GAAD,CAAsB1H,WAAW,OACXC,SAAS,+BAD/B,SAEI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAG,6BACHC,KAAK,SACL5C,OAAQqN,GALZ,SAOK/N,EAAE,mCANEgK,kBASb,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,2BACHC,KAAK,cACL5C,OAAQsN,GALZ,SAOKhO,EAAE,kCANEgK,gBAQT,eAAC,GAAD,CAAsB1H,WAAW,OACXC,SAAS,sBAD/B,SAEE,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAG,sCACHC,KAAK,WACL5C,OAAQuN,GALZ,SAOKjO,EAAE,4CANEgK,kBASX,eAAC,GAAD,CAAsB1H,WAAW,OACXC,SAAS,sBAD/B,SAEE,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAG,mCACHC,KAAK,SACL5C,OAAQwN,GALZ,SAOKlO,EAAE,yCANEgK,kBASX,eAAC,GAAD,CAAsB1H,WAAW,OACXC,SAAS,8BAD/B,SAEE,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAG,mCACHC,KAAK,OACL5C,OAAQyN,GALZ,SAOKnO,EAAE,2CANEgK,wBC3GbuE,G,oDACJ,WAAYzG,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,uBACZD,QAAQC,IAAIsN,GAHK,E,2CAOnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MAGnBgD,GAFUlH,KAAKmI,MAAMhE,QAChBD,EAAMkD,OAAOyH,GACNxO,EAAE,mBACdyO,EAAgBzO,EAAE,gBAExB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAKnG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,4BACNA,EAAE,gCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,6BAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,0BACNA,EAAE,8BACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,2BAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,8BACNA,EAAE,kCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,+BAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,+BACNA,EAAE,mCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,gCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,4BACNA,EAAE,gCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,6BAIjD,eAAC,GAAD,CAAsBtE,WAAW,OACrBC,SAAS,+BADrB,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,oCACNA,EAAE,wCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAW4H,EAAe7H,KAAK,uCAKvD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,mCACNA,EAAE,uCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,mCAIjD,eAAC,GAAD,CAAsBtE,WAAW,OACrBC,SAAS,sBADrB,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,6CACNA,EAAE,iDACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,gDAKnD,eAAC,GAAD,CAAsBtE,WAAW,OACrBC,SAAS,sBADrB,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,0CACNA,EAAE,8CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,6CAKnD,eAAC,GAAD,CAAsBtE,WAAW,OACrBC,SAAS,8BADrB,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,4CACNA,EAAE,gDACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,kDAOvD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,oB,GA3IUmC,aAqJX3I,iBAAkByD,YAAW+K,KC1K/BI,GAAwBpT,YAAH,gcAqBrBqT,GAAuBrT,YAAH,oKAWpBsT,GAAiBtT,YAAH,6OAaduT,GAAoBvT,YAAH,+NAYjBwT,GAAqBxT,YAAH,0NCHhBwE,qBAAkByD,aArCjC,YAAyE,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SACtE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAI,uBAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,mBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAI,2BAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,kCAKnD,eAAC,GAAD,CAAaoO,WAAW,iCC+HvBrO,qBAAkByD,aArJjC,YAA2C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC9B,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,6BACpB,EAAqD2C,YAASgM,GAAuB,CACnFzF,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA8BwH,YAAYwD,IAAlCM,EAAR,oBAEMjG,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,2CAKZ,IAAMsP,EAAcxM,EAAKyM,mBAGzB,OAAKD,EAAY7N,MAAM0E,OAYrB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACVC,cAAegB,EACfvB,SAAUyH,EAAYzH,SACtBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO8F,EAAYzH,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB2F,mBAAmB9N,MAC9CoG,EAAW+B,EAAgB2F,mBAAmB1H,SAEpD,OAAOgC,EAAS1D,OACZ,CAGEoJ,mBAAoB,CAClBzF,WAAYH,EAAe4F,mBAAmBzF,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAe4F,mBAAmB9N,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAtBtB,SA2BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACK8I,EAAY7N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK4N,MADQxF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,6BAA+BvB,EAAK4M,KAChE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACda,EAAkB,CAAEnG,UAAW,CAC7B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOwC,GAAuBzF,UAAW,CAAC,SAAYgG,OACvD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAjBzBA,4BAhD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACVC,cAAegB,EAD7B,SAEE,6BACuDpJ,EAAlDkP,EAAoD,oCAAtC,4CCrEdO,GAAoBlF,OAAaC,MAAM,CAChD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBC+FHD,qBAAkByD,aA5EjC,YAA+C,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC3BgF,EAAY,uBAClB,EAA0ByC,YAAYsD,IAA9Ba,EAAR,oBAEA,OACE,eAAC,GAAD,CAAwBV,UAAU,EAAlC,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,iCAAf,SACE,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkB8D,GAClB7D,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB4D,EAAc,CAAExG,UAAW,CACzB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOwC,GAAuBzF,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvB1B,SA2BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKxE,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,uCC+ChBD,I,eAAAA,iBAAkByD,aA/GjC,YAAqD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAClC0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,kCACd8I,EAAY,uBAClB,EAAiCnG,YAASiM,GAAsB,CAC9D1F,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA6ByI,YAAYuD,IAAjCa,EAAR,oBAEA,GAAI/M,EAAS,OACX,eAAC,GAAD,CAAwBoM,UAAU,EAAlC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAwBmM,UAAU,EAAlC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAK+M,kBAEzB,OACE,eAAC,GAAD,CAAwBb,UAAU,EAAlC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClB2K,KAAMI,EAAYJ,MAEpB7D,iBAAkB8D,GAClB7D,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8D,EAAiB,CAAEzG,UAAW,CAC5B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOwC,GAAuBzF,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,0CAA4C,CACzDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9B1B,SAkCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,uCCxHpB8P,GAAuBvU,YAAH,8bAqBpBwU,GAAsBxU,YAAH,kKAWnByU,GAAgBzU,YAAH,yOAab0U,GAAmB1U,YAAH,2NAYhB2U,GAAoB3U,YAAH,sNCHfwE,qBAAkByD,aApCjC,YAA0E,IAAzCxD,EAAwC,EAAxCA,EAAYE,GAA4B,EAArC4D,QAAqC,EAA5B5D,UAA4B,IAAlB8O,gBAAkB,SACvE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,sBAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,mBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,0BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,iCAKnD,eAAC,GAAD,CAAaoO,WAAW,gCC4HvBrO,qBAAkByD,aAnJjC,YAA0C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC7B,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,4BACpB,EAAqD2C,YAASmN,GAAsB,CAClF5G,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA6BwH,YAAY2E,IAAjCC,EAAR,oBAEM/G,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,0CAKZ,IAAMoQ,EAAatN,EAAKuN,kBAGxB,OAAKD,EAAW3O,MAAM0E,OAYpB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACdC,cAAegB,EACfvB,SAAUuI,EAAWvI,SACrBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO4G,EAAWvI,SAAS4B,WAE7BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgByG,kBAAkB5O,MAC7CoG,EAAW+B,EAAgByG,kBAAkBxI,SAEnD,OAAOgC,EAAS1D,OACZ,CAGEkK,kBAAmB,CACjBvG,WAAYH,EAAe0G,kBAAkBvG,WAC7CrI,MAAM,GAAD,oBAAOkI,EAAe0G,kBAAkB5O,OAAxC,aAAkDoI,IACvDhC,aAGJ8B,MAtBlB,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACK4J,EAAW3O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK4N,MADQxF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,4BAA8BvB,EAAK4M,KAC/D7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACd2B,EAAiB,CAAEjH,UAAW,CAC5B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAO2D,GAAsB5G,UAAW,CAAC,SAAYgG,OACtD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAjBzBA,4BA/C5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACXC,cAAegB,EAD5B,SAEE,6BACsDpJ,EAAjDkP,EAAmD,mCAArC,2CCrEdoB,GAAmB/F,OAAaC,MAAM,CAC/C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBC2FHD,qBAAkByD,aA5EjC,YAA4C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACzBgF,EAAY,sBAClB,EAAyByC,YAAYyE,IAA7BO,EAAR,oBAEA,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CAAMvK,MAAOhG,EAAE,gCAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkB2E,GAClB1E,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjByE,EAAa,CAAErH,UAAW,CACxB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAO2D,GAAsB5G,UAAW,CAAC,UAAY,OAEzDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,wCAA0C,CACvDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBxB,SA2BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,gBAAC,KAAD,WACI,gBAAC,KAAKxE,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,uCCuDdD,qBAAkByD,aAjHjC,YAAoD,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAASD,EAAQ,EAARA,MACnC2K,EAAK3K,EAAMkD,OAAOyH,GAClB1F,EAAY,sBACZX,EAAYnI,EAAE,iCACpB,EAAiC2C,YAASoN,GAAqB,CAC7D7G,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA4ByI,YAAY0E,IAAhCO,EAAR,oBAEA,GAAI5N,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAK2N,iBAIzB,OAHAlW,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMkD,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClB2K,KAAMI,EAAYJ,MAEpB7D,iBAAkB2E,GAClB1E,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ2E,EAAgB,CAAEtH,UAAW,CAC3B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAO2D,GAAsB5G,UAAW,CAAC,UAAY,OAEzDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BxB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACC,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,uCC5HtB,SAAS0Q,KACd,IAAIC,EAAY,GAEZ5H,EAASnK,aAAagS,QAAQ9R,EAAK3C,gCASvC,OAPEwU,EAAU5H,OADRA,QAGiB8H,EAGrBtW,QAAQC,IAAImW,GAELA,ECFT,SAASG,GAAgB1N,GACvB,IAAI2N,EAAenS,aAAagS,QAAQxN,GAGxC,OAFA7I,QAAQC,IAAIuW,GAERA,IAGFxW,QAAQC,IAAI,wBACL,IAWX,IA0BeuF,iBAAkByD,aAvBH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAkBoP,GAArB,EAAMtL,QAAN,EAAehB,KAAf,EAAqBsM,SAArB,OAC5B,+BAEE,0BACEjP,UAPc,oBAQdiD,MAAO0N,GAAgBhS,EAAK3C,gCAC5B6Q,SAAW,SAACgE,IAflB,SAAsCC,EAAK7N,EAAOgM,GAChDxQ,aAAaC,QAAQoS,EAAK7N,GAC1BgM,EAAQsB,MAcFQ,CACEpS,EAAK3C,+BACL6U,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,kCAATgK,gBACtB,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,oCAATgK,gBAC3B,yBAAQ5G,MAAM,OAAd,SAAiCpD,EAAE,mCAATgK,gBAC1B,yBAAQ5G,MAAM,OAAd,SAAiCpD,EAAE,mCAATgK,gBAC1B,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,wCAATgK,yBCHtBjK,I,2BAAAA,iBAAkByD,aA9BjC,YAAkE,IAAlCxD,EAAiC,EAAjCA,EAAYE,GAAqB,EAA9B4D,QAA8B,EAArB5D,UAAUkP,EAAW,EAAXA,QACpD,OACE,eAAC,GAAD,UACE,sBAAKjP,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,2BACHlD,UAAU,mCADhB,UAEE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,WAFzB,IAEsC7E,EAAE,yBAI5C,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,qBAAIpG,UAAU,YAAd,SAA2BH,EAAE,oBAC7B,eAAC,GAAD,CAAuBoP,QAASA,IAChC,8BAAKpP,EAAE,kBACP,eAAC,GAAD,CAAaoO,WAAW,8BC5BhC+C,G,oDACJ,WAAYrJ,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,kCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACLL,KAAKmI,MAAMhE,QAG3B,OAFenE,KAAKmI,MAAMiB,QAGxB,IAAK,QACH,OAAO,eAAC,KAAD,CAAOpE,MAAM,YAAb,SAA0B3E,EAAE,mCAErC,IAAK,OACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,kCAEnC,IAAK,OACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,kCAEnC,IAAK,YACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,uCAEnC,QACE,OAAOA,EAAE,0C,GA1BmB0I,aAgCrB3I,iBAAkByD,YAAW2N,KC1C/BC,GAAqB7V,YAAH,yrBAiClB8V,GAAoB9V,YAAH,8iFAqIjB+V,GAAiB/V,YAAH,0NAYdgW,GAAmChW,YAAH,sPAUhCiW,GAAyBjW,YAAH,sKAStBkW,GAAsBlW,YAAH,uWAmBnBmW,GAAsBnW,YAAH,uWAmBnBoW,GAAsBpW,YAAH,kLASnBqW,GAAyBrW,YAAH,2L,SC1MpBsW,GApCQ,SAAC,GAAoF,IAAnF7R,EAAkF,EAAlFA,EAAG8R,EAA+E,EAA/EA,WAAYC,EAAmE,EAAnEA,eAAgBC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,kBAChFC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAKlS,UAAU,YAAf,UACE,8BAAKH,EAAE,4BACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,+BACjE,0BACEG,UAAU,iBACVsI,QAAS,WACPwJ,EAAeC,GACZ9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,UAmBE,eAAC,KAAD,CAAMxN,KAAK,YAnBb,IAmB2B7E,EAAE,wCC0J1BD,qBAAkByD,aAhKjC,YAAoD,IAAzBxD,EAAwB,EAAxBA,EAAGsS,EAAqB,EAArBA,SAEtBxF,GAF2C,EAAXhJ,QAClBmF,qBAAWrI,IACAkM,YAG/BlO,aAAaC,QAAQC,EAAK1C,6BAA8BkW,EAASC,UAEjE,MAAqD5P,YAASyO,GAAoB,CAChFlI,UAAWwH,KACX8B,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAIvC,EAAiCwH,YAAYiG,IAArCiB,EAAR,oBAEA,GAAI7P,EAAS,OACX,eAAC,GAAD,CAAqBwM,QAASA,EAA9B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,0BAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAqBuM,QAASA,EAA9B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,0BAA1B,SACE,6BAAIA,EAAE,wCAKZ,IAAM0S,EAAW5P,EAAK6P,gBAGtB,OAAKD,EAASjR,MAAM0E,OAWlB,eAAC,GAAD,CAAqBiJ,QAASA,EAA9B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,0BACd6H,SAAU6K,EAAS7K,SACnBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOkJ,EAAS7K,SAAS4B,WAE3BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+I,gBAAgBlR,MAC3CoG,EAAW+B,EAAgB+I,gBAAgB9K,SAEjD,OAAOgC,EAAS1D,OACZ,CAGEwM,gBAAiB,CACf7I,WAAYH,EAAegJ,gBAAgB7I,WAC3CrI,MAAM,GAAD,oBAAOkI,EAAegJ,gBAAgBlR,OAAtC,aAAgDoI,IACrDhC,aAGJ8B,MArBtB,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qCACpB,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,6BAApB,MAAqDA,EAAE,+BACvD,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,yBAApB,MAAiDA,EAAE,2BAEnD,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MATcC,kBAYlB,eAAC,KAAMxD,KAAP,UACKkM,EAASjR,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAAuBkD,OAAQnH,EAAKmH,UADtBiB,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAI,0BAA4BzB,EAAK4M,GAA3C,SACG5M,EAAKgR,iBAFM5I,gBAKhB,gBAAC,KAAMnE,IAAP,WACIjE,EAAKiR,QACL,eAAC,IAAD,CAAMxP,GAAI,uBAAyBzB,EAAKiR,QAAQrE,GAAK,WAArD,SACI5M,EAAKkR,gBAAmBlR,EAAKkR,gBAAiBlR,EAAKmR,sBAEtDnR,EAAKkR,gBAAmBlR,EAAKkR,gBAAiBlR,EAAKmR,oBAEtD,wBACA,eAAC,KAAKC,MAAN,CAAYrO,MAAM,OAAlB,SAA0B/C,EAAKqR,QAAQC,MAAM,QAR/BlJ,gBAUhB,gBAAC,KAAMnE,IAAP,WACGoE,KAAOrI,EAAKuR,UAAUhJ,OAAO2C,GADhC,IAC6C,wBAC1C7C,KAAOrI,EAAKwR,SAASjJ,OAAO2C,KAFf9C,gBAIhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKyR,cADQrJ,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK0R,gBADQtJ,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAI,0BAA4BzB,EAAK4M,GAA3C,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,uCACd+R,eAAgB,6BAAInQ,EAAKgR,gBACzBZ,WAAYhS,EAAE,4BACdiS,eAAgBQ,EAChBP,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAOiF,GAAoBlI,UAAWwH,WAjBjD,SAsBE,uBAAMvQ,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBAvBfmF,kBArCzBA,4BArD5B,eAAC,GAAD,CAAqBoF,QAASA,EAA9B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,0BAA1B,SACE,6BACGA,EAAE,yCCjEN,SAASuT,GAAsCC,EAAgB1P,EAAS2P,GAG7ED,EAAe,CAAEtK,UAAW,CAAE/J,aAFTP,aAAagS,QAAQ9R,EAAK9C,uBAG5CoQ,MAAK,YAAa,IAAXtJ,EAAU,EAAVA,KACNrE,EAAOa,gBAAgBwD,EAAK3D,cAC5B,IAAMJ,EAAQ+D,EAAK3D,aAAaJ,MAE5B2U,EAAG,UAAMD,EAAN,YAAmB1U,GAE1B0I,OAAOkM,KAAKD,EAAK,aAEhBhH,OAAM,SAAC7J,GACRtI,QAAQC,IAAIqI,GACZiB,EAAQX,KAAK,oBCQJpD,qBAAkByD,aAZjC,YAA+D,EAA9BxD,EAA8B,EAA3B6D,MAA2B,EAApBC,QAAqB,IAAZ5D,EAAW,EAAXA,SAClD,OACE,eAAC,GAAD,UACE,sBAAKC,UAAU,eAAf,SACI,eAAC,KAAD,UACGD,Y,UCkCEH,qBAAkByD,aApCjC,YAA4C,IAAZxD,EAAW,EAAXA,EAAG6D,EAAQ,EAARA,MACjC,EAAmC0H,YAAYkG,IAA/C,mBAAOmC,EAAP,KAEE,OAFF,KAAyB9Q,KAGrB,0BAAQ3C,UAAU,yBAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPmL,EAAe,CAAE1K,UAAW,CAC1B6C,MAAO,CACL8H,eAAgBhQ,EAAMkD,OAAOyH,KAE9BtC,eAAgB,CACf,CAACC,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAI3K,EAAMkD,OAAOyH,QAE3DpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,0CAA4C,CACzDuM,SAAUF,IAAMG,SAASC,kBAG5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OArB5D,UAyBE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,SAzBzB,IAyBqC,IAClC7E,EAAE,mCCEID,qBAAkByD,aAjCjC,YAAqD,IAAlBxD,EAAiB,EAAjBA,EAAG6D,EAAc,EAAdA,MAAOjC,EAAO,EAAPA,KAC3C,EAAsC2J,YAAYoG,IAAlD,mBAAOmC,EAAP,KAEE,OAFF,KAA4BhR,KAGxB,yBAAQ3C,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,4CACd+R,eAAgB,+BAAInQ,EAAKmS,YAAT,IAAsB,wBAAtB,IAA8BnS,EAAKoD,eACnDgN,WAAYhS,EAAE,iCACdiS,eAAgB6B,EAChB5B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAOiF,GAAoBlI,UAAWwH,MACvC,CAACvE,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAI3K,EAAMkD,OAAOyH,UAlBlE,SAuBE,uBAAMrO,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBC+E3C9E,iBAAkByD,aAtGE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,OAAQpJ,EAA5B,EAA4BA,KAAMoS,EAAlC,EAAkCA,QAASC,EAA3C,EAA2CA,aAAcC,EAAzD,EAAyDA,gBAAiBC,EAA1E,EAA0EA,UAA1E,OACjC,eAAC,KAAD,CAAQxT,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,eAAC,KAAD,UACE,gBAAC,KAAK3K,IAAN,WAEE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SACE,gBAAC,KAAK8K,MAAN,WACE,eAAC,KAAD,CAAOzG,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAO+I,YAAe,0BAA4B,eAC9D5I,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,eAAe,GAAM,MAG/C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SACE,gBAAC,KAAK8K,MAAN,WACE,eAAC,KAAD,CAAOzG,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,MACbC,UAAU,WACV4B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,eAAe,GAAM,MAG/C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,gBAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,UACE,gBAAC,KAAK8K,MAAN,WACE,eAAC,KAAD,CAAOzG,KAAK,OACLK,KAAK,WACL1E,UAAY6K,EAAOqJ,SAAY,0BAA4B,eAC3DlJ,aAAa,MACb6B,SAAU,SAACoH,GACVH,EAAaG,GACbF,EAAgB,YAAY,GAAM,MAG1C,eAAC,KAAD,CAAcrP,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,WACE,eAAC,KAAD,CAAOzG,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,SAAS,GAAM,MAGzC,eAAC,KAAD,CAAcrP,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,2BAG1D,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SACE,gBAAC,KAAK8K,MAAN,WACE,gBAAC,KAAD,CAAOG,UAAU,SACXvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,kBAAkB,GAAM,IANhD,UASG3Z,QAAQC,IAAI,wCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,IAAQ4G,gBACrBmK,EAAUK,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,0BAGnE,gBAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,UACE,uBAAMA,UAAU,cAAhB,SAA+ByB,EAAKyR,eADtC,IAC2D,wBAAM,wBAC7B,IAAhCsB,OAAOC,KAAKZ,GAAS7N,OAAgB,GACrC,eAAC,KAAD,CACExB,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,uBAIT,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SACE,uBAAMA,UAAU,cAAhB,SAA8B,eAAC,GAAD,CAA0ByB,KAAMA,mBCtCzD7B,I,GAAAA,iBAAkByD,aA/DjC,YAAsE,IAArCxD,EAAoC,EAApCA,EAAGyL,EAAiC,EAAjCA,cAAe7J,EAAkB,EAAlBA,KAAMuS,EAAY,EAAZA,UACvD,EAAsC5I,YAAYmG,IAAlD,mBAAOmD,EAAP,KAEE,OAFF,KAA4B/R,KAGxB,eAAC,KAAD,CACE2I,cAAe,CACbsI,YAAatI,EAAcsI,YAC3B/O,YAAayG,EAAczG,YAC3BsP,MAAO7I,EAAc6I,MACrBD,SAAU5I,EAAc4I,SACxBE,eAAiB9I,EAAc8I,eAAkB9I,EAAc8I,eAAe/F,GAAK,MAGrF5C,SAAU,SAACC,EAAD,GAA4C,IAAjCC,EAAgC,EAAhCA,cAAegJ,EAAiB,EAAjBA,WAClCva,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZgJ,EAAkB,CAAE3L,UAAW,CAC7B6C,MAAO,CACLyC,GAAI/C,EAAc+C,GAClBuF,YAAalI,EAAOkI,YACpB/O,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdD,SAAUxI,EAAOwI,SACjBE,eAAgB1I,EAAO0I,iBAExBrI,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdgJ,EAAW,OACVpI,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAxD,OACC,eAAC,GAAD,CACEnJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjBtS,KAAMA,EACNuS,UAAWA,WC7CVzC,GAAsBnW,YAAH,yNAgIjBwE,qBAAkByD,aAtHjC,YAAqF,IAAjDxD,EAAgD,EAAhDA,EAAmCmU,GAAa,EAA7CrQ,QAA6C,EAApCD,MAAoC,EAA7BkR,eAA6B,EAAbZ,WACrE,EAA+B5I,YAAYmG,IAA3C,mBAAOsD,EAAP,KACA,GADA,KAAqBlS,KACa6J,oBAAS,IAA3C,mBAAQsI,EAAR,KAAkBC,EAAlB,KAEMC,EAAYC,uBAAY,SAAC/K,GAE7B9P,QAAQC,IAAI,0BACZD,QAAQC,IAAI6P,GACZ,IAAQgL,EAA6ChL,EAA7CgL,YAAaC,EAAgCjL,EAAhCiL,YAAaC,EAAmBlL,EAAnBkL,OAAQC,EAAWnL,EAAXmL,OAC1Cjb,QAAQC,IAAI+a,GACZhb,QAAQC,IAAI8a,GACZ/a,QAAQC,IAAIgb,GAGZjb,QAAQC,IAAI,qBACP8a,GAA0B,WAAXE,IAKpBjb,QAAQC,IAAI,4BAEV8a,EAAYG,cAAgBF,EAAOE,aACnCH,EAAYI,QAAUH,EAAOG,OAK/BC,EAAiB,CACfC,QAASP,EACTQ,YAAaP,EAAYI,WAG1B,IAGGC,EAAmB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YACnCX,GAAY,GACZF,EAAW,CACT9L,UAAW,CACT6C,MAAO,CACLyC,GAAIoH,EACJE,WAAYD,IAGhB3J,eAAgB,CACd,CAAEC,MAAOkF,GAAmBnI,UAAW,CAAEsF,GAAI2F,EAAUN,eAAerF,QAEvEpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACTvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sCAAwC,CACrDuM,SAAUF,IAAMG,SAASC,eAE7BsJ,YAAW,kBAAMb,GAAY,KAAQ,QACpCxI,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDkT,YAAW,kBAAMb,GAAY,KAAQ,SAIzC,OACE,eAAC,KAAD,CAAiBC,UAAWA,EAA5B,SACE,gBAAC,KAAD,CAAMa,YAAY,OAAlB,UACE,gBAAC,KAAKjQ,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,mBACf,eAAC,KAAKqJ,QAAN,UACE,eAAC,GAAD,SAGJ,eAAC,KAAK7C,KAAN,UACE,gBAAC,KAAD,CAAQ9F,OAAQuU,EAAUtU,OAAQsU,EAAlC,UACI,gBAAC,KAAK7U,IAAN,CAAUD,UAAU,uBAApB,UACE,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SAAiDH,EAAE,qBACnD,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SAAiDH,EAAE,yBACnD,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SAAiDH,EAAE,sCACnD,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SAAiDH,EAAE,iBACnD,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,qBAA3B,SAAgD,uBAAMA,UAAU,cAAhB,SAA+BH,EAAE,qBACjF,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAGpG,UAAU,0BAE7B,eAAC,KAAD,CAAWsV,YAAY,gBAAvB,SACG,SAACQ,EAAUC,GAAX,OACG,+CACEC,IAAKF,EAASG,UACVH,EAASI,gBAFf,cAIGlC,EAAUN,eAAe3Q,MAAMzB,MAAM6E,KAAI,WAAWgQ,GAAX,IAAG1U,EAAH,EAAGA,KAAH,OACxC,eAAC,KAAD,CACEyT,YAAazT,EAAK4M,GAClBkH,MAAOY,EAFT,SAKG,SAACL,EAAUC,GAAX,OACG,0DACEC,IAAKF,EAASG,SACdV,MAAO9T,EAAKkU,YACRG,EAASM,gBACTN,EAASO,iBAJf,aAME,eAAC,GAAD,CAAwB/K,cAAe7J,EAAMuS,UAAWA,EAAWvS,KAAMA,SAT1EA,EAAK4M,OAcbyH,EAASQ,iC,SC1InBC,GAAmB,CAC5BC,QAAQ,EACRC,SAAS,EACTC,QAAS,yCACTC,WAAW,EACXC,QAAS,yJC4CEhX,iBAAkByD,aA5BG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcc,EAApB,EAAoBA,OAAuCqI,GAA3D,EAA4BlJ,OAA5B,EAAoCgJ,QAApC,EAA6CC,aAA7C,EAA2DC,iBAAiB8C,EAA5E,EAA4EA,cAA5E,OAClC,eAAC,KAAD,CAAQrW,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,QACbC,aAActL,EAAOuL,MACrBvc,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,QAAS5C,EAAE1O,OAAO2R,cAChCnD,EAAgB,SAAS,GAAM,MAGnC,eAAC,KAAD,CAAcrP,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,eAAC,KAAD,CACEwE,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCMID,iBAAkByD,aA5BI,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcc,EAApB,EAAoBA,OAAuCqI,GAA3D,EAA4BlJ,OAA5B,EAAoCgJ,QAApC,EAA6CC,aAA7C,EAA2DC,iBAAiB8C,EAA5E,EAA4EA,cAA5E,OACnC,eAAC,KAAD,CAAQrW,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,SACbC,aAActL,EAAOyL,OACrBzc,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,SAAU5C,EAAE1O,OAAO2R,cACjCnD,EAAgB,UAAU,GAAM,MAGpC,eAAC,KAAD,CAAcrP,KAAK,SAASuG,UAAU,OAAOjL,UAAU,wBAEzD,eAAC,KAAD,CACEwE,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCKID,iBAAkByD,aA5BE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcc,EAApB,EAAoBA,OAA0CqI,GAA9D,EAA4BlJ,OAA5B,EAAoCiJ,aAApC,EAAkDsD,WAAlD,EAA8DrD,iBAAiB8C,EAA/E,EAA+EA,cAA/E,OACjC,eAAC,KAAD,CAAQrW,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGlC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,eAAC,KAAD,CACEwE,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCoIID,qBAAkByD,aAvJjC,YAAyE,IAAlCxD,EAAiC,EAAjCA,EAAY6D,GAAqB,EAA9BC,QAA8B,EAArBD,OAAO+L,EAAc,EAAdA,YAClDpB,EAAK3K,EAAMkD,OAAOyH,GACxB,EAA0BjD,YAAY+F,IAA9BmG,EAAR,oBAEA,OACE,gBAAC,KAAD,CAAYC,WAAY1X,EAAE,gCAA1B,UACE,eAAC,KAAD,CAAKgG,MAAOhG,EAAE,gCAAd,SACE,eAAC,KAAD,CACEyL,cAAe,CACb2L,MAAOxH,EAAYiE,eAAeuD,OAGpCxL,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB4I,MAAOvL,EAAOuL,QAEflL,eAAgB,CACf,CAACC,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAIA,OAE9CpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BtB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjB8C,cAAeA,SAMvB,eAAC,KAAD,CAAKhR,MAAOhG,EAAE,kBAAd,SACE,eAAC,KAAD,CACEyL,cAAe,CACb6L,OAAQ1H,EAAYiE,eAAeyD,QAGrC1L,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB8I,OAAQzL,EAAOyL,SAEhBpL,eAAgB,CACjB,CAACC,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAIA,OAE5CpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BtB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRoI,aAAcA,EACdD,QAASA,EACTE,gBAAiBA,EACjB8C,cAAeA,SAMvB,eAAC,KAAD,CAAKhR,MAAOhG,EAAE,gBAAd,SACE,eAAC,KAAD,CACEyL,cAAe,CACb+L,KAAM5H,EAAYiE,eAAe2D,MAGnC5L,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBgJ,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACjB,CAACC,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAIA,OAE5CpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BtB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjB8C,cAAeA,gBCtGdjX,iBAAkByD,aAlDC,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY6T,GAAf,EAAM/P,QAAN,EAAe+P,gBAAf,OAChC,gBAAC,KAAD,CAAMmC,YAAY,OAAlB,UACE,eAAC,KAAKjQ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,uBAEjB,gBAAC,KAAKwG,KAAN,WACE,iCACE,uBAAMrG,UAAU,iBAAhB,SACGH,EAAE,sBAEL,uBAAMG,UAAU,aAAhB,SACG0T,EAAe8D,qBAEd,wBACN,iCACE,uBAAMxX,UAAU,iBAAhB,SACGH,EAAE,iBAEL,uBAAMG,UAAU,aAAhB,SACG0T,EAAe+D,gBAEd,wBACN,iCACE,uBAAMzX,UAAU,iBAAhB,SACGH,EAAE,mBAEL,uBAAMG,UAAU,aAAhB,SACG0T,EAAeR,kBAEd,wBACN,iCACE,uBAAMlT,UAAU,iBAAhB,SACGH,EAAE,kBAEL,uBAAMG,UAAU,aAAhB,SACG0T,EAAegE,iBAEd,wBACN,iCACE,uBAAM1X,UAAU,iBAAhB,SACGH,EAAE,qBAEL,uBAAMG,UAAU,aAAhB,SACG0T,EAAeP,8BCrDnB,SAASwE,GAAetK,GAC3B,OAAOvD,KAAOuD,GAAMrD,OAAO,cAUxB,SAAS4N,GAAmBvK,GAC/B,OAAIA,aAAgB5J,KACT4J,EAAKwK,WAAa,KACjB,IAAMxK,EAAKyK,cAAcC,OAAO,GAEjC1K,EAKR,SAAS2K,GAAsBC,GAElC,IAAIC,EAAW,IAAIzU,KACf0U,EAAaF,EAAYlW,MAAM,KAInC,OAHAmW,EAASE,SAASD,EAAW,IAC7BD,EAASG,WAAWF,EAAW,IAExBD,ECbX,IAoFetY,iBAAkByD,aApFK,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcc,EAApB,EAAoBA,OAAQb,EAA5B,EAA4BA,OAAQiJ,EAApC,EAAoCA,aAAcD,EAAlD,EAAkDA,QAASgD,EAA3D,EAA2DA,cAAe9C,EAA1E,EAA0EA,gBAAiBC,EAA3F,EAA2FA,UAA3F,OACpC,eAAC,KAAD,CAAQxT,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,gBACL1E,UAAY6K,EAAO4H,cAAiB,0BAA4B,eAChEzH,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,iBAAiB,GAAM,MAGjD,eAAC,KAAD,CAAcrP,KAAK,gBAAgBuG,UAAU,OAAOjL,UAAU,wBAEhE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOmI,SAAY,0BAA4B,eAC3DpG,SAAUlB,EAAOsH,SACjBnG,SAAU,SAACQ,GACTwJ,EAAc,WAAYxJ,GAC1B0G,EAAgB,YAAY,MAGhC,eAAC,KAAD,CAAcrP,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,wBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOoI,QAAW,0BAA4B,eAC1DrG,SAAUlB,EAAOuH,QACjBpG,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,MAG/B,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,SACL1E,UAAY6K,EAAOjC,OAAU,0BAA4B,eACzDoC,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,UAAU,GAAM,IANxC,UASE,yBAAQ9Q,MAAM,QAAd,SAAuBpD,EAAE,mCACzB,yBAAQoD,MAAM,OAAd,SAAsBpD,EAAE,kCACxB,yBAAQoD,MAAM,OAAd,SAAsBpD,EAAE,kCACxB,yBAAQoD,MAAM,YAAd,SAA2BpD,EAAE,0CAE/B,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,OAAOjL,UAAU,wBAEzD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,0BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,uBACL1E,UAAY6K,EAAOyN,qBAAwB,0BAA4B,eACvEzL,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,wBAAwB,GAAM,IAEhD/I,aAAa,MAPnB,UAQE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUuE,sBAAsBjX,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,wBAErC,IAAhCwU,OAAOC,KAAKZ,GAAS7N,OAAgB,GACrC,eAAC,KAAD,CACExB,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCeED,qBAAkByD,aA1FjC,YAA6D,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAO+L,EAAc,EAAdA,YAC5C,EAA0BrE,YAAY+F,IAA9BmG,EAAR,oBAEIkB,EAAuB,GACvB/I,EAAYiE,eAAe4E,uBAC7BE,EAAuB/I,EAAYiE,eAAe4E,qBAAqBjK,IAKzE,IAAI2E,EAAW,KACXvD,EAAYiE,eAAeV,WAC7BA,EAAW,IAAIvP,KAAKgM,EAAYiE,eAAeV,WAEjD,IAAIC,EAAU,KAYd,OAXIxD,EAAYiE,eAAeT,UAC7BA,EAAU,IAAIxP,KAAKgM,EAAYiE,eAAeT,UAIhD7Y,QAAQC,IAAI,YACZD,QAAQC,IAAIoV,GACZrV,QAAQC,IAAI2Y,GACZ5Y,QAAQC,IAAI4Y,GAIV,eAAC,KAAD,CAAMpN,MAAOhG,EAAE,mBAAoBgW,YAAY,OAA/C,SACE,eAAC,KAAKxP,KAAN,UACE,eAAC,KAAD,CACEiF,cAAe,CACbmH,cAAehD,EAAYiE,eAAejB,cAC1CO,SAAUA,EACVC,QAASA,EACTrK,OAAQ6G,EAAYiE,eAAe9K,OACnC0P,qBAAsBE,GAGxB/M,SAAU,SAACC,EAAD,GAA4C,IAAjCC,EAAgC,EAAhCA,cAAegJ,EAAiB,EAAjBA,WAClCva,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBoE,cAAe/G,EAAO+G,cACtBO,SAAU2E,GAAejM,EAAOsH,UAChCC,QAAS0E,GAAejM,EAAOuH,SAC/BrK,OAAQ8C,EAAO9C,OACf0P,qBAAsB5M,EAAO4M,uBAE9BvM,eAAgB,CACf,CAACC,MAAOiF,GAAoBlI,UAAWwH,SAE1CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdgJ,EAAW,OACVpI,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAA0BC,GAApE,EAAwDqD,WAAxD,EAAoErD,iBAAiB8C,EAArF,EAAqFA,cAArF,OACC,eAAC,GAAD,CACE7C,UAAWvE,EACX7E,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACd+C,cAAeA,EACf9C,gBAAiBA,eCzDhBnU,iBAAkByD,aA7BM,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY4Y,GAAf,EAAM9U,QAAN,EAAe8U,cAAf,OACrC,gBAAC,KAAD,CAAM5C,YAAY,OAAlB,UACE,eAAC,KAAKjQ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oBAEjB,gBAAC,KAAKwG,KAAN,WACE,sBAAKrG,UAAU,OAAf,SACGyY,EAAa/T,OAEd+T,EAAaC,QACb,sBAAKpS,wBAAyB,CAAEC,OAAQkS,EAAaC,WACnD,GAEJ,+BACGD,EAAaE,QAEhB,+BACGF,EAAaG,QAEhB,+BACGH,EAAaI,eAEhB,+BACGJ,EAAaK,4BCcPlZ,iBAAkByD,aA9BK,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,OAAQgJ,EAA5B,EAA4BA,QAASE,EAArC,EAAqCA,gBAAiBD,EAAtD,EAAsDA,aAAtD,OACpC,eAAC,KAAD,CAAQtT,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,WACE,eAAC,KAAD,CACEzG,KAAK,OACLK,KAAK,UACL1E,UAAY6K,EAAOiI,QAAW,0BAA4B,eAC1D9H,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,WAAW,GAAM,MAGrC,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAExB,IAAhCwU,OAAOC,KAAKZ,GAAS7N,OAAgB,GACrC,eAAC,KAAD,CACExB,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCwCED,qBAAkByD,aAhEjC,YAAsE,IAAlCxD,EAAiC,EAAjCA,EAAY6D,GAAqB,EAA9BC,QAA8B,EAArBD,OAAO+L,EAAc,EAAdA,YACrD,EAA0BrE,YAAY+F,IAA9BmG,EAAR,oBAEA,OACE,gBAAC,KAAD,CAAMzB,YAAY,OAAlB,UACE,eAAC,KAAKjQ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,uBAEjB,gBAAC,KAAKwG,KAAN,WACE,eAAC,KAAD,CACEiF,cAAe,CACbwH,QAASrD,EAAYiE,eAAeZ,SAGtCrH,SAAU,SAACC,EAAD,GAA4C,IAAjCC,EAAgC,EAAhCA,cAAegJ,EAAiB,EAAjBA,WAClCva,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjByE,QAASpH,EAAOoH,UAEjB/G,eAAgB,CACf,CAACC,MAAOiF,GAAoBlI,UAAWwH,SAE1CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdgJ,EAAW,OACVpI,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA7BtB,SAiCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASE,EAA1C,EAA0CA,gBAAiBD,EAA3D,EAA2DA,aAA3D,OACC,eAAC,GAAD,CACElJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,OAKtB3Z,QAAQC,IAAIoV,GACXA,EAAYiE,eAAeqF,oBAC3BlZ,EAAE,sCAAwC,KAAO4P,EAAYiE,eAAeqF,oBAC5E,aC4EKnZ,iBAAkByD,aAvIA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,OAAQgJ,EAA5B,EAA4BA,QAASC,EAArC,EAAqCA,aAAcC,EAAnD,EAAmDA,gBAAnD,OAC/B,eAAC,KAAD,CAAQvT,OAAQoK,EAAcrK,OAAQqK,EAAtC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,qCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,kBACL1E,UAAY6K,EAAO8H,gBAAmB,0BAA4B,eAClE3H,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,mBAAmB,GAAM,MAGnD,eAAC,KAAD,CAAcrP,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,wBAElE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,kDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,8BACL1E,UAAY6K,EAAOmO,4BAA+B,0BAA4B,eAC9EhO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,+BAA+B,GAAM,MAG/D,eAAC,KAAD,CAAcrP,KAAK,8BAA8BuG,UAAU,OAAOjL,UAAU,0BAGhF,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,sDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,iCACL1E,UAAY6K,EAAOoO,+BAAkC,0BAA4B,eACjFjO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,kCAAkC,GAAM,MAGlE,eAAC,KAAD,CAAcrP,KAAK,iCAAiCuG,UAAU,OAAOjL,UAAU,6BAIrF,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,sBACL1E,UAAY6K,EAAO+H,oBAAuB,0BAA4B,eACtE5H,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,uBAAuB,GAAM,MAGvD,eAAC,KAAD,CAAcrP,KAAK,sBAAsBuG,UAAU,OAAOjL,UAAU,wBAEtE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,qCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,kBACL1E,UAAY6K,EAAOqO,gBAAmB,0BAA4B,eAClElO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,mBAAmB,GAAM,MAGnD,eAAC,KAAD,CAAcrP,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,0BAGpE,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,sCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,mBACL1E,UAAY6K,EAAOsO,iBAAoB,0BAA4B,eACnEnO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,oBAAoB,GAAM,MAGpD,eAAC,KAAD,CAAcrP,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,6BAIvE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,kCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOuO,aAAgB,0BAA4B,eAC/DpO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,gBAAgB,GAAM,MAGhD,eAAC,KAAD,CAAcrP,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,0BAGjE,eAAC,KAAK0F,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAK0E,MAAN,CAAYC,MAAOlL,EAAE,qCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,kBACL1E,UAAY6K,EAAOwO,gBAAmB,0BAA4B,eAClErO,aAAa,MACb6B,SAAU,SAACoH,GACTH,EAAaG,GACbF,EAAgB,mBAAmB,GAAM,MAGnD,eAAC,KAAD,CAAcrP,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,6BAItE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACoC,IAAhC8O,OAAOC,KAAKZ,GAAS7N,OAAgB,GACrC,eAAC,KAAD,CACExB,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,iCCnDFD,qBAAkByD,aAvEjC,YAAmE,IAAnCxD,EAAkC,EAAlCA,EAAY6D,GAAsB,EAA/BC,QAA+B,EAAtBD,OAAO+L,EAAe,EAAfA,YACjD,EAA0BrE,YAAY+F,IAA9BmG,EAAR,oBAEA,OACE,eAAC,KAAD,CAAMzR,MAAOhG,EAAE,cAAegW,YAAY,OAA1C,SACE,eAAC,KAAKxP,KAAN,UACE,eAAC,KAAD,CACEiF,cAAe,CACbqH,gBAAiBlD,EAAYiE,eAAef,gBAC5CqG,4BAA6BvJ,EAAYiE,eAAesF,4BACxDC,+BAAgCxJ,EAAYiE,eAAeuF,+BAC3DrG,oBAAqBnD,EAAYiE,eAAed,oBAChDsG,gBAAiBzJ,EAAYiE,eAAewF,gBAC5CC,iBAAkB1J,EAAYiE,eAAeyF,iBAC7CC,aAAc3J,EAAYiE,eAAe0F,aACzCC,gBAAiB5J,EAAYiE,eAAe2F,iBAG9C5N,SAAU,SAACC,EAAD,GAA4C,IAAjCC,EAAgC,EAAhCA,cAAegJ,EAAiB,EAAjBA,WAClCva,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ4L,EAAc,CAAEvO,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBsE,gBAAiBjH,EAAOiH,gBACxBqG,4BAA6BtN,EAAOsN,4BACpCC,+BAAgCvN,EAAOuN,+BACvCrG,oBAAqBlH,EAAOkH,oBAC5BsG,gBAAiBxN,EAAOwN,gBACxBC,iBAAkBzN,EAAOyN,iBACzBC,aAAc1N,EAAO0N,aACrBC,gBAAiB3N,EAAO2N,kBAEzBtN,eAAgB,CACf,CAACC,MAAOiF,GAAoBlI,UAAWwH,SAE1CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdgJ,EAAW,OACVpI,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3CtB,SA+CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAxD,OACC,eAAC,GAAD,CACEnJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,eC1BhBnU,qBAAkByD,aAnCjC,YAA4D,IAAlBxD,EAAiB,EAAjBA,EAAG6D,EAAc,EAAdA,MAAOjC,EAAO,EAAPA,KAE5CkL,EADc7D,qBAAWrI,IACAkM,WAC/B,EAAyCvB,YAAYqG,IAArD,mBAAO6H,EAAP,KAEE,OAFF,KAA+B3W,KAG3B,yBAAQ3C,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,+CACd+R,eAAgB,+BAAK9H,KAAOrI,EAAK4L,MAAMrD,OAAO2C,GAA9B,MAA+ClL,EAAK8X,iBACpE1H,WAAYhS,EAAE,oCACdiS,eAAgBwH,EAChBvH,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAOiF,GAAoBlI,UAAWwH,MACvC,CAACvE,MAAOkF,GAAmBnI,UAAW,CAACsF,GAAI3K,EAAMkD,OAAOyH,UAlBlE,SAuBE,uBAAMrO,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBCmC3C9E,qBAAkByD,aA/DjC,YAAwF,IAAjDxD,EAAgD,EAAhDA,EAAY6D,GAAoC,EAA7CC,QAA6C,EAApCD,OAAuBsQ,GAAa,EAA7BY,eAA6B,EAAbZ,WAClE3F,EAAK3K,EAAMkD,OAAOyH,GAElB1B,EADc7D,qBAAWrI,IACAkM,WACzB6M,EAAa,4BAAwBnL,EAAxB,gBAEnB,OACE,gBAAC,KAAD,CAAMwH,YAAY,OAAlB,UACE,gBAAC,KAAKjQ,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,sBACf,eAAC,KAAKqJ,QAAN,UAEE,eAAC,IAAD,CAAMhG,GAAIsW,EAAV,SACE,gBAAC,KAAD,CAAQxZ,UAAU,SAASwE,MAAM,UAAjC,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,SADzB,IACoC7E,EAAE,0CAK1C,gBAAC,KAAD,CAAOoG,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACG2N,EAAUN,eAAe+F,SAASnY,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACIoE,KAAOrI,EAAK4L,MAAMrD,OAAO2C,KAE7B,eAAC,KAAMjH,IAAP,UACIjE,EAAK8X,gBAET,gBAAC,KAAM7T,IAAP,WACKjE,EAAK6W,qBAAwB7W,EAAK6W,qBAAqB5T,KAAO,GAC9DjD,EAAKiY,gBAAmB,+BAAK,wBAAO1Z,UAAU,aAAjB,SAA+ByB,EAAKiY,oBAAiC,MAEvG,eAAC,KAAMhU,IAAP,UACE,sBAAKY,wBAAyB,CAAEC,OAAO9E,EAAK4V,UAE9C,eAAC,KAAM3R,IAAP,UACE,wBAAM1F,UAAU,aAAhB,UACE,eAAC,IAAD,CAAMkD,GAAK,qBAAuB8Q,EAAUN,eAAerF,GAAK,iBAAmB5M,EAAK4M,GAClFrO,UAAU,gCADhB,SAGGH,EAAE,kBAEL,eAAC,GAAD,CAAiC4B,KAAMA,WArB7B,WAAaA,EAAK4M,mBCgHjCzO,I,eAAAA,iBAAkByD,aA/HjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC/B0K,EAAK3K,EAAMkD,OAAOyH,GACxB,EAA0C7L,YAAS0O,GAAmB,CACpEnI,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAM9B,EAAyB7D,YAAY/P,GAA9BgY,EAAP,oBACA,EAAuCjI,YAAYgG,IAA5CuI,EAAP,oBAGA,GAAIlX,EAAS,OAAO,eAAC,GAAD,UAAyB5C,EAAE,+BAE/C,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,eAAC,GAAD,UAAyB7C,EAAE,8BAGpCzF,QAAQC,IAAIsI,GAEZ,IAAIiX,EAAanb,aAAagS,QAAQ9R,EAAK1C,8BACtC2d,IACHA,EAAa,qBAEf,IAAMC,EAAa,yBAA2BxL,EACxCyL,EAAe,4BAAwBzL,EAAxB,gBAErB,OACE,gBAAC,GAAD,WACE,eAAC,KAAKzI,OAAN,CAAaC,MAAOhG,EAAE,yBAA2B,KAAO8C,EAAK+Q,eAAejB,cAA5E,SACE,uBAAKzS,UAAU,sBAAf,UAEE,gBAAC,IAAD,CAAMkD,GAAI0W,EACJ5Z,UAAU,yBADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAG9C,gBAAC,IAAD,CAAMqD,GAAI4W,EACN9Z,UAAU,yBADd,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,gBAF3B,IAE6C7E,EAAE,mCAG/C,eAAC,KAAD,CACE2E,MAAM,YACNrB,KAAK,UACLnD,UAAU,OACVsI,QAAS,kBAAM8K,GACbC,EAAgB1P,EAASkW,IAL7B,SAQGha,EAAE,iBAGL,eAAC,KAAD,CACEG,UAAU,GACVqE,KAAK,SACL0V,QAAM,EACN5W,KAAK,OACLqB,MAAM,YACNwV,eAAgBna,EAAE,iBAClBkD,MAAO,CACL,eAAC,GAAD,CAAsBZ,WAAW,SAASC,SAAS,iBAAnD,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,QACLmF,QAAS,WACPqR,EAA6B,CAAE5Q,UAAW,CACxC6C,MAAO,CACLyC,GAAIA,IAELtC,eAAgB,KAElBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAMsX,EAAkBtX,EAAKuX,oCAAoCxG,eAAerF,GAChF1K,EAAQX,KAAR,iCAAuCiX,IACvC/N,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OArB5D,SAwBK7C,EAAE,qDAvBAgK,0BA8BjB,gBAAC,KAAK5J,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CACEqJ,YAAa9M,IAEf,gBAAC,KAAK1C,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAG+T,GAAI,EAArB,SACE,eAAC,GAAD,CAAgC1B,aAAc9V,EAAK8V,iBAErD,eAAC,KAAK/S,IAAN,CAAUU,GAAI,EAAG+T,GAAI,EAArB,SACE,eAAC,GAAD,CAAsB1K,YAAa9M,YAIzC,gBAAC,KAAK+C,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAA2BsN,eAAgB/Q,EAAK+Q,iBAChD,eAAC,GAAD,CACEjE,YAAa9M,UAInB,eAAC,KAAK1C,IAAN,UACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACE,eAAC,GAAD,CAAyB4N,UAAWrR,EAAMiS,eAAgB3F,IAC1D,eAAC,GAAD,CAA8BQ,YAAa9M,IAC3C,eAAC,GAAD,CAA4BqR,UAAWrR,gBC3IlC/C,kBANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,SAAMoD,MAEnB,eAAC,KAAD,CAAOuB,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,mBCXpBua,GAA2Bhf,YAAH,wiBA6BxBif,GAA0Bjf,YAAH,qTAmBvBkf,GAAuBlf,YAAH,uOAYpBmf,GAAoBnf,YAAH,kYAqBjBof,GAAwBpf,YAAH,kOCAlC,IAkKewE,iBAAkByD,aAlNjC,YAA0E,IAAvCxD,EAAsC,EAAtCA,EAAYE,GAA0B,EAAnC4D,QAAmC,EAA1B5D,UAA0B,IAAhB8O,gBAAgB,SACvE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,uBAAKG,UAAU,sBAAf,UACE,gBAAC,IAAD,CAAMkD,GAAG,oBACHlD,UAAU,wCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,6BAErE,gBAAC,IAAD,CAAMqD,GAAG,oCACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,aAF3B,IAE0C7E,EAAE,iDAIhD,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,2BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,+BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,qCAKnD,eAAC,GAAD,CAAaoO,WAAW,8BC+GvBrO,qBAAkByD,aA5JjC,YAA6C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAChC,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,gCACpB,EAAqD2C,YAAS4X,GAA0B,CACtFrR,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAAgCwH,YAAYoP,IAApCC,EAAR,oBAEMxR,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CAKZ,IAAM6a,EAAgB/X,EAAKgY,qBAE3B,OACE,eAAC,GAAD,UACE,eAAC,GAAD,CAAa3S,UAAWnI,EAAE,gCACboI,cAAegB,EACfvB,SAAUgT,EAAchT,SACxBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOqR,EAAchT,SAAS4B,WAE/BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBkR,qBAAqBrZ,MAChDoG,EAAW+B,EAAgBkR,qBAAqBjT,SAEtD,OAAOgC,EAAS1D,OACZ,CAGE2U,qBAAsB,CACpBhR,WAAYH,EAAemR,qBAAqBhR,WAChDrI,MAAM,GAAD,oBAAOkI,EAAemR,qBAAqBrZ,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MAtBtB,SA2BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,2CACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBANNgK,kBASlB,eAAC,KAAMxD,KAAP,UACKqU,EAAcpZ,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKmZ,QADQ/Q,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKoZ,cADQhR,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKqN,OACJrN,EAAKqZ,WAAc,sCAAQjb,EAAE,gBAAV,IAA2B,2BAAe,GAC7D4B,EAAKsZ,oBAAuB,eAAC,KAAKlI,MAAN,CAAYrO,MAAM,OAAlB,SAC3B3E,EAAE,mDACU,KALDgK,gBAOhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,iBADZnR,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK4N,MADQxF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,iCAAmCvB,EAAK4M,KACpE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdoM,EAAoB,CAAE1R,UAAW,CAC/B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOoO,GAA0BrR,UAAW,CAAC,SAAYgG,OAC1D9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAjCzBA,gCC5GnBoR,GAAuB7Q,OAAaC,MAAM,CACnD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdgb,aAAczQ,OACX8Q,SAAS,EAAGrb,YAAE,sBACd0K,SAAS1K,YAAE,uBACd+a,OAAQxQ,OACR0E,OAAQ1E,OACR0Q,WAAY1Q,OACZ2Q,oBAAqB3Q,OACrB6M,MAAO7M,OACP+M,OAAQ/M,SC+IGxK,iBAAkByD,aA1ID,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcmJ,EAA7B,EAA6BA,gBAAiB8C,EAA9C,EAA8CA,cAAehM,EAA7D,EAA6DA,OAAQa,EAArE,EAAqEA,OAAQ/C,EAA7E,EAA6EA,UAA7E,IAAwFwS,YAAxF,gBAC9B,gBAAC,KAAD,WACE,gBAAC,KAAK9U,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,sCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,eAInD,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAKC,IAAN,WACIkb,EACF,eAAC,KAAKzV,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAO+P,OAAU,0BAA4B,eACzD5P,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAE7C,GACd,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOgQ,aAAgB,0BAA4B,eAC/D7P,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOiE,OAAU,0BAA4B,eACzD9D,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,wBAEzD,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,aACL2W,QAAS3P,EAAOoP,aAClB,uBAAM9a,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,2CAEjD,eAAC,KAAD,CAAc6E,KAAK,aAAauG,UAAU,aAG9C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,sBACL2W,QAAS3P,EAAOqP,sBAClB,uBAAM/a,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,sDAEjD,eAAC,KAAD,CAAc6E,KAAK,sBAAsBuG,UAAU,gBAIzD,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,QACbC,aAActL,EAAOuL,MACrBvc,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,SAAS,GAAM,GAC/B8C,EAAc,QAAS5C,EAAE1O,OAAO2R,iBAGpC,eAAC,KAAD,CAAcxS,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,SACbC,aAActL,EAAOyL,OACrBzc,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,UAAU,GAAM,GAChC8C,EAAc,SAAU5C,EAAE1O,OAAO2R,iBAGrC,eAAC,KAAD,CAAcxS,KAAK,SAASuG,UAAU,OAAOjL,UAAU,wBAEzD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAGK3E,EAAE,gCClEFD,qBAAkByD,aApEjC,YAAiD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC7BgF,EAAY,2BAClB,EAA0ByC,YAAYmP,IAA/Be,EAAP,oBAEA,OACE,eAAC,GAAD,CAA0BzM,UAAU,EAApC,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,oCAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CACb5G,KAAM,GACNsW,eAAe,EACfH,aAAc,GACd/L,OAAQ,MACRgM,YAAY,EACZC,qBAAqB,EACrB9D,MAAO,GACPE,OAAQ,GACR9H,KAAM,IAER7D,iBAAkByP,GAClBxP,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB2P,EAAgB,CAAEvS,UAAW,CAC3B6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,cACtBH,aAAcnP,EAAOmP,aACrB/L,OAAQpD,EAAOoD,OACfgM,WAAYpP,EAAOoP,WACnBC,oBAAqBrP,EAAOqP,oBAC5B9D,MAAOvL,EAAOuL,MACdE,OAAQzL,EAAOyL,OACf9H,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOoO,GAA0BrR,UAAW,CAAC,UAAY,OAE7DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxCxB,SA4CG,gBAAGf,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,OAAQb,EAAzB,EAAyBA,OAAQgM,EAAjC,EAAiCA,cAAe9C,EAAhD,EAAgDA,gBAAhD,OACC,eAAC,GAAD,CACEnJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACXoL,gBAAiBA,EACjB8C,cAAeA,eC+CdjX,qBAAkByD,aArGjC,YAAuD,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAASD,EAAQ,EAARA,MACtC2K,EAAK3K,EAAMkD,OAAOyH,GAClB1F,EAAY,2BACZX,EAAYnI,EAAE,qCACpB,EAAiC2C,YAAS6X,GAAyB,CACjEtR,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA+ByI,YAAYkP,IAAnCiB,EAAR,oBAEA,GAAI9Y,EAAS,OACX,eAAC,GAAD,CAA0BoM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA0BmM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CAKZ,IAAM4P,EAAc9M,EAAK6Y,oBAIzB,OAHAphB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA0BkM,UAAU,EAApC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBsW,cAAevL,EAAYuL,cAC3BH,aAAcpL,EAAYoL,aAC1BD,OAAQnL,EAAYmL,OACpB9L,OAAQW,EAAYX,OACpBgM,WAAYrL,EAAYqL,WACxBC,oBAAqBtL,EAAYsL,oBACjC9D,MAAOxH,EAAYwH,MACnBE,OAAQ1H,EAAY0H,OACpB9H,KAAMI,EAAYJ,MAEpB7D,iBAAkByP,GAClBxP,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ6P,EAAmB,CAAExS,UAAW,CAC9B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,cACtBJ,OAAQlP,EAAOkP,OACfC,aAAcnP,EAAOmP,aACrB/L,OAAQpD,EAAOoD,OACfgM,WAAYpP,EAAOoP,WACnBC,oBAAqBrP,EAAOqP,oBAC5B9D,MAAOvL,EAAOuL,MACdE,OAAQzL,EAAOyL,OACf9H,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOoO,GAA0BrR,UAAW,CAAC,UAAY,OAE7DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9CxB,SAkDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACXoL,gBAAiBA,EACjB8C,cAAeA,EACfsE,MAAM,eCrELvb,qBAAkByD,aA5BjC,YAAqE,IAAzBxD,EAAwB,EAAxBA,EAAYE,GAAY,EAArB4D,QAAqB,EAAZ5D,UACtD,OACE,eAAC,GAAD,UACE,sBAAKC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,2BACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,uCAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,8BAAKvG,EAAE,kBACP,eAAC,GAAD,CAAaoO,WAAW,8BCGvBrO,I,SAAAA,iBAAkByD,aAzBjC,YAA6I,EAAnGxD,EAAmG,EAAhG8D,QAAiG,IAAxFqQ,EAAuF,EAAvFA,UAAWpJ,EAA4E,EAA5EA,aAAcmJ,EAA8D,EAA9DA,gBAAiB8C,EAA6C,EAA7CA,cAAehM,EAA8B,EAA9BA,OAAgBuM,GAAc,EAAtB1L,OAAsB,EAAd0L,YAC7H,OACE,eAAC,KAAD,UACE,eAAC,KAAD,CAAQ7W,OAAQqK,EAAcpK,OAAQoK,EAAtC,SACE,gBAAC,KAAKE,MAAN,WACE,eAAC,KAAD,CAAOG,UAAU,SACXvG,KAAK,sBACL1E,UAAY6K,EAAO2Q,oBAAuB,0BAA4B,eACtE3O,SAAU,SAACoH,GACT4C,EAAc,sBAAuB5C,EAAE1O,OAAOtC,OAC9C8Q,EAAgB,uBAAuB,GACvC6B,YAAW,WAAOwB,MAAe,MAEnCpM,aAAa,MARnB,SASGgJ,EAAU2G,qBAAqBrZ,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,qBAGjC,eAAC,KAAD,CAAcnF,KAAK,sBAAsBuG,UAAU,OAAOjL,UAAU,gCC5BjEyb,GAA+BrR,OAAaC,MAAM,CAC3DmR,oBAAqBpR,SCHZsR,GAAoCtgB,YAAH,yrBA4DjCugB,IAnB0BvgB,YAAH,qTAmBQA,YAAH,oVC3BnCwgB,GAA0B,SAAC/b,EAAGgc,GAClC,OAAOA,GACL,IAAK,cACH,OAAOhc,EAAE,+CAEX,IAAK,gBACH,OAAOA,EAAE,iDAEX,IAAK,cACH,OAAOA,EAAE,+CAEX,IAAK,gBACH,OAAOA,EAAE,iDAEX,IAAK,eACH,OAAOA,EAAE,gDAEX,IAAK,gBACH,OAAOA,EAAE,iDAEX,IAAK,aACH,OAAOA,EAAE,8CAEX,IAAK,mBACH,OAAOA,EAAE,oDAEX,IAAK,oBACH,OAAOA,EAAE,qDAEX,QACE,OAAOA,EAAE,oDA4IAD,I,MAAAA,iBAAkByD,aAtIjC,YAAuD,IAAfxD,EAAc,EAAdA,EACtC,GADoD,EAAX8D,QACGnB,YAASkZ,GAAmC,CACtF3S,UAAW,CAAEgG,UAAU,MADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAI9B,EAA6BwH,YAAYuQ,IAAlCG,EAAP,oBAGA,GAAIrZ,EAAS,OACX,eAACsZ,GAAD,UACE,eAAC,GAAD,CAAa/T,UAAWnI,EAAE,yCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAACqZ,GAAD,UACE,eAAC,GAAD,CAAa/T,UAAWnI,EAAE,yCAA1B,SACE,6BAAIA,EAAE,uDAKZ,IAAMmc,EAA8BrZ,EAAKqZ,4BAGzC,OAAKA,EAA4B1a,MAAM0E,OAWrC,eAAC+V,GAAD,UACE,eAAC,GAAD,CAAa/T,UAAWnI,EAAE,yCACd6H,SAAUsU,EAA4BtU,SACtCG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO2S,EAA4BtU,SAAS4B,WAE9CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBkR,qBAAqBrZ,MAChDoG,EAAW+B,EAAgBkR,qBAAqBjT,SAEtD,OAAOgC,EAAS1D,OACZ,CAGE2U,qBAAsB,CACpBhR,WAAYH,EAAemR,qBAAqBhR,WAChDrI,MAAM,GAAD,oBAAOkI,EAAemR,qBAAqBrZ,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MArBtB,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,+CACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qDAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACK2V,EAA4B1a,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACIkW,GAAwB/b,EAAG4B,EAAKoa,WADpBhS,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,KAAD,CACE4F,cAAe,CACbkQ,oBAAoB/Z,EAAK+Z,oBAAoBnN,IAE/C7C,iBAAkBiQ,GAClBhQ,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZoQ,EAAmB,CAAE/S,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTmN,oBAAqB9P,EAAO8P,sBAE7BzP,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3BxB,SA+BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAeO,EAAjE,EAAiEA,WAAjE,OACC,eAAC,GAAD,CACEpD,UAAWrR,EACXiI,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACfO,WAAYA,WA5CNvN,4BA9C5B,eAACkS,GAAD,UACE,eAAC,GAAD,CAAa/T,UAAWnI,EAAE,yCAA1B,SACE,6BACGA,EAAE,wDCrGAoc,GAA4B7gB,YAAH,kQAgBzB8gB,GAAiC9gB,YAAH,oOChBGgP,OAAaC,MAAM,IC2GlDzK,I,GAAAA,iBAAkByD,aAjFjC,YAAyF,IAApDxD,EAAmD,EAAnDA,EAAY6D,GAAuC,EAAhDC,QAAgD,EAAvCD,OAAO3D,EAAgC,EAAhCA,SAAgC,IAAtBoc,iBAAsB,MAAZ,SAAY,EAChFC,EAAY1Y,EAAMkD,OAAOyV,WACzBzC,EAAa,0BAA4BwC,EAC/C,EAA4D5Z,YAAS0O,GAAmB,CACtFnI,UAAW,CACTsF,GAAI+N,KAFSE,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAmBC,EAAlD,EAAkDA,KAMlD,GAAI2Z,EAAc,OAChB,eAAC,GAAD,UACE,sBAAKtc,UAAU,eAAf,SACE,6BAAIH,EAAE,mCAKZ,GAAI0c,EACF,OACE,eAAC,GAAD,UACE,uBAAKvc,UAAU,eAAf,UACI5F,QAAQC,IAAIkiB,GACd,6BAAI1c,EAAE,mCAMdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAGIkD,EAHEmO,EAAYrR,EACZ6Z,EAAiBxI,EAAUN,eAAejB,cAWhD,OAFA5M,GALEA,EAAQhG,EADQ,UAAbsc,EACO,+BAEA,kCAGI,KAAOK,EAGrB,eAAC,GAAD,UACE,sBAAKxc,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAQA,EAArB,SACE,sBAAK7F,UAAU,sBAAf,SAEE,gBAAC,IAAD,CAAMkD,GAAI0W,EACJ5Z,UAAU,yBADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,uBAIlD,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SAEGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACA,gBAAC,KAAD,CAAMyP,YAAY,OAAlB,UACE,eAAC,KAAKjQ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oBAEjB,gBAAC,KAAKwG,KAAN,CAAWoW,QAAS,EAApB,UACE,qCAAQD,EAAR,OACExI,EAAUN,eAAehB,QAAQgK,SAFrC,IAEgD,wBAC5C1I,EAAUN,eAAeZ,cAG/B,eAAC,GAAD,CAA2BY,eAAgBM,EAAUN,kCCAlD9T,iBAAkByD,aAjFC,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAgBiH,GAAtB,EAAelH,MAAf,EAAsBkH,cAAcC,EAApC,EAAoCA,OAAQa,EAA5C,EAA4CA,OAAQsI,EAApD,EAAoDA,UAAW4F,EAA/D,EAA+DA,WAAY7F,EAA3E,EAA2EA,gBAAiB8C,EAA5F,EAA4FA,cAA5F,OAChC,eAAC,KAAD,UACE,gBAAC,KAAD,CAAMhB,YAAY,OAAlB,UACE,eAAC,KAAKjQ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,uBAEjB,gBAAC,KAAKwG,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO2B,KACjBR,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,OAAQxJ,IAC1CP,OAAQ,kBAAMiH,EAAgB,QAAQ,MAExC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAO8R,OAAU,0BAA4B,eACzD3R,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,uBACL1E,UAAY6K,EAAOyN,qBAAwB,0BAA4B,eACvEtN,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,uCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,KAATgK,gBACrBmK,EAAUuE,sBAAsBjX,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,4BAI3E,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACfC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,MAG9B,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,+BAK3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAagD,KAAK,SAAnE,SACK/c,EAAE,gCC/DXgd,GAA8BzhB,YAAH,oOAqGlBwE,qBAAkByD,aA1FjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAC/ByY,EADiD,EAAT1Y,MACtBkD,OAAOyV,WACzBzC,EAAa,0BAA4BwC,EAC/C,EAA4D5Z,YAAS0O,GAAmB,CACtFnI,UAAW,CACTsF,GAAI+N,KAFSE,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAmBC,EAAlD,EAAkDA,KAKlD,EAA2FyI,YAAYyR,GAA6B,CAClIC,YAAa,kBAAMnZ,EAAQX,KAAK4W,MADlC,mBAAOmD,EAAP,YAIA,GAJA,EAA4BC,aAA5B,EAA0CC,gBAA1C,EAA2DC,cAA3D,EAA0EJ,YAItER,EAAc,OAChB,eAAC,GAAD,UACE,sBAAKtc,UAAU,eAAf,SACE,6BAAIH,EAAE,mCAKZ,GAAI0c,EACF,OACE,eAAC,GAAD,UACE,uBAAKvc,UAAU,eAAf,UACI5F,QAAQC,IAAIkiB,GACd,6BAAI1c,EAAE,mCAMdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAGlB,OACE,eAAC,GAAD,CAA2BwZ,UAAW,SAAtC,SACE,eAAC,KAAD,CACE7Q,cAAe,CACb+B,KAAM,IAAI5J,KACVkZ,OAAQ3I,EAAUN,eAAeyJ,QACjC7E,qBAAsB,GACtBjB,KAAM,IAGR5L,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBoR,EAAkB,CAAEhU,UAAW,CAC7B6C,MAAO,CACL8H,eAAgB0I,EAChB/O,KAAMsK,GAAejM,EAAO2B,MAC5BsP,OAAQjR,EAAOiR,OACfrE,qBAAsB5M,EAAO4M,qBAC7BjB,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOiF,GAAoBlI,UAAWwH,MACvC,CAACvE,MAAOkF,GAAmBnI,UAAW,CAAEsF,GAAI+N,OAE/CnQ,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,aCgCTha,qBAAkByD,aA5HjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACzC0Y,EAAY1Y,EAAMkD,OAAOyV,WACzBhO,EAAK3K,EAAMkD,OAAOyH,GACxBjU,QAAQC,IAAI+hB,GACZhiB,QAAQC,IAAIgU,GAEZ,IAAMuL,EAAa,0BAA4BwC,EAC/C,EAAuF5Z,YAAS0O,GAAmB,CACjHnI,UAAW,CACTsF,GAAI+N,KAFSgB,EAAjB,EAAQ3a,QAAqC4a,EAA7C,EAAsC3a,MAAgC4a,EAAtE,EAAgE3a,KAKhE,EAAuFH,YAASyZ,GAA2B,CACzHlT,UAAW,CACTsF,GAAIA,KAFSkP,EAAjB,EAAQ9a,QAAqC+a,EAA7C,EAAsC9a,MAAgC+a,EAAtE,EAAgE9a,KAKhE,EAA8FyI,YAAY8Q,GAAgC,CACxIY,YAAa,kBAAMnZ,EAAQX,KAAK4W,MADlC,mBAAO8D,EAAP,YAIA,GAJA,EAA+BV,aAA/B,EAA6CC,gBAA7C,EAA8DC,cAA9D,EAA6EJ,YAIzEM,GAAuBG,EAAqB,OAC9C,eAAC,GAAD,UACE,sBAAKvd,UAAU,eAAf,SACE,6BAAIH,EAAE,mCAKZ,GAAIwd,EACF,OACE,eAAC,GAAD,UACE,uBAAKrd,UAAU,eAAf,UACI5F,QAAQC,IAAIgjB,GACd,6BAAIxd,EAAE,mCAMd,GAAI2d,EACF,OACE,eAAC,GAAD,UACE,uBAAKxd,UAAU,eAAf,UACI5F,QAAQC,IAAImjB,GACd,6BAAI3d,EAAE,mCAMdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIijB,GACZljB,QAAQC,IAAIojB,GACZ,IAGIjF,EAHExE,EAAYsJ,EACZhS,EAAgBmS,EAAYE,sBAG9BrS,EAAcgN,uBAChBE,EAAuBlN,EAAcgN,qBAAqBjK,IAK5D,IAAIuP,EAAc,KAKlB,OAJItS,EAAc+B,OAChBuQ,EAAc,IAAIna,KAAK6H,EAAc+B,OAIrC,eAAC,GAAD,CAA2B8O,UAAW,SAAtC,SACE,eAAC,KAAD,CACE7Q,cAAe,CACb+B,KAAMuQ,EACNjB,OAAQrR,EAAcqR,OACtBrE,qBAAsBE,EACtBnB,KAAM/L,EAAc+L,MAGtB5L,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB+R,EAAqB,CAAE3U,UAAW,CAChC6C,MAAO,CACLyC,GAAIA,EACJhB,KAAMsK,GAAejM,EAAO2B,MAC5BsP,OAAQjR,EAAOiR,OACfrE,qBAAsB5M,EAAO4M,qBAC7BjB,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOiF,GAAoBlI,UAAWwH,MACvC,CAACvE,MAAOkF,GAAmBnI,UAAW,CAAEsF,GAAI+N,OAE/CnQ,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAoCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,aC/IjB,SAASrJ,KACd,IAAIC,EAAY,GAEZ5H,EAASnK,aAAagS,QAAQ9R,EAAKzC,8BASvC,OAPEsU,EAAU5H,OADRA,QAGiB8H,EAGrBtW,QAAQC,IAAImW,GAELA,ECFT,SAASG,GAAgB1N,GACvB,IAAI2N,EAAenS,aAAagS,QAAQxN,GAGxC,OAFA7I,QAAQC,IAAIuW,GAERA,IAGFxW,QAAQC,IAAI,wBACL,IAWX,I,YA2BeuF,iBAAkByD,aAxBL,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAkBoP,GAArB,EAAMtL,QAAN,EAAehB,KAAf,EAAqBsM,SAArB,OAC1B,+BAEE,0BACEjP,UAPc,oBAQdiD,MAAO0N,GAAgBhS,EAAKzC,8BAC5B2Q,SAAW,SAACgE,IAflB,SAAsCC,EAAK7N,EAAOgM,GAChDxQ,aAAaC,QAAQoS,EAAK7N,GAC1BgM,EAAQsB,MAcFQ,CACEpS,EAAKzC,6BACL2U,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,gCAATgK,gBACtB,yBAAQ5G,MAAM,WAAd,SAAqCpD,EAAE,qCAATgK,gBAC9B,yBAAQ5G,MAAM,mBAAd,SAA6CpD,EAAE,6CAATgK,gBACtC,yBAAQ5G,MAAM,OAAd,SAAiCpD,EAAE,iCAATgK,gBAC1B,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,sCAATgK,gBAC/B,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,sCAATgK,yBCVtBjK,iBAAkByD,aAxBP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYE,GAAf,EAAM4D,QAAN,EAAe5D,UAAUkP,EAAzB,EAAyBA,QAAzB,OACxB,eAAC,GAAD,UACE,sBAAKjP,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,sBAAKG,UAAU,0BAGjB,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,qBAAIpG,UAAU,YAAd,SAA2BH,EAAE,oBAC7B,eAAC,GAAD,CAAqBoP,QAASA,IAC9B,8BAAKpP,EAAE,kBACP,eAAC,GAAD,CAAaoO,WAAW,4BCvB9B4P,G,oDACJ,WAAYlW,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,+BACZD,QAAQC,IAAIsN,GAHK,E,2CAYnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACLL,KAAKmI,MAAMhE,QAG3B,OAFenE,KAAKmI,MAAMiB,QAGxB,IAAK,WACH,OAAO,eAAC,KAAD,CAAOpE,MAAM,YAAb,SAA0B3E,EAAE,sCAErC,IAAK,mBACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,8CAEnC,IAAK,OACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,kCAEnC,IAAK,YACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,uCAEnC,IAAK,YACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,uCAEnC,QACE,OAAOA,EAAE,0C,GAnCgB0I,aAyClB3I,iBAAkByD,YAAWwa,KCnD/BC,GAAmB1iB,YAAH,0jBAkEhB2iB,IAtCkB3iB,YAAH,iZA4BQA,YAAH,iMAUGA,YAAH,iKCflBwE,qBAAkByD,aAlCjC,YAA+C,IAAlBxD,EAAiB,EAAjBA,EAAU4B,GAAO,EAAdiC,MAAc,EAAPjC,MAGrC,GAFoBqH,qBAAWrI,IACAkM,WACCvB,YAAY2S,KAA5C,mBAAOC,EAAP,KAEE,OAFF,KAAsBrb,KAGlB,yBAAQ3C,UAAU,uCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,qCACd+R,eAAgB,+BAAI/R,EAAE,iBAAN,MAA4B4B,EAAKwc,eACjDpM,WAAYhS,EAAE,0BACdiS,eAAgBkM,EAChBjM,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAO8R,GAAkB/U,UAAWwH,WAjB/C,SAsBE,uBAAMvQ,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBCgG3C9E,qBAAkByD,aAnHjC,YAA6C,IAArBxD,EAAoB,EAApBA,EAEhBqe,GAFoC,EAAjBxa,MAAiB,EAAVC,QACZmF,qBAAWrI,IACIoI,sBAE7BhD,EAAQhG,EAAE,mBAChB,EAAqD2C,YAASsb,GAAkB,CAC9E/U,UAAW,CAACwH,6BACZ8B,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAKvC,GAAInB,EAAS,OACX,eAAC,GAAD,CAAmBoD,MAAOA,EAA1B,SACGhG,EAAE,+BAIP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAmBmD,MAAOA,EAA1B,SACGhG,EAAE,kCAIPzF,QAAQC,IAAIsI,GACZ,IAAMwb,EAASxb,EAAKyb,cAIpB,OAHAhkB,QAAQC,IAAI8jB,GAGPA,EAAO7c,MAAM0E,OAWhB,eAAC,GAAD,CAAmBH,MAAOA,EAAOoJ,QAASA,EAA1C,SACE,eAAC,GAAD,CACEjH,UAAWnI,EAAE,wBACb6H,SAAUyW,EAAOzW,SACjBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO8U,EAAOzW,SAAS4B,WAEzBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB2U,cAAc9c,MACzCoG,EAAW+B,EAAgB2U,cAAc1W,SAE/C,OAAOgC,EAAS1D,OACZ,CAGEoY,cAAe,CACbzU,WAAYH,EAAe4U,cAAczU,WACzCrI,MAAM,GAAD,oBAAOkI,EAAe4U,cAAc9c,OAApC,aAA8CoI,IACnDhC,aAGJ8B,MAtBZ,SA2BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WAEE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,6BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MANcC,kBASlB,eAAC,KAAMxD,KAAP,UACK8X,EAAO7c,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,gBACKjE,EAAKwc,YADV,IACuB,wBACrB,eAAC,GAAD,CAAoBrV,OAAQnH,EAAKmH,WAFnBiB,gBAOhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK4c,WAAWrU,OAAOkU,IADjBrU,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiR,SAAWjR,EAAKiR,QAAQgK,UADhB7S,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKyR,cADQrJ,gBAGhB,gBAAC,KAAMnE,IAAP,WACE,eAAC,GAAD,CAAoBjE,KAAMA,IAC1B,eAAC,IAAD,CAAMyB,GAAI,wBAA0BzB,EAAK4M,GAAzC,SACE,eAAC,KAAD,CAAQrO,UAAU,qBACVwE,MAAM,YADd,SAEG3E,EAAE,sBALOgK,kBAjBFA,4BAnD5B,eAAC,GAAD,CAAmBoF,QAASA,EAA5B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,wBAA1B,SACE,6BACGA,EAAE,uCClDN,SAAS0Q,GAAyB+N,GACvC,IAAI9N,EAAY,CACd8N,UAAWA,EAAUC,eAKvB,OAFAnkB,QAAQC,IAAImW,GAELA,ECWM5Q,sBAnBf,YAAwD,IAAdC,EAAa,EAAbA,EACxC,OADqD,EAAV+I,QAEzC,IAAK,eACH,OAAO,eAAC,KAAD,CAAOpE,MAAM,UAAb,SAAwB3E,EAAE,iDAEnC,IAAK,WACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,6CAEnC,IAAK,oBACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,sDAEnC,IAAK,WACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,6CAElC,QACE,OAAOA,EAAE,mDCgDAD,I,kBAAAA,iBAAkByD,aAnDjC,YAAgH,IAG1G4K,EAH8BpO,EAA2E,EAA3EA,EAAY6D,GAA+D,EAAxEC,QAAwE,EAA/DD,OAAO3D,EAAwD,EAAxDA,SAAwD,IAA9Cye,eAA8C,aAA/B3P,gBAA+B,aAAflG,iBAAe,MAAL,GAAK,EACvG2V,EAAY5a,EAAMkD,OAAO6X,WAS/B,OALExQ,EADe,cAAbqQ,EACW,4BAEA,yBAIb,eAAC,GAAD,UACE,sBAAKte,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIoY,EACA,eAAC,GAAD,CAAsBrc,WAAW,MACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,kCAA6Bob,EAA7B,aAAR,SACE,gBAAC,KAAD,CAAQ9Z,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,sCAI/C,GAEFgP,EACA,eAAC,GAAD,CAAsB1M,WAAW,OACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAIjD,GAEJ,eAAC,GAAD,CAAaoO,WAAYA,qBC5D1ByQ,GAA4BtjB,YAAH,uoBA8BzBujB,GAA0BvjB,YAAH,4yCAuEvBwjB,GAAmBxjB,YAAH,wcAoBhByjB,GAAoBzjB,YAAH,4NAWjB0jB,GAAuB1jB,YAAH,4NAWpB2jB,GAAuB3jB,YAAH,qLCsClBwE,qBAAkByD,aA/IjC,YAAsD,IAUhD2E,EACAgX,EAX0Bnf,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OAEpCiJ,EADc7D,qBAAWrI,IACAkM,WACzB2R,EAAY5a,EAAMkD,OAAO6X,WAE/B,EAAqDjc,YAASkc,GAA2B,CACvF3V,UAAWwH,GAAyB+N,KAD9B7b,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,GAHA,EAAyCqL,QAGZ7D,YAAY2T,KAAlCE,EAAP,oBAaA,GATiB,cAAbX,GACFtW,EAAYnI,EAAE,2CACdmf,EAAenf,EAAE,kDAEjBmI,EAAYnI,EAAE,wCACdmf,EAAenf,EAAE,8CAIf4C,EAAS,OACX,eAAC,GAAD,CAA2B+b,SAAS,EAApC,SACE,eAAC,GAAD,CAAaxW,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2B8b,SAAS,EAApC,SACE,eAAC,GAAD,CAAaxW,UAAWA,EAAxB,SACE,6BAAInI,EAAE,+CAKZ,IAAIqf,EAAwBvc,EAAKuc,sBAEjC,OAAKA,EAAsB5d,MAAM0E,OAS/B,eAAC,GAAD,CAA2BwY,SAAS,EAApC,SACE,eAAC,GAAD,CAAaxW,UAAWA,EACtBN,SAAUwX,EAAsBxX,SAChCG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO6V,EAAsBxX,SAAS4B,WAExCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgByV,sBAAsB5d,MACjDoG,EAAW+B,EAAgByV,sBAAsBxX,SAEvD,OAAOgC,EAAS1D,OACZ,CAGEkZ,sBAAuB,CACrBvV,WAAYH,EAAe0V,sBAAsBvV,WACjDrI,MAAM,GAAD,oBAAOkI,EAAe0V,sBAAsB5d,OAA5C,aAAsDoI,IAC3DhC,aAGJ8B,MArBV,SAyBE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4CACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4CACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MANcC,kBASlB,eAAC,KAAMxD,KAAP,UACG6Y,EAAsB5d,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC/B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAAgCkD,OAAQnH,EAAKmH,UAD/BiB,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK0d,eAAenV,OAAO2C,KAErC,gBAAC,KAAMjH,IAAP,WACIjE,EAAK2d,4BAA+B3d,EAAK2d,4BAA4B1a,KAAO7E,EAAE,oBAC9E4B,EAAKqK,KAAQ,+BAAK,yBAAO9L,UAAU,aAAjB,UAA+ByB,EAAKqK,KAApC,MAA6CrK,EAAKoK,WAAuB,MAE/F,eAAC,KAAMnG,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAE,kCAA6Bob,EAA7B,iBAA+C7c,EAAK4M,IAA5D,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,8CACd+R,eAAgB,6BAAInQ,EAAKiD,OACzBmN,WAAYhS,EAAE,mCACdiS,eAAgBmN,EAChBlN,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAO0S,GAA2B3V,UAAWwH,GAAyB+N,SAf/E,SAmBE,uBAAMte,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAtBzBA,4BA/C1B,eAAC,GAAD,CAA2B2U,SAAS,EAApC,SACE,eAAC,GAAD,CAAaxW,UAAWA,EAAxB,SACE,6BAAIgX,YCxENK,G,oDACJ,WAAY1X,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,yCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EAGrB,OAFqBL,KAAKmI,MAAM2X,cAG9B,IAAK,aACH,OAAO,eAAC,KAAD,CAAO9a,MAAM,UAAb,SAAwB3E,EAAE,6EAEnC,IAAK,UACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,0EAEnC,QACE,OAAOA,EAAE,+E,GAnByB0I,aAyB3B3I,iBAAkByD,YAAWgc,KCwB7Bzf,qBAAkByD,aA5BjC,YAA2D,IAIrD2E,EACAlD,EAL+BjF,EAAqB,EAArBA,EAC7Bye,GADkD,EAAlB3a,QAAkB,EAATD,MACvBkD,OAAO6X,YACzB9V,EAAS,kCAA8B2V,GAY7C,MARiB,cAAbA,GACFtW,EAAYnI,EAAE,oDACdiF,ENrBG,SAAoCjF,EAAGye,GAC5C,OACE,gBAAC,KAAD,CAAMiB,UAAQ,EAAd,UACE,gBAAC,KAAKnb,KAAN,WACE,eAAC,IAAD,CAAMlB,GAAE,kCAA6Bob,EAA7B,iBAAR,SACE,+BAAIze,EAAE,oDAAN,IAA2D,eAAC,KAAD,CAAM6E,KAAK,uBACjE,wBACP,6BAAI7E,EAAE,qEAER,gBAAC,KAAKuE,KAAN,WACE,eAAC,IAAD,CAAMlB,GAAE,kCAA6Bob,EAA7B,iBAAR,SACE,+BAAIze,EAAE,oDAAN,IAA2D,eAAC,KAAD,CAAM6E,KAAK,uBACjE,wBACP,6BAAI7E,EAAE,wEMQA2f,CAA2B3f,EAAGye,KAExCtW,EAAYnI,EAAE,iDACdiF,ENJG,SAAiCjF,EAAGye,GACzC,OACE,eAAC,KAAD,CAAMiB,UAAQ,EAAd,SACE,gBAAC,KAAKnb,KAAN,WACE,eAAC,IAAD,CAAMlB,GAAE,kCAA6Bob,EAA7B,iBAAR,SACE,+BAAIze,EAAE,iDAAN,IAAwD,eAAC,KAAD,CAAM6E,KAAK,uBAC9D,wBACP,6BAAI7E,EAAE,oEMHA4f,CAAwB5f,EAAGye,IAIrC,eAAC,GAAD,CAA2BzP,UAAU,EAAMlG,UAAWA,EAAtD,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAK3B,KAAN,UACGvB,aC0GIlF,qBAAkByD,aAzIjC,YAA6E,IAAvCxD,EAAsC,EAAtCA,EAAY6D,GAA0B,EAAnCC,QAAmC,EAA1BD,OAAO3D,EAAmB,EAAnBA,SAAU6I,EAAS,EAATA,OAC3D8W,EAAUhc,EAAMkD,OAAOyH,GACvBiQ,EAAY5a,EAAMkD,OAAO6X,WACzB9V,EAAS,kCAA8B2V,GACvChL,EAAS,8CAA0CoM,GACzD,EAAgClT,oBAAS,GAAzC,mBAAOtB,EAAP,KAAiByU,EAAjB,KAEA,EAAoCvU,YAAY0T,IAAzCc,EAAP,oBAEIC,EAAkB,YAClBC,EAAgB,YAChBC,EAAwB,YACxBC,EAAgB,YAEpB,OAAQpX,GACN,IAAK,eACHiX,EAAkB,UAClB,MACF,IAAK,WACHC,EAAgB,UAChB,MACF,IAAK,oBACHC,EAAwB,UACxB,MACF,IAAK,WACHC,EAAgB,SAMpB,SAASC,EAAoBC,GAC3BP,GAAY,GAEZC,EAA0B,CACxB7W,UAAW,CAAE6C,MAAO,CAACyC,GAAIqR,EAAS9W,OAAQsX,IAC1CnU,eAAgB,CACd,CAACC,MAAO0S,GAA2B3V,UAAWwH,GAAyB+N,OAE1ErS,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,qDAAuD,CACpEuM,SAAUF,IAAMG,SAASC,eAEf,gBAAV1D,IACFxO,QAAQC,IAAIuO,GACZ+W,GAAY,OAEbpT,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACtC,gBAAVkG,IACFxO,QAAQC,IAAIuO,GACZ+W,GAAY,OAKpB,OACE,eAAC,GAAD,UACE,sBAAK3f,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAkBsgB,SAAUtgB,EAAE,oCAApD,SACE,uBAAKG,UAAU,sBAAf,UACI,gBAAC,IAAD,CAAMkD,GAAIyF,EACJ3I,UAAU,yBADhB,UAEE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAFzB,IAE0C7E,EAAE,mBAG5C,qBAAGoE,KAAMqP,EACLtT,UAAU,yBADd,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,aAF3B,IAE0C7E,EAAE,qBAE5C,gBAAC,IAAD,CAAMqD,GAAE,kCAA6Bob,EAA7B,iBAA+CoB,GACjD1f,UAAU,yBADhB,UAEE,eAAC,KAAD,CAAM0E,KAAK,WAFb,IAE0B7E,EAAE,mBAE1B+I,EACW,gBAAVA,EACC,eAAC,KAAOwX,KAAR,UACE,eAAC,KAAD,CACEjd,KAAK,OACL+H,UAAU,EACV1G,MAAOqb,EACPvX,QAAS,kBAAM2X,EAAoB,iBAJrC,SAMGpgB,EAAE,iDAIP,gBAAC,KAAOugB,KAAR,WACE,eAAC,KAAD,CACEjd,KAAK,OACL+H,SAAUA,EACV1G,MAAOqb,EACPvX,QAAS,kBAAM2X,EAAoB,iBAJrC,SAMGpgB,EAAE,+CAEL,eAAC,KAAD,CACEsD,KAAK,QACL+H,SAAUA,EACV1G,MAAOsb,EACPxX,QAAS,kBAAM2X,EAAoB,aAJrC,SAMGpgB,EAAE,2CAEL,eAAC,KAAD,CACEsD,KAAK,QACL+H,SAAUA,EACV1G,MAAOub,EACPzX,QAAS,kBAAM2X,EAAoB,sBAJrC,SAMGpgB,EAAE,oDAEL,eAAC,KAAD,CACEsD,KAAK,IACL+H,SAAUA,EACV1G,MAAOwb,EACP1X,QAAS,kBAAM2X,EAAoB,aAJrC,SAMGpgB,EAAE,8CAGP,QAITE,aCXIH,iBAAkByD,aA1HS,SAAC,GAAD,IACtCxD,EADsC,EACtCA,EAAY+K,GAD0B,EACnCjH,QADmC,EAC1BiH,cAAcmJ,EADY,EACZA,gBAAiB8C,EADL,EACKA,cAAehM,EADpB,EACoBA,OAAQa,EAD5B,EAC4BA,OAAQsI,EADpC,EACoCA,UAAWrL,EAD/C,EAC+CA,UAD/C,IAC0D0X,cAD1D,aACwEC,gBADxE,gBAGxC,gBAAC,KAAD,WACI,gBAAC,KAAKja,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGvDqgB,EACA,eAAC,KAAK3a,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyT,cACjBtS,SAAU,SAACsS,GACTtI,EAAc,gBAAiBsI,GAC/BpL,EAAgB,iBAAiB,IAEnCjH,OAAQ,kBAAMiH,EAAgB,iBAAiB,IAC/C/G,gBAAiBnN,EAAE,MAErB,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,OAAOjL,UAAU,0BAGhE,MAGJqgB,GAAUC,EACV,gBAAC,KAAKrgB,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,8BACL1E,UAAY6K,EAAOuU,4BAA+B,0BAA4B,eAC9EpU,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUuM,8BAA8Bjf,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjD,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,8BAA8BuG,UAAU,OAAOjL,UAAU,0BAGhF,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOiB,KAAQ,0BAA4B,eACvDd,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOgB,MAAS,0BAA4B,eACxDb,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,6BAI1D,GAEJ,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,WACL4G,UAAU,WACVvG,KAAK,OACL1E,UAAY6K,EAAOwM,KAAQ,0BAA4B,eACvDrM,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAIzDqgB,EACA,eAAC,KAAKpgB,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,qBACL2W,QAAS3P,EAAO8U,qBAChB,uBAAMxgB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qDAEjD,eAAC,KAAD,CAAc6E,KAAK,qBAAqBuG,UAAU,eAItD,MAGN,gBAAC,KAAK5C,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAGK3E,EAAE,gCCiLJD,qBAAkByD,aA/QjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACvC+c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WAEzBuR,EAAiBvR,EAAa,IADjB8T,EAAYC,iBAEzBpC,EAAY5a,EAAMkD,OAAO6X,WACzBiB,EAAUhc,EAAMkD,OAAOyH,GAG7B,GAFe,kCAA8BiQ,GAEZ9b,YAASmc,GAAyB,CACjE5V,UAAW,CAAEsF,GAAIqR,MADXjd,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,GAAIF,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAAO,OACT,eAAC,GAAD,UACE,6BAAI7C,EAAE,2CAIV,IAAM8gB,EAAsBhe,EAAKge,oBAGjC,OAFAvmB,QAAQC,IAAIsmB,GAGV,gBAAC,GAAD,CAA6B/X,OAAQ+X,EAAoB/X,OAAzD,UACE,gBAAC,KAAK3I,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,0CAAf,SACE,eAAC,KAAD,CAAOoG,OAAK,EAAZ,SACE,gBAAC,KAAMI,KAAP,WACE,gBAAC,KAAMpG,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,kBAEL,eAAC,KAAM6F,IAAP,UACGib,EAAoBjc,UAGzB,gBAAC,KAAMzE,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,0DAEL,eAAC,KAAM6F,IAAP,UACE,eAAC,GAAD,CAA6B4Z,aAAcqB,EAAoBrC,iBAGnE,gBAAC,KAAMre,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,4CAEL,eAAC,KAAM6F,IAAP,UAEKib,EAAoBvB,4BACnB,iCACGuB,EAAoBvB,4BAA4B1a,KACjD,+BAAK,yBAAO1E,UAAU,aAAjB,UAA+B2gB,EAAoB7U,KAAnD,MAA4D6U,EAAoB9U,cAEvFhM,EAAE,yBAIV,gBAAC,KAAMI,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,4CAEL,eAAC,KAAM6F,IAAP,UACGoE,KAAO6W,EAAoBxB,eAAenV,OAAO2C,QAGtD,gBAAC,KAAM1M,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,kDAEL,eAAC,KAAM6F,IAAP,UACE,eAAC,GAAD,CAAczC,MAAO0d,EAAoBH,mCAOrD,eAAC,KAAK9a,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,4CAAf,SACE,gBAAC,KAAD,CAAOoG,OAAK,EAAZ,UACE,gBAAC,KAAMhG,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,mBAEL,eAAC,KAAM6F,IAAP,UACGib,EAAoBzN,kBAGzB,gBAAC,KAAMjT,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG7F,EAAE,mBAEL,eAAC,KAAM6F,IAAP,UACGib,EAAoBC,uBAM/B,eAAC,KAAKlb,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,6CAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CAAMkZ,UAAQ,EAAd,SACCoB,EAAoBE,QAAQvf,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,gBAAC,KAAK2C,KAAN,WACG0F,KAAOrI,EAAK4c,WAAWrU,OAAOkU,GADjC,IACkD,wBAChD,iCAAQzc,EAAKiR,SAAWjR,EAAKiR,QAAQgK,4BAQ/CiE,EAAoBtJ,KACpB,eAAC,KAAKpX,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACI,eAAC,KAAD,CAAMP,MAAOhG,EAAE,0CAAf,SACE,eAAC,KAAKwG,KAAN,UACGsa,EAAoBtJ,aAK/B,GACF,eAAC,KAAKpX,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAD,CAAMG,MAAOhG,EAAE,2CAAf,SACE,iCACE,gBAAC,KAAD,CAAOoG,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UACG/J,EAAE,kBAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,qBAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,4CAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,4CAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,yBAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,qCAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,oBAEL,eAAC,KAAM+J,UAAP,UACG/J,EAAE,0CAIT,eAAC,KAAMwG,KAAP,UACGsa,EAAoB5d,MAAMzB,MAAM6E,KAAI,WAAWoP,GAAX,IAAG9T,EAAH,EAAGA,KAAH,OACnC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UAAY6P,EAAQ,IACpB,eAAC,KAAM7P,IAAP,UACGjE,EAAKiR,SACJ,eAAC,IAAD,CAAMxP,GAAE,8BAAyBzB,EAAKiR,QAAQrE,GAAtC,YAAR,SACG5M,EAAKiR,QAAQgK,aAIpB,eAAC,KAAMhX,IAAP,UACGjE,EAAKqf,gBAER,gBAAC,KAAMpb,IAAP,WACGjE,EAAKsf,cADR,IACyBtf,EAAKuf,WAAc,+BAAMvf,EAAKuf,aAAoB,MAE3E,eAAC,KAAMtb,IAAP,UACGjE,EAAKoD,cAER,eAAC,KAAMa,IAAP,UACGjE,EAAKwf,WAER,eAAC,KAAMvb,IAAP,UACGjE,EAAK8X,gBAER,eAAC,KAAM7T,IAAP,UACIjE,EAAKiS,eACL,eAAC,IAAD,CAAMxQ,GAAE,iCAA4BzB,EAAKiS,eAAerF,IAAxD,SACG5M,EAAKiS,eAAejB,gBACb,+BC7OvByO,GAAgC9W,OAAaC,MAAM,CAC5D3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdsf,cAAe/U,OACZG,SAAS1K,YAAE,uBACdwX,KAAMjN,OACNoW,mBAAoBpW,SAGX+W,GAAgC/W,OAAaC,MAAM,CAC9D3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdsf,cAAe/U,OACZG,SAAS1K,YAAE,uBACduf,4BAA6BhV,OAC5BG,SAAS1K,YAAE,uBACZiM,KAAM1B,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPmB,MAAOzB,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACP2M,KAAMjN,OACNoW,mBAAoBpW,SAGTgX,GAA4BhX,OAAaC,MAAM,CAC1D3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCkIDD,qBAAkByD,aAtIjC,YAAkE,IAoB5Dge,EApBsCxhB,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAChD4a,EAAY5a,EAAMkD,OAAO6X,WACzB9V,EAAS,kCAA8B2V,GACvCgB,EAAe5b,EAAMkD,OAAO0a,cAC5BtZ,EAAYnI,EAAE,mCAGhB0S,GAAW,EACX+N,GAAW,EACf,OAAQhB,GACN,IAAK,WACH/M,GAAW,EACX,MACF,IAAK,WACH+N,GAAW,EAOf,OAAQhC,GACN,IAAK,aACH+C,EAAoB,aACpB,MACF,IAAK,UACHA,EAAoB,UAMxB,MAAiC7e,YAASoc,GAAkB,CAAE7V,UAAW,CACvEsY,kBAAmBA,KADb5e,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAiCyI,YAAYyT,IAAtC0C,EAAP,oBAGA,GAAI9e,EAAS,OACX,eAAC,GAAD,CAA2B+b,SAAS,EAApC,SACE,eAAC,KAAD,CAAMxW,UAAWA,EAAjB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2B8b,SAAS,EAApC,SACE,eAAC,KAAD,CAAMxW,UAAWA,EAAjB,SACE,6BAAInI,EAAE,4DAKZ,IAGI2hB,EAHExN,EAAYrR,EAEd2I,EAAgB,CAAE5G,KAAM,GAAIG,YAAa,GAAIsa,cAAe,IAAI1b,MAUpE,MARoB,YAAhB6b,GACFhU,EAAcQ,MAAO,IAAIrI,MAAO6B,cAChCgG,EAAcO,OAAQ,IAAIpI,MAAO8H,WAAa,EAC9CiW,EAAYL,IAEZK,EAAYN,GAIZ,eAAC,GAAD,CAA2BrS,UAAU,EAArC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACEsD,cAAeA,EACfE,iBAAkBgW,EAClB/V,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACfC,EAAQ,CACR0S,UAAWA,EAAUC,cACrB7Z,KAAMgH,EAAOhH,KACbya,cAAexH,GAAejM,EAAOyT,eACrCta,YAAa6G,EAAO7G,YACpBwS,KAAM3L,EAAO2L,KACbmJ,mBAAoB9U,EAAO8U,oBAGX,YAAhBlB,IACF1T,EAAME,KAAOJ,EAAOI,KACpBF,EAAMC,MAAQH,EAAOG,MACrBD,EAAMwT,4BAA8B1T,EAAO0T,6BAG7CmC,EAAuB,CACrBxY,UAAW,CAAE6C,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAO0S,GAA2B3V,UAAWwH,GAAyB+N,OAE1ErS,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM0L,EAAK1L,EAAK8e,0BAA0Bd,oBAAoBtS,GAC9D1K,EAAQX,KAAR,kCAAwCsb,EAAxC,iBAA0DjQ,IAC1DnC,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OApCtB,SAwCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmL,EAAjC,EAAiCA,cAAe9C,EAAhD,EAAgDA,gBAAhD,OACG,eAAC,GAAD,CACEC,UAAWA,EACXqM,QAAQ,EACR9N,SAAUA,EACV+N,SAAUA,EACV1V,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfnL,OAAQA,EACRb,OAAQA,EACRlC,UAAWA,gBCvCZ/I,qBAAkByD,aAtFjC,YAAmE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACjD4a,EAAY5a,EAAMkD,OAAO6X,WACzBiB,EAAUhc,EAAMkD,OAAOyH,GACvB1F,EAAS,kCAA8B2V,EAA9B,iBAAgDoB,GACzD1X,EAAYnI,EAAE,oCAGpB,EAAiC2C,YAASmc,GAAyB,CACjE5V,UAAW,CAAEsF,GAAIqR,KADXjd,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAoCyI,YAAY0T,IAAzCc,EAAP,oBAGA,GAAInd,EAAS,OACX,eAAC,GAAD,CAA2B+b,SAAS,EAAO7V,UAAWA,EAAtD,SACE,eAAC,KAAD,CAAM9C,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EAAMC,QAAQ,UAMtC,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2B8b,SAAS,EAAM7V,UAAWA,EAArD,SACE,eAAC,KAAD,CAAM9C,MAAOmC,EAAb,SACE,6BAAInI,EAAE,4DAKZ,IAAM6hB,EAAc/e,EAAKge,oBAEzB,OACE,eAAC,GAAD,CAA2B9R,UAAU,EAAMlG,UAAWA,EAAtD,SACE,gBAAC,KAAD,WACE,eAAC,KAAK/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACEsD,cAAe,CAAE5G,KAAMgd,EAAYhd,KAAO2S,KAAMqK,EAAYrK,MAC5D7L,iBAAkB4V,GAClB3V,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACfC,EAAQ,CACRyC,GAAIqR,EACJhb,KAAMgH,EAAOhH,KACb2S,KAAM3L,EAAO2L,MAGjBuI,EAA0B,CACxB7W,UAAW,CAAE6C,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAO0S,GAA2B3V,UAAWwH,GAAyB+N,OAE1ErS,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1BtB,SA8BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmL,EAAjC,EAAiCA,cAAe9C,EAAhD,EAAgDA,gBAAhD,OACG,eAAC,GAAD,CACEsM,QAAQ,EACRzV,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfnL,OAAQA,EACRb,OAAQA,EACRlC,UAAWA,gBC7GpB,SAAS4H,KACd,IAAIoR,EAAcljB,aAAagS,QAAQ9R,EAAKxC,+CACxB,OAAhBwlB,IACFA,EAAc,SAGhB,IAAInR,EAAY,CACdzB,SAA2B,SAAhB4S,GAKb,OAFAvnB,QAAQC,IAAImW,GAELA,ECgDM5Q,I,SAAAA,iBAAkByD,aA1CjC,YAAmG,IAAvDxD,EAAsD,EAAtDA,EAAYE,GAA0C,EAAnD4D,QAAmD,EAA1C5D,UAA0C,IAAhCye,eAAgC,aAAjB3P,gBAAiB,SAChG,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIoY,EACA,eAAC,GAAD,CAAsBrc,WAAW,MACXC,SAAS,8BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAI,sCAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,+CAI/C,GAEFgP,EACA,eAAC,GAAD,CAAsB1M,WAAW,OACXC,SAAS,8BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,kCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAIjD,GAEJ,eAAC,GAAD,CAAaoO,WAAW,8CCnDzB2T,GAAqCxmB,YAAH,ufAsBlCymB,GAAmCzmB,YAAH,+LAYhC0mB,GAAiC1mB,YAAH,kRCkU5BwE,I,GAAAA,iBAAkByD,aAjUjC,YAAsD,IAAdxD,EAAa,EAAbA,EACtC,GADmD,EAAV8D,QACYnB,YAASof,GAAoC,CAChG7Y,UAAWwH,QADL9N,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAAWqL,EAAzC,EAAyCA,QAGzC,EAAsC7D,YAAY0W,IAA3CC,EAAP,oBAGM9Y,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAAoF,QAA5E/F,aAAagS,QAAQ9R,EAAKxC,+CAA4D,UAAW,YACzGoI,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAKxC,+CAA+C,GACzE8S,EAAQsB,OAJlB,SAOG1Q,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAqF,SAA7E/F,aAAagS,QAAQ9R,EAAKxC,+CAA6D,UAAW,YAC1GoI,KAAK,KACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAKxC,+CAA+C,GACzE8S,EAAQsB,OALlB,SAQG1Q,EAAE,wBAKP,GAAI4C,EAAS,OACX,eAAC,GAAD,CAAmC+b,SAAS,EAA5C,SACE,eAAC,GAAD,CAAaxW,UAAWnI,EAAE,0CAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAmC8b,SAAS,EAA5C,SACE,eAAC,GAAD,CAAaxW,UAAWnI,EAAE,0CAA1B,SACE,6BAAIA,EAAE,wDAKZ,IAAImiB,EAA2Brf,EAAK4d,8BAEpC,OAAKyB,EAAyB1gB,MAAM0E,OAelC,eAAC,GAAD,CAAmCwY,SAAS,EAA5C,SACE,eAAC,GAAD,CAAaxW,UAAWnI,EAAE,0CACxBoI,cAAegB,EACfvB,SAAUsa,EAAyBta,SACnCG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO2Y,EAAyBta,SAAS4B,WAE3CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB8W,8BAA8Bjf,MACzDoG,EAAW+B,EAAgB8W,8BAA8B7Y,SAE/D,OAAOgC,EAAS1D,OACZ,CAGEua,8BAA+B,CAC7B5W,WAAYH,EAAe+W,8BAA8B5W,WACzDrI,MAAM,GAAD,oBAAOkI,EAAe+W,8BAA8Bjf,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAtBV,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,0DACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAJcC,kBAOlB,eAAC,KAAMxD,KAAP,UACG2b,EAAyB1gB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAA6B4Z,aAAc7d,EAAK4f,qBADlCxX,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,+CAA0CzB,EAAK4M,IAAvD,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACTyI,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACd0T,EAA4B,CAAEhZ,UAAW,CACvC6C,MAAO,CACPyC,KACAU,UAAWtN,EAAKsN,WAEjBhD,eAAgB,CACf,CAACC,MAAO4V,GAAoC7Y,UAAWwH,SACvDtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACH1K,EAAKsN,SAAYlP,EAAE,sBAAuBA,EAAE,oBAAqB,CAChEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAtB1D,SAyBE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA1BYmF,kBAfzBA,4BApD1B,eAAC,GAAD,CAAmC2U,SAAS,EAA5C,SACE,eAAC,GAAD,CAAaxW,UAAWnI,EAAE,0CACZoI,cAAegB,EAD7B,SAEE,6BACKxK,aAAagS,QAA+D,SAAvD9R,EAAKxC,+CACzB0D,EAAE,kDACFA,EAAE,yDC3FHshB,GAAgC/W,OAAaC,MAAM,CAC5D3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdgF,YAAauF,SC0EFxK,iBAAkByD,aA/DO,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAgBlC,GAA7C,EAAqC+C,OAArC,EAA6C/C,WAA7C,IAAwD0X,cAAxD,gBACtC,gBAAC,KAAD,WACI,gBAAC,KAAKha,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAIzDqgB,EACA,eAAC,KAAKpgB,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,wDAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,oBACL1E,UAAY6K,EAAOwW,kBAAqB,0BAA4B,eACpErW,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,aAAd,SAAuCpD,EAAE,uBAATgK,gBAChC,yBAAQ5G,MAAM,UAAd,SAAoCpD,EAAE,oBAATgK,mBAE/B,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,4BAItE,GAEJ,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKpE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAGK3E,EAAE,gCC3CboiB,GAA6B7mB,YAAH,4PA+DjBwE,I,GAAAA,iBAAkByD,aArDjC,YAAyD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QACrCgF,EAAY,kCAClB,EAAyCyC,YAAY6W,GAA4B,CAC/EnF,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3BuZ,EAAP,oBAIA,OACE,eAAC,GAAD,CAAmCrT,UAAU,EAA7C,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kDAEjB,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAI2c,kBAAmB,aAAcxc,YAAa,IACzE2G,iBAAkB2V,GAClB1V,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBuW,EAA+B,CAAEnZ,UAAW,CAC1C6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACb2c,kBAAmB3V,EAAO2V,kBAC1Bxc,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO4V,GAAoC7Y,UAAWwH,SAE1DtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBtB,SA2BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACEwV,QAAQ,EACRzV,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBC3DrBwZ,GAAgC/mB,YAAH,6PAoGpBwE,I,MAAAA,iBAAkByD,aA1FjC,YAAiE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OAE/C0e,EAAyB1e,EAAMkD,OAAOyH,GAE5C,EAAiC7L,YAASqf,GAAkC,CAC1E9Y,UAAW,CAAC,GAAMqZ,KADZ3f,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA4CyI,YAAY+W,IAAjDE,EAAP,oBAGA,GAAI5f,EAAS,OACX,eAAC,GAAD,CAAmCoM,UAAU,EAA7C,SACE,eAAC,KAAD,CAAM7G,UAAWnI,EAAE,0CAAnB,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,UAMxB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAmCmM,UAAU,EAA7C,SACE,eAAC,KAAD,CAAM7G,UAAWnI,EAAE,0CAAnB,SACE,eAAC,KAAKwG,KAAN,UACE,6BAAIxG,EAAE,0DAMd,IAAM4P,EAAc9M,EAAKyc,4BAEzB,OACE,eAAC,GAAD,CAAmCvQ,UAAU,EAA7C,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,mDAEf,eAAC,KAAD,CACEyL,cAAe,CACb5G,KAAM+K,EAAY/K,KAClB2c,kBAAmB5R,EAAY4R,kBAC/Bxc,YAAa4K,EAAY5K,aAE3B2G,iBAAkB2V,GAClB1V,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ2W,EAAkC,CAAEtZ,UAAW,CAC7C6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACb2c,kBAAmB3V,EAAO2V,kBAC1Bxc,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACjB,CAACC,MAAO4V,GAAoC7Y,UAAWwH,SAExDtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uDAAyD,CACxEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhCtB,SAoCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACG,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UA/EE,gDCnCP2Z,GAA0BlnB,YAAH,s/BAsDvBmnB,GAAennB,YAAH,iMCGVwE,iBAAkByD,aA1CJ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,OAApB,EAA4Ba,OAA5B,EAAoC/C,UAApC,OAC3B,eAAC,KAAD,UACE,eAAC,KAAD,CAAM9C,MAAOhG,EAAE,kBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,gBAAC,KAAKpG,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACE,gBAAC,KAAK0E,MAAN,WACE,gBAAC,KAAD,CAAOG,UAAU,SACVvG,KAAK,SACL1E,UAAY6K,EAAOjC,OAAU,0BAA4B,eACzDoC,aAAa,MAHpB,UAIE,yBAAQ/H,MAAO,WAAf,SAAuCpD,EAAE,qCAATgK,gBAChC,yBAAQ5G,MAAO,mBAAf,SAA+CpD,EAAE,6CAATgK,gBACxC,yBAAQ5G,MAAO,OAAf,SAAmCpD,EAAE,iCAATgK,gBAC5B,yBAAQ5G,MAAO,YAAf,SAAwCpD,EAAE,sCAATgK,gBACjC,yBAAQ5G,MAAO,YAAf,SAAwCpD,EAAE,sCAATgK,gBACjC,yBAAQ5G,MAAO,YAAf,SAAwCpD,EAAE,sCAATgK,mBAEnC,eAAC,KAAD,CAAcnF,KAAK,SAASuG,UAAU,OAAOjL,UAAU,wBAEzD,wBAAMA,UAAU,aAAhB,UACE,eAAC,KAAD,CAAM0E,KAAK,SADb,IACwB,IACrB7E,EAAE,oEAGP,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACA,eAAC,KAAD,CACMpG,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJX,SAMOxE,EAAE,mCCKJD,qBAAkByD,aAlCjC,YAA0E,IAAzCxD,EAAwC,EAAxCA,EAAmBE,GAAqB,EAArC2D,MAAqC,EAA9BC,QAA8B,EAArB5D,UAGlD,OAHuE,EAAXkP,QAI1D,eAAC,GAAD,UACE,sBAAKjP,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,sBAAKG,UAAU,0BAGjB,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,eAD/B,SAEE,eAAC,IAAD,CAAMc,GAjBF,kBAiBJ,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,8BAAKA,EAAE,kBACP,eAAC,GAAD,CAAaoO,WAAW,4BCiKvBrO,qBAAkByD,aA7KjC,YAAgD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACtB+c,GADuC,EAAV9c,QACfmF,qBAAWrI,KAGzByd,EAFauC,EAAY9T,WAEK,IADjB8T,EAAYC,iBAGzBrS,EAAK3K,EAAMkD,OAAOyH,GAGxB,EAAiC7L,YAAS8f,GAAyB,CACjEvZ,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAsByI,YAAYmX,IAA3BC,EAAP,oBAIA,GAAI/f,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAIsI,GACZ,IAAM8f,EAAQ9f,EAAK+f,aAGnB,OACE,gBAAC,GAAD,WAEE,gBAAC,KAAKziB,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,+BAAf,SACE,eAAC,KAAD,CAAOoG,OAAK,EAAZ,SACE,gBAAC,KAAMI,KAAP,WACE,gBAAC,KAAMpG,IAAP,WACE,gBAAC,KAAM2J,UAAP,WAAkB/J,EAAE,iBAApB,QACA,eAAC,KAAM6F,IAAP,UAAY+c,EAAMxE,iBAEpB,gBAAC,KAAMhe,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM6F,IAAP,UAAY+c,EAAM/P,SAAW+P,EAAM/P,QAAQgK,cAE7C,gBAAC,KAAMzc,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,8BACpB,eAAC,KAAM6F,IAAP,UAAYoE,KAAO2Y,EAAMpE,WAAWrU,OAAOkU,iBAOrD,eAAC,KAAKxY,IAAN,CAAUU,GAAI,EAAd,SACoB,aAAhBqc,EAAM7Z,OACN,eAAC,KAAD,CACE0C,cAAe,CACb1C,OAAQ6Z,EAAM7Z,QAGhB6C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8W,EAAY,CAAEzZ,UAAW,CACvB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBzF,OAAQ8C,EAAO9C,SAEhBmD,eAAgB,CACf,CAACC,MAAO8R,OAEX7R,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,qCAAuC,CACpDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5BxB,SAgCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UA5FE,uBAiGR,eAAC,KAAD,CAAM9C,MAAOhG,EAAE,kBAAf,SACE,gBAAC,KAAKwG,KAAN,WACE,uBAAMrG,UAAU,aAAhB,SAA6B,eAAC,KAAD,CAAM0E,KAAK,YAD1C,IAC6D7E,EAAE,+CAQvE,eAAC,KAAKI,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,iBAAf,SACE,gBAAC,KAAD,CAAOoG,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,iBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACIoc,EAAM1f,MAAMzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKmS,cAER,eAAC,KAAMlO,IAAP,UACGjE,EAAKoD,cAER,gBAAC,KAAMa,IAAP,WACGjE,EAAKyS,SADR,IACkB,wBACfzS,EAAKkhB,gBAER,eAAC,KAAMjd,IAAP,UACIjE,EAAK2S,eAAkB3S,EAAK2S,eAAe1P,KAAO,KAEtD,eAAC,KAAMgB,IAAP,UACGjE,EAAKyR,iBAfMrJ,8BA0BzB4Y,EAAMG,QACP,eAAC,KAAK3iB,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,mCAAf,SACE,eAAC,KAAKwG,KAAN,UACGoc,EAAMG,gBAID,UC9IPhjB,I,eAAAA,iBAAkByD,aArCjC,YAA8E,IAAzCxD,EAAwC,EAAxCA,EAAYE,GAA4B,EAArC4D,QAAqC,EAA5B5D,UAA4B,IAAlB8O,gBAAkB,SAC3E,OACE,eAAC,GAAD,UACA,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAED,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,0BAAT,SACI,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAInD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,uBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,8BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,sCAKnD,eAAC,GAAD,CAAaoO,WAAW,qCC5CzB4U,GAA4BznB,YAAH,2dAsBzB0nB,GAA2B1nB,YAAH,0KAWxB2nB,GAAqB3nB,YAAH,yPAalB4nB,GAAwB5nB,YAAH,2OAYrB6nB,GAAyB7nB,YAAH,sOCqHpBwE,qBAAkByD,aAzJjC,YAAgD,IAAfxD,EAAc,EAAdA,EAC/B,GAD6C,EAAX8D,QACJ6I,oBAAS,IAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,iCACpB,EAAqD2C,YAASqgB,GAA2B,CACvF9Z,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAIvC,EAAiCwH,YAAY6X,IAArCC,EAAR,oBAEMja,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,+CAKZ,IAAMsjB,EAAiBxgB,EAAK4V,sBAG5B,OAAK4K,EAAe7hB,MAAM0E,OAYxB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACVC,cAAegB,EACfvB,SAAUyb,EAAezb,SACzBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO8Z,EAAezb,SAAS4B,WAEjCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB8O,sBAAsBjX,MACjDoG,EAAW+B,EAAgB8O,sBAAsB7Q,SAEvD,OAAOgC,EAAS1D,OACZ,CAGEuS,sBAAuB,CACrB5O,WAAYH,EAAe+O,sBAAsB5O,WACjDrI,MAAM,GAAD,oBAAOkI,EAAe+O,sBAAsBjX,OAA5C,aAAsDoI,IAC3DhC,aAGJ8B,MAtBtB,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACK8c,EAAe7hB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK4N,MADQxF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,IAAD,CAAMqD,GAAE,uCAAkCzB,EAAK4M,IAA/C,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAN4BgK,gBAWrCpI,EAAK2hB,aACL,eAAC,KAAM1d,IAAP,IACA,eAAC,KAAMA,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACd6U,EAAqB,CAAEna,UAAW,CAChC6C,MAAO,CACLyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAO6W,GAA2B9Z,UAAW,CAAC,SAAYgG,OAC3D9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBApB3BA,4BA/C5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACVC,cAAegB,EAD7B,SAEE,6BAC2DpJ,EAAtDkP,EAAwD,wCAA1C,gDCtEdsU,GAAwBjZ,OAAaC,MAAM,CACpD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCgDHD,iBAAkByD,aAtCA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAgBlC,GAA7C,EAAqC+C,OAArC,EAA6C/C,WAA7C,OAC/B,gBAAC,KAAD,WACI,gBAAC,KAAKtC,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAGK3E,EAAE,gCCuBJD,qBAAkByD,aAhDjC,YAAkD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC9BgF,EAAY,0BAClB,EAA6ByC,YAAY2X,IAAjCO,EAAR,oBAEA,OACE,eAAC,GAAD,CAA2BzU,UAAU,EAArC,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,qCAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkB6X,GAClB5X,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB2X,EAAiB,CAAEva,UAAW,CAC5B6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAO6W,GAA2B9Z,UAAW,CAAC,UAAY,OAE9DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBxB,SA2BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,eC4CZ/I,qBAAkByD,aApFjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACxC2K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,sCACd8I,EAAY,0BAElB,EAAiCnG,YAASsgB,GAA0B,CAClE/Z,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAgCyI,YAAY4X,IAApCO,EAAR,oBAEA,GAAI9gB,EAAS,OACX,eAAC,GAAD,CAA2BoM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2BmM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAK2V,qBAIzB,OAHAle,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA2BkM,UAAU,EAArC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClB2K,KAAMI,EAAYJ,MAEpB7D,iBAAkB6X,GAClB5X,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ6X,EAAoB,CAAExa,UAAW,CAC/B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACb2K,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAO6W,GAA2B9Z,UAAW,CAAC,UAAY,OAE9DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BxB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACG,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,eCtCZ/I,I,eAAAA,iBAAkByD,aArCjC,YAAwE,IAAzCxD,EAAwC,EAAxCA,EAAYE,GAA4B,EAArC4D,QAAqC,EAA5B5D,UAA4B,IAAlB8O,gBAAkB,SACrE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,oBAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,iBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,wBAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,+BAKnD,eAAC,GAAD,CAAaoO,WAAW,8BC5CzBuV,GAAqBpoB,YAAH,ieAuBlBqoB,GAAoBroB,YAAH,gMAajBsoB,GAActoB,YAAH,mQAeXuoB,GAAiBvoB,YAAH,qQAedwoB,GAAkBxoB,YAAH,8MC8GbwE,qBAAkByD,aA3JjC,YAAwC,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC3B,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,0BACpB,EAAqD2C,YAASghB,GAAoB,CAChFza,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA2BwH,YAAYwY,IAA/BC,EAAR,oBAEM5a,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,0CAKZ,IAAMikB,EAAWnhB,EAAK0R,gBAGtB,OAAKyP,EAASxiB,MAAM0E,OAYlB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACVC,cAAegB,EACfvB,SAAUoc,EAASpc,SACnBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOya,EAASpc,SAAS4B,WAE3BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4K,gBAAgB/S,MAC3CoG,EAAW+B,EAAgB4K,gBAAgB3M,SAEjD,OAAOgC,EAAS1D,OACZ,CAGEqO,gBAAiB,CACf1K,WAAYH,EAAe6K,gBAAgB1K,WAC3CrI,MAAM,GAAD,oBAAOkI,EAAe6K,gBAAgB/S,OAAtC,aAAgDoI,IACrDhC,aAGJ8B,MAtBtB,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,iCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,+BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBAJNgK,kBAOlB,eAAC,KAAMxD,KAAP,UACKyd,EAASxiB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAK6S,WADR,OAAgBzK,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK8S,UADQ1K,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK4N,MADQxF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,0BAA4BvB,EAAK4M,KAC7D7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdwV,EAAe,CAAE9a,UAAW,CAC1B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOwX,GAAoBza,UAAW,CAAC,SAAYgG,OACpD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAvBzBA,4BAjD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACVC,cAAegB,EAD7B,SAEE,6BACoDpJ,EAA/CkP,EAAiD,iCAAnC,yCCpEdgV,GAAkB3Z,OAAaC,MAAM,CAC9C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdyU,WAAYlK,OACTM,IAAI,KACJsZ,UAAUnkB,YAAE,+BACZ0K,SAAS1K,YAAE,yBCyGHD,qBAAkByD,aA/FjC,YAA0C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACvBgF,EAAY,oBAClB,EAA8ByC,YAAYsY,IAAlCO,EAAR,oBAEA,OACE,eAAC,GAAD,CAAqBpV,UAAU,EAA/B,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,8BAAf,SACE,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI4P,WAAY,GAAIC,SAAU,KAAMlF,KAAM,IACjE7D,iBAAkBuY,GAClBtY,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBsY,EAAkB,CAAElb,UAAW,CAC7B6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACb4P,WAAY5I,EAAO4I,WACnBC,SAAU7I,EAAO6I,SACjBlF,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOwX,GAAoBza,UAAW,CAAC,UAAY,OAEvDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,sCAAwC,CACrDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzB1B,SA6BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,gBAAC,KAAD,WACI,gBAAC,KAAKxE,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,+BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,aACL1E,UAAY6K,EAAOyJ,WAAc,0BAA4B,eAC7DtJ,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,aAAauG,UAAU,OAAOjL,UAAU,wBAE7D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,WACL1E,UAAY6K,EAAO0J,SAAY,0BAA4B,eAC3DvJ,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,KAAd,SAAoBpD,EAAE,gCACtB,yBAAQoD,MAAM,KAAd,SAAoBpD,EAAE,mCAExB,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,uCCwDhBD,qBAAkByD,aAtIjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC/B0K,EAAK3K,EAAMkD,OAAOyH,GAClB1F,EAAY,oBACZX,EAAYnI,EAAE,+BACpB,EAAiC2C,YAASihB,GAAmB,CAC3D1a,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA0ByI,YAAYuY,IAA9BO,EAAR,oBAEA,GAAIzhB,EAAS,OACX,eAAC,GAAD,CAAqBoM,UAAU,EAA/B,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAqBmM,UAAU,EAA/B,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,wCAKZ,IAAM4P,EAAc9M,EAAKyR,eAIzB,OAHAha,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAAqBkM,UAAU,EAA/B,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClB4P,WAAY7E,EAAY6E,WACxBC,SAAU9E,EAAY8E,SACtBlF,KAAMI,EAAYJ,MAEpB7D,iBAAkBuY,GAClBtY,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZwY,EAAc,CAAEnb,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACb4P,WAAY5I,EAAO4I,WACnBC,SAAU7I,EAAO6I,SACjBlF,KAAM3D,EAAO2D,OAEdtD,eAAgB,CACf,CAACC,MAAOwX,GAAoBza,UAAW,CAAC,UAAY,OAEvDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlC1B,SAsCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,+BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,aACL1E,UAAY6K,EAAOyJ,WAAc,0BAA4B,eAC7DtJ,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,aAAauG,UAAU,OAAOjL,UAAU,wBAE7D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,WACL1E,UAAY6K,EAAO0J,SAAY,0BAA4B,eAC3DvJ,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,KAAd,SAAoBpD,EAAE,gCACtB,yBAAQoD,MAAM,KAAd,SAAoBpD,EAAE,mCAExB,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOwE,KAAQ,0BAA4B,eACvDrE,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,uCC1FlBD,qBAAkByD,aAtCjC,YAA+I,IAAvGxD,EAAsG,EAAtGA,EAAY6L,GAA0F,EAAnG/H,QAAmG,EAA1F+H,QAAQb,EAAkF,EAAlFA,OAAcD,GAAoE,EAA1EjI,KAA0E,EAApEiI,cAAoE,IAAtDmJ,uBAAsD,MAAtC,SAAAtL,GAAC,OAAEA,GAAmC,MAAhCoO,qBAAgC,MAAlB,SAAApO,GAAC,OAAEA,GAAe,EAC5I,OAD4I,EAAXwG,QAE/H,gBAAC,KAAD,WACE,gBAAC,KAAKnE,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,aAAa,MAGjC,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,wBAE5D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOuZ,QAAW,0BAA4B,eAC1DxX,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,MAG/B,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,eAAC,KAAD,CACE2G,OAAK,EACLnC,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EALZ,SAOG/K,EAAE,+CCmCID,I,GAAAA,iBAAkByD,aA7DjC,YAAyE,IAAlCxD,EAAiC,EAAjCA,EAAYE,GAAqB,EAA9B4D,QAA8B,EAArB5D,UAAUkP,EAAW,EAAXA,QACrDkV,EAAYra,OAASua,QAAQ,SAC7BD,EAAYta,OAASwa,MAAM,SAEjC,OACE,eAAC,GAAD,UACE,sBAAKtkB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAtB,SACE,sBAAKG,UAAU,0BAOjB,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UAEE,eAAC,KAAD,CACEkF,cAAe,CACb6Y,UAAW,IAAI1gB,KAAK0gB,GACpBC,QAAS,IAAI3gB,KAAK2gB,IAEpB3Y,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,eAEZ4U,EAAQ,CACNkV,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,WAEjCzY,GAAc,IAZlB,SAgBG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmI,EAAjC,EAAiCA,QAASC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OACD,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTC,aAAcA,EACdC,gBAAiBA,EACjB8C,cAAeA,OAInB,wBAAM,wBAAM,wBACZ,8BAAKhX,EAAE,kBACP,eAAC,GAAD,CAAaoO,WAAW,sCCzEzBsW,GAAwCnpB,YAAH,ubC0GnCwE,I,MAAAA,iBAAkByD,aA9EjC,YAA2D,IAAzBxD,EAAwB,EAAxBA,EAC1BmI,GADkD,EAArBmK,SAAqB,EAAXxO,QAC3B9D,EAAE,mCACdskB,EAAYra,OAASua,QAAQ,SAC7BD,EAAYta,OAASwa,MAAM,SAKjC,EAA0C9hB,YAAS+hB,GAAuC,CACxFxb,UAAW,CACTob,UAAWxM,GAAewM,GAC1BC,QAASzM,GAAeyM,IAE1B/R,YAAa,iBALP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAQ9B,GAAIxM,EAAS,OACX,eAAC,GAAD,CAA4BwM,QAASA,EAArC,SACE,eAAC,GAAD,CAAajH,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA4BuM,QAASA,EAArC,SACE,eAAC,GAAD,CAAajH,UAAWA,EAAxB,SACE,6BAAInI,EAAE,gDAKZ,IAAM2kB,EAAkB7hB,EAAK8hB,6BAG7B,OAAKD,EAAgB7hB,KAAKqD,OAWxB,eAAC,GAAD,CAA4BiJ,QAASA,EAArC,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,kCACd6H,SAAU8c,EAAgB9c,SAC1BS,aAAa,EAFzB,SAIE,gBAAC,KAAD,CAAOlC,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,iCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,6CACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBAJNgK,kBAOlB,eAAC,KAAMxD,KAAP,UACGme,EAAgB7hB,KAAKwD,KAAI,gBAAEiO,EAAF,EAAEA,eAAgBqD,EAAlB,EAAkBA,WAAYD,EAA9B,EAA8BA,gBAA9B,OACxB,gBAAC,KAAMvX,IAAP,WACE,eAAC,KAAMyF,IAAP,UAAY0O,EAAe1P,OAC3B,gBAAC,KAAMgB,IAAP,WAAY0O,EAAeE,WAA3B,QACA,eAAC,KAAM5O,IAAP,UAAY8R,IACZ,eAAC,KAAM9R,IAAP,UAAY+R,mBA9BxB,eAAC,GAAD,CAA4BxI,QAASA,EAArC,SACE,eAAC,GAAD,CAAajH,UAAWA,EAAxB,SACE,6BACGnI,EAAE,iDCpDP6kB,G,oDACJ,WAAY/c,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,uBACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EAGf6G,GAFQlH,KAAKmI,MAAMjE,MACTlE,KAAKmI,MAAMhE,QACT9D,EAAE,2BAEpB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,+BACNA,EAAE,mCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,gCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,iCACNA,EAAE,qCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,kCAIjD,eAAC,GAAD,CAAsBtE,WAAW,OACXC,SAAS,oBAD/B,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,+BACNA,EAAE,mCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,kCAKnD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,2BACNA,EAAE,+BACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,0C,GA1DrC8B,aAsEX3I,iBAAkByD,YAAWqhB,K,oBCtF/BC,GAA6BvpB,YAAH,6LAW1BwpB,GAA+BxpB,YAAH,iMCI1BwE,kBATS,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OACtB,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,WACHlD,UAAU,oBADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,yBCKpEpB,aAAagS,QAAQ9R,EAAKvC,4BAC7BhC,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKvC,yBAA0B0N,OAASE,OAAO,UAmDvDpK,qBAAkByD,aAhDjC,YAAoF,IAAjDxD,EAAgD,EAAhDA,EAAYE,GAAoC,EAA7C4D,QAA6C,EAApC5D,UAAU+L,EAA0B,EAA1BA,KAA0B,IAApB+Y,mBAAoB,MAAR,SAAApc,GAAC,OAAEA,GAAK,EACjF,OACE,eAAC,GAAD,UACE,sBAAKzI,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAkBsgB,SAAUtgB,EAAE,uBAAyB,IAAMiM,EAAnF,SACE,uBAAK9L,UAAU,sBAAf,UACE,eAAC,GAAD,IACA,gBAAC,KAAOogB,KAAR,CAAapgB,UAAU,2CAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN8D,QAAU,WACR,IAAIwc,EAAeC,SAAStmB,aAAagS,QAAQ9R,EAAKvC,2BAA6B,EACnFqC,aAAaC,QAAQC,EAAKvC,yBAA0B0oB,GAEpDD,EAAYC,MAEhB,eAAC,KAAD,CACE3hB,KAAK,SACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0c,EAAclb,OAASE,OAAO,QAClCvL,aAAaC,QAAQC,EAAKvC,yBAA0B4oB,GAEpDH,EAAYG,MAEhB,eAAC,KAAD,CACE7hB,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI2c,EAAWF,SAAStmB,aAAagS,QAAQ9R,EAAKvC,2BAA6B,EAC/EqC,aAAaC,QAAQC,EAAKvC,yBAA0B6oB,GAEpDJ,EAAYI,cAKtB,eAAC,KAAKhlB,IAAN,UACGF,eC8IEH,I,SAAAA,iBAAkByD,aAxLjC,YAA8C,IAAD,IAAdxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC1B8c,EAAc3X,qBAAWrI,IAGzBqL,GAFa2U,EAAY9T,WACZ8T,EAAYC,iBAClBjiB,aAAagS,QAAQ9R,EAAKvC,2BACjC8oB,EAAoB,wCAA0CpZ,EAC9DqZ,EAAkB,sCAAwCrZ,EAEhE,EAAyBV,YAAY/P,GAA9BgY,EAAP,oBAEA,EAKK7Q,YAASmiB,GAA4B,CACxC5b,UAAW,CAAE+C,KAAMA,KALVsZ,EADX,EACE3iB,QACO4iB,EAFT,EAEE3iB,MACM4iB,EAHR,EAGE3iB,KACS4iB,EAJX,EAIEtW,QAKF,EAKKzM,YAASoiB,GAA8B,CAC1C7b,UAAW,CAAE+C,KAAMA,KALV0Z,EADX,EACE/iB,QACOgjB,EAFT,EAEE/iB,MACMgjB,EAHR,EAGE/iB,KACSgjB,EAJX,EAIE1W,QAMF,GAAImW,GAAeI,EACjB,OACE,eAAC,GAAD,CAAwB1Z,KAAMA,EAA9B,SACGjM,EAAE,+BAKT,GAAIwlB,GAAaI,EACf,OACE,eAAC,GAAD,CAAwB3Z,KAAMA,EAA9B,SACGjM,EAAE,8BAUTzF,QAAQC,IAAIirB,GACZlrB,QAAQC,IAAIqrB,GAEZ,IAAME,EAAkB/lB,EAAE,kCACpBgmB,EAAkBP,EAASQ,8BAA8BnjB,KAC/DvI,QAAQC,IAAI,oBACZ,EAAAD,SAAQC,IAAR,SAAYurB,GAAZ,oBAAgCC,KAEhC,IAAME,EAAoBlmB,EAAE,oCACtBmmB,EAAoBN,EAAWO,gCAAgCtjB,KAKrE,OAJAvI,QAAQC,IAAI,sBACZ,EAAAD,SAAQC,IAAR,SAAYurB,GAAZ,oBAAgCI,KAI9B,gBAAC,GAAD,CAAwBla,KAAMA,EAAM+Y,YApBtC,SAAqB/Y,GACnB6Z,EAAc,CAAC7Z,KAAMA,IACrByZ,EAAY,CAACzZ,KAAMA,KAkBnB,UAEI,eAAC,KAAKpG,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,iBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACE6f,MAAO,CAAEC,OAAQ,SACjBxjB,KAAM,CACJyjB,EAAG,IACHC,QAAS,CAEP,CAAE,IACAxmB,EAAE,iCACFA,EAAE,kCACFA,EAAE,+BACFA,EAAE,+BACFA,EAAE,6BACFA,EAAE,8BACFA,EAAE,8BACFA,EAAE,gCACFA,EAAE,mCACFA,EAAE,iCACFA,EAAE,kCACFA,EAAE,kCAdG,CAgBL,QAhBK,oBAgBMgmB,IAhBN,CAiBL,UAjBK,oBAiBQG,KAEjB3hB,KAAM,OACNhD,OAAQ,CAAC,CAAC,QAAS,CAAC,WACpBilB,OAAQ,CACNC,KAAMD,KAAM,KACZ/lB,OAAQ+lB,KAAM,OAEhBE,MAAO,CAELD,KAAMX,EACNrlB,OAAQwlB,IAIZU,KAAM,CACJC,EAAG,CACDjK,QAAS,CACPkK,OAAQ,GAEVC,MAAM,GAERR,EAAG,CACD3J,QAAS,CACPoK,KAAM,EACNC,MAAO,GAETziB,KAAM,WACNuiB,MAAM,IAGVG,QAAS,CACP/c,OAAQ,CACNnE,MAAO,SAASugB,GACd,MAAO,MAIb3J,QAAS,CACPkK,OAAQ,EAERG,OAAQ,GAEVE,MAAO,CACLJ,MAAM,WAMhB,gBAAC,KAAKlhB,IAAN,CAAUU,GAAI,EAAd,UAEE,eAAC,KAAD,CACEO,OAAK,EACLnC,MAAM,YACNyiB,cAAc,IACd9jB,KAAK,iBACLmF,QAAS,kBAAM8K,GACbC,EAAgB1P,EAASwhB,IAN7B,SASGtlB,EAAE,2CAGL,eAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,YACNyiB,cAAc,IACd9jB,KAAK,iBACLmF,QAAS,kBAAM8K,GACbC,EAAgB1P,EAASuhB,IAN7B,SASGrlB,EAAE,uDCtLFqnB,GAA0B9rB,YAAH,yKAWvB+rB,GAA6B/rB,YAAH,+KAW1BgsB,GAAwBhsB,YAAH,qKCP7BqD,aAAagS,QAAQ9R,EAAKtC,wBAC7BjC,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKtC,qBAAsByN,OAASE,OAAO,UAmDnDpK,qBAAkByD,aAhDjC,YAAgF,IAAjDxD,EAAgD,EAAhDA,EAAYE,GAAoC,EAA7C4D,QAA6C,EAApC5D,UAAU+L,EAA0B,EAA1BA,KAA0B,IAApB+Y,mBAAoB,MAAR,SAAApc,GAAC,OAAEA,GAAK,EAC7E,OACE,eAAC,GAAD,UACE,sBAAKzI,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAkBsgB,SAAUtgB,EAAE,mBAAqB,IAAMiM,EAA/E,SACE,uBAAK9L,UAAU,sBAAf,UACE,eAAC,GAAD,IACA,gBAAC,KAAOogB,KAAR,CAAapgB,UAAU,2CAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN8D,QAAU,WACR,IAAIwc,EAAeC,SAAStmB,aAAagS,QAAQ9R,EAAKtC,uBAAyB,EAC/EoC,aAAaC,QAAQC,EAAKtC,qBAAsByoB,GAEhDD,EAAYC,MAEhB,eAAC,KAAD,CACE3hB,KAAK,SACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0c,EAAclb,OAASE,OAAO,QAClCvL,aAAaC,QAAQC,EAAKtC,qBAAsB2oB,GAEhDH,EAAYG,MAEhB,eAAC,KAAD,CACE7hB,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI2c,EAAWF,SAAStmB,aAAagS,QAAQ9R,EAAKtC,uBAAyB,EAC3EoC,aAAaC,QAAQC,EAAKtC,qBAAsB4oB,GAEhDJ,EAAYI,cAKtB,eAAC,KAAKhlB,IAAN,UACGF,eCsKEH,I,MAAAA,iBAAkByD,aAhNjC,YAA0C,IAAD,MAAdxD,EAAc,EAAdA,EACnB4gB,GADiC,EAAX9c,QACRmF,qBAAWrI,KAGzBqL,GAFa2U,EAAY9T,WACZ8T,EAAYC,iBAClBjiB,aAAagS,QAAQ9R,EAAKtC,uBAIvC,EAAyB+O,YAAY/P,GAErC,GAFA,oBAOKmH,YAAS0kB,GAAyB,CACrCne,UAAW,CAAE+C,KAAMA,MALVub,EADX,EACE5kB,QACO6kB,EAFT,EAEE5kB,MACM6kB,EAHR,EAGE5kB,KACS6kB,EAJX,EAIEvY,QAKF,EAKKzM,YAAS2kB,GAA4B,CACxCpe,UAAW,CAAE+C,KAAMA,KALV2b,EADX,EACEhlB,QACOilB,EAFT,EAEEhlB,MACMilB,EAHR,EAGEhlB,KACSilB,EAJX,EAIE3Y,QAKF,EAKKzM,YAAS4kB,GAAuB,CACnCre,UAAW,CAAE+C,KAAMA,KALV+b,EADX,EACEplB,QACOqlB,EAFT,EAEEplB,MACMqlB,EAHR,EAGEplB,KACSqlB,EAJX,EAIE/Y,QAMF,GAAIoY,GAAgBI,GAAmBI,EACrC,OACE,eAAC,GAAD,CAAoB/b,KAAMA,EAA1B,SACGjM,EAAE,+BAKT,GAAIynB,GAAcI,GAAiBI,EACjC,OACE,eAAC,GAAD,CAAoBhc,KAAMA,EAA1B,SACGjM,EAAE,8BAWTzF,QAAQC,IAAIktB,GACZntB,QAAQC,IAAIstB,GAEZ,IAAMM,EAAmBpoB,EAAE,+BACrBqoB,EAAmBX,EAAUY,oBAAoBxlB,KACvDvI,QAAQC,IAAI,qBACZ,EAAAD,SAAQC,IAAR,SAAY4tB,GAAZ,oBAAiCC,KAEjC,IAAME,EAAsBvoB,EAAE,kCACxBwoB,EAAsBV,EAAaW,uBAAuB3lB,KAChEvI,QAAQC,IAAI,wBACZ,EAAAD,SAAQC,IAAR,SAAY+tB,GAAZ,oBAAoCC,KAEpC,IAAME,EAAiB1oB,EAAE,6BACnB2oB,EAAiBT,EAAQU,kBAAkB9lB,KAKjD,OAJAvI,QAAQC,IAAI,mBACZ,EAAAD,SAAQC,IAAR,SAAYkuB,GAAZ,oBAA+BC,KAI7B,gBAAC,GAAD,CAAoB1c,KAAMA,EAAM+Y,YA1BlC,SAAqB/Y,GACnB0b,EAAa,CAAC1b,KAAMA,IACpB8b,EAAgB,CAAC9b,KAAMA,IACvBkc,EAAW,CAAClc,KAAMA,KAuBlB,UAEI,eAAC,KAAKpG,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CAAMP,MAAOhG,EAAE,iBAAf,UACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACE6f,MAAO,CAAEC,OAAQ,SACjBxjB,KAAM,CACJyjB,EAAG,IACHC,QAAS,CAEP,CAAE,IACAxmB,EAAE,iCACFA,EAAE,kCACFA,EAAE,+BACFA,EAAE,+BACFA,EAAE,6BACFA,EAAE,8BACFA,EAAE,8BACFA,EAAE,gCACFA,EAAE,mCACFA,EAAE,iCACFA,EAAE,kCACFA,EAAE,kCAdG,CAgBL,SAhBK,oBAgBOqoB,IAhBP,CAiBL,YAjBK,oBAiBUG,IAjBV,CAkBL,OAlBK,oBAkBKG,KAEdnkB,KAAM,MAINhD,OAAQ,CAAC,CAAC,WAAY,QACtBilB,OAAQ,CACNoC,MAAOpC,KAAM,KACbqC,SAAUrC,KAAM,MAChBsC,IAAKtC,KAAM,QAEbE,MAAO,CAELkC,MAAOT,EACPU,SAAUP,EACVQ,IAAKL,IAIT9B,KAAM,CACJC,EAAG,CACDjK,QAAS,CACPkK,OAAQ,GAEVC,MAAM,GAERR,EAAG,CACD3J,QAAS,CACPoK,KAAM,EACNC,MAAO,GAETziB,KAAM,WACNuiB,MAAM,IAGVG,QAAS,CACP/c,OAAQ,CACNnE,MAAO,SAASugB,GACd,MAAO,MAIb3J,QAAS,CACPkK,OAAQ,EAERG,OAAQ,GAEVE,MAAO,CACLJ,MAAM,OAIZ,eAAC,KAAKve,OAAN,UACGxI,EAAE,4CAIT,eAAC,KAAK6F,IAAN,CAAUU,GAAI,WCvLTyiB,GAA+BztB,YAAH,iMAW5B0tB,GAAiC1tB,YAAH,qMCItCqD,aAAagS,QAAQ9R,EAAKrC,8BAC7BlC,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKrC,2BAA4BwN,OAASE,OAAO,UAmDzDpK,qBAAkByD,aAhDjC,YAAqF,IAAhDxD,EAA+C,EAA/CA,EAAYE,GAAmC,EAA5C4D,QAA4C,EAAnC5D,UAAU+L,EAAyB,EAAzBA,KAAyB,IAAnB+Y,mBAAmB,MAAP,SAAApc,GAAC,OAAEA,GAAI,EAClF,OACE,eAAC,GAAD,UACE,sBAAKzI,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAkBsgB,SAAUtgB,EAAE,yBAA2B,IAAMiM,EAArF,SACE,uBAAK9L,UAAU,sBAAf,UACE,eAAC,GAAD,IACA,gBAAC,KAAOogB,KAAR,CAAapgB,UAAU,2CAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN8D,QAAU,WACR,IAAIwc,EAAeC,SAAStmB,aAAagS,QAAQ9R,EAAKrC,6BAA+B,EACrFmC,aAAaC,QAAQC,EAAKrC,2BAA4BwoB,GAEtDD,EAAYC,MAEhB,eAAC,KAAD,CACE3hB,KAAK,SACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0c,EAAclb,OAASE,OAAO,QAClCvL,aAAaC,QAAQC,EAAKrC,2BAA4B0oB,GAEtDH,EAAYG,MAEhB,eAAC,KAAD,CACE7hB,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI2c,EAAWF,SAAStmB,aAAagS,QAAQ9R,EAAKrC,6BAA+B,EACjFmC,aAAaC,QAAQC,EAAKrC,2BAA4B2oB,GAEtDJ,EAAYI,cAKtB,eAAC,KAAKhlB,IAAN,UACGF,eC+IEH,I,GAAAA,iBAAkByD,aAzLjC,YAAgD,IAAD,IAAdxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC5B8c,EAAc3X,qBAAWrI,IAGzBqL,GAFa2U,EAAY9T,WACZ8T,EAAYC,iBAClBjiB,aAAagS,QAAQ9R,EAAKrC,6BACjC4oB,EAAoB,0CAA4CpZ,EAChEqZ,EAAkB,wCAA0CrZ,EAElE,EAAyBV,YAAY/P,GAA9BgY,EAAP,oBAEA,EAKK7Q,YAASqmB,GAA8B,CAC1C9f,UAAW,CAAE+C,KAAM,QALVsZ,EADX,EACE3iB,QACO4iB,EAFT,EAEE3iB,MACM4iB,EAHR,EAGE3iB,KACS4iB,EAJX,EAIEtW,QAKF,EAKKzM,YAASsmB,GAAgC,CAC5C/f,UAAW,CAAE+C,KAAM,QALV0Z,EADX,EACE/iB,QACOgjB,EAFT,EAEE/iB,MACMgjB,EAHR,EAGE/iB,KACSgjB,EAJX,EAIE1W,QAMF,GAAImW,GAAeI,EACjB,OACE,eAAC,GAAD,CAA0B1Z,KAAMA,EAAhC,SACGjM,EAAE,+BAKT,GAAIwlB,GAAaI,EACf,OACE,eAAC,GAAD,CAA0B3Z,KAAMA,EAAhC,SACGjM,EAAE,8BAWTzF,QAAQC,IAAIirB,GACZlrB,QAAQC,IAAIqrB,GAEZ,IAAME,EAAkB/lB,EAAE,oCACpBgmB,EAAkBP,EAASyD,gCAAgCpmB,KACjEvI,QAAQC,IAAI,oBACZ,EAAAD,SAAQC,IAAR,SAAYurB,GAAZ,oBAAgCC,KAEhC,IAAME,EAAoBlmB,EAAE,sCACtBmmB,EAAoBN,EAAWsD,kCAAkCrmB,KAKvE,OAJAvI,QAAQC,IAAI,sBACZ,EAAAD,SAAQC,IAAR,SAAYurB,GAAZ,oBAAgCI,KAI9B,gBAAC,GAAD,CAA0Bla,KAAMA,EAAM+Y,YApBxC,SAAqB/Y,GACnB6Z,EAAc,CAAC7Z,KAAMA,IACrByZ,EAAY,CAACzZ,KAAMA,KAkBnB,UAEI,eAAC,KAAKpG,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,iBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACE6f,MAAO,CAAEC,OAAQ,SACjBxjB,KAAM,CACJyjB,EAAG,IACHC,QAAS,CAEP,CAAE,IACAxmB,EAAE,iCACFA,EAAE,kCACFA,EAAE,+BACFA,EAAE,+BACFA,EAAE,6BACFA,EAAE,8BACFA,EAAE,8BACFA,EAAE,gCACFA,EAAE,mCACFA,EAAE,iCACFA,EAAE,kCACFA,EAAE,kCAdG,CAgBL,QAhBK,oBAgBMgmB,IAhBN,CAiBL,UAjBK,oBAiBQG,KAEjB3hB,KAAM,OACNhD,OAAQ,CAAC,CAAC,QAAS,CAAC,WACpBilB,OAAQ,CACNC,KAAMD,KAAM,KACZ/lB,OAAQ+lB,KAAM,OAEhBE,MAAO,CAELD,KAAMX,EACNrlB,OAAQwlB,IAIZU,KAAM,CACJC,EAAG,CACDjK,QAAS,CACPkK,OAAQ,GAEVC,MAAM,GAERR,EAAG,CACD3J,QAAS,CACPoK,KAAM,EACNC,MAAO,GAETziB,KAAM,WACNuiB,MAAM,IAGVG,QAAS,CACP/c,OAAQ,CACNnE,MAAO,SAASugB,GACd,MAAO,MAIb3J,QAAS,CACPkK,OAAQ,EAERG,OAAQ,GAEVE,MAAO,CACLJ,MAAM,WAMhB,gBAAC,KAAKlhB,IAAN,CAAUU,GAAI,EAAd,UAEE,eAAC,KAAD,CACEO,OAAK,EACLnC,MAAM,YACNyiB,cAAc,IACd9jB,KAAK,iBACLmF,QAAS,kBAAM8K,GACbC,EAAgB1P,EAASwhB,IAN7B,SASGtlB,EAAE,6CAGL,eAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,YACNyiB,cAAc,IACd9jB,KAAK,iBACLmF,QAAS,kBAAM8K,GACbC,EAAgB1P,EAASuhB,IAN7B,SASGrlB,EAAE,yDCvLFopB,GAAwB7tB,YAAH,+hCC8DnBwE,qBAAkByD,aAhDjC,YAAiF,IAA7CxD,EAA4C,EAA5CA,EAAoBgL,GAAwB,EAAzClH,QAAyC,EAAhC+H,OAAgC,EAAxBb,QAAQD,EAAgB,EAAhBA,aAC9D,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,OACL1E,UAAY6K,EAAOiB,KAAQ,0BAA4B,eACvDd,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,QACL1E,UAAY6K,EAAOgB,MAAS,0BAA4B,eACxDb,aAAa,MAHnB,UASE,yBAAQ/H,MAAM,KAAd,SAA+BpD,EAAE,4BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,6BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,0BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,0BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,wBAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,yBAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,yBAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,2BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,8BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,4BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,6BAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,6BAATgK,mBAE1B,eAAC,KAAD,CAAcnF,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,eAAC,KAAD,CACE2G,OAAK,EACLnC,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EALZ,SAOG/K,EAAE,0CCxDJ,SAASqpB,KAUd,MAAO,CACLC,cAVkBxR,G5F8Bf,SAA0B7L,EAAMD,GACnC,IAAMud,EAAgBtf,KAAO,GAAD,OAAIgC,EAAJ,YAAYD,EAAZ,QAAwBwY,QAAQ,SAC5D,OAAO,IAAI5gB,KAAK2lB,G4FhCiBC,CACjC5qB,aAAagS,QAAQ9R,EAAKpC,0BAC1BkC,aAAagS,QAAQ9R,EAAKnC,6BAS1B8sB,eAPmB3R,G5FgChB,SAAyB7L,EAAMD,GAClC,IAAMud,EAAgBtf,KAAO,GAAD,OAAIgC,EAAJ,YAAYD,EAAZ,QAAwByY,MAAM,SAC1D,OAAO,IAAI7gB,KAAK2lB,G4FlCkBG,CAClC9qB,aAAagS,QAAQ9R,EAAKpC,0BAC1BkC,aAAagS,QAAQ9R,EAAKnC,8BC6FfoD,qBAAkByD,aA5EjC,YAAuF,IAApDxD,EAAmD,EAAnDA,EAAYE,GAAuC,EAAhD4D,QAAgD,EAAvC5D,UAAU+L,EAA6B,EAA7BA,KAAMD,EAAuB,EAAvBA,MAAuB,IAAhBoD,eAAgB,MAAR,SAAAxG,GAAC,OAAEA,GAAK,EACpF,OACE,eAAC,GAAD,UACE,sBAAKzI,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iBAAkBsgB,SAAUtgB,EAAE,6BAA+B,IAAMiM,EAAO,IAAMD,EAAtG,SACE,sBAAK7L,UAAU,sBAAf,SACE,eAAC,GAAD,QAgCJ,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,eAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,SACA,eAAC,KAAD,CACIkF,cAAe,CACbQ,KAAMrN,aAAagS,QAAQ9R,EAAKpC,0BAChCsP,MAAOpN,aAAagS,QAAQ9R,EAAKnC,4BAEnCiP,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,eACZoE,aAAaC,QAAQC,EAAKpC,yBAA0BmP,EAAOI,MAC3DrN,aAAaC,QAAQC,EAAKnC,0BAA2BkP,EAAOG,OAE5D,IAAM2d,EAAgBN,KACtBja,EAAQua,GACR7d,GAAc,IAZpB,SAgBK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACD,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,uBCjErBjN,aAAagS,QAAQ9R,EAAKpC,4BAC7BnC,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKpC,yBAA0BuN,OAASE,OAAO,SACpEvL,aAAaC,QAAQC,EAAKnC,0BAA2BsN,OAASE,OAAO,QA0HxDpK,IC3IX6pB,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GACAC,GACAC,GD8HWxqB,iBAAkByD,aAvHjC,YAA8C,IAAfxD,EAAc,EAAdA,EACvB4gB,GADqC,EAAX9c,QACZmF,qBAAWrI,KAGzBqL,GAFa2U,EAAY9T,WACZ8T,EAAYC,iBAClBjiB,aAAagS,QAAQ9R,EAAKpC,2BACjCsP,EAAQpN,aAAagS,QAAQ9R,EAAKnC,2BAClCwL,EAAYnI,EAAE,6BAEd2pB,EAAgBN,KAEtB,EAAyB9d,YAAY/P,GACrC,GADA,oBACqDmH,YAASymB,GAAuB,CACnFlgB,UAAWygB,KADL/mB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAIvC,GAAInB,EACF,OACE,eAAC,GAAD,CAAwBqJ,KAAMA,EAA9B,SACGjM,EAAE,+BAKT,GAAI6C,EACF,OACE,eAAC,GAAD,CAAwBoJ,KAAMA,EAA9B,SACGjM,EAAE,8BAKTzF,QAAQC,IAAIsI,GACZ,IAAI0nB,EAAqB1nB,EAAK0nB,mBAG9B,OACE,eAAC,GAAD,CAAwBve,KAAMA,EAAMD,MAAOA,EAAOoD,QAASA,EAA3D,SACE,eAAC,GAAD,CAAajH,UAAWA,EAEpBG,aAAa,EACbT,SAAU2iB,EAAmB3iB,SAC7BG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOghB,EAAmB3iB,SAAS4B,WAErCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4gB,mBAAmB/oB,MAC9CoG,EAAW+B,EAAgB4gB,mBAAmB3iB,SAEpD,OAAOgC,EAAS1D,OACZ,CAGEqkB,mBAAoB,CAClB1gB,WAAYH,EAAe6gB,mBAAmB1gB,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAe6gB,mBAAmB/oB,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAvBZ,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,uBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKgkB,EAAmB/oB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAK6oB,sBAAsB5lB,KAD9B,IACoC,wBAClC,wBAAO1E,UAAU,aAAjB,SACGyB,EAAK0iB,eAGV,eAAC,KAAMze,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAE,8BAAyBzB,EAAKiR,QAAQrE,GAAtC,aAAR,SACG5M,EAAKiR,QAAQgK,aAGlB,gBAAC,KAAMhX,IAAP,WACE,eAAC,KAAD,CAAM6Z,UAAQ,EAAd,SACG9d,EAAKiR,QAAQ6X,YAAYjpB,OAASG,EAAKiR,QAAQ6X,YAAYjpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpE,gBAAC,KAAK2C,KAAN,WACE,eAAC,KAAD,CAAMM,KAAK,gBADb,IACgC,IAC7BjD,EAAK6oB,sBAAsB5lB,KAF9B,IAEoC,wBAClC,wBAAO1E,UAAU,aAAjB,SACGyB,EAAK0iB,oBAKd,eAAC,KAAD,CAAM5E,UAAQ,EAAd,SACG9d,EAAKiR,QAAQ8X,cAAclpB,OAASG,EAAKiR,QAAQ8X,cAAclpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxE,gBAAC,KAAK2C,KAAN,WACE,eAAC,KAAD,CAAMM,KAAK,SADb,IACyB,IACtBjD,EAAKgpB,yBAAyB/lB,KAFjC,IAEuC,wBACrC,wBAAO1E,UAAU,aAAjB,SACGyB,EAAK0iB,0CCyCnBvkB,kBAtJU,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAN,OACrB,gBAAC,KAAKnD,MAAN,CAAYoD,aAAa,EAAzB,UACsCub,GAAjB,gBAAfxb,EAC+Byb,GAAhB,eAAfzb,EACgC0b,GAAjB,gBAAf1b,EAC8B2b,GAAf,cAAf3b,EAC8B4b,GAAf,cAAf5b,EAC8B6b,GAAf,cAAf7b,EAC2B8b,GAAZ,WAAf9b,EAC6B+b,GAAd,aAAf/b,EACe,gBAAfA,EACkCgc,GAAnB,kBAAfhc,EACe,iBAAfA,EACiCic,GAAlB,iBAAfjc,EAC0Ckc,GAA3B,0BAAflc,EACkCmc,GAAnB,kBAAfnc,EAGF,eAAC,KAAKE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,mDACHC,KAAK,SACL5C,OAAQ2pB,GALZ,SAOKrqB,EAAE,oCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,2BACHC,KAAK,OACL5C,OAAQupB,GALZ,SAOKjqB,EAAE,iCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,4BACHC,KAAK,YACL5C,OAAQmpB,GALZ,SAOK7pB,EAAE,kCANEgK,gBAiBT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,6BACHC,KAAK,cACL5C,OAAQkpB,GALZ,SAOK5pB,EAAE,mCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,+BACHC,KAAK,OACL5C,OAAQ0pB,GALZ,SAOKpqB,EAAE,qCANEgK,gBAiBT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,wBACHC,KAAK,MACL5C,OAAQwpB,GALZ,SAOKlqB,EAAE,8BANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,0BACHC,KAAK,MACL5C,OAAQypB,GALZ,SAOKnqB,EAAE,gCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,6BACHC,KAAK,UACL5C,OAAQopB,GALZ,SAOK9pB,EAAE,mCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,2BACHC,KAAK,OACL5C,OAAQspB,GALZ,SAOKhqB,EAAE,iCANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,4DACHC,KAAK,QACL5C,OAAQ4pB,GALZ,SAOKtqB,EAAE,6CANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAG,wDACHC,KAAK,YACL5C,OAAQqpB,GALZ,SAOK/pB,EAAE,iCANEgK,gBAQT,eAAC,GAAD,CAAsB1H,WAAW,OACXC,SAAS,2BAD/B,SAEI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAG,+BACHC,KAAK,iBACL5C,OAAQ6pB,GALZ,SAOKvqB,EAAE,qCANEgK,wBChJf6gB,G,oDACJ,WAAY/iB,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,sBACZD,QAAQC,IAAIsN,GAHK,E,2CAOnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MAGnBgD,GAFUlH,KAAKmI,MAAMhE,QAChBD,EAAMkD,OAAOyH,GACNxO,EAAE,mBAEpB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAKnG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,qCACNA,EAAE,yCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,2DAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,kCACNA,EAAE,sCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,mCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,mCACNA,EAAE,uCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,oCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,oCACNA,EAAE,wCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,qCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,sCACNA,EAAE,0CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,uCASjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,+BACNA,EAAE,mCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,gCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,iCACNA,EAAE,qCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,kCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,oCACNA,EAAE,wCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,qCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,kCACNA,EAAE,sCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,mCAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,8CACNA,EAAE,kDACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,oEAIjD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,kCACNA,EAAE,sCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,gEAIjD,eAAC,GAAD,CAAsBtE,WAAW,OACXC,SAAS,2BAD/B,SAGE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,sCACNA,EAAE,0CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,8CAOvD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,oB,GA3JemC,aAqKhB3I,iBAAkByD,YAAWqnB,KCvL/BC,GAAsBvgB,OAAaC,MAAM,CAClD3F,KAAM0F,OACHG,SAAS1K,YAAE,uBACd6Y,QAAStO,OACTuO,MAAOvO,OACPwO,MAAOxO,OACJwO,MAAM/Y,YAAE,cACXgZ,aAAczO,OACd0O,gBAAiB1O,SCXRwgB,GAA4B,CACrCC,WAAY,SACZC,QAAS,QACTC,SAAU,UCoGGnrB,iBAAkByD,aAtFV,SAAC,GAAD,IACvBxD,EADuB,EACvBA,EAEA+K,GAHuB,EAEvBjH,QAFuB,EAGvBiH,cACAC,EAJuB,EAIvBA,OACAa,EALuB,EAKvBA,OACAqI,EANuB,EAMvBA,gBACA8C,EAPuB,EAOvBA,cAPuB,OASrB,gBAAC,KAAD,WACE,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,UACbC,aAActL,EAAOgN,QACrBhe,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,UAAW5C,EAAE1O,OAAO2R,cAClCnD,EAAgB,WAAW,GAAM,MAGrC,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO8N,MAAS,0BAA4B,eACxD3N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO+N,MAAS,0BAA4B,eACxD5N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,6BAI5D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOgO,aAAgB,0BAA4B,eAC/D7N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,0BAGjE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,kBACL1E,UAAY6K,EAAOiO,gBAAmB,0BAA4B,eAClE9N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,gCAKxE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACA7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,6BC3CED,I,GAAAA,iBAAkByD,aAhCjC,YAA8D,IAA/BxD,EAA8B,EAA9BA,EAAG6D,EAA2B,EAA3BA,MAAgB3D,GAAW,EAApB4D,QAAoB,EAAX5D,UAGhD,OAFW2D,EAAMkD,OAAOyH,GAGtB,eAAC,GAAD,UACE,sBAAKrO,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,0BAGjB,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,4CAEhBE,OAGH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,8BAAKvG,EAAE,kBACP,eAAC,GAAD,CAAkBoO,WAAW,kCCZrC+c,GAAsB5vB,YAAH,+MA6FVwE,qBAAkByD,aAjFjC,YAAgD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACtB2K,GADuC,EAAV1K,QACxBD,EAAMkD,OAAOyH,IAExB,EAA6BjD,YAAY4f,IAAlCC,EAAP,oBACA,EAA4CzoB,YAAS7C,GAAwB,CAC3EoJ,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,GALA,EAA8BiB,UAK1BnB,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,WACE,6BAAI7C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAMnT,EAAc9M,EAAK8V,aAEzB,OAEE,eAAC,GAAD,UACE,eAAC,KAAD,CACEnN,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBgU,QAASjJ,EAAYiJ,QACrBC,MAAOlJ,EAAYkJ,MACnBC,MAAOnJ,EAAYmJ,MACnBC,aAAcpJ,EAAYoJ,aAC1BC,gBAAiBrJ,EAAYqJ,iBAE/BtN,iBAAkBmf,GAClBlf,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZuf,EAAmB,CAAEliB,UAAW,CAC9B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbgU,QAAShN,EAAOgN,QAChBC,MAAOjN,EAAOiN,MACdC,MAAOlN,EAAOkN,MACdC,aAAcnN,EAAOmN,aACrBC,gBAAiBpN,EAAOoN,oBAG3B7M,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OApCtB,SAwCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdc,OAAQA,EACRb,OAAQA,EACRkJ,gBAAiBA,EACjB8C,cAAeA,aCrEZjX,I,GAAAA,iBAAkByD,aAzBjC,YAAkE,IAA/BxD,EAA8B,EAA9BA,EAAG6D,EAA2B,EAA3BA,MAAgB3D,GAAW,EAApB4D,QAAoB,EAAX5D,UAGpD,OAFW2D,EAAMkD,OAAOyH,GAGtB,eAAC,GAAD,UACE,sBAAKrO,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,UACE,8BAAKvG,EAAE,8CACNE,KAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,8BAAKvG,EAAE,kBACP,eAAC,GAAD,CAAkBoO,WAAW,2CCZrC+c,GAAsB5vB,YAAH,+MA6HVwE,I,GAAAA,iBAAkByD,aAjHjC,YAAoD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC1B2K,GAD2C,EAAV1K,QAC5BD,EAAMkD,OAAOyH,IAExB,EAA6BjD,YAAY4f,IACzC,GADA,oBAC4CxoB,YAAS7C,GAAwB,CAC3EoJ,UAAW,CACTsF,GAAIA,MAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,GALA,EAA8BiB,UAK1BnB,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,WACE,6BAAI7C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAMnK,EAAe9V,EAAK8V,aAE1B,OAEE,eAAC,GAAD,UACI,gBAAC,KAAKxY,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,8BAAKvG,EAAE,sCACP,eAAC,KAAYqrB,MAAb,CACEhrB,IAAKuY,EAAa0S,eAGpB,eAAC,KAAYC,QAAb,UACE,eAAC,IAAD,CAAMloB,GAAE,6BAAwBmL,EAAxB,uBAAR,SACE,gBAAC,KAAD,CAAQ1H,OAAK,EAACnC,MAAM,YAApB,UACG3E,EAAE,qCADL,IAC2C,eAAC,KAAD,CAAM6E,KAAK,8BAM9D,eAAC,KAAKgB,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,8BAAKvG,EAAE,wCACP,eAAC,KAAYqrB,MAAb,CACEhrB,IAAKuY,EAAa4S,iBAGpB,eAAC,KAAYD,QAAb,UACE,eAAC,IAAD,CAAMloB,GAAE,6BAAwBmL,EAAxB,yBAAR,SACE,gBAAC,KAAD,CAAQ1H,OAAK,EAACnC,MAAM,YAApB,UACG3E,EAAE,qCADL,IAC2C,eAAC,KAAD,CAAM6E,KAAK,8BAM9D,eAAC,KAAKgB,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,8BAAKvG,EAAE,sCACP,eAAC,KAAYqrB,MAAb,CACEhrB,IAAKuY,EAAa6S,eAGpB,eAAC,KAAYF,QAAb,UACE,eAAC,IAAD,CAAMloB,GAAE,6BAAwBmL,EAAxB,uBAAR,SACE,gBAAC,KAAD,CAAQ1H,OAAK,EAACnC,MAAM,YAApB,UACG3E,EAAE,qCADL,IAC2C,eAAC,KAAD,CAAM6E,KAAK,8BAM9D,eAAC,KAAKgB,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,8BAAKvG,EAAE,4CACP,eAAC,KAAYqrB,MAAb,CACEhrB,IAAKuY,EAAa8S,oBAGpB,eAAC,KAAYH,QAAb,UACE,eAAC,IAAD,CAAMloB,GAAE,6BAAwBmL,EAAxB,4BAAR,SACE,gBAAC,KAAD,CAAQ1H,OAAK,EAACnC,MAAM,YAApB,UACG3E,EAAE,qCADL,IAC2C,eAAC,KAAD,CAAM6E,KAAK,8BAM9D,eAAC,KAAKgB,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,8BAAKvG,EAAE,6CACP,eAAC,KAAYqrB,MAAb,CACEhrB,IAAKuY,EAAa+S,qBAGpB,eAAC,KAAYJ,QAAb,UACE,eAAC,IAAD,CAAMloB,GAAE,6BAAwBmL,EAAxB,6BAAR,SACE,gBAAC,KAAD,CAAQ1H,OAAK,EAACnC,MAAM,YAApB,UACG3E,EAAE,qCADL,IAC2C,eAAC,KAAD,CAAM6E,KAAK,uCClFvD9E,iBAAkByD,aAxCE,SAAC,GAAD,IACnCxD,EADmC,EACnCA,EAEA4rB,GAHmC,EAEnC9nB,QAFmC,EAGnC8nB,WACA7gB,EAJmC,EAInCA,aACA8gB,EALmC,EAKnCA,cACAC,EANmC,EAMnCA,eANmC,IAOnCC,6BAPmC,MAOb,SAAAnjB,GAAC,OAAEA,GAPU,SASjC,eAAC,KAAD,UACE,gBAAC,KAAD,CAAM5C,MAAO4lB,EAAb,UACE,eAAC,KAAKplB,KAAN,UACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,eAOb,eAAC,KAAKtjB,OAAN,UACI,eAAC,KAAD,CACA7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,+BClBTmrB,GAAsB5vB,YAAH,iMAuIVwE,qBAAkByD,aA5HjC,YAAwD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACrC0K,EAAK3K,EAAMkD,OAAOyH,GAClBwd,EAAcnoB,EAAMkD,OAAOklB,aAC3BnjB,EAAS,6BAAyB0F,EAAzB,aAEXod,EAAY,GAChB,OAAQI,GACN,IAAK,YACHJ,EAAY5rB,EAAE,oCAOlB,MAA6BuL,YAAY4f,IAAlCC,EAAP,oBAGA,EAAgCze,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAGpC,OAEE,eAAC,GAAD,UACE,eAAC,KAAD,CACE4G,cAAe,GACfG,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACd9d,GAAIA,GAGF+d,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OAGvC,OAFA9P,QAAQC,IAAImyB,GAELX,GACL,IAAK,YACHM,EAAUM,kBAAoBV,EAC9BI,EAAUO,UAAYF,EACtB,MACF,IAAK,cACHL,EAAUQ,oBAAsBZ,EAChCI,EAAUS,YAAcJ,EACxB,MACF,IAAK,YACHL,EAAUU,kBAAoBd,EAC9BI,EAAUW,UAAYN,EACtB,MACF,IAAK,iBACHL,EAAUY,uBAAyBhB,EACnCI,EAAUa,eAAiBR,EAC3B,MACF,IAAK,kBACHL,EAAUc,wBAA0BlB,EACpCI,EAAUe,gBAAkBV,EAMhCvB,EAAmB,CAAEliB,UAAW,CAC9B6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOrM,GAAwBoJ,UAAW,CAACsF,GAAIA,OAEnDpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgJ,GAAc,GACdhI,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAIpB,IAAIwhB,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxJ,MAAM7C,EAAE,gCAAiC,CAC7CuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KA3EpB,SA+EG,gBAAGf,EAAH,EAAGA,aAAH,OACC,eAAC,GAAD,CACEA,aAAcA,EACd6gB,UAAWA,EACXC,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,aClGpBhsB,I,eAAAA,iBAAkByD,aArCjC,YAAoF,IAA5CxD,EAA2C,EAA3CA,EAAYE,GAA+B,EAAxC4D,QAAwC,EAA/B5D,UAA+B,IAArButB,oBAAqB,SACjF,OACE,eAAC,GAAD,UACA,sBAAKttB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIknB,EACA,eAAC,IAAD,CAAMpqB,GAAG,8BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACrBC,SAAS,oBADrB,SAEE,eAAC,IAAD,CAAMc,GAAG,kCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,yCAKnD,eAAC,GAAD,CAAkBoO,WAAW,mCC7C5Bsf,GAA0BnyB,YAAH,whBA0BvBoyB,GAAyBpyB,YAAH,oRAgBtBqyB,GAAmBryB,YAAH,gPAUhBsyB,GAAsBtyB,YAAH,iPAUnBuyB,GAAsBvyB,YAAH,0LCkSjBwE,qBAAkByD,aAtUjC,YAAoD,IAAfxD,EAAc,EAAdA,EAE7B8M,GAF2C,EAAXhJ,QAClBmF,qBAAWrI,IACAkM,YAE/B,EAA4CnK,YAAS+qB,IAA7C9qB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAC9B,EAA+BwH,YAAYuiB,IAAnCC,EAAR,oBAEM5lB,EAAYnI,EAAE,oCAGpB,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kDAKZ,IAAMkG,EAA4BpD,EAAKoD,0BAGvC,OAAKA,EAA0BzE,MAAM0E,OASnC,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACVN,SAAU3B,EAA0B2B,SACpCS,aAAa,EACbN,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOtD,EAA0B2B,SAAS4B,WAE5CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB1D,0BAA0BzE,MACrDoG,EAAW+B,EAAgB1D,0BAA0B2B,SAE3D,OAAOgC,EAAS1D,OACZ,CAGED,0BAA2B,CACzB4D,WAAYH,EAAezD,0BAA0B4D,WACrDrI,MAAM,GAAD,oBAAOkI,EAAezD,0BAA0BzE,OAAhD,aAA0DoI,IAC/DhC,aAGJ8B,MAtBtB,SA0BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACM,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MATcC,kBAYlB,eAAC,KAAMxD,KAAP,UACKN,EAA0BzE,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKoE,OADQgE,gBAGhB,eAAC,KAAMnE,IAAP,UAAW,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,kBACrC,eAAC,KAAMtV,IAAP,UAAW,eAAC,GAAD,CAAczC,MAAOxB,EAAKosB,gBACrC,eAAC,KAAMnoB,IAAP,UAAW,eAAC,GAAD,CAAczC,MAAOxB,EAAKqsB,mBACrC,eAAC,KAAMpoB,IAAP,UAAYoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAC1C,eAAC,KAAMjH,IAAP,UAAajE,EAAK2iB,QAAWta,KAAOrI,EAAK2iB,SAASpa,OAAO2C,GAAa,KACtE,eAAC,KAAMjH,IAAP,UAAYjE,EAAKssB,WACjB,eAAC,KAAMroB,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,2CAAsCzB,EAAK4M,IAAnD,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,KAAMnE,IAAP,UACE,yBACE1F,UAAU,2BACV6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,iDACd+R,eAAgB,+BAAG,wBAAOnQ,EAAKoE,SAC/BgM,WAAYhS,EAAE,sCACdiS,eAAgB8b,EAChB7b,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOuhB,SAhBhB,SAoBE,uBAAMvtB,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBAvCxCmF,4BAnDhC,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EAAxB,SACE,6BAAInI,EAAE,mDC3DDmuB,GAAsB5jB,OAAaC,MAAM,CAClDxE,MAAOuE,OACJK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACd2G,QAAS4D,OACNK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNG,SAAS1K,YAAE,uBACdkuB,SAAU3jB,SCmICxK,qBAAkByD,aAhIjC,YAAgI,IAAxFxD,EAAuF,EAAvFA,EAAY+K,GAA2E,EAApFjH,QAAoF,EAA3EiH,cAAcc,EAA6D,EAA7DA,OAAQb,EAAqD,EAArDA,OAAQkJ,EAA6C,EAA7CA,gBAAiB8C,EAA4B,EAA5BA,cAAelO,EAAa,EAAbA,UAChH,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAChB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,kDAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,aAGjD,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAChB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,gDAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,aAG/C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,iBACL2W,QAAS3P,EAAOoiB,iBAChB,uBAAM9tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,mDAEnD,eAAC,KAAD,CAAc6E,KAAK,iBAAiBuG,UAAU,gBAIpD,eAAC,KAAKhL,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAOhF,MAAS,0BAA4B,eACxDmF,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,4BAI5D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sCAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,UACbC,aAActL,EAAOlF,QACrB9L,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,WAAW,GAC3B8C,EAAc,UAAW5C,EAAE1O,OAAO2R,iBAGtC,eAAC,KAAD,CAAcxS,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,4BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,WACL1E,UAAY6K,EAAOkjB,SAAY,0BAA4B,eAC3D/iB,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,gCAKjE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCfJD,qBAAkByD,aA3FjC,YAAoD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACjCgF,EAAY,8BAClB,EAA0ByC,YAAYqiB,IAA/BQ,EAAP,oBAEA,OACE,eAAC,GAAD,UACE,sBAAKjuB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,4CAEf,eAAC,KAAD,CACIyL,cAAe,CACb0P,eAAe,EACf6S,aAAa,EACbC,gBAAgB,EAChBjoB,MAAO,GACPW,QAAS,GACT2d,UAAW,IAAI1gB,KACf2gB,QAAS,IAAI3gB,KACbsqB,SAAU,KAEZviB,iBAAkBwiB,GAClBviB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACf+V,EAAc,CAChB1G,cAAetP,EAAOsP,cACtB8S,eAAgBpiB,EAAOoiB,eACvBD,YAAaniB,EAAOmiB,YACpBhoB,MAAO6F,EAAO7F,MACdW,QAASkF,EAAOlF,QAChB2d,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/B2J,SAAUriB,EAAOqiB,UAGnBE,EAAgB,CAAEllB,UAAW,CAC3B6C,MAAO8V,GACN3V,eAAgB,CACf,CAACC,MAAOuhB,OAEXthB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxCxB,SA4CK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACG,eAAC,GAAD,CACEjM,aAAcA,EACdc,OAAQA,EACRb,OAAQA,EACRkJ,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,YAMzB,gBAAC,KAAKjD,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,2BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CAAkBoO,WAAW,mCCW5BrO,I,mDAAAA,iBAAkByD,aApGjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAClCuqB,EADmD,EAARxqB,MACpBkD,OAAOyH,GAC9BrG,EAAYnI,EAAE,yCACd8I,EAAY,8BAElB,EAAiCnG,YAASgrB,GAAwB,CAAEzkB,UAAW,CAC7EsF,GAAI6f,KADEzrB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA6ByI,YAAYsiB,IAAlCS,EAAP,oBAEA,GAAI1rB,EAAS,OACX,eAAC,GAAD,CAA+B6qB,cAAc,EAA7C,SACE,eAAC,KAAD,CAAMznB,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,mCAMX,GAAI6C,EAAO,OACT,eAAC,GAAD,CAA+B4qB,cAAc,EAA7C,SACE,eAAC,KAAD,CAAMznB,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,kCAMX,IAAMuuB,EAA2BzrB,EAAKyrB,yBAEtC,OACE,eAAC,GAAD,CAA+Bd,cAAc,EAA7C,SACE,gBAAC,KAAD,WACE,eAAC,KAAK1nB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEb,eAAC,KAAD,CACIsD,cAAe,CACb0P,cAAeoT,EAAyBpT,cACxC6S,YAAaO,EAAyBP,YACtCC,eAAgBM,EAAyBN,eACzCjoB,MAAOuoB,EAAyBvoB,MAChCW,QAAS4nB,EAAyB5nB,QAClC2d,UAAW,IAAI1gB,KAAK2qB,EAAyBjK,WAC7CC,QAAS,IAAI3gB,KAAK2qB,EAAyBhK,SAC3C2J,SAAUK,EAAyBL,UAErCviB,iBAAkBwiB,GAClBviB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACf+V,EAAc,CAChBrT,GAAI6f,EACJlT,cAAetP,EAAOsP,cACtB8S,eAAgBpiB,EAAOoiB,eACvBD,YAAaniB,EAAOmiB,YACpBhoB,MAAO6F,EAAO7F,MACdW,QAASkF,EAAOlF,QAChB2d,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/B2J,SAAUriB,EAAOqiB,UAGnBI,EAAmB,CAAEplB,UAAW,CAC9B6C,MAAO8V,GACN3V,eAAgB,CACf,CAACC,MAAOuhB,OAEXthB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzCxB,SA6CK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACG,eAAC,GAAD,CACEjM,aAAcA,EACdc,OAAQA,EACRb,OAAQA,EACRkJ,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,gBC9GlB0lB,GAAyBjzB,YAAH,owBA6BtBkzB,GAAwBlzB,YAAH,29BAqDrBmzB,GAAyBnzB,YAAH,uwBClD7BozB,GAAsBpzB,YAAH,kQAoMVwE,iBAAkByD,aAzLA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASD,EAAf,EAAeA,MAAf,IAAsBqL,gBAAtB,gBAC/B,eAAC,GAAD,UACE,sBAAK/O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,uCACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,oDAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,QAAD,CAAO4F,MAAOqiB,GAAwBtlB,UAAW,CAAEgG,WAAU0f,gCAAiC/qB,EAAMkD,OAAO8nB,aAA3G,SACE,YAAwI,IAArIjsB,EAAoI,EAApIA,QAASC,EAA2H,EAA3HA,MAA2H,IAApHC,KAAiCgsB,EAAmF,EAA7GC,yBAAyEzc,EAAoC,EAArEsc,gCAA4Cxf,EAAyB,EAAzBA,QAASrL,EAAgB,EAAhBA,UAErH,GAAInB,EAAS,OACX,eAAC,GAAD,CAAauF,UAAWnI,EAAE,mCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,MAKpB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAasF,UAAWnI,EAAE,mCAA1B,SACE,6BAAIA,EAAE,+CAGV,IAAMoJ,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAuB2G,EAAQ,CAACF,SAAzBA,GAAS,KAFjC,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAsB2G,EAAQ,CAACF,SAAxBA,GAAS,KAHjC,SAIGlP,EAAE,wBAKP,OAAK8uB,EAAartB,MAAM0E,OAWtB,eAAC,GAAD,CAAagC,UAAWnI,EAAE,mCACboI,cAAegB,EACfvB,SAAUinB,EAAajnB,SACvBG,WAAY,WACXjE,EAAU,CACRmF,UAAW,CACTM,MAAOslB,EAAajnB,SAAS4B,WAE/BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBolB,8BAA8BvtB,MACzDoG,EAAW+B,EAAgBolB,8BAA8BnnB,SAE/D,OAAOgC,EAAS1D,OACZ,CAGE6oB,8BAA+B,CAC7BllB,WAAYH,EAAeqlB,8BAA8BllB,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeqlB,8BAA8BvtB,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MAtBtB,SA0BE,iCACE,gBAAC,KAAD,CAAOnF,KAAK,UAAZ,UACE,kCAASxE,EAAE,kCADb,IACwDsS,EAASzN,QAGjE,gBAAC,KAAD,WACE,eAAC,KAAMkB,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACKsoB,EAAartB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKuZ,cACL,eAAC,KAAD,CAAOxW,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,iBAHbgK,gBAKhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,kCACE,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,sBAAwBjtB,EAAK4M,KAC9H7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,wBAA0BjtB,EAAK4M,KAChI7J,MAAM,YAFd,SAGG3E,EAAE,kDAZ4BgK,gBAiBvC,eAAC,WAAD,CAAUilB,SAAUN,GAApB,SACG,SAACO,EAAD,KAAoCpsB,KAApC,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACd0gB,EAAgC,CAAEhmB,UAAW,CAC3C6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CACEC,MAAOqiB,GACPtlB,UAAW,CAAC,SAAYgG,EAAU0f,gCAAiC/qB,EAAMkD,OAAO8nB,iBAElFziB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OA1BtD,SA6BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA9BYmF,kBAFGA,kBA1BhCA,6BAlD5B,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,mCACboI,cAAegB,EAD5B,SAEE,6BAC2DpJ,EAAxDkP,EAA0D,0CAA5C,iDAwH3B,gBAAC,KAAKrJ,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,0BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,uBADzG,UAEE,eAAC,KAAD,CAAM5f,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,sCAG/C,eAAC,GAAD,CAAkBoO,WAAW,kCC3N5B+gB,GAAqB5kB,OAAaC,MAAM,CACjD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCkFHD,iBAAkByD,aAtEG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmBmU,GAAtB,EAAMrQ,QAAN,EAAeD,MAAf,EAAsBsQ,WAAWpJ,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,OAAQa,EAAvD,EAAuDA,OAAQkO,EAA/D,EAA+DA,WAA/D,OAClC,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,yCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAG/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEzD,eAAC,KAAKC,IAAN,UACE,gBAAC,KAAKyF,IAAN,WACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU9D,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAEnE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU5E,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,gCAK1E,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAI0W,EAAV,SACE,eAAC,KAAD,CAAQpV,MAAM,OAAOH,KAAK,SAA1B,SACKxE,EAAE,gCCnDbovB,GAAkB7zB,YAAH,wXA6GNwE,iBAAkByD,aA1FE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASD,EAAf,EAAeA,MAAf,OACjC,eAAC,GAAD,UACE,sBAAK1D,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,2CAEjB,eAAC,QAAD,CAAOmM,MAAOuiB,GAAwBxlB,UAAa,CAACgG,UAAU,GAA9D,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,WAAD,CAAUmsB,SAAUG,GAAiBnS,YAAa,kBAAMnZ,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,kBAA1I,SACK,SAACQ,EAAD,KAAmBvsB,KAAnB,OACG,eAAC,KAAD,CACI2I,cAAe,CAAE5G,KAAM,GAAIsW,eAAe,GAC1CxP,iBAAkBwjB,GAClBvjB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBujB,EAAe,CAAEnmB,UAAW,CAC1B6C,MAAO,CACL6iB,gCAAiC/qB,EAAMkD,OAAO8nB,YAC9ChqB,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,cACtB1K,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOqiB,GACRtlB,UAAW,CAAC,UAAY,EAAO,gCAAmCrF,EAAMkD,OAAO8nB,iBAElFziB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1B1B,SA8BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAY,wCAA0ClW,EAAMkD,OAAO8nB,YAAc,gCAUzG,gBAAC,KAAKhpB,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,0BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAhF1B,qDAgF4CU,EAAMkD,OAAO8nB,cAD9D,UAEE,eAAC,KAAD,CAAM5f,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,kCCtGnCkhB,GAAqB/zB,YAAH,kRAalBg0B,G,oDACJ,WAAYznB,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,wCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAElBuL,GADclW,EAAMkD,OAAO8nB,YACd,wCAA0ChrB,EAAMkD,OAAO8nB,YAAc,iBAExF,OACE,eAAC,GAAD,UACE,sBAAK1uB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,0CACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAOsiB,GAAuBvlB,UAAW,CAAEsF,MAAlD,SACC,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAMmU,EAAYrR,EACZ8M,EAAc9M,EAAK0sB,wBACzBj1B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAI2sB,EAAmB,GACnB7f,EAAYa,mBACdgf,EAAoB7f,EAAYa,iBAAiBjC,IAGnD,IAAIkhB,EAAoB,GAKxB,OAJI9f,EAAYC,oBACd6f,EAAqB9f,EAAYC,kBAAkBrB,IAKnD,eAAC,WAAD,CAAUygB,SAAUK,GAAoBrS,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAxE,SACC,SAAC4V,EAAD,KAAmB7sB,KAAnB,OACG,eAAC,KAAD,CACI2I,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBsW,cAAevL,EAAYuL,cAC3B1K,iBAAkBgf,EAClB5f,kBAAmB6f,GAErB/jB,iBAAkBwjB,GAClBvjB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8jB,EAAe,CAAEzmB,UAAW,CAC1B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,cACtB1K,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACjB,CAACC,MAAOqiB,GACNtlB,UAAW,CAAC,UAAY,EAAO,gCAAmCrF,EAAMkD,OAAO8nB,iBAElFziB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlC1B,SAsCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,kBAUhC,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,0BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,kC,GAtHH1F,aAgI3B3I,iBAAkByD,YAAW+rB,KCxK/BK,GAAmCr0B,YAAH,ueAqBhCs0B,GAAiCt0B,YAAH,yMCQrCu0B,GAA+Bv0B,YAAH,kSAoLnBwE,iBAAkByD,aAzKS,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAN,IAAeoL,gBAAf,gBACxC,eAAC,GAAD,UACE,sBAAK/O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,QAAD,CAAO4F,MAAOyjB,GAAkC1mB,UAAW,CAAEgG,YAA7D,SACE,YAAgH,IAA7GtM,EAA4G,EAA5GA,QAASC,EAAmG,EAAnGA,MAAiDktB,EAAkD,EAA5FjtB,KAAOktB,kCAA4D5gB,EAAyB,EAAzBA,QAASrL,EAAgB,EAAhBA,UAE7F,GAAInB,EAAS,OACX,eAAC,GAAD,CAAauF,UAAWnI,EAAE,6CAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,MAKpB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAasF,UAAWnI,EAAE,6CAA1B,SACE,6BAAIA,EAAE,yDAGV,IAAMoJ,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAuB2G,EAAQ,CAACF,SAAzBA,GAAS,KAFjC,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAsB2G,EAAQ,CAACF,SAAxBA,GAAS,KAHjC,SAIGlP,EAAE,wBAKP,OAAK+vB,EAAuBtuB,MAAM0E,OAWhC,eAAC,GAAD,CAAagC,UAAWnI,EAAE,6CACboI,cAAegB,EACfvB,SAAUkoB,EAAuBloB,SACjCG,WAAY,WACXjE,EAAU,CACRmF,UAAW,CACTM,MAAOumB,EAAuBloB,SAAS4B,WAEzCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBomB,kCAAkCvuB,MAC7DoG,EAAW+B,EAAgBomB,kCAAkCnoB,SAEnE,OAAOgC,EAAS1D,OACZ,CAGE6pB,kCAAmC,CACjClmB,WAAYH,EAAeqmB,kCAAkClmB,WAC7DrI,MAAM,GAAD,oBAAOkI,EAAeqmB,kCAAkCvuB,OAAxD,aAAkEoI,IACvEhC,aAGJ8B,MAtBtB,SA0BE,gBAAC,KAAD,WACM,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACKupB,EAAuBtuB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKuZ,cACL,eAAC,KAAD,CAAOxW,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,iBAHbgK,gBAKhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,iCACE,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,6CAA+CvB,EAAK4M,KAChF7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CvB,EAAK4M,GAAK,mBAChF7J,MAAM,YAFd,SAGG3E,EAAE,yCAZ4BgK,gBAiBvC,eAAC,WAAD,CAAUilB,SAAUa,GAApB,SACG,SAACG,EAAD,KAAoBntB,KAApB,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACf6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdyhB,EAAgB,CAAE/mB,UAAW,CAC3B6C,MAAO,CACNyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOyjB,GAAkC1mB,UAAW,CAAC,SAAYgG,OAClE9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAFYA,kBA1BzCA,0BA7C9B,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,6CACboI,cAAegB,EAD5B,SAEE,6BACqEpJ,EAAlEkP,EAAoE,oDAAtD,2DA+G3B,gBAAC,KAAKrJ,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,kCAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,6CADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,gDAG/C,eAAC,GAAD,CAAkBoO,WAAW,kCCxM5B8hB,GAA8B3lB,OAAaC,MAAM,CAC1D3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCiDDD,iBAAkByD,aA3CS,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcc,EAA7B,EAA6BA,OAAQb,EAArC,EAAqCA,OAAQ+O,EAA7C,EAA6CA,WAA7C,OAC1C,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,iDAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAG/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAI0W,EAAV,SACE,eAAC,KAAD,CAAQpV,MAAM,OAAOH,KAAK,SAA1B,SACKxE,EAAE,gCChBXmwB,GAAwC50B,YAAH,oUAarCwe,GAAa,uCAsEJha,iBAAkByD,aApEU,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAN,OACzC,eAAC,GAAD,UACE,sBAAK3D,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,qDAEjB,eAAC,WAAD,CAAUivB,SAAUkB,GAAuClT,YAAa,kBAAMnZ,EAAQX,KAAK4W,KAA3F,SACK,SAACqW,EAAD,KAA2BttB,KAA3B,OACG,eAAC,KAAD,CACI2I,cAAe,CAAE5G,KAAM,GAAIsW,eAAe,GAC1CxP,iBAAkBukB,GAClBtkB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBskB,EAAuB,CAAElnB,UAAW,CAClC6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACf,CAACC,MAAOyjB,GAAkC1mB,UAAW,CAAC,UAAY,OAErEkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,yDAA2D,CACxEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAtB1B,SA0BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,gBAQ9B,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,kCAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,KADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,4CC3EnCiiB,GAA8B90B,YAAH,kTAa3B+0B,G,oDACJ,WAAYxoB,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,qCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAClBuL,EAAa,uCAEnB,OACE,eAAC,GAAD,UACE,sBAAK5Z,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oDACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAO0jB,GAAgC3mB,UAAW,CAAEsF,MAA3D,SACC,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM4P,EAAc9M,EAAK8rB,gCAIzB,OAHAr0B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAIV,eAAC,WAAD,CAAUmsB,SAAUoB,GAA6BpT,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAjF,SACC,SAACwW,EAAD,KAA8BztB,KAA9B,OACG,eAAC,KAAD,CACI2I,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBsW,cAAevL,EAAYuL,eAE7BxP,iBAAkBukB,GAClBtkB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ0kB,EAA0B,CAAErnB,UAAW,CACrC6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACf,CAACC,MAAOyjB,GAAkC1mB,UAAW,CAAC,UAAY,OAErEkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,0DAA4D,CACzEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA7B1B,SAiCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACG,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,kBAUlC,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,kCAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,4C,GApGK1F,aA8GnC3I,iBAAkByD,YAAW8sB,KCxJ/BE,GAA+Bj1B,YAAH,8tBAgC5Bk1B,GAA8Bl1B,YAAH,s+BAmD3BmzB,GAAyBnzB,YAAH,qzBClD7Bm1B,GAA2Bn1B,YAAH,gNAqKfwE,iBAAkByD,aA7JK,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASD,EAAf,EAAeA,MAAf,OACpC,eAAC,GAAD,UACE,sBAAK1D,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAI,wCAA0CQ,EAAMkD,OAAO8nB,YAAc,gBACzE1uB,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,8BAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,QAAD,CAAO4F,MAAOqkB,GAA8BtnB,UAAW,CAAEsmB,wBAAyB3rB,EAAMkD,OAAO4pB,gBAA/F,SACE,YAAmD,IAAhD/tB,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAeiB,GAAgB,EAAzBqL,QAAyB,EAAhBrL,WAEhC,GAAInB,EAAS,OACX,eAAC,GAAD,CAAauF,UAAWnI,EAAE,yCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,MAKpB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAasF,UAAWnI,EAAE,yCAA1B,SACE,6BAAIA,EAAE,qDAIV,IAAM4wB,EAAS9tB,EAAKksB,8BAGpB,OAAK4B,EAAOnvB,MAAM0E,OAUhB,eAAC,GAAD,CAAagC,UAAWnI,EAAE,yCACb6H,SAAU+oB,EAAO/oB,SACjBG,WAAY,WACXjE,EAAU,CACRmF,UAAW,CACTM,MAAOonB,EAAO/oB,SAAS4B,WAEzBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBolB,8BAA8BvtB,MACzDoG,EAAW+B,EAAgBolB,8BAA8BnnB,SAE/D,OAAOgC,EAAS1D,OACZ,CAGE6oB,8BAA+B,CAC7BllB,WAAYH,EAAeqlB,8BAA8BllB,WACzDrI,MAAM,GAAD,oBAAOkI,EAAeqlB,8BAA8BvtB,OAApD,aAA8DoI,IACnEhC,aAGJ8B,MArBtB,SAyBE,iCACE,gBAAC,KAAD,CAAOnF,KAAK,UAAZ,UACE,oCAASxE,EAAE,sBAAX,IAAmCA,EAAE,0BADvC,IACyE8C,EAAK0sB,wBAAwB3qB,QAGtG,gBAAC,KAAD,WACE,eAAC,KAAMkB,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACKoqB,EAAOnvB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAMxB,IAAP,WACG7F,QAAQC,IAAIoH,GACb,eAAC,KAAMiE,IAAP,UACGjE,EAAKiR,QAAQgK,UADA7S,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKkhB,cADQ9Y,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,gCACE,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,wCAC1BU,EAAMkD,OAAO8nB,YAAc,wBAA0BhrB,EAAMkD,OAAO4pB,eAAiB,SAAW/uB,EAAK4M,KACrG7J,MAAM,YAHd,SAIG3E,EAAE,qBAR4BgK,gBAavC,eAAC,WAAD,CAAUilB,SAAUyB,GAApB,SACG,SAACG,EAAD,KAA2B/tB,KAA3B,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,sDACd+R,eAAgB,+BAAInQ,EAAKiR,QAAQgK,SAAjB,IAA4Bjb,EAAKkhB,gBACjD9Q,WAAYhS,EAAE,2CACdiS,eAAgB4e,EAChB3e,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOqkB,GAA8BtnB,UAAW,CAAEsmB,wBAAyB3rB,EAAMkD,OAAO4pB,sBAfjG,SAmBE,uBAAMxwB,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAFQA,kBArBrCA,6BAhD5B,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,yCAA1B,SACE,6BACGA,EAAE,uDAwGf,gBAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,0BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,wBAA0BhrB,EAAMkD,OAAO4pB,eAAiB,SADjK,UAEE,eAAC,KAAD,CAAM1hB,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,4CAG/C,eAAC,GAAD,CAAkBoO,WAAW,kCC7L5B0iB,GAA2BvmB,OAAaC,MAAM,CACvDqI,QAAStI,OACNG,SAAS1K,YAAE,uBACdsU,MAAO/J,OACJG,SAAS1K,YAAE,uBACduU,eAAgBhK,OACbG,SAAS1K,YAAE,yBCoEHD,iBAAkByD,aA3DG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmBmU,GAAtB,EAAMrQ,QAAN,EAAeD,MAAf,EAAsBsQ,WAAWpJ,EAAjC,EAAiCA,aAAcC,EAA/C,EAA+CA,OAAgB+O,GAA/D,EAAuDlO,OAAvD,EAA+DkO,YAA/D,OAClC,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACG,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACG,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,UACL1E,UAAY6K,EAAO6H,QAAW,0BAA4B,eAC1D1H,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU4c,uBAAuBtvB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC1C,yBAAQwB,MAAOxB,EAAKiR,QAAQrE,GAA5B,SAA4C5M,EAAKiR,QAAQgK,UAApB7S,sBAGzC,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE5D,eAAC,KAAKC,IAAN,UACE,gBAAC,KAAKyF,IAAN,WACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,yCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUK,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,gCAKvE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAI0W,EAAV,SACE,eAAC,KAAD,CAAQpV,MAAM,OAAOH,KAAK,SAA1B,SACKxE,EAAE,gCCxCbgxB,GAAwBz1B,YAAH,+dAwHZwE,iBAAkByD,aA/FO,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASD,EAAf,EAAeA,MAAf,OACtC,eAAC,GAAD,UACE,sBAAK1D,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,iDAEjB,eAAC,QAAD,CAAOmM,MAAOuiB,GAAwBxlB,UAAa,CAACgG,UAAU,GAA9D,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,WAAD,CAAUmsB,SAAU+B,GAAuB/T,YACzC,kBAAMnZ,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,wBAA0BhrB,EAAMkD,OAAO4pB,iBADjI,SAEK,SAACtB,EAAD,KAAmBvsB,KAAnB,OACG,eAAC,KAAD,CACI2I,cAAe,CACb+jB,wBAAyB,GACzB3c,QAAS,GACTyB,MAAO,GACPC,eAAgB,IAElB5I,iBAAkBmlB,GAClBllB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBujB,EAAe,CAAEnmB,UAAW,CAC1B6C,MAAO,CACLyjB,wBAAyB3rB,EAAMkD,OAAO4pB,eACtC9d,QAAShH,EAAOgH,QAChByB,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,iBAExBrI,eAAgB,CACf,CAACC,MAAOqkB,GACRtnB,UAAW,CAAC,wBAA2BrF,EAAMkD,OAAO4pB,oBAEvDvkB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,qDAAuD,CACpEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9B1B,SAkCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAColB,GAAD,CACE9c,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAY,wCAA0ClW,EAAMkD,OAAO8nB,YAAc,wBAA0BhrB,EAAMkD,OAAO4pB,+BAUhJ,gBAAC,KAAK9qB,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,+BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,wCAA0CU,EAAMkD,OAAO8nB,YAAc,wBAA0BhrB,EAAMkD,OAAO4pB,iBADhJ,UAEE,eAAC,KAAD,CAAM1hB,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,kCCjHnC8iB,GAA2B31B,YAAH,+dAwBxB41B,G,oDACJ,WAAYrpB,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,wCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAClBmiB,EAAiB9sB,EAAMkD,OAAO4pB,eAE9B5W,EAAa,wCADClW,EAAMkD,OAAO8nB,YAC0C,wBAA0B8B,EAErG,OACE,eAAC,GAAD,UACE,sBAAKxwB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,gDACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAOskB,GAA6BvnB,UAAW,CAAEsF,GAAIA,GAA5D,SACC,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAMmU,EAAYrR,EACZ8M,EAAc9M,EAAKsuB,6BACzB72B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAIuuB,EAAiB,GACjBzhB,EAAYiD,UACdwe,EAAiBzhB,EAAYiD,QAAQrE,IAGvC,IAAI8iB,EAAwB,GAK5B,OAJI1hB,EAAY2E,iBACd+c,EAAyB1hB,EAAY2E,eAAe/F,IAKpD,eAAC,WAAD,CAAUygB,SAAUiC,GAA0BjU,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAA9E,SACC,SAAC4V,EAAD,KAAmB7sB,KAAnB,OACG,eAAC,KAAD,CACI2I,cAAe,CACboH,QAASwe,EACT/c,MAAO1E,EAAY0E,MACnBC,eAAgB+c,GAElB3lB,iBAAkBmlB,GAClBllB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8jB,EAAe,CAAEzmB,UAAW,CAC1B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBqE,QAAShH,EAAOgH,QAChByB,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,iBAExBrI,eAAgB,CACjB,CAACC,MAAOqkB,GACNtnB,UAAW,CAACsmB,wBAAyB3rB,EAAMkD,OAAO4pB,oBAErDvkB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhC1B,SAoCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAColB,GAAD,CACE9c,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,kBAUhC,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,+BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,kC,GArHE1F,aA+HhC3I,iBAAkByD,YAAW2tB,KClH7BpxB,I,kBAAAA,iBAAkByD,aA/CjC,YAAqE,IAA/BxD,EAA8B,EAA9BA,EAAGE,EAA2B,EAA3BA,SAA2B,IAAjB8O,gBAAiB,SAGlE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,mCACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,WAF3B,IAEwC7E,EAAE,yBAI9C,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,6BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,iBADzB,IAC4C7E,EAAE,qBAIhD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,wBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,gCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,uCAMnD,eAAC,GAAD,CAAkBoO,WApCX,iCClBRmjB,GAAwBh2B,YAAH,qgCAgDrBi2B,GAAsBj2B,YAAH,s7DAsGnBmzB,GAAyBnzB,YAAH,k3CAqEtBk2B,GAAmBl2B,YAAH,onBAoChBm2B,GAAmBn2B,YAAH,ksBAoChBo2B,GAAoBp2B,YAAH,0OC+GfwE,qBAAkByD,aA3XjC,YAAgD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC7BqE,EAAYnI,EAAE,kCACpB,EAA8B2M,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KAEA,EAAqDxM,YAAS4uB,IAAtD3uB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UACvC,EAA6BwH,YAAYomB,IAAjCC,EAAR,oBAEMxoB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,SAAUA,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,SAAUA,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,gDAKZ,IAAI0qB,EAAc5nB,EAAK+uB,wBAGvB,OAAKnH,EAAYjpB,MAAM0E,OAYrB,eAAC,GAAD,UACE,eAAC,GAAD,CACEgC,UAAWA,EACXC,cAAegB,EACfd,aAAa,EACbT,SAAU6iB,EAAY7iB,SACtBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOkhB,EAAY7iB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBioB,wBAAwBpwB,MACnDoG,EAAW+B,EAAgBioB,wBAAwBhqB,SAEzD,OAAOgC,EAAS1D,OACZ,CAGE0rB,wBAAyB,CACvB/nB,WAAYH,EAAekoB,wBAAwB/nB,WACnDrI,MAAM,GAAD,oBAAOkI,EAAekoB,wBAAwBpwB,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAxBV,SA6BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MATcC,kBAYlB,eAAC,KAAMxD,KAAP,UACKkkB,EAAYjpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,iBADZnR,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKosB,eADZhkB,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKkwB,aADZ9nB,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKmwB,UAAa/xB,EAAE,qBAAuB4B,EAAKowB,SADpChoB,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKkhB,aADR,IACsB,wBAClBlhB,EAAK2S,eACL,uBAAMpU,UAAU,aAAhB,SAA8ByB,EAAK2S,eAAe1P,OAChD,KAJUmF,gBAOhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKqwB,SADR,IACkB,wBAChB,uBAAM9xB,UAAU,aAAhB,SACGyB,EAAKswB,wBAHMloB,gBAMhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,kCAAoCvB,EAAK4M,KACrE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdojB,EAAiB,CAAE1oB,UAAW,CAC5B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOolB,GAAuBroB,UAAW,CAAC,SAAYgG,OACvD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAvCzBA,4BAzD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACVC,cAAegB,EAD7B,SAEE,6BAC4DpJ,EAAvDkP,EAAyD,yCAA3C,iDCrEdijB,GAAmB5nB,OAAaC,MAAM,CACjD3F,KAAM0F,OACLK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACZsU,MAAO/J,OACJG,SAAS1K,YAAE,uBACduU,eAAgBhK,OACbG,SAAS1K,YAAE,uBACdiyB,SAAU1nB,OACPI,SAAS3K,YAAE,iCACX0K,SAAS1K,YAAE,uBACdoyB,aAAc7nB,OACXG,SAAS1K,YAAE,uBACdgyB,QAASznB,OACT8nB,iBAAkB9nB,SCKd+nB,G,oDACJ,WAAYxqB,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,sCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QAGrB8L,GAFK/L,EAAMkD,OAAOyH,GAEJ7O,KAAKmI,MAAM8H,aACzB7E,EAAepL,KAAKmI,MAAMiD,aAC1BiM,EAAgBrX,KAAKmI,MAAMkP,cAC3B9C,EAAkBvU,KAAKmI,MAAMoM,gBAC7BlJ,EAASrL,KAAKmI,MAAMkD,OACpBa,EAASlM,KAAKmI,MAAM+D,OAE1B,OACI,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACA,gBAAC,KAAKyE,MAAN,WACI,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAChB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,sCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAEjD,gBAAC,KAAKH,MAAN,WACI,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAChB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,oCAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,WAE/C,eAAC,KAAKhL,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,YACL2W,QAAS3P,EAAOimB,YAChB,uBAAM3xB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,0CAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,eAIjD,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEzD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACI,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,eAAe,GAC/B8C,EAAc,cAAe5C,EAAE1O,OAAO2R,iBAG1C,eAAC,KAAD,CAAcxS,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAEhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHrB,UAIC5Q,QAAQC,IAAI,gCACZD,QAAQC,IAAIoV,GACb,yBAAQxM,MAAM,IAAQ4G,gBACrB4F,EAAY4E,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,6BAIrE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,WACL1E,UAAY6K,EAAOinB,SAAY,0BAA4B,eAC3D9mB,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,0BAG7D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,eACL1E,UAAY6K,EAAOonB,aAAgB,0BAA4B,eAC/DjnB,aAAa,MAHrB,UAIA,yBAAQ/H,MAAM,OAAd,SAAiCpD,EAAE,kBAATgK,gBAC1B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,mBAATgK,gBAC3B,yBAAQ5G,MAAM,SAAd,SAAmCpD,EAAE,oBAATgK,mBAE5B,eAAC,KAAD,CAAcnF,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,gBAAC,KAAK8K,MAAN,WACI,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,YACL2W,QAAS3P,EAAO0mB,WAChB,uBAAMpyB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,0BAEnD,eAAC,KAAD,CAAc6E,KAAK,YAAYuG,UAAU,WAE1CS,EAAOkmB,UAAa,GACvB,gBAAC,KAAK9mB,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAOgnB,QAAW,0BAA4B,eAC1D7mB,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAczD0L,EAAOkmB,UACF,gBAAC,KAAK9mB,MAAN,CAAYC,MAAOlL,EAAE,4BAArB,UACA,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,mBACL1E,UAAY6K,EAAOqnB,iBAAoB,0BAA4B,eACnElnB,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAE/D,GAEV,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHrB,UAIA,yBAAQ/H,MAAM,IAAQ4G,gBACrB4F,EAAYS,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHrB,UAIA,yBAAQ/H,MAAM,IAAQ4G,gBACrB4F,EAAYL,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,gCAKxE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACArI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJL,SAMCxE,EAAE,oBAEH,eAAC,KAAD,CACAwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KA/MhB,8BA4MP,SAKKnD,EAAE,8B,GA7NiB0I,aAsOzB3I,iBAAkByD,YAAW8uB,KC5H7BvyB,qBAAkByD,aA5GjC,YAAwD,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SACrCqE,EAAYnI,EAAE,sCAEpB,EAAiC2C,YAAS+rB,IAAlC9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA0ByI,YAAYkmB,IAA/Be,EAAP,oBAEA,GAAI5vB,EAAS,OACX,eAAC,GAAD,CAA6BoM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA6BmM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAMZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM8M,EAAc9M,EAEpB,OACE,eAAC,GAAD,CAA6BkM,UAAU,EAAvC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb0P,eAAe,EACf6S,aAAa,EACb8D,WAAW,EACXjtB,KAAM,GACNG,YAAa,GACbsP,MAAO,EACPC,eAAgB,GAChB0d,SAAU,EACVG,aAAc,SACdJ,QAAS,EACTD,WAAW,EACXU,uBAAwB,GACxBJ,iBAAkB,EAClB5hB,iBAAkB,GAClBZ,kBAAmB,IAErBlE,iBAAkBwmB,GAClBvmB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ2mB,EAAgB,CAAEtpB,UAAW,CAC3B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpB8D,UAAWjmB,EAAOimB,UAClBjtB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB0d,SAAUpmB,EAAOomB,SACjBG,aAAcvmB,EAAOumB,aACrBJ,QAASnmB,EAAOmmB,QAChBD,UAAWlmB,EAAOkmB,UAClBU,uBAAwB5mB,EAAO4mB,uBAC/BJ,iBAAkBxmB,EAAOwmB,iBACzB5hB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOolB,GAAuBroB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KA5EN,6BA6EFkJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvDxB,SA2DG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACE+D,YAAeA,EACf7E,aAAgBA,EAChBiM,cAAiBA,EACjB9C,gBAAmBA,EACnBlJ,OAAUA,EACVa,OAAUA,eC8BT9L,qBAAkByD,aA9HjC,YAA0D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAChC2K,GADiD,EAAV1K,QAClCD,EAAMkD,OAAOyH,IAElBrG,EAAYnI,EAAE,uCACpB,EAAiC2C,YAAS6uB,GAAqB,CAC7DtoB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA0ByI,YAAYmmB,IAA/BgB,EAAP,oBAEA,GAAI9vB,EAAS,OACX,eAAC,GAAD,CAA6BoM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA6BmM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM8M,EAAc9M,EAEhB6vB,EAAoB,GACpB/iB,EAAY6a,sBAAsBgI,yBACpCE,EAAoB/iB,EAAY6a,sBAAsBgI,uBAAuBjkB,IAG/E,IAAIihB,EAAmB,GACnB7f,EAAY6a,sBAAsBha,mBACpCgf,EAAoB7f,EAAY6a,sBAAsBha,iBAAiBjC,IAGzE,IAAIkhB,EAAoB,GAKxB,OAJI9f,EAAY6a,sBAAsB5a,oBACpC6f,EAAqB9f,EAAY6a,sBAAsB5a,kBAAkBrB,IAIzE,eAAC,GAAD,CAA6BQ,UAAU,EAAvC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb0P,cAAevL,EAAY6a,sBAAsBtP,cACjD6S,YAAape,EAAY6a,sBAAsBuD,YAC/C8D,UAAWliB,EAAY6a,sBAAsBqH,UAC7CjtB,KAAM+K,EAAY6a,sBAAsB5lB,KACxCG,YAAa4K,EAAY6a,sBAAsBzlB,YAC/CsP,MAAO1E,EAAY6a,sBAAsBnW,MACzCC,eAAgB3E,EAAY6a,sBAAsBlW,eAAe/F,GACjEyjB,SAAUriB,EAAY6a,sBAAsBwH,SAC5CG,aAAcxiB,EAAY6a,sBAAsB2H,aAChDJ,QAASpiB,EAAY6a,sBAAsBuH,QAC3CD,UAAWniB,EAAY6a,sBAAsBsH,UAC7CU,uBAAwBE,EACxBN,iBAAkBziB,EAAY6a,sBAAsB4H,iBACpD5hB,iBAAmBgf,EACnB5f,kBAAmB6f,GAErB/jB,iBAAkBwmB,GAClBvmB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ6mB,EAAgB,CAAExpB,UAAW,CAC3B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB2M,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpB8D,UAAWjmB,EAAOimB,UAClBjtB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB0d,SAAUpmB,EAAOomB,SACjBG,aAAcvmB,EAAOumB,aACrBJ,QAASnmB,EAAOmmB,QAChBD,UAAWlmB,EAAOkmB,UAClBU,uBAAwB5mB,EAAO4mB,uBAC/BJ,iBAAkBxmB,EAAOwmB,iBACzB5hB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOolB,GAAuBroB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxDxB,SA4DG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACE+D,YAAeA,EACf7E,aAAgBA,EAChBiM,cAAiBA,EACjB9C,gBAAmBA,EACnBlJ,OAAUA,EACVa,OAAUA,eC1ET9L,I,wBAAAA,iBAAkByD,aA1CjC,YAAsF,IAAzCxD,EAAwC,EAAxCA,EAAG8D,EAAqC,EAArCA,QAAS5D,EAA4B,EAA5BA,SAA4B,IAAlB8O,gBAAkB,SACnF,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,4BACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,yCAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAI,mCAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,6BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,yCADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,0CAIjD,eAAC,GAAD,CAAkBoO,WAAW,sBCrD9BwkB,GAA6Br3B,YAAH,0ZAqB1Bs3B,GAA4Bt3B,YAAH,6KAWzBu3B,GAAmCv3B,YAAH,0mBAgChCw3B,GAAsBx3B,YAAH,yOAUnBy3B,GAAyBz3B,YAAH,uPAWtB03B,GAAyB13B,YAAH,8LAQtB23B,GAAoB33B,YAAH,0ZAkBjB43B,GAAyB53B,YAAH,8MCuLpBwE,qBAAkByD,aAlRjC,YAAuD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC1C,EAA4CnB,YAASiwB,IAA7ChwB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAC9B,EAA+BwH,YAAY0nB,IAApCG,EAAP,oBAGA,GAAIxwB,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWnI,EAAE,uCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWnI,EAAE,uCAA1B,SACE,6BAAIA,EAAE,qDAKZ,IAAMqzB,EAAmBvwB,EAAKwwB,4BAG9B,OAAKD,EAAiB5xB,MAAM0E,OAW1B,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWnI,EAAE,uCACZ6H,SAAUwrB,EAAiBxrB,SAC3BS,aAAa,EACbN,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO6pB,EAAiBxrB,SAAS4B,WAEnCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB0pB,4BAA4B7xB,MACvDoG,EAAW+B,EAAgB0pB,4BAA4BzrB,SAE7D,OAAOgC,EAAS1D,OACZ,CAGEmtB,4BAA6B,CAC3BxpB,WAAYH,EAAe2pB,4BAA4BxpB,WACvDrI,MAAM,GAAD,oBAAOkI,EAAe2pB,4BAA4B7xB,OAAlD,aAA4DoI,IACjEhC,aAGJ8B,MAtBtB,SA0BM,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,2BAFNgK,kBAKlB,eAAC,KAAMxD,KAAP,UACG6sB,EAAiB5xB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC1B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKoD,YAAYuuB,UAAU,EAAG,KADjBvpB,gBAGhB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACI,eAAC,KAAD,CAAQA,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,yCAA2CvB,EAAK4M,KAC5E7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,gDAAkDvB,EAAK4M,KACnF7J,MAAM,YAFd,SAGG3E,EAAE,mDAT8BgK,gBAYvC,eAAC,KAAMnE,IAAP,UACE,yBAAQ1F,UAAU,uCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,sDACd+R,eAAgB,6BAAInQ,EAAKiD,OACzBmN,WAAYhS,EAAE,2CACdiS,eAAgBmhB,EAChBlhB,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOymB,SAfhB,SAmBE,uBAAMzyB,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBAvCxCmF,4BA9C9B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,uCAA1B,SACE,6BAAIA,EAAE,sDChDDwzB,GAAyBjpB,OAAaC,MAAM,CACrD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCmGHD,qBAAkByD,aAlFjC,YAAsD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACnCgF,EAAY,mCAClB,EAA8ByC,YAAYwnB,IAAlCU,EAAR,oBAEA,OACE,eAAC,GAAD,CAAmCzkB,UAAU,EAA7C,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,2CAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAIG,YAAa,IACxC2G,iBAAkB6nB,GAClB5nB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB2nB,EAAkB,CAAEvqB,UAAW,CAC7B6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOymB,OAEXxmB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,mDAAqD,CAClEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBxB,SA2BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKxE,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,sBAGP+K,EACA,gBAAC,KAAD,CAAOvG,KAAK,UAAUkvB,eAAa,EAAnC,UACE,kCAAS1zB,EAAE,yBADb,IAC+CA,EAAE,sEAEjD,oBC8CTD,qBAAkByD,aAnHjC,YAA8D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC3C0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,4CACd8I,EAAY,mCAClB,EAAiCnG,YAASkwB,GAA2B,CACnE3pB,UAAW,CAACsF,GAAIA,KADV5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAiCyI,YAAYynB,IAArCW,EAAR,oBAGA,GAAI/wB,EAAS,OACX,eAAC,GAAD,CAAmCoM,UAAU,EAA7C,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAmCmM,UAAU,EAA7C,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAMZ,IAAM4P,EAAc9M,EAAK8wB,2BAIzB,OAHAr5B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAAmCkM,UAAU,EAA7C,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBG,YAAa4K,EAAY5K,aAE3B2G,iBAAkB6nB,GAClB5nB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8nB,EAAqB,CAAEzqB,UAAW,CAChC6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOymB,OAEXxmB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,oDAAsD,CACnEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BxB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,uCC4ChBD,I,kBAAAA,iBAAkByD,aAlJjC,YAAsE,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC3CgwB,GAD6D,EAAX/vB,QACxCD,EAAMkD,OAAOyH,IAEvBrG,EAAYnI,EAAE,uDACpB,EAAiC2C,YAASmwB,GAAkC,CAC1E5pB,UAAW,CAAEsF,GAAIqlB,KADXjxB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA2ByI,YAAY2nB,IAA/BY,EAAR,oBACA,EAAgCvoB,YAAY4nB,IAApCY,EAAR,oBAGA,GAAInxB,EAAS,OACX,eAAC,GAAD,CAAmCoM,UAAU,EAA7C,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAmCmM,UAAU,EAA7C,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMkxB,EAASlxB,EAAK+uB,wBACdoC,EAAQnxB,EAAK8wB,2BAEfM,EAAe,GAOnB,OANID,EAAMpC,wBAAwBpwB,OAChCwyB,EAAMpC,wBAAwBpwB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtCsyB,EAAatyB,EAAK4M,KAAM,KAK1B,eAAC,GAAD,CAAmCQ,UAAU,EAA7C,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,gBAAC,KAAK3B,KAAN,WACE,gBAAC,KAAD,CAAOhC,KAAK,UAAZ,UACE,kCAASxE,EAAE,mBADb,IACyCi0B,EAAMpvB,QAE/C,gBAAC,KAAD,WACE,eAAC,KAAMkB,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,MACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,QAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKwtB,EAAOvyB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACIjE,EAAK4M,MAAM0lB,EACX,eAAC,KAAD,CAAMrvB,KAAK,eAAe1E,UAAU,eAAkB,eAAC,KAAD,CAAM0E,KAAK,WAAW1E,UAAU,cAF1E6J,gBAKhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiD,MADQmF,gBAGfzP,QAAQC,IAAKoH,EAAK4M,MAAM0lB,GACrBtyB,EAAK4M,MAAM0lB,EAmCb,eAAC,KAAMruB,IAAP,CAAW1F,UAAU,sBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,6BACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,kBACZD,QAAQC,IAAIoH,EAAK4M,IACjB,IAAI2lB,EAAUvyB,EAAK4M,GACnBulB,EAAoB,CAAE7qB,UAAW,CAC/B6C,MAAO,CACL0e,sBAAuB0J,EACvBP,2BAA4BC,IAEjC3nB,eAAgB,CACf,CAACC,MAAO2mB,GAAkC5pB,UAAW,CAAC,GAAM2qB,OAC5DznB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,8BAA+B,CAC7CuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAxBtD,UA2BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,iBA3BzB,IA2B6C,IAC1C7E,EAAE,iCA7ByCgK,gBAjChD,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,wBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,wBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,eACZ,IAAI25B,EAAUvyB,EAAK4M,GACnBslB,EAAe,CAAE5qB,UAAW,CAC1B6C,MAAO,CACL0e,sBAAuB0J,EACvBP,2BAA4BC,IAEjC3nB,eAAgB,CACf,CAACC,MAAO2mB,GAAkC5pB,UAAW,CAAC,GAAM2qB,OAC5DznB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,0BAA2B,CACzCuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,UA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,gBA1BzB,IA0B4C,IACzC7E,EAAE,4BA5B2CgK,kBAZtCA,mCChF3B,SAAS0G,KACd,IAAIxB,EAAWtQ,aAAagS,QAAQ9R,EAAKlC,kCACxB,OAAbsS,IACFA,GAAW,GAGb,IAAIyB,EAAY,CACdzB,SAAwB,SAAbA,GAKb,OAFA3U,QAAQC,IAAImW,GAELA,ECZF,IAAMyjB,GAAuB74B,YAAH,qgBAyBpB84B,GAAsB94B,YAAH,uNAcnB+4B,GAAgB/4B,YAAH,0TAgBbg5B,GAAmBh5B,YAAH,qUAehBi5B,GAAyBj5B,YAAH,yUAgBtBk5B,GAAoBl5B,YAAH,sPCjCfwE,qBAAkByD,aApCjC,YAA6E,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SAC1E,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,4BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,wBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,+BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,sCAKnD,eAAC,GAAD,CAAkBoO,WAAW,gCCkJ5BrO,qBAAkByD,aApKjC,YAA+D,IAA9BxD,EAA6B,EAA7BA,EAAG8D,EAA0B,EAA1BA,QAA0B,IAAjBoL,gBAAiB,SAC5D,EAAmDvM,YAASyxB,GAAsB,CAChFlrB,UAAWwH,OADN9N,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMsM,EAA7B,EAA6BA,QAASrL,EAAtC,EAAsCA,UAGtC,EAA2BwH,YAAYkpB,IAAhCC,EAAP,oBAEA,GAAI9xB,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWnI,EAAE,iCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWnI,EAAE,iCAA1B,SACE,6BAAIA,EAAE,+CAIZ,IAAMoJ,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAAwE,UAAhE/F,aAAagS,QAAQ9R,EAAKlC,kCAAiD,UAAW,YAC9F8H,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAKlC,kCAAkC,GAC5DwS,EAAQsB,OAJlB,SAOG1Q,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAwE,SAAhE/F,aAAagS,QAAQ9R,EAAKlC,kCAAgD,UAAW,YAC7F8H,KAAK,KACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAKlC,kCAAkC,GAC5DwS,EAAQsB,OALlB,SAQG1Q,EAAE,wBAID20B,EAAa7xB,EAAK8xB,uBAExB,OAAKD,EAAWlzB,MAAM0E,OAYpB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWnI,EAAE,iCACboI,cAAegB,EACfd,aAAa,EACbT,SAAU8sB,EAAW9sB,SACrBG,WAAY,WACXjE,EAAU,CACRmF,UAAW,CACTM,MAAOmrB,EAAW9sB,SAAS4B,WAE7BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBgrB,uBAAuBnzB,MAClDoG,EAAW+B,EAAgBgrB,uBAAuB/sB,SAExD,OAAOgC,EAAS1D,OACZ,CAGEyuB,uBAAwB,CACtB9qB,WAAYH,EAAeirB,uBAAuB9qB,WAClDrI,MAAM,GAAD,oBAAOkI,EAAeirB,uBAAuBnzB,OAA7C,aAAuDoI,IAC5DhC,aAGJ8B,MAvBtB,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,MACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKmuB,EAAWlzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,KAAD,CAAQnB,KAAK,KAAKL,SAAUzC,EAAKqC,0BADnB+F,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKuZ,cACL,eAAC,KAAD,CAAOxW,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,iBAHbgK,gBAKhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACoE,SAAhEvB,aAAagS,QAAQ9R,EAAKlC,kCAC1B,uBAAMuD,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,iCACE,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,iCAAmCvB,EAAK4M,KACpE7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,uCAAyCvB,EAAK4M,KAC1E7J,MAAM,YAFd,SAGG3E,EAAE,4CAZ4BgK,gBAiBvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACTyI,QAAS,WACPlO,QAAQC,IAAI,oBACZk6B,EAAiB,CAAExrB,UAAW,CAC5B6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTU,UAAWtN,EAAKsN,WAEvBhD,eAAgB,CACf,CAACC,MAAOioB,GAAsBlrB,UAAWwH,SACzCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACH1K,EAAKsN,SAAYlP,EAAE,sBAAuBA,EAAE,oBAAqB,CAChEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OArBtD,SAwBE,eAAC,KAAD,CAAMgC,KAAK,aAzBwBmF,kBA7BzBA,4BAlD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,iCACdoI,cAAegB,EAD3B,SAEE,6BACyDpJ,EAAtDkP,EAAwD,wCAA1C,gDC7EZ2lB,GAAmBtqB,OAAaC,MAAM,CAC/C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdgF,YAAauF,OACbuqB,WAAYvqB,OACTmJ,IAAI1T,YAAE,cC4HED,qBAAkByD,aA3GjC,YAAiD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC9BgF,EAAY,2BAClB,EAAuByC,YAAY+oB,IAA5BS,EAAP,oBAEA,OACE,eAAC,GAAD,CAA4B/lB,UAAU,EAAtC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,yCAEjB,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAIG,YAAa,GAAImW,eAAe,EAAM2Z,WAAY,IAC7EnpB,iBAAkBkpB,GAClBjpB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBipB,EAAa,CAAE7rB,UAAW,CACxB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBmW,cAAetP,EAAOsP,cACtB2Z,WAAYjpB,EAAOipB,WACnBE,MAAOnpB,EAAOmpB,QAGf9oB,eAAgB,CACf,CAACC,MAAOioB,GAAsBlrB,UAAWwH,SAE5CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3BxB,SA+BK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACG,gBAAC,KAAD,WAGI,gBAAC,KAAKrF,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,sCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,MAGrC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,aACL1E,UAAY6K,EAAO8pB,WAAc,0BAA4B,eAC7D3pB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,aAAauG,UAAU,OAAOjL,UAAU,2BAGjE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAjD,SACK9I,EAAE,sCCmDhBD,qBAAkByD,aAlJjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAC7BwO,GADkD,EAAlB1K,QAAkB,EAATD,MAC9BkD,OAAOyH,IAClBrG,EAAYnI,EAAE,sCAEpB,EAAiC2C,YAAS0xB,GAAqB,CAAEnrB,UAAW,CAC1EsF,GAAIA,KADE5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA4ByI,YAAYgpB,IAAhCU,EAAR,oBAEA,GAAIryB,EAAS,OACX,eAAC,GAAD,CAA4BoM,UAAU,EAAtC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA4BmM,UAAU,EAAtC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAMZ,IAAM4P,EAAc9M,EAAKoyB,sBAIzB,OAHA36B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA4BkM,UAAU,EAAtC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBG,YAAa4K,EAAY5K,YACzBmW,cAAevL,EAAYuL,cAC3B2Z,WAAYllB,EAAYklB,YAE1BnpB,iBAAkBkpB,GAClBjpB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZopB,EAAgB,CAAE/rB,UAAW,CAC3B6C,MAAO,CACLyC,GAAIA,EACJ3J,KAAMgH,EAAOhH,KACbG,YAAc6G,EAAO7G,YAAe6G,EAAO7G,YAAa,GACxDmW,cAAetP,EAAOsP,cACtB2Z,WAAajpB,EAAOipB,WAAcjpB,EAAOipB,WAAY,KAEtD5oB,eAAgB,CACf,CAACC,MAAOioB,GAAsBlrB,UAAW,CAAC,UAAY,OAEzDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlC1B,SAsCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQmL,EAAjC,EAAiCA,cAAe9C,EAAhD,EAAgDA,gBAAhD,OACG,gBAAC,KAAD,WACK3Z,QAAQC,IAAIqR,GACb,gBAAC,KAAKrF,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,sCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,MAGnC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,aACL1E,UAAY6K,EAAO8pB,WAAc,0BAA4B,eAC7D3pB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,aAAauG,UAAU,OAAOjL,UAAU,2BAGjE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GA9HV,2BA8HI,SACE,eAAC,KAAD,CACEmB,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,wCCYlBD,I,eAAAA,iBAAkByD,aA9IjC,YAA8D,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QACpCqxB,EADqD,EAARtxB,MACzBkD,OAAOyH,GAC3B1F,EAAY,2BACZX,EAAYnI,EAAE,sCACpB,EAAiC2C,YAAS0xB,GAAqB,CAC7DnrB,UAAW,CAAEsF,GAAI2mB,KADXvyB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAwByI,YAAYipB,IAA5BY,EAAR,oBAGA,EAAgCzoB,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAIpC,OAAIjC,EACF,eAAC,GAAD,CAA4BoM,UAAU,EAAtC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMlBkC,EACF,eAAC,GAAD,CAA4BmM,UAAU,EAAtC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,mCAKQ8C,EAAKoyB,sBACzB36B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMkD,MAAOmC,EAAb,SACC,eAAC,KAAD,CACGsD,cAAe,GAEfG,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACd9d,GAAI2mB,EACJE,cAAenJ,GAGbK,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAU0I,MAAQrI,EAElByI,EAAY,CAAElsB,UAAW,CACvB6C,MAAOugB,GACNpgB,eAAgB,CACjB,CAACC,MAAOioB,GAAsBlrB,UAAW,CAAC,UAAY,OAEvDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAIpB,IAAIwhB,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxJ,MAAM7C,EAAE,gCAAiC,CAC7CuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAtDrB,SA0DI,gBAAGf,EAAH,EAAGA,aAAH,EAAiBC,OAAjB,EAAyBa,OAAzB,OACC,gBAAC,KAAD,WACA,eAAC,KAAKrF,KAAN,UACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,eAOb,gBAAC,KAAKtjB,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,wCC/JRs1B,GAAwB/5B,YAAH,ubAoBrBg6B,GAAsBh6B,YAAH,0JAUnBi6B,GAAgBj6B,YAAH,mQAYbk6B,GAAmBl6B,YAAH,mOAWhBm6B,GAAoBn6B,YAAH,0OCCfwE,qBAAkByD,aApCjC,YAAgF,IAAzCxD,EAAwC,EAAxCA,EAAYE,GAA4B,EAArC4D,QAAqC,EAA5B5D,UAA4B,IAAlB8O,gBAAkB,SAC7E,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,4BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAInD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,wBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,gCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,uCAKjD,eAAC,GAAD,CAAkBoO,WAAW,iCC8H5BrO,qBAAkByD,aAjJjC,YAAkD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QACpC,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,kCACpB,EAAqD2C,YAAS2yB,GAAuB,CACnFpsB,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA6BwH,YAAYmqB,IAAjCC,EAAR,oBAEMvsB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,gDAKZ,IAAM41B,EAAc9yB,EAAK+yB,wBAGzB,OAAKD,EAAYn0B,MAAM0E,OAYrB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACVC,cAAegB,EACfd,aAAa,EACbT,SAAU+tB,EAAY/tB,SACtBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOosB,EAAY/tB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBisB,wBAAwBp0B,MACnDoG,EAAW+B,EAAgBisB,wBAAwBhuB,SAEzD,OAAOgC,EAAS1D,OACZ,CAGE0vB,wBAAyB,CACvB/rB,WAAYH,EAAeksB,wBAAwB/rB,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeksB,wBAAwBp0B,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAvBtB,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,eAAC,KAAM3F,IAAP,UACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBADNgK,kBAIlB,eAAC,KAAMxD,KAAP,UACKovB,EAAYn0B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,kCAAoCvB,EAAK4M,KACrE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdmnB,EAAiB,CAAEzsB,UAAW,CAC5B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOmpB,GAAuBpsB,UAAW,CAAC,SAAYgG,OACvD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAdzBA,4BA/C5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACZC,cAAegB,EAD3B,SAEE,6BAC4DpJ,EAAvDkP,EAAyD,yCAA3C,iDCzEd4mB,GAAmBvrB,OAAaC,MAAM,CAC/C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCsFHD,qBAAkByD,aApEjC,YAAiD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC9BgF,EAAY,4BAClB,EAAyByC,YAAYiqB,IAA7BO,EAAR,oBAEA,OACE,eAAC,GAAD,CAA6B/mB,UAAU,EAAvC,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,sCAAf,SACE,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkBmqB,GAClBlqB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBiqB,EAAa,CAAE7sB,UAAW,CACxB6C,MAAO,CACLlH,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOmpB,GAAuBpsB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAtB1B,SA0BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,gBAAC,KAAD,WACI,eAAC,KAAKxE,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,uCC+ClBD,qBAAkByD,aAtGjC,YAAyD,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAASD,EAAQ,EAARA,MACxC2K,EAAK3K,EAAMkD,OAAOyH,GAClB1F,EAAY,4BACZX,EAAYnI,EAAE,uCACpB,EAAiC2C,YAAS4yB,GAAqB,CAC7DrsB,UAAW,CAACsF,GAAIA,KADV5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA4ByI,YAAYkqB,IAAhCO,EAAR,oBAEA,GAAIpzB,EAAS,OACX,eAAC,GAAD,CAA6BoM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA6BmM,UAAU,EAAvC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAKmzB,sBAEzB,OACE,eAAC,GAAD,CAA6BjnB,UAAU,EAAvC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,MAEpB8G,iBAAkBmqB,GAClBlqB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZmqB,EAAgB,CAAE9sB,UAAW,CAC3B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOmpB,GAAuBpsB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5B1B,SAgCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACG,gBAAC,KAAD,WACI,eAAC,KAAKrF,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,uCCrBlBD,qBAAkByD,aAtEjC,YAA8C,IAAbxD,EAAY,EAAZA,EACzBk2B,EADqC,EAATryB,MACLkD,OAAOovB,gBAC9BC,EAAW,CACf,CAAE,uBAAwBp2B,EAAE,iCAC5B,CAAE,iBAAkBA,EAAE,4BAIxB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBActB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oCAEjB,gBAAC,KAAD,CAAOoG,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,MAFcC,kBAKlB,eAAC,KAAMxD,KAAP,UACK4vB,EAAS9vB,KAAI,SAAC+vB,GAAD,OACZ,gBAAC,KAAMj2B,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGwwB,EAAQ,IADKrsB,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,kCAA6B6yB,EAA7B,YAA+CG,EAAQ,IAA/D,SACE,gBAAC,KAAD,CAAQl2B,UAAU,SACVwE,MAAM,YADd,UAEG3E,EAAE,kBAFL,IAEwB,eAAC,KAAD,CAAM6E,KAAK,wBAJAmF,kBAJzBA,6BAkB5B,gBAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,UACE,8BAAKvG,EAAE,kBACP,eAAC,GAAD,CAAkBoO,WAAW,+BCpE5BkoB,OATf,YAA2C,IAAfC,EAAc,EAAdA,WAElBzpB,EADc7D,qBAAWrI,IACAkM,WAE/B,OACI7C,KAAOssB,GAAYpsB,OAAO2C,ICWnB/M,kBAbiB,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,EAAGw2B,EAA8C,EAA9CA,SAA8C,IAApCr2B,iBAAoC,MAA1B,GAA0B,MAAtBuF,cAAsB,MAAf,SAAe,EAClF,OAAO,eAAC,KAAD,CACEf,MAAO,aAAexE,EACtBuE,KAAK,KACLpB,KAAK,iBACLoC,OAAQA,EACR0hB,cAAc,IACdhjB,KAAMoyB,EANR,SAQGx2B,EAAE,yBCwBCD,I,eAAAA,iBAAkByD,aA1BjC,YAAiF,IAA5CxD,EAA2C,EAA3CA,EAAGE,EAAwC,EAAxCA,SAAUu2B,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,cAC7D,OACE,eAAC,GAAD,UACE,sBAAKv2B,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACGs2B,MAGL,gBAAC,KAAKr2B,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACGmwB,EACD,8BAAK12B,EAAE,kBACP,eAAC,GAAD,CAAkBoO,WAAW,+BC/B9BuoB,GAAsBp7B,YAAH,4cAwBnBq7B,GAAqBr7B,YAAH,iMAYlBs7B,GAAet7B,YAAH,oRAaZu7B,GAAkBv7B,YAAH,oRAafw7B,GAAkBx7B,YAAH,uLCrBbwE,qBAAkByD,aA9BjC,YAAuD,IAAlBxD,EAAiB,EAAjBA,EAAU4B,GAAO,EAAdiC,MAAc,EAAPjC,MAC7C,EAA+C2J,YAAYwrB,IAA3D,mBAAOC,EAAP,KAEA,OAFA,KAAqCl0B,KAGnC,yBAAQ3C,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPwuB,GAAc,CACZj3B,EAAGA,EACH8R,WAAY9R,EAAE,6CACd+R,eAAgB,mCAAK/R,EAAE,mBAAP,KAA6B4B,EAAKs1B,WAClDllB,WAAYhS,EAAE,kCACdiS,eAAgB+kB,EAChB9kB,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CAAEyC,GAAI5M,EAAK4M,KAEpBtC,eAAgB,CACd,CAACC,MAAOwqB,GAAqBztB,UAAW,CAAEiuB,aAAcv1B,EAAKu1B,oBAfvE,SAoBE,uBAAMh3B,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBCpCjD,SAASuyB,GAAYp3B,EAAGm3B,GAC7B,OAAQA,GACN,IAAK,uBACH,OAAOn3B,EAAE,gCACX,IAAK,iBACH,OAAOA,EAAE,0BACX,QACE,MAAO,yBCiJED,qBAAkByD,aApHjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAChCqyB,GADkD,EAAXpyB,QACtBD,EAAMkD,OAAOovB,iBAC9BgB,EAAetzB,EAAMkD,OAAOswB,cAC5B/W,EAAW8W,GAAYp3B,EAAGm3B,GAE1BG,EAAO,eAAC,IAAD,CAAMj0B,GAAE,kCAA6B6yB,GAArC,SACX,gBAAC,KAAD,CACE5yB,KAAK,aACLnD,UAAU,OACVsE,SAAO,EACPE,MAAM,YAJR,UAMG3E,EAAE,mBANL,IAM0BA,EAAE,qCAGxB02B,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,MACXC,SAAS,uBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAE,kCAA6B6yB,EAA7B,YAA+CiB,EAA/C,QAAR,SACE,gBAAC,KAAD,CAAQxyB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,qCAKnD,EAA4C2C,YAASg0B,GAAqB,CACxEztB,UAAW,CAAEiuB,aAAcA,KADrBv0B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAI9B,OAAInB,EAEA,eAAC,GAAD,CAA2B6zB,YAAaa,EAAxC,SACGt3B,EAAE,+BAKL6C,EAEA,eAAC,GAAD,CAA2B4zB,YAAaa,EAAxC,SACGt3B,EAAE,0CAOP,eAAC,GAAD,CAA2By2B,YAAaa,EAAMZ,cAAeA,EAA7D,SACE,eAAC,GAAD,CACEvuB,UAAWnI,EAAE,gCAAkC,MAAQsgB,EACvDzY,SAAU/E,EAAKy0B,sBAAsB1vB,SACrCS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAKy0B,sBAAsB1vB,SAAS4B,WAE7CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB2tB,sBAAsB91B,MACjDoG,EAAW+B,EAAgB2tB,sBAAsB1vB,SAEvD,OAAOgC,EAAS1D,OACZ,CAGEoxB,sBAAuB,CACrBztB,WAAYH,EAAe4tB,sBAAsBztB,WACjDrI,MAAM,GAAD,oBAAOkI,EAAe4tB,sBAAsB91B,OAA5C,aAAsDoI,IAC3DhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACM,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACK1D,EAAKy0B,sBAAsB91B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACE,eAAC2xB,GAAD,CAAejB,WAAY30B,EAAK0iB,YAC9B1iB,EAAK2iB,QAAW,wCAAS,eAACiT,GAAD,CAAejB,WAAY30B,EAAK2iB,aAAqB,KAFlEva,gBAIhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKs1B,SADQltB,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAyB2wB,SAAU50B,EAAK61B,eAD1BztB,gBAGhB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACE,eAAC,IAAD,CAAMkD,GAAE,kCAA6B6yB,EAA7B,YAA+CiB,EAA/C,iBAAoEv1B,EAAK4M,IAAjF,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,oBAGP,eAAC,GAAD,CAA6B4B,KAAMA,MAPEoI,kBAXzBA,gCCvF9B+gB,ICjCsBxgB,OAAaC,MAAM,CAC3C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBD8BgB,CAChCgrB,WAAY,SACZC,QAAS,QACTC,SAAU,WAmKGnrB,sBA/Jf,YAAyD,IAAtBC,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACrCoyB,EAAiBryB,EAAMkD,OAAOovB,gBAC9BgB,EAAetzB,EAAMkD,OAAOswB,cAC5B/W,EAAW8W,GAAYp3B,EAAGm3B,GAGhC,EAAgCxqB,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAK9BiE,EAAS,kCAA8BotB,EAA9B,YAAgDiB,GACzDT,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,MACXC,SAAS,uBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAKrD,EAAgCuL,YAAYsrB,GAAc,CACxD5Z,YAAa,kBAAMnZ,EAAQX,KAAK2F,MADlC,mBAAO4uB,EAAP,KAIA,OAJA,KAAsB50B,KAKpB,eAAC,GAAD,CAA2B4zB,cAAeA,EAA1C,SACE,eAAC,KAAD,CAAM1wB,MAAOhG,EAAE,8BAAgC,MAAQsgB,EAAvD,SACE,eAAC,KAAD,CACE7U,cAAe,CACbyrB,QAAS,GACT5S,UAAW,GACXC,QAAS,GACTnd,SAAU,IAGZwE,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACd6K,aAAcA,EACdD,QAASrrB,EAAOqrB,QAChB5S,UAAWxM,GAAejM,EAAOyY,WACjCqT,iBAAkBzL,GAGhBrgB,EAAO0Y,UACT+H,EAAU/H,QAAUzM,GAAejM,EAAO0Y,UAG5C,IAAIgI,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAUllB,SAAWulB,EAErB+K,EAAY,CAAExuB,UAAW,CACvB6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOwqB,GAAqBztB,UAAW,CAACiuB,aAAcA,OAE1D/qB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAIpB,IAAIwhB,EAAOzB,EAAc0B,QAAQlB,MAAM,GACvCE,EAAOiB,cAAcF,IArDzB,SAwDG,gBAAGviB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,gBAAC,KAAD,WACA,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,UACL1E,UAAY6K,EAAOksB,QAAW,0BAA4B,eAC1D/rB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,cAMX,gBAAC,KAAK1rB,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,gCAKhE,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAjD,SACG9I,EAAE,oCEAJD,sBA9Jf,YAA0D,IAAtBC,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACtCoyB,EAAiBryB,EAAMkD,OAAOovB,gBAC9BgB,EAAetzB,EAAMkD,OAAOswB,cAC5B7oB,EAAK3K,EAAMkD,OAAOyH,GAClB8R,EAAW8W,GAAYp3B,EAAGm3B,GAE1BruB,EAAS,kCAA8BotB,EAA9B,YAAgDiB,GACzDT,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,SACXC,SAAS,uBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAKrD,EAA+CuL,YAAYurB,GAAiB,CAC1E7Z,YAAa,kBAAMnZ,EAAQX,KAAK2F,MADlC,mBAAO8uB,EAAP,KAGA,GAHA,KAAyB90B,KAGQH,YAASi0B,GAAoB,CAC5D1tB,UAAW,CAAE,GAAMsF,MADb5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,OAAIF,EAEA,eAAC,GAAD,CAA2B8zB,cAAeA,EAA1C,SACG12B,EAAE,+BAKL6C,EAEA,eAAC,GAAD,CAA2B6zB,cAAeA,EAA1C,SACG12B,EAAE,0CAOP,eAAC,GAAD,CAA2B02B,cAAeA,EAA1C,SACE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UACGvI,EAAE,+BAAiC,MAAQsgB,MAGhD,eAAC,KAAD,CACE7U,cAAe,CACbyrB,QAASp0B,EAAK+0B,qBAAqBX,QACnC5S,UAAWxhB,EAAK+0B,qBAAqBvT,UACrCC,QAASzhB,EAAK+0B,qBAAqBtT,SAGrC3Y,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ,IAAIygB,EAAY,CACd9d,GAAIA,EACJ0oB,QAASrrB,EAAOqrB,QAChB5S,UAAWxM,GAAejM,EAAOyY,YAG/BzY,EAAO0Y,UACT+H,EAAU/H,QAAUzM,GAAejM,EAAO0Y,UAG5CqT,EAAe,CAAE1uB,UAAW,CAC1B6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOwqB,GAAqBztB,UAAW,CAACiuB,aAAcA,OAE1D/qB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,gBAAC,KAAD,WACA,gBAAC,KAAKxQ,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,UACL1E,UAAY6K,EAAOksB,QAAW,0BAA4B,eAC1D/rB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,4BAc9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,gCAKhE,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAjD,SACG9I,EAAE,qCC5HJD,I,wBAAAA,iBAAkByD,aApCjC,YAA2E,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SACxE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,yBAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,6BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,oCAKnD,eAAC,GAAD,CAAkBoO,WAAW,8BC7C9B0pB,GAAqBv8B,YAAH,2mBA+BlBw8B,GAAoBx8B,YAAH,8MAajBy8B,GAAcz8B,YAAH,4NAUX08B,GAAiB18B,YAAH,2OAWd28B,GAAiB38B,YAAH,qLAQd48B,GAA8B58B,YAAH,mmBAgC3B68B,GAA0B78B,YAAH,+OAUvB88B,GAA+B98B,YAAH,oMC0D1BwE,qBAAkByD,aAnJjC,YAA6C,IAAdxD,EAAa,EAAbA,EAEvB8M,GAFoC,EAAVhJ,QACZmF,qBAAWrI,IACAkM,YAEzB3E,EAAYnI,EAAE,+BAEpB,EAAqD2C,YAASm1B,IAAtDl1B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAeiB,GAAvC,EAA8BqL,QAA9B,EAAuCrL,WACvC,EAA0BwH,YAAY2sB,IAA9BI,EAAR,oBAEA,GAAI11B,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,6CAKZ,IAAIu4B,EAAWz1B,EAAK01B,qBAGpB,OAAKD,EAAS92B,MAAM0E,OAUlB,eAAC,GAAD,UACE,eAAC,GAAD,CACEgC,UAAWA,EACXN,SAAU0wB,EAAS1wB,SACnBS,aAAa,EACbN,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO+uB,EAAS1wB,SAAS4B,WAE3BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4uB,qBAAqB/2B,MAChDoG,EAAW+B,EAAgB4uB,qBAAqB3wB,SAEtD,OAAOgC,EAAS1D,OACZ,CAGEqyB,qBAAsB,CACpB1uB,WAAYH,EAAe6uB,qBAAqB1uB,WAChDrI,MAAM,GAAD,oBAAOkI,EAAe6uB,qBAAqB/2B,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MAvBV,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kCACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACK+xB,EAAS92B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKiD,KACN,sBAAK1E,UAAU,aAAf,SACE,wBAAOsG,wBAAyB,CAACC,OAAQ9E,EAAKoD,mBAHlCgF,gBAMhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,KAE/B,eAAC,KAAMjH,IAAP,UACGjE,EAAK62B,sBAAsBh3B,MAAM6E,KAAI,gBAASgM,EAAT,EAAG1Q,KAAH,OACnC,+BAAK,eAAC,KAAD,CAAO+C,MAAM,UAAUxE,UAAU,OAAjC,SAAyCmS,EAASzN,cAG5D,gBAAC,KAAMgB,IAAP,CAAW1F,UAAU,aAArB,UACE,eAAC,IAAD,CAAMkD,GAAE,sCAAiCzB,EAAK4M,GAAtC,cAAR,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,kDAGP,eAAC,IAAD,CAAMqD,GAAE,sCAAiCzB,EAAK4M,IAA9C,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,oBAGP,yBAAQG,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,oDACd+R,eAAgB,6BAAInQ,EAAKiD,OACzBmN,WAAYhS,EAAE,yCACdiS,eAAgBqmB,EAChBpmB,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAO2rB,SAjBlB,SAsBE,uBAAM33B,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,kBAnCfmF,kBAlBzBA,4BAjD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CC1DD04B,GAAiBnuB,OAAaC,MAAM,CAC7C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCiGDD,iBAAkByD,aAtFH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcc,EAA7B,EAA6BA,OAAQb,EAArC,EAAqCA,OAAQkJ,EAA7C,EAA6CA,gBAAiB8C,EAA9D,EAA8DA,cAAelO,EAA7E,EAA6EA,UAA7E,OAC5B,gBAAC,KAAD,WACI,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAKC,IAAN,WACI,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACIG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACXwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,aAAa,IAE7BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE/C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACPwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE/BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,sBAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAIhE,8BAAKH,EAAE,sBACP,gBAAC,KAAKiL,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,UACL2W,QAAS3P,EAAOmmB,UAChB,uBAAM7xB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,wBAEnD,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,WAE3C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACL4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAG7C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,2BAGhE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,oBAEH,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACI,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCjBRD,qBAAkByD,aAzDjC,YAA+C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC5BgF,EAAY,yBAClB,EAAuByC,YAAYysB,IAA3BW,EAAR,oBAEA,OACC,eAAC,GAAD,CAA0B3pB,UAAU,EAApC,SACC,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,uCAEjB,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAIG,YAAa,GAAIgtB,SAAS,GACrDrmB,iBAAkB+sB,GAClB9sB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB6sB,EAAW,CAAEzvB,UAAW,CACtB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbyf,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/Bvf,YAAa6G,EAAO7G,YACpBgtB,QAASnmB,EAAOmmB,UAEjB9lB,eAAgB,CACf,CAACC,MAAO2rB,OAEX1rB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1B1B,SA8BK,gBAAGf,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,OAAQb,EAAzB,EAAyBA,OAAQkJ,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,gBCyDV/I,qBAAkByD,aAtGjC,YAAuD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACpC0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,oCACd8I,EAAY,yBAClB,EAAiCnG,YAASo1B,GAAmB,CAC3D7uB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA0ByI,YAAY0sB,IAA9BW,EAAR,oBAEA,GAAIh2B,EAAS,OACX,eAAC,GAAD,CAA0BoM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA0BmM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAK+1B,oBACzBt+B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAIZ,IAAIwhB,EAAY,KACZ1U,EAAY0U,YACdA,EAAY,IAAI1gB,KAAKgM,EAAY0U,YAEnC,IAAIC,EAAU,KAMd,OALI3U,EAAY2U,UACdA,EAAU,IAAI3gB,KAAKgM,EAAY2U,UAK/B,eAAC,GAAD,CAA0BvV,UAAU,EAApC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBG,YAAa4K,EAAY5K,YACzBsf,UAAWA,EACXC,QAASA,EACTyN,QAASpiB,EAAYoiB,SAEvBrmB,iBAAkB+sB,GAClB9sB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ+sB,EAAc,CAAE1vB,UAAW,CACzB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsf,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,WAEhCrY,eAAgB,CACf,CAACC,MAAO2rB,OAEX1rB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAnC1B,SAuCK,gBAAGf,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,OAAQb,EAAzB,EAAyBA,OAAQkJ,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,eCsDZ/I,qBAAkByD,aAjJjC,YAAkE,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACvCi1B,GADyD,EAAXh1B,QAClCD,EAAMkD,OAAOyH,IAE3BrG,EAAYnI,EAAE,8CAClB,EAAiC2C,YAASw1B,GAA6B,CACrEjvB,UAAW,CAAEsF,GAAIsqB,KADXl2B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAiCyI,YAAY6sB,IAArCW,EAAR,oBACA,EAAsCxtB,YAAY8sB,IAA1CW,EAAR,oBAGA,GAAIp2B,EAAS,OACX,eAAC,GAAD,CAA0BoM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA0BmM,UAAU,EAApC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMm2B,EAAYn2B,EAAK21B,sBACjBS,EAAUp2B,EAAK+1B,oBAEjBM,EAAoB,GASxB,OARID,EAAQT,sBAAsBh3B,OAChCy3B,EAAQT,sBAAsBh3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtCu3B,EAAkBv3B,EAAK4M,KAAM,KAIjCrG,EAAYA,EAAY,MAAQ+wB,EAAQr0B,KAGtC,eAAC,GAAD,CAA0BmK,UAAU,EAApC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,gBAAC,KAAD,WACE,eAAC,KAAMT,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,MACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,QAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKyyB,EAAUx3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACIjE,EAAK4M,MAAM2qB,EACX,eAAC,KAAD,CAAMt0B,KAAK,eAAe1E,UAAU,eAAkB,eAAC,KAAD,CAAM0E,KAAK,WAAW1E,UAAU,cAF1E6J,gBAKhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiD,MADQmF,gBAGfzP,QAAQC,IAAKoH,EAAK4M,MAAM2qB,GACrBv3B,EAAK4M,MAAM2qB,EAmCb,eAAC,KAAMtzB,IAAP,CAAW1F,UAAU,sBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,sDACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,kBACZD,QAAQC,IAAIoH,EAAK4M,IACjB,IAAI4qB,EAAax3B,EAAK4M,GACtBwqB,EAA0B,CAAE9vB,UAAW,CACrC6C,MAAO,CACL8sB,oBAAqBC,EACrBO,qBAAsBD,IAE3BltB,eAAgB,CACf,CAACC,MAAOgsB,GAA6BjvB,UAAW,CAAC,GAAM4vB,OACvD1sB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,uDAAwD,CACtEuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAxBtD,UA2BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,iBA3BzB,IA2B6C,IAC1C7E,EAAE,0DA7ByCgK,gBAjChD,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,wBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,iDACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,eACZ,IAAI4+B,EAAax3B,EAAK4M,GACtBuqB,EAAqB,CAAE7vB,UAAW,CAChC6C,MAAO,CACL8sB,oBAAqBC,EACrBO,qBAAsBD,IAE3BltB,eAAgB,CACf,CAACC,MAAOgsB,GAA6BjvB,UAAW,CAAC,GAAM4vB,OACvD1sB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,mDAAoD,CAClEuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,UA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,gBA1BzB,IA0B4C,IACzC7E,EAAE,qDA5B2CgK,kBAZtCA,kCCzBnBjK,I,eAAAA,iBAAkByD,aApCjC,YAA4E,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SACzE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,0BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,uBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,8BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,qCAKnD,eAAC,GAAD,CAAkBoO,WAAW,+BC7C9BkrB,GAAsB/9B,YAAH,mbAoBnBg+B,GAAqBh+B,YAAH,8JAUlBi+B,GAAej+B,YAAH,6OAYZk+B,GAAkBl+B,YAAH,+NAWfm+B,GAAmBn+B,YAAH,sOCgHdwE,qBAAkByD,aAhJjC,YAA8C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACjC,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,gCACpB,EAAqD2C,YAAS22B,GAAqB,CACjFpwB,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA4BwH,YAAYmuB,IAAhCC,EAAR,oBAEMvwB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CAKZ,IAAI45B,EAAY92B,EAAK+2B,sBAGrB,OAAKD,EAAUn4B,MAAM0E,OAanB,eAAC,GAAD,UACE,eAAC,GAAD,CACEgC,UAAWA,EACXC,cAAegB,EACfd,aAAa,EACbT,SAAU+xB,EAAU/xB,SACpBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOowB,EAAU/xB,SAAS4B,WAE5BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBiwB,sBAAsBp4B,MACjDoG,EAAW+B,EAAgBiwB,sBAAsBhyB,SAEvD,OAAOgC,EAAS1D,OACZ,CAGE0zB,sBAAuB,CACrB/vB,WAAYH,EAAekwB,sBAAsB/vB,WACjDrI,MAAM,GAAD,oBAAOkI,EAAekwB,sBAAsBp4B,OAA5C,aAAsDoI,IAC3DhC,aAGJ8B,MAxBV,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,eAAC,KAAM3F,IAAP,UACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBADNgK,kBAIlB,eAAC,KAAMxD,KAAP,UACKozB,EAAUn4B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,gCAAkCvB,EAAK4M,KACnE7J,MAAM,YAFd,SAGG3E,EAAE,kBAGP,yBAAQG,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdmrB,EAAgB,CAAEzwB,UAAW,CAC3B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOmtB,GAAqBpwB,UAAW,CAAC,SAAYgG,OACrD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,cAnCYmF,kBAJzBA,4BAjD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,gCACZoI,cAAegB,EAD7B,SAEE,6BAC0DpJ,EAArDkP,EAAuD,uCAAzC,+CCpEd4qB,GAAkBvvB,OAAaC,MAAM,CAC9C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCoCDD,iBAAkByD,aA9BF,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQlC,EAArC,EAAqCA,UAArC,OAC7B,gBAAC,KAAD,WACI,eAAC,KAAKtC,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACA,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,oBAEH,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACI,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCsCRD,qBAAkByD,aAlDjC,YAAgD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC7BgF,EAAY,0BAClB,EAAwByC,YAAYiuB,IAA5BO,EAAR,oBAEA,OACC,eAAC,GAAD,CAA2B/qB,UAAU,EAArC,SACC,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,wCAEjB,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkBmuB,GAClBluB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBiuB,EAAY,CAAE7wB,UAAW,CACvB6C,MAAO,CACLlH,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOmtB,GAAqBpwB,UAAW,CAAC,UAAY,OAExDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAtB1B,SA0BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBCqCV/I,I,eAAAA,iBAAkByD,aAhFjC,YAAwD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACrC0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,qCACd8I,EAAY,0BAClB,EAAiCnG,YAAS42B,GAAoB,CAC5DrwB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA2ByI,YAAYkuB,IAA/BO,EAAR,oBAEA,GAAIp3B,EAAS,OACX,eAAC,GAAD,CAA2BoM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2BmM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAKm3B,qBAIzB,OAHA1/B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA2BkM,UAAU,EAArC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,MAEpB8G,iBAAkBmuB,GAClBluB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZmuB,EAAe,CAAE9wB,UAAW,CAC1B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOmtB,GAAqBpwB,UAAW,CAAC,UAAY,OAExDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5B1B,SAgCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,eCvFdoxB,GAAsB3+B,YAAH,gdAqBnB4+B,GAAqB5+B,YAAH,mLAWlB6+B,GAAe7+B,YAAH,oQAaZ8+B,GAAkB9+B,YAAH,oPAYf++B,GAAmB/+B,YAAH,sOCNdwE,qBAAkByD,aApCjC,YAA4E,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SACzE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,0BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACjBC,SAAS,uBADzB,SAEE,eAAC,IAAD,CAAMc,GAAG,8BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,qCAKnD,eAAC,GAAD,CAAkBoO,WAAW,+BC4I5BrO,qBAAkByD,aAhKjC,YAA8C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACjC,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,gCACpB,EAAqD2C,YAASu3B,GAAqB,CACjFhxB,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAA4BwH,YAAY+uB,IAAhCrK,EAAR,oBAEM7mB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAKP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CAKZ,IAAIi5B,EAAYn2B,EAAK21B,sBAGrB,OAAKQ,EAAUx3B,MAAM0E,OAYnB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWA,EACdC,cAAegB,EACfd,aAAa,EACbT,SAAUoxB,EAAUpxB,SACpBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOyvB,EAAUpxB,SAAS4B,WAE5BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB6uB,sBAAsBh3B,MACjDoG,EAAW+B,EAAgB6uB,sBAAsB5wB,SAEvD,OAAOgC,EAAS1D,OACZ,CAGEsyB,sBAAuB,CACrB3uB,WAAYH,EAAe8uB,sBAAsB3uB,WACjDrI,MAAM,GAAD,oBAAOkI,EAAe8uB,sBAAsBh3B,OAA5C,aAAsDoI,IAC3DhC,aAGJ8B,MAvBlB,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAJcC,kBAOlB,eAAC,KAAMxD,KAAP,UACKyyB,EAAUx3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKuZ,cACL,eAAC,KAAD,CAAOxW,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,iBAHbgK,gBAKhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,iCACE,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,gCAAkCvB,EAAK4M,KACnE7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,iCAAmCvB,EAAK4M,KACpE7J,MAAM,YAFd,SAGG3E,EAAE,uBAZ4BgK,gBAiBvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdyhB,EAAgB,CAAE/mB,UAAW,CAC3B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAO+tB,GAAqBhxB,UAAW,CAAC,SAAYgG,OACrD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBA1BzBA,4BAlD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACZC,cAAegB,EAD3B,SAEE,6BACwDpJ,EAArDkP,EAAuD,uCAAzC,+CCtEZqrB,GAAkBhwB,OAAaC,MAAM,CAC9C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCqGHD,qBAAkByD,aAtFjC,YAAkD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC9BgF,EAAY,0BACZX,EAAYnI,EAAE,oCACpB,EAAwBuL,YAAY6uB,IAA5BI,EAAR,oBAEA,OACE,eAAC,GAAD,CAA2BxrB,UAAU,EAArC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACEsD,cAAe,CAAE5G,KAAM,GAAIsW,eAAe,GAC1CxP,iBAAkB4uB,GAClB3uB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB0uB,EAAY,CAAEtxB,UAAW,CACvB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACf,CAACC,MAAO+tB,GAAqBhxB,UAAW,CAAC,UAAY,OAExDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBxB,SA2BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAG/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,wCCqDdD,I,eAAAA,iBAAkByD,aA3HjC,YAAwD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACrC0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,qCACd8I,EAAY,0BAClB,EAAiCnG,YAASw3B,GAAoB,CAC5DjxB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA2ByI,YAAY8uB,IAA/B1K,EAAR,oBAGA,GAAI/sB,EAAS,OACX,eAAC,GAAD,CAA2BoM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA2BmM,UAAU,EAArC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,8CAKZ,IAAM4P,EAAc9M,EAAKu2B,qBAIzB,OAHA9+B,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA2BkM,UAAU,EAArC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAKjJ,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAaJ,IACZ5N,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,KAAD,CACI/C,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBsW,cAAevL,EAAYuL,eAE7BxP,iBAAkB4uB,GAClB3uB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ8jB,EAAe,CAAEzmB,UAAW,CAC1B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACf,CAACC,MAAO+tB,GAAqBhxB,UAAW,CAAC,UAAY,OAExDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9B1B,SAkCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qCAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,wCCpIlBy6B,GAA2Bl/B,YAAH,osBA6BxBm/B,GAA0Bn/B,YAAH,4PAevBo/B,GAAoBp/B,YAAH,iXAiBjBq/B,GAAuBr/B,YAAH,qUAgBpBs/B,GAAwBt/B,YAAH,sPChBnBwE,qBAAkByD,aA7CjC,YAAuF,IAA/CxD,EAA8C,EAA9CA,EAAY6D,GAAkC,EAA3CC,QAA2C,EAAlCD,OAAO3D,EAA2B,EAA3BA,SAA2B,IAAjB8O,gBAAiB,SAC9EoqB,EAAav1B,EAAMkD,OAAO+zB,YAEhC,OACE,eAAC,GAAD,UACE,sBAAK36B,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,0BACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,uCAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAE,wCAAmC+1B,GAA3C,SACE,gBAAC,KAAD,CAAQz0B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,2BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,4CAAuCQ,EAAMkD,OAAO+zB,aAA5D,SACE,gBAAC,KAAD,CAAQn2B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,0CAKrD,eAAC,GAAD,CAAkBoO,WAAW,+BCwI1BrO,qBAAkByD,aArKjC,YAA4D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAC1Ck3B,EAAyBl3B,EAAMkD,OAAO+zB,YACtC3yB,EAAYnI,EAAE,qCACpB,EAA8B2M,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACA,EAAqDxM,YAAS83B,GAA0B,CACtFvxB,UAAW,CAAEgG,SAAUA,EAAUmqB,qBAAsB0B,KADjDn4B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAAgCwH,YAAYsvB,IAApCG,EAAR,oBAEM5xB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAKP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,mDAKZ,IAAIi7B,EAAgBn4B,EAAKo4B,0BACrB5oB,EAAWxP,EAAKu2B,qBAGpB,OAAK4B,EAAcx5B,MAAM0E,OAYvB,eAAC,GAAD,UACE,eAAC,GAAD,CACEgC,UAAWA,EACCC,cAAegB,EACfd,aAAa,EACbT,SAAUozB,EAAcpzB,SACxBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOyxB,EAAcpzB,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBuxB,2BAA2B15B,MACtDoG,EAAW+B,EAAgBuxB,2BAA2BtzB,SAE5D,OAAOgC,EAAS1D,OACZ,CAGEg1B,2BAA4B,CAC1BrxB,WAAYH,EAAewxB,2BAA2BrxB,WACtDrI,MAAM,GAAD,oBAAOkI,EAAewxB,2BAA2B15B,OAAjD,aAA2DoI,IAChEhC,aAGJ8B,MAxBtB,SA4BE,iCACE,gBAAC,KAAD,CAAOnF,KAAK,UAAZ,UACE,kCAASxE,EAAE,sBADb,IAC4CsS,EAASzN,QAGrD,gBAAC,KAAD,CAAOuB,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAJcC,kBAOlB,eAAC,KAAMxD,KAAP,UACKy0B,EAAcx5B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAKuZ,cACL,eAAC,KAAD,CAAOxW,MAAM,UAAb,SAAwB3E,EAAE,iBAC1B,eAAC,KAAD,CAAO2E,MAAM,SAAb,SAAuB3E,EAAE,iBAHbgK,gBAKhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,sCAAwCU,EAAMkD,OAAO+zB,YAAc,IAAMl5B,EAAK4M,KAC1G7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUrC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdwsB,EAAoB,CAAE9xB,UAAW,CAC/B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CACEC,MAAOsuB,GACPvxB,UAAW,CAACgG,SAAUA,EAAUmqB,qBAAsB0B,OAExD3uB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OA1BtD,SA6BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA9BYmF,kBAnB3BA,+BAxD9B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACZC,cAAegB,EAD3B,SAEE,6BAC+DpJ,EAA1DkP,EAA4D,4CAA9C,oDCzEdksB,GAAuB7wB,OAAaC,MAAM,CACnD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCmDHD,iBAAkByD,aA1CI,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmB+K,GAAtB,EAAMjH,QAAN,EAAeD,MAAf,EAAsBkH,cAAcC,EAApC,EAAoCA,OAAQa,EAA5C,EAA4CA,OAAQ/C,EAApD,EAAoDA,UAApD,OACnC,gBAAC,KAAD,WACI,gBAAC,KAAKtC,KAAN,WACI,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,0CAEjD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAG/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAG3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCgCJD,qBAAkByD,aAnDjC,YAA6D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAClCs1B,EADoD,EAATv1B,MACxBkD,OAAO+zB,YAC1BhyB,EAAS,wCAAoCswB,GACnD,EAA4B7tB,YAAYovB,IAAhCU,EAAR,oBAEA,OACE,eAAC,GAAD,CAA+BrsB,UAAU,EAAzC,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,yCAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAIsW,eAAe,GAC1CxP,iBAAkByvB,GAClBxvB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBuvB,EAAgB,CAAEnyB,UAAW,CAC3B6C,MAAO,CACLstB,qBAAsBD,EACtBv0B,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACf,CAACC,MAAOsuB,GACNvxB,UAAW,CAAC,UAAY,EAAO,qBAAwBkwB,OAE5DhtB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzBxB,SA6BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,eCmCV/I,qBAAkByD,aAtFjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAASD,EAAQ,EAARA,MAC3C2K,EAAK3K,EAAMkD,OAAOyH,GAClB4qB,EAAav1B,EAAMkD,OAAO+zB,YAC1BhyB,EAAS,wCAAoCswB,GAC7CjxB,EAAYnI,EAAE,0CACpB,EAAiC2C,YAAS+3B,GAAyB,CACjExxB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA+ByI,YAAYqvB,IAAnCU,EAAR,oBAGA,GAAI14B,EAAS,OACX,eAAC,GAAD,CAA+BoM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA+BmM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAKy4B,yBAIzB,OAHAhhC,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAA+BkM,UAAU,EAAzC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBsW,cAAevL,EAAYuL,eAE7BxP,iBAAkByvB,GAClBxvB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZyvB,EAAmB,CAAEpyB,UAAW,CAC9B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbsW,cAAetP,EAAOsP,gBAEvBjP,eAAgB,CACjB,CAACC,MAAOsuB,GACNvxB,UAAW,CAAC,UAAY,EAAO,qBAAwBrF,EAAMkD,OAAO+zB,iBAEvE1uB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,kDAAoD,CACjEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACAd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,eC1CR/I,I,eAAAA,iBAAkByD,aApCjC,YAAyE,IAAxCxD,EAAuC,EAAvCA,EAAYE,GAA2B,EAApC4D,QAAoC,EAA3B5D,UAA2B,IAAjB8O,gBAAiB,SACtE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,uBAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,oBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,2BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,kCAKnD,eAAC,GAAD,CAAkBoO,WAAW,4BC7C9BotB,GAAmBjgC,YAAH,6aAoBhBkgC,GAAkBlgC,YAAH,kJAUfmgC,GAAYngC,YAAH,iOAYTogC,GAAepgC,YAAH,mNAWZqgC,GAAgBrgC,YAAH,0NCoHXwE,qBAAkByD,aAlJjC,YAA2C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC9B,EAA8B6I,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACMhH,EAAYnI,EAAE,6BACpB,EAAqD2C,YAAS64B,GAAkB,CAC9EtyB,UAAW,CAAEgG,SAAUA,KADjBtM,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAGvC,EAAyBwH,YAAYqwB,IAA7BC,EAAR,oBAEMzyB,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,UAAU,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,UAAU,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,2CAKZ,IAAI87B,EAASh5B,EAAKi5B,mBAGlB,OAAKD,EAAOr6B,MAAM0E,OAahB,eAAC,GAAD,UACE,eAAC,GAAD,CACEgC,UAAWA,EACXC,cAAegB,EACfd,aAAa,EACbT,SAAUi0B,EAAOj0B,SACjBG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOsyB,EAAOj0B,SAAS4B,WAEzBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBmyB,mBAAmBt6B,MAC9CoG,EAAW+B,EAAgBmyB,mBAAmBl0B,SAEpD,OAAOgC,EAAS1D,OACZ,CAGE41B,mBAAoB,CAClBjyB,WAAYH,EAAeoyB,mBAAmBjyB,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAeoyB,mBAAmBt6B,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAxBV,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,eAAC,KAAM3F,IAAP,UACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBADNgK,kBAIlB,eAAC,KAAMxD,KAAP,UACKs1B,EAAOr6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,6BAA+BvB,EAAK4M,KAChE7J,MAAM,YAFd,SAGG3E,EAAE,kBAGP,yBAAQG,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdqtB,EAAa,CAAE3yB,UAAW,CACxB6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOqvB,GAAkBtyB,UAAW,CAAC,SAAYgG,OAClD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,cAnCYmF,kBAJzBA,4BAjD5B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,6BACZoI,cAAegB,EAD7B,SAEE,6BACuDpJ,EAAlDkP,EAAoD,oCAAtC,4CCtEd8sB,GAAezxB,OAAaC,MAAM,CAC3C3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCoCDD,iBAAkByD,aA9BL,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQlC,EAArC,EAAqCA,UAArC,OAC1B,gBAAC,KAAD,WACI,eAAC,KAAKtC,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACA,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,oBAEH,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACI,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCsCRD,qBAAkByD,aAlDjC,YAA6C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC1BgF,EAAY,uBAClB,EAAqByC,YAAYmwB,IAAzBO,EAAR,oBAEA,OACC,eAAC,GAAD,CAAwBjtB,UAAU,EAAlC,SACC,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,qCAEjB,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkBqwB,GAClBpwB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBmwB,EAAS,CAAE/yB,UAAW,CACpB6C,MAAO,CACLlH,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOqvB,GAAkBtyB,UAAW,CAAC,UAAY,OAErDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAtB1B,SA0BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBCwCV/I,I,kBAAAA,iBAAkByD,aAhFjC,YAAqD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAClC0K,EAAK3K,EAAMkD,OAAOyH,GAClBrG,EAAYnI,EAAE,kCACd8I,EAAY,uBAClB,EAAiCnG,YAAS84B,GAAiB,CACzDvyB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAwByI,YAAYowB,IAA5BO,EAAR,oBAEA,GAAIt5B,EAAS,OACX,eAAC,GAAD,CAAwBoM,UAAU,EAAlC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAwBmM,UAAU,EAAlC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZ,IAAM4P,EAAc9M,EAAKq5B,kBAIzB,OAHA5hC,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAGV,eAAC,GAAD,CAAwBkM,UAAU,EAAlC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACIsD,cAAe,CACb5G,KAAM+K,EAAY/K,MAEpB8G,iBAAkBqwB,GAClBpwB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZqwB,EAAY,CAAEhzB,UAAW,CACvB6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,OAEdqH,eAAgB,CACf,CAACC,MAAOqvB,GAAkBtyB,UAAW,CAAC,UAAY,OAErDkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,0CAA4C,CACzDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5B1B,SAgCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,eCtFrBszB,G,gKACF,WACE,IAAMp8B,EAAIL,KAAKmI,MAAM9H,EAGrB,OAFiBL,KAAKmI,MAAMmqB,UAG1B,IAAK,OACD,OAAOjyB,EAAE,iBAEb,IAAK,QACD,OAAOA,EAAE,kBAEb,IAAK,SACD,OAAOA,EAAE,mBAEb,IAAK,QACD,OAAOA,EAAE,kBAEb,QACI,MAAO,Q,GAnBI0I,aCJV2zB,ID6BEt8B,cAAkBq8B,IC7BI7gC,YAAH,w3BAyCrB+gC,GAAuB/gC,YAAH,ggDA8EpBmzB,GAAyBnzB,YAAH,imCCvF7BghC,GAAqBhhC,YAAH,8PA+LTwE,iBAAkByD,aAnLD,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAN,IAAeoL,gBAAf,gBAC9B,eAAC,GAAD,UACE,sBAAK/O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,wBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,QAAD,CAAO4F,MAAOkwB,GAAuBnzB,UAAW,CAAEgG,YAAlD,SACE,YAA2F,IAAxFtM,EAAuF,EAAvFA,QAASC,EAA8E,EAA9EA,MAAuC25B,EAAuC,EAAvE15B,KAAO25B,wBAAuCrtB,EAAyB,EAAzBA,QAASrL,EAAgB,EAAhBA,UAExE,GAAInB,EAAS,OACX,eAAC,GAAD,CAAauF,UAAWnI,EAAE,kCAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,MAKpB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAasF,UAAWnI,EAAE,kCAA1B,SACE,6BAAIA,EAAE,8CAGV,IAAMoJ,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAuB2G,EAAQ,CAACF,SAAzBA,GAAS,KAFjC,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAsB2G,EAAQ,CAACF,SAAxBA,GAAS,KAHjC,SAIGlP,EAAE,wBAKP,OAAKw8B,EAAY/6B,MAAM0E,OAWrB,eAAC,GAAD,CAAagC,UAAWnI,EAAE,kCACboI,cAAegB,EACfvB,SAAU20B,EAAY30B,SACtBG,WAAY,WACXjE,EAAU,CACRmF,UAAW,CACTM,MAAOgzB,EAAY30B,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB6yB,wBAAwBh7B,MACnDoG,EAAW+B,EAAgB6yB,wBAAwB50B,SAEzD,OAAOgC,EAAS1D,OACZ,CAGEs2B,wBAAyB,CACvB3yB,WAAYH,EAAe8yB,wBAAwB3yB,WACnDrI,MAAM,GAAD,oBAAOkI,EAAe8yB,wBAAwBh7B,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAtBtB,SA0BE,gBAAC,KAAD,WACM,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBALNgK,kBAQlB,eAAC,KAAMxD,KAAP,UACKg2B,EAAY/6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,iBADZnR,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKosB,eADZhkB,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKkhB,aADR,IACsB,wBAClBlhB,EAAK2S,eACL,uBAAMpU,UAAU,aAAhB,SAA8ByB,EAAK2S,eAAe1P,OAChD,KAJUmF,gBAOhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKqwB,SADR,IACkB,wBAChB,uBAAM9xB,UAAU,aAAhB,SACGyB,EAAKswB,wBAHMloB,gBAMhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,kCAAoCvB,EAAK4M,KACrE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,WAAD,CAAUilB,SAAUsN,GAApB,SACG,SAACG,EAAD,KAAsB55B,KAAtB,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACf6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACdkuB,EAAkB,CAAExzB,UAAW,CAC7B6C,MAAO,CACNyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAOkwB,GAAuBnzB,UAAW,CAAC,SAAYgG,OACvD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBAFEA,kBAjC/BA,0BAhD9B,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,kCACboI,cAAegB,EAD5B,SAEE,6BAC0DpJ,EAAvDkP,EAAyD,yCAA3C,gDAyH3B,gBAAC,KAAKrJ,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,yBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,kCADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,qCAG/C,eAAC,GAAD,CAAkBoO,WAAW,iCCtN5BuuB,GAAoBpyB,OAAaC,MAAM,CAChD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdsU,MAAO/J,OACJG,SAAS1K,YAAE,uBACduU,eAAgBhK,OACbG,SAAS1K,YAAE,uBACdiyB,SAAU1nB,OACPI,SAAS3K,YAAE,iCACX0K,SAAS1K,YAAE,uBACdoyB,aAAc7nB,OACXG,SAAS1K,YAAE,yBCkBZ48B,GAAoBrhC,YAAH,6kBA+BjBshC,G,oDACJ,WAAY/0B,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,sCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAClBuL,EAAa,4BAEnB,OACE,eAAC,GAAD,UACE,sBAAK5Z,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,wCACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAOuiB,GAAwBxlB,UAAW,CAAEsF,MAAnD,SACC,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OAEE,eAAC,WAAD,CAAUmsB,SAAU2N,GAAmB3f,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAvE,SACC,SAAC+iB,EAAD,KAAqBh6B,KAArB,OACG,eAAC,KAAD,CACI2I,cAAe,CACb0P,eAAe,EACf6S,aAAa,EACbnpB,KAAM,GACNG,YAAa,GACbsP,MAAO,EACPC,eAAgB,GAChB0d,SAAU,EACVG,aAAc,SACd2K,mBAAoB,GACpBtsB,iBAAkB,GAClBZ,kBAAmB,IAErBlE,iBAAkBgxB,GAClB/wB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZixB,EAAiB,CAAE5zB,UAAW,CAC5B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpBnpB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB0d,SAAUpmB,EAAOomB,SACjBG,aAAcvmB,EAAOumB,aACrB2K,mBAAoBlxB,EAAOkxB,mBAC3BtsB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOkwB,GAAuBnzB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9C1B,SAkDK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAClB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qCAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,WAE7C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAGzC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHpB,UAIG5Q,QAAQC,IAAI,iCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,IAAQ4G,gBACrBmK,EAAUK,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,wBAEjE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,WACL1E,UAAY6K,EAAOinB,SAAY,0BAA4B,eAC3D9mB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,eACL1E,UAAY6K,EAAOonB,aAAgB,0BAA4B,eAC/DjnB,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,OAAd,SAAiCpD,EAAE,kBAATgK,gBAC1B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,mBAATgK,gBAC3B,yBAAQ5G,MAAM,SAAd,SAAmCpD,EAAE,oBAATgK,mBAE9B,eAAC,KAAD,CAAcnF,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,wBAE/D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,qBACbC,aAActL,EAAOkxB,mBACrBliC,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,qBAAsB5C,EAAE1O,OAAO2R,cAC7CnD,EAAgB,sBAAsB,GAAM,MAGhD,eAAC,KAAD,CAAcrP,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,wBAErE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU9D,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAEnE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU5E,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,2BAGtE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAH9B,SAKK/Z,EAAE,wCAYnC,gBAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,yBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,iC,GA5PL1F,aAsQzB3I,iBAAkByD,YAAWq5B,KCrStCG,GAAoBzhC,YAAH,uoBA+BjB0hC,G,oDACJ,WAAYn1B,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,uCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAClBuL,EAAa,4BAEnB,OACE,eAAC,GAAD,UACE,sBAAK5Z,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,yCACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAOmwB,GAAsBpzB,UAAW,CAAE,GAAMsF,EAAI,UAAY,GAAvE,SACC,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM8M,EAAc9M,EAEhB2sB,EAAmB,GACnB7f,EAAY6iB,uBAAuBhiB,mBACrCgf,EAAoB7f,EAAY6iB,uBAAuBhiB,iBAAiBjC,IAG1E,IAAIkhB,EAAoB,GAKxB,OAJI9f,EAAY6iB,uBAAuB5iB,oBACrC6f,EAAqB9f,EAAY6iB,uBAAuB5iB,kBAAkBrB,IAI1E,eAAC,WAAD,CAAUygB,SAAU+N,GAAmB/f,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAvE,SACC,SAAC+iB,EAAD,KAAqBh6B,KAArB,OACG,eAAC,KAAD,CACI2I,cAAe,CACb0P,cAAevL,EAAY6iB,uBAAuBtX,cAClD6S,YAAape,EAAY6iB,uBAAuBzE,YAChDnpB,KAAM+K,EAAY6iB,uBAAuB5tB,KACzCG,YAAa4K,EAAY6iB,uBAAuBztB,YAChDsP,MAAO1E,EAAY6iB,uBAAuBne,MAC1CC,eAAgB3E,EAAY6iB,uBAAuBle,eAAe/F,GAClEyjB,SAAUriB,EAAY6iB,uBAAuBR,SAC7CG,aAAcxiB,EAAY6iB,uBAAuBL,aACjD2K,mBAAoBntB,EAAY6iB,uBAAuBsK,mBACvDtsB,iBAAmBgf,EACnB5f,kBAAmB6f,GAErB/jB,iBAAkBgxB,GAClB/wB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZixB,EAAiB,CAAE5zB,UAAW,CAC5B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB2M,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpBnpB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB0d,SAAUpmB,EAAOomB,SACjBG,aAAcvmB,EAAOumB,aACrB2K,mBAAoBlxB,EAAOkxB,mBAC3BtsB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOkwB,GAAuBnzB,UAAW,CAAC,UAAY,OAE1DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/C1B,SAmDK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACG,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAClB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qCAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,WAE7C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAG3C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHpB,SAIGyE,EAAY4E,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,qBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,wBAEjE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,WACL1E,UAAY6K,EAAOinB,SAAY,0BAA4B,eAC3D9mB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,eACL1E,UAAY6K,EAAOonB,aAAgB,0BAA4B,eAC/DjnB,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,OAAd,SAAiCpD,EAAE,kBAATgK,gBAC1B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,mBAATgK,gBAC3B,yBAAQ5G,MAAM,SAAd,SAAmCpD,EAAE,oBAATgK,mBAE9B,eAAC,KAAD,CAAcnF,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,wBAE/D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,qBACbC,aAActL,EAAOkxB,mBACrBliC,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,qBAAsB5C,EAAE1O,OAAO2R,cAC7CnD,EAAgB,sBAAsB,GAAM,MAGlD,eAAC,KAAD,CAAcrP,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,wBAErE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrB4F,EAAYS,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAEnE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrB4F,EAAYL,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,2BAGtE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAH9B,SAKK/Z,EAAE,wCAYnC,gBAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,yBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,iC,GAnQJ1F,aA6Q1B3I,iBAAkByD,YAAWy5B,KC5Q7Bl9B,I,kBAAAA,iBAAkByD,aA9CjC,YAAuE,IAA/BxD,EAA8B,EAA9BA,EAAGE,EAA2B,EAA3BA,SAA2B,IAAjB8O,gBAAiB,SAGpE,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,qCACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,WAF3B,IAEwC7E,EAAE,yBAI9C,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,+BAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,2BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,kCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,yCAKnD,eAAC,GAAD,CAAkBoO,WAnCX,mCClBR8uB,GAA0B3hC,YAAH,yjCA+CvB4hC,GAAyB5hC,YAAH,6nDAmFtBmzB,GAAyBnzB,YAAH,oiCAqDtB6hC,GAAsB7hC,YAAH,8vBAqCnB8hC,GAAsB9hC,YAAH,0wBAqCnB+hC,GAAuB/hC,YAAH,sPC/DlBwE,qBAAkByD,aA1KjC,YAAkD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC/BqE,EAAYnI,EAAE,oCACpB,EAA8B2M,oBAAS,GAAvC,mBAAKuC,EAAL,KAAeC,EAAf,KACA,EAAmDxM,YAASu6B,GAAyB,CACnFh0B,UAAW,CAACgG,SAAUA,KADjBtM,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMsM,EAA7B,EAA6BA,QAASrL,EAAtC,EAAsCA,UAGtC,EAA8BwH,YAAY+xB,IAAnCC,EAAP,oBACMn0B,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAASuK,EAAuB,YAAX,UACrBxK,KAAK,KACL+D,QAAS,WAAO0G,GAAY,GAAQC,EAAQ,CAACF,SAAUA,KAF/D,SAGGlP,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAQuK,EAAY,UAAW,YAC/BxK,KAAK,KACLvE,UAAU,OACVsI,QAAS,WAAO0G,GAAY,GAAOC,EAAQ,CAACF,SAAUA,KAH9D,SAIGlP,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kDAKZ,IAAI2qB,EAAgB7nB,EAAK06B,0BAGzB,OAAK7S,EAAclpB,MAAM0E,OAYvB,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWnI,EAAE,oCACdoI,cAAegB,EACfd,aAAa,EACbT,SAAU8iB,EAAc9iB,SACxBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOmhB,EAAc9iB,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4zB,0BAA0B/7B,MACrDoG,EAAW+B,EAAgB4zB,0BAA0B31B,SAE3D,OAAOgC,EAAS1D,OACZ,CAGEq3B,0BAA2B,CACzB1zB,WAAYH,EAAe6zB,0BAA0B1zB,WACrDrI,MAAM,GAAD,oBAAOkI,EAAe6zB,0BAA0B/7B,OAAhD,aAA0DoI,IAC/DhC,aAGJ8B,MAvBtB,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAiB,uBAAM5J,UAAU,aAAhB,SAA8BH,EAAE,uBALnCgK,kBAQlB,eAAC,KAAMxD,KAAP,UACGmkB,EAAclpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,iBADZnR,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKosB,eADZhkB,gBAGhB,eAAC,KAAMnE,IAAP,UAEKjE,EAAKmwB,UAAa/xB,EAAE,qBACrB,iCACG4B,EAAKowB,QADR,IACiB,wBACf,wBAAM7xB,UAAU,aAAhB,cAA+BH,EAAE,aAAjC,IAAgD4B,EAAK67B,+BAL3CzzB,gBAShB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACGyB,EAAK87B,kBADR,IAC2B,wBACzB,eAAC,IAAD,CAAMr6B,GAAI,sCAAwCzB,EAAK4M,GACjDrO,UAAU,sBADhB,SAGKH,EAAE,0BAL8BgK,gBAQvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,oCAAsCvB,EAAK4M,KACvE7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IAAIgU,EAAK5M,EAAK4M,GACd+uB,EAAoB,CAAEr0B,UAAW,CAC/B6C,MAAO,CACPyC,KACAU,UAAWA,IAEhBhD,eAAgB,CACf,CAACC,MAAO+wB,GAAyBh0B,UAAW,CAAC,SAAYgG,OACzD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZkP,EAAc,qBAAyB,oBAAqB,CAC3D3C,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,SA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,aA3BYmF,kBArCzBA,4BAnD1B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWA,EACVC,cAAegB,EAD7B,SAEE,6BAC8DpJ,EAAzDkP,EAA2D,2CAA7C,mDCrEdyuB,GAAsBpzB,OAAaC,MAAM,CAClD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdgF,YAAauF,OACbqzB,UAAWrzB,OACRK,IAAI,GACPizB,YAAatzB,OACVK,IAAI,GACPonB,QAASznB,OACNK,IAAI,GACPkzB,iBAAkBvzB,OAClBwzB,eAAgBxzB,OACbK,IAAI,GACPynB,iBAAkB9nB,OACfK,IAAI,GACPmyB,mBAAoBxyB,SC0MTxK,iBAAkByD,aAzMI,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYmU,GAAf,EAAMrQ,QAAN,EAAeqQ,WAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAQ/C,EAAxF,EAAwFA,UAAxF,OACnC,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,yCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAClB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uCAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,WAE7C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,MAGrC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,cACL1E,UAAY6K,EAAO6yB,YAAe,0BAA4B,eAC9D1yB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,YACL1E,UAAY6K,EAAO4yB,UAAa,0BAA4B,eAC5DzyB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,6BAIhE,gBAAC,KAAK8K,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,YACL2W,QAAS3P,EAAO0mB,WAClB,uBAAMpyB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,0BAEnD,eAAC,KAAD,CAAc6E,KAAK,YAAYuG,UAAU,WAGxCS,EAAOkmB,UAAa,GAGrB,kCACE,gBAAC,KAAK3xB,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,UACL1E,UAAY6K,EAAOgnB,QAAW,0BAA4B,eAC1D7mB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,mBACL1E,UAAY6K,EAAO8yB,iBAAoB,0BAA4B,eACnE3yB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,OAAd,SAAiCpD,EAAE,2BAATgK,gBAC1B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,4BAATgK,mBAE7B,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,6BAIvE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,yBACL1E,UAAY6K,EAAOgzB,uBAA0B,0BAA4B,eACzE7yB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,yBAAyBuG,UAAU,OAAOjL,UAAU,2BAI7E,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,qBACbC,aAActL,EAAOkxB,mBACrBliC,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,qBAAsB5C,EAAE1O,OAAO2R,cAC7CnD,EAAgB,sBAAsB,MAG5C,eAAC,KAAD,CAAcrP,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,wBAcrE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,4BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,mBACL1E,UAAY6K,EAAOqnB,iBAAoB,0BAA4B,eACnElnB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAEnE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU9D,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU5E,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,gCAK1E,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,gCCzCFD,qBAAkByD,aAxJjC,YAAsD,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAClCqE,EAAYnI,EAAE,wCACd8I,EAAa,8BACnB,EAA+BnG,YAAS+rB,IAAjC9rB,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KACvB,EAA6ByI,YAAY6xB,IAAlCa,EAAP,oBAEA,GAAIr7B,EAAS,OACX,eAAC,GAAD,CAA+BoM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA+BmM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,GAAD,CAA+BkM,UAAU,EAAzC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACIsD,cAAe,CACb0P,eAAe,EACf6S,aAAa,EACbnpB,KAAM,GACNG,YAAa,GACb44B,UAAW,EACXC,YAAa,EACb7L,QAAS,EACT8L,iBAAkB,OAClBI,sBAAuB,EACvBF,uBAAwB,GACxBjM,WAAW,EACXgL,mBAAoB,GACpBtK,uBAAwB,GACxBJ,iBAAkB,EAClB5hB,iBAAkB,GAClBZ,kBAAmB,IAErBlE,iBAAkBgyB,GAClB/xB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZoyB,EAAmB,CAAE/0B,UAAW,CAC9B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpBnpB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpB44B,UAAW/xB,EAAO+xB,UAClBC,YAAahyB,EAAOgyB,YACpB7L,QAASnmB,EAAOmmB,QAChB8L,iBAAkBjyB,EAAOiyB,iBACzBI,sBAAuBryB,EAAOqyB,sBAC9BF,uBAAwBnyB,EAAOmyB,uBAC/BjM,UAAWlmB,EAAOkmB,UAClBgL,mBAAoBlxB,EAAOkxB,mBAC3B1K,iBAAkBxmB,EAAOwmB,iBACzB5hB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAO+wB,GAAyBh0B,UAAW,CAACgG,UAAU,OAE1D9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxD1B,SA4DK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,gBC4BZ/I,qBAAkByD,aAjIjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAClC2K,GADmD,EAAV1K,QACpCD,EAAMkD,OAAOyH,IAElBrG,EAAYnI,EAAE,yCAEpB,EAAiC2C,YAASw6B,GAAwB,CAChEj0B,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA+ByI,YAAY8xB,IAAnCc,EAAR,oBAEA,GAAIv7B,EAAS,OACX,eAAC,GAAD,CAA+BoM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAA+BmM,UAAU,EAAzC,SACE,eAAC,GAAD,CAAa7G,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM8M,EAAc9M,EAEhB6vB,EAAoB,GACpB/iB,EAAYgb,yBAAyB6H,yBACvCE,EAAqB/iB,EAAYgb,yBAAyB6H,uBAAuBjkB,IAGnF,IAAIihB,EAAmB,GACnB7f,EAAYgb,yBAAyBna,mBACvCgf,EAAoB7f,EAAYgb,yBAAyBna,iBAAiBjC,IAG5E,IAAIkhB,EAAoB,GAKxB,OAJI9f,EAAYgb,yBAAyB/a,oBACvC6f,EAAqB9f,EAAYgb,yBAAyB/a,kBAAkBrB,IAI5E,eAAC,GAAD,CAA+BQ,UAAU,EAAzC,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb0P,cAAevL,EAAYgb,yBAAyBzP,cACpD6S,YAAape,EAAYgb,yBAAyBoD,YAClDnpB,KAAM+K,EAAYgb,yBAAyB/lB,KAC3CG,YAAa4K,EAAYgb,yBAAyB5lB,YAClD44B,UAAWhuB,EAAYgb,yBAAyBgT,UAChDC,YAAajuB,EAAYgb,yBAAyBiT,YAClD7L,QAASpiB,EAAYgb,yBAAyBoH,QAC9C8L,iBAAkBluB,EAAYgb,yBAAyBkT,iBACvDI,sBAAuBtuB,EAAYgb,yBAAyBsT,sBAC5DF,uBAAwBpuB,EAAYgb,yBAAyBoT,uBAC7DjM,UAAWniB,EAAYgb,yBAAyBmH,UAChDgL,mBAAoBntB,EAAYgb,yBAAyBmS,mBACzDtK,uBAAwBE,EACxBN,iBAAkBziB,EAAYgb,yBAAyByH,iBACvD5hB,iBAAmBgf,EACnB5f,kBAAmB6f,GAErB/jB,iBAAkBgyB,GAClB/xB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZsyB,EAAmB,CAAEj1B,UAAW,CAC9B6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB2M,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpBnpB,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpB44B,UAAW/xB,EAAO+xB,UAClBC,YAAahyB,EAAOgyB,YACpB7L,QAASnmB,EAAOmmB,QAChB8L,iBAAkBjyB,EAAOiyB,iBACzBI,sBAAuBryB,EAAOqyB,sBAC9BF,uBAAwBnyB,EAAOmyB,uBAC/BjM,UAAWlmB,EAAOkmB,UAClBgL,mBAAoBlxB,EAAOkxB,mBAC3B1K,iBAAkBxmB,EAAOwmB,iBACzB5hB,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAO+wB,GAAyBh0B,UAAW,CAAC,UAAY,OAE5DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzDxB,SA6DG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWvE,EACX7E,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UArHM,2CCyCL/I,I,wBAAAA,iBAAkByD,aA5CjC,YAAwF,IAAzCxD,EAAwC,EAAxCA,EAAYE,GAA4B,EAArC4D,QAAqC,EAA5B5D,UAA4B,IAAlB8O,gBAAkB,SACrF,OACE,eAAC,GAAD,UACE,sBAAK7O,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,8BACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,2CAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIyI,EACA,eAAC,IAAD,CAAM3L,GAAG,qCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,eAAC,GAAD,CAAsBsC,WAAW,MACXC,SAAS,gCAD/B,SAEE,eAAC,IAAD,CAAMc,GAAG,yCAAT,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,+CAKnD,eAAC,GAAD,CAAkBoO,WAAW,sBCrD9BgwB,GAAgC7iC,YAAH,gaAqB7B8iC,GAA+B9iC,YAAH,mLAW5B+iC,GAA6C/iC,YAAH,koBAgC1CgjC,GAAyBhjC,YAAH,mQAUtBijC,GAA4BjjC,YAAH,uPAUzBkjC,GAA4BljC,YAAH,uMAQzB23B,GAAoB33B,YAAH,kbAmBjB43B,GAAyB53B,YAAH,0NC6CpBwE,qBAAkByD,aA3HjC,YAA0D,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC5C,EAA4CnB,YAASy7B,IAA7Cx7B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAC9B,EAAkCwH,YAAYkzB,IAAvCC,EAAP,oBAEA,GAAI97B,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWnI,EAAE,0CAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWnI,EAAE,0CAA1B,SACE,6BAAIA,EAAE,wDAKZ,IAAM2+B,EAAsB77B,EAAK87B,+BAGjC,OAAKD,EAAoBl9B,MAAM0E,OAS7B,eAAC,GAAD,UACE,eAAC,GAAD,CAAagC,UAAWnI,EAAE,0CACpBsI,aAAa,EACbT,SAAU82B,EAAoB92B,SAC9BG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAOm1B,EAAoB92B,SAAS4B,WAEtCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBg1B,+BAA+Bn9B,MAC1DoG,EAAW+B,EAAgBg1B,+BAA+B/2B,SAEhE,OAAOgC,EAAS1D,OACZ,CAGEy4B,+BAAgC,CAC9B90B,WAAYH,EAAei1B,+BAA+B90B,WAC1DrI,MAAM,GAAD,oBAAOkI,EAAei1B,+BAA+Bn9B,OAArD,aAA+DoI,IACpEhC,aAGJ8B,MAtBd,SA0BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACA,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,2BAFNgK,kBAKhB,eAAC,KAAMxD,KAAP,UACGm4B,EAAoBl9B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKoD,YAAYuuB,UAAU,EAAG,KADjBvpB,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,kCACE,eAAC,KAAD,CAAQA,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,2CAA6CvB,EAAK4M,KAC9E7J,MAAM,YAFd,SAGG3E,EAAE,kBAEL,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,yDAA2DvB,EAAK4M,KAC5F7J,MAAM,YAFd,SAGG3E,EAAE,8DAV8BgK,gBAcvC,eAAC,KAAMnE,IAAP,UACE,yBAAQ1F,UAAU,uCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,wDACd+R,eAAgB,6BAAInQ,EAAKiD,OACzBmN,WAAYhS,EAAE,6CACdiS,eAAgBysB,EAChBxsB,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOiyB,SAfhB,SAmBE,uBAAMj+B,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBAzCxCmF,4BA5C1B,eAAC,GAAD,UACE,eAAC,GAAD,CAAa7B,UAAWnI,EAAE,0CAA1B,SACE,6BAAIA,EAAE,yDC5DD6+B,GAA4Bt0B,OAAaC,MAAM,CACxD3F,KAAM0F,OACHK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBC+DHD,iBAAkByD,aAtDS,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQlC,EAArC,EAAqCA,UAArC,OACxC,gBAAC,KAAD,WACI,gBAAC,KAAKtC,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,2BAGlE,gBAAC,KAAKqI,OAAN,WACIuC,EACF,eAAC,KAAD,CACEpG,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL5B,SAAO,EACPyI,SAAUN,EALZ,SAOG/K,EAAE,oBAGH,eAAC,KAAD,CACE2E,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAGP,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,sBAGP+K,EACA,gBAAC,KAAD,CAAOvG,KAAK,UAAUkvB,eAAa,EAAnC,UACE,kCAAS1zB,EAAE,yBADb,IAC+CA,EAAE,yEAEjD,aCOKD,qBAAkByD,aAlDjC,YAAyD,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QACtCgF,EAAY,qCAClB,EAA+ByC,YAAYgzB,IAApCO,EAAP,oBAEA,OACE,eAAC,GAAD,CAAqC9vB,UAAU,EAA/C,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kDAEjB,eAAC,KAAD,CACEyL,cAAe,CAAE5G,KAAM,GAAIG,YAAa,IACxC2G,iBAAkBkzB,GAClBjzB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBgzB,EAAqB,CAAE51B,UAAW,CAChC6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOiyB,OAEXhyB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvBtB,SA2BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,gBCuJZ/I,qBAAkByD,aA7LjC,YAAiE,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC9C0K,EAAK3K,EAAMkD,OAAOyH,GAClB1F,EAAY,qCACZX,EAAYnI,EAAE,+CACpB,EAA+B2C,YAAS07B,GAA8B,CACpEn1B,UAAW,CAAEsF,GAAIA,KADZ5L,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAoCyI,YAAYizB,IAAxCO,EAAR,oBAEA,GAAIn8B,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,wDAKZ,IAAM4P,EAAc9M,EAAKk8B,8BAEzB,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CAAMh5B,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBG,YAAa4K,EAAY5K,aAE3B2G,iBAAkBkzB,GAClBjzB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZkzB,EAAwB,CAAE71B,UAAW,CACnC6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB3J,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOiyB,OAEXhyB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,uDAAyD,CACtEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BtB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,eCmFV/I,I,YAAAA,iBAAkByD,aAxJjC,YAA8E,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACpDgwB,GADqE,EAAV/vB,QACjDD,EAAMkD,OAAOyH,IAEvBrG,EAAYnI,EAAE,4DACpB,EAAiC2C,YAAS27B,GAA4C,CACpFp1B,UAAW,CAAEsF,GAAIqlB,KADXjxB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA2ByI,YAAY2nB,IAA/BY,EAAR,oBACA,EAAgCvoB,YAAY4nB,IAApCY,EAAR,oBAEA,GAAInxB,EAAS,OACX,eAAC,GAAD,UACE,eAAC,GAAD,CAAauF,UAAWA,EAAxB,SACE,eAAC,KAAD,CAAQzH,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,GAAD,CAAasF,UAAWA,EAAxB,SACE,6BAAInI,EAAE,kCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM6nB,EAAgB7nB,EAAK06B,0BACrBvJ,EAAQnxB,EAAKk8B,8BAEfC,EAAsB,GAW1B,OAVIhL,EAAMuJ,0BAA0B/7B,OAClCwyB,EAAMuJ,0BAA0B/7B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxCq9B,EAAoBr9B,EAAK4M,KAAM,KAInCjU,QAAQC,IAAI,uBACZD,QAAQC,IAAIykC,GAIV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMj5B,MAAOmC,EAAb,SAEEwiB,EAAclpB,MACd,gBAAC,KAAK+E,KAAN,WACE,gBAAC,KAAD,CAAOhC,KAAK,UAAZ,UACE,kCAASxE,EAAE,mBADb,IACyCi0B,EAAMpvB,QAE/C,gBAAC,KAAD,WACE,eAAC,KAAMkB,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,MACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,QAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKmkB,EAAclpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACIjE,EAAK4M,MAAMywB,EACX,eAAC,KAAD,CAAMp6B,KAAK,eAAe1E,UAAU,eAAkB,eAAC,KAAD,CAAM0E,KAAK,WAAW1E,UAAU,cAF1E6J,gBAKhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiD,MADQmF,gBAGfzP,QAAQC,IAAKoH,EAAK4M,MAAMywB,GACrBr9B,EAAK4M,MAAMywB,EAmCb,eAAC,KAAMp5B,IAAP,CAAW1F,UAAU,sBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,6BACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,kBACZD,QAAQC,IAAIoH,EAAK4M,IACjB,IAAI2lB,EAAUvyB,EAAK4M,GACnBulB,EAAoB,CAAE7qB,UAAW,CAC/B6C,MAAO,CACL6e,yBAA0BuJ,EAC1B6K,8BAA+BnL,IAEpC3nB,eAAgB,CACf,CAACC,MAAOmyB,GAA4Cp1B,UAAW,CAAC,GAAM2qB,EAAS,UAAY,OAC3FznB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,8BAA+B,CAC7CuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAxBtD,UA2BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,iBA3BzB,IA2B6C,IAC1C7E,EAAE,iCA7ByCgK,gBAjChD,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,wBAArB,SACE,gBAAC,KAAD,CAAQwE,MAAM,OACZD,KAAK,KACLsB,MAAOhG,EAAE,wBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,eACZ,IAAI25B,EAAUvyB,EAAK4M,GACnBslB,EAAe,CAAE5qB,UAAW,CAC1B6C,MAAO,CACL6e,yBAA0BuJ,EAC1B6K,8BAA+BnL,IAEpC3nB,eAAgB,CACf,CAACC,MAAOmyB,GAA4Cp1B,UAAW,CAAC,GAAM2qB,EAAS,UAAY,OAC3FznB,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAQtM,EAAE,0BAA2B,CACzCuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvBtD,UA0BE,eAAC,KAAD,CAAMoM,OAAO,KAAKpK,KAAK,gBA1BzB,IA0B4C,IACzC7E,EAAE,4BA5B2CgK,kBAZtCA,2BAfH,WCzDhBjK,kBANG,SAAC,GAAD,EAAGC,EAAH,IAAMgG,EAAN,EAAMA,MAAO+c,EAAb,EAAaA,QAAb,OAChB,gBAAC,KAAD,CAAOve,KAAK,UAAZ,UACI,kCAASwB,IADb,IAC8B+c,QCTnBmc,GAAgC3jC,YAAH,0xBAkC7B4jC,GAA+B5jC,YAAH,yuBAsC5BmzB,GAAyBnzB,YAAH,6cCtC7B6jC,GAA4B7jC,YAAH,mNAqNhBwE,I,MC7OXs/B,GACAC,GD4OWv/B,iBAAkByD,aAxJjC,YAAkF,IAAtCxD,EAAqC,EAArCA,EAAG8D,EAAkC,EAAlCA,QAASD,EAAyB,EAAzBA,MAAyB,IAAlBqL,gBAAkB,SAEzEpC,EADc7D,qBAAWrI,IACAkM,WAE/B,OACE,eAAC,GAAD,UACE,sBAAK3M,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,8BACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,2CAIzE,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,QAAD,CAAO4F,MAAO+yB,GAA+Bh2B,UAAW,CAAE0hB,yBAA0B/mB,EAAMkD,OAAOw4B,iBAAjG,SACC,YAAkJ,IAA/I38B,EAA8I,EAA9IA,QAASC,EAAqI,EAArIA,MAAqI,IAA9HC,KAAuC08B,EAAuF,EAAvHC,+BAA+EC,EAAwC,EAAlE9U,yBAAkD7mB,GAAgB,EAAzBqL,QAAyB,EAAhBrL,WAE9H,GAAInB,EAAS,OACX,eAAC,GAAD,CAAauF,UAAWnI,EAAE,0CAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,MAKpB,GAAIkC,EAAO,OACT,eAAC,GAAD,CAAasF,UAAWnI,EAAE,0CAA1B,SACE,6BAAIA,EAAE,sDAMV,OAAKw/B,EAAoB/9B,MAAM0E,OAY7B,eAAC,GAAD,CAAagC,UAAWnI,EAAE,0CACdoI,cAhBQ,KAiBRP,SAAU23B,EAAoB33B,SAC9BG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOg2B,EAAoB33B,SAAS4B,WAEtCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+1B,gCAAgCl+B,MAC3DoG,EAAW+B,EAAgB+1B,gCAAgC93B,SAEjE,OAAOgC,EAAS1D,OACZ,CAGEw5B,gCAAiC,CAC/B71B,WAAYH,EAAeg2B,gCAAgC71B,WAC3DrI,MAAM,GAAD,oBAAOkI,EAAeg2B,gCAAgCl+B,OAAtD,aAAgEoI,IACrEhC,aAGJ8B,MAtBtB,SA0BE,iCACE,eAAC,GAAD,CAAW3D,MAAOhG,EAAE,wBAAyB+iB,QAAS2c,EAAa76B,OAEnE,gBAAC,KAAD,WACE,eAAC,KAAMkB,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MAJcC,kBAOlB,eAAC,KAAMxD,KAAP,UACKg5B,EAAoB/9B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,IADjB9C,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAK2iB,QAAWta,KAAOrI,EAAK2iB,SAASpa,OAAO2C,GAAc,IAD9C9C,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKkhB,aADR,IACsB,wBACpB,uBAAM3iB,UAAU,aAAhB,SAA8ByB,EAAK2S,eAAe1P,SAFpCmF,gBAIhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,2CAA6CU,EAAMkD,OAAOw4B,gBAAkB,IAAM39B,EAAK4M,KACnH7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,WAAD,CAAUilB,SAAUmQ,GAApB,SACK,SAACQ,EAAD,KAA4B98B,KAA5B,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,YAxK/B,SAACzI,EAAG6D,EAAO+7B,EAAyBh+B,GACxDrH,QAAQC,IAAI,kBACZ,IAAIgU,EAAK5M,EAAK4M,GAEd2D,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAKlS,UAAU,YAAf,UACE,8BAAKH,EAAE,4BACP,6BAAIA,EAAE,yDACN,+BACG4B,EAAKkhB,aADR,IACuBlhB,EAAK2S,eAAe1P,KAD3C,IACiD,wBAC/C,wBAAM1E,UAAU,aAAhB,UACGyB,EAAK0iB,UADR,IACqB1iB,EAAK2iB,QAAW,MAAQ3iB,EAAK2iB,QAAU,SAG9D,yBAAQpkB,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,+BACjE,0BACEG,UAAU,iBACVsI,QAAS,WACTm3B,EAAwB,CAAE12B,UAAW,CACjC6C,MAAO,CACPyC,OAECtC,eAAgB,CACf,CAACC,MAAO+yB,GAA+Bh2B,UAAW,CAAE0hB,yBAA0B/mB,EAAMkD,OAAOw4B,kBAC3F,CAACpzB,MAAO+wB,GAAyBh0B,UAAW,CAACgG,UAAU,OACvD9C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJtM,EAAE,4CAA6C,CAC7CuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAEtDwP,KAtBJ,UAyBE,eAAC,KAAD,CAAMxN,KAAK,YAzBb,IAyB2B7E,EAAE,uCA8HqBi3B,CAAcj3B,EAAG6D,EAAO+7B,EAAyBh+B,IAHnE,SAKE,uBAAMzB,UAAU,WAAhB,SACE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBAPUmF,kBAFOA,kBArBtCA,6BAnD5B,gBAAC,GAAD,CAAa7B,UAAWnI,EAAE,0CACdoI,cALQ,KAIpB,UAEE,eAAC,GAAD,CAAWpC,MAAOhG,EAAE,wBAAyB+iB,QAAS2c,EAAa76B,OACnE,6BACkE7E,EAA/DkP,EAAiE,iDAAnD,yDA6F3B,gBAAC,KAAKrJ,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,gCAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,0CAA4CU,EAAMkD,OAAOw4B,kBAD7F,UAEE,eAAC,KAAD,CAAMtwB,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,6CAG/C,eAAC,GAAD,CAAkBoO,WAAW,mCE7O9ByxB,GAA4Bt1B,OAAaC,MAAM,CACxD8J,MAAO/J,OACJ4Z,UAAUnkB,YAAE,0BACZ0K,SAAS1K,YAAE,uBACX6K,IAAI,KAAsB7K,YAAE,2BAC/BuU,eAAgBhK,OACbG,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,yBCiEHD,iBAAkByD,aA3DS,SAAC,GAAD,IACtCxD,EADsC,EACtCA,EAAG8D,EADmC,EACnCA,QAASqQ,EAD0B,EAC1BA,UAAWpJ,EADe,EACfA,aAAcC,EADC,EACDA,OAAQa,EADP,EACOA,OAAQqI,EADf,EACeA,gBAAiB8C,EADhC,EACgCA,cAAe+C,EAD/C,EAC+CA,WAD/C,OAGxC,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,yCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUK,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,wBAEjE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,wBAE5D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,2BAG5D,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAjD,SACG/Z,EAAE,8BCtCL8/B,GAAyBvkC,YAAH,wcAqBtBwe,GAAa,sCAsGJha,iBAAkByD,aApGQ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASD,EAAf,EAAeA,MAAf,OACvC,eAAC,GAAD,UACE,sBAAK1D,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kDAEjB,eAAC,QAAD,CAAOmM,MAAOuiB,GAAwBxlB,UAAW,CAAEgG,UAAU,GAA7D,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,WAAD,CAAUmsB,SAAU6Q,GAAwB7iB,YAAa,kBAAMnZ,EAAQX,KAAK4W,GAAalW,EAAMkD,OAAOw4B,kBAAtG,SACG,SAACQ,EAAD,KAAoBj9B,KAApB,OACG,eAAC,KAAD,CACI2I,cAAe,CAAE6I,MAAO,GAAIgQ,UAAW,IAAI1gB,MAC3C+H,iBAAkBk0B,GAClBj0B,SAAU,SAACC,EAAD,GAAgC,IAElC0Y,EAFazY,EAAoB,EAApBA,cAIfyY,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBwb,EAAgB,CAAE72B,UAAW,CAC3B6C,MAAO,CACL6e,yBAA0B/mB,EAAMkD,OAAOw4B,gBACvCjrB,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB+P,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,IAEVrY,eAAgB,CACf,CAACC,MAAO+yB,GAA+Bh2B,UAAW,CAAC,yBAA4BrF,EAAMkD,OAAOw4B,kBAC5F,CAACpzB,MAAO+wB,GAAyBh0B,UAAW,CAAC,UAAY,OAE5DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlC1B,SAsCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,mBAUpC,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,gCAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,GAAalW,EAAMkD,OAAOw4B,kBAD9D,UAEE,eAAC,KAAD,CAAMtwB,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,mCCpHnC4xB,GAA4BzkC,YAAH,wcAsBzB0kC,G,oDACJ,WAAYn4B,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,0CACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAOyH,GAElBuL,EAAa,sCADKlW,EAAMkD,OAAOw4B,gBAGrC,OACE,eAAC,GAAD,UACE,sBAAKp/B,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAM,iBACnB,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,gBAAC,KAAKR,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,iDACdzF,QAAQC,IAAIqJ,EAAMkD,OAAOyH,OAE5B,eAAC,QAAD,CAAOrC,MAAOgzB,GAA8Bj2B,UAAW,CAAEsF,KAAIU,UAAU,GAAvE,SACC,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAEtB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM4P,EAAc9M,EAAKo9B,8BACzB3lC,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OAEE,eAAC,WAAD,CAAUmsB,SAAU+Q,GAA2B/iB,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAA/E,SACC,SAAComB,EAAD,KAA4Br9B,KAA5B,OACG,eAAC,KAAD,CACI2I,cAAe,CACb6I,MAAO1E,EAAY0E,MACnBC,eAAgB3E,EAAY2E,eAAe/F,GAC3C8V,UAAW1U,EAAY0U,UACvBC,QAAS3U,EAAY2U,SAEvB5Y,iBAAkBk0B,GAClBj0B,SAAU,SAACC,EAAD,GAAgC,IAIlC0Y,EAWAD,EAfaxY,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAKR0Y,EAFA1Y,EAAO0Y,SACL1Y,EAAO0Y,mBAAmB3gB,KAClBkU,GAAejM,EAAO0Y,SAKxB1Y,EAAO0Y,QAKjBD,EADEzY,EAAOyY,qBAAqB1gB,KAClBkU,GAAejM,EAAOyY,WAGtBzY,EAAOyY,UAGrB6b,EAAwB,CAAEj3B,UAAW,CACnC6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjB8F,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB+P,UAAWA,EACXC,QAASA,IAEVrY,eAAgB,CACjB,CAACC,MAAO+yB,GAA+Bh2B,UAAW,CAAE0hB,yBAA0B/mB,EAAMkD,OAAOw4B,kBAC3F,CAACpzB,MAAO+wB,GAAyBh0B,UAAW,CAAE,UAAY,OAE3DkD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uDAAyD,CACtEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArD1B,SAyDK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,EAPd,SASGxf,QAAQC,IAAIwQ,mBAUjC,gBAAC,KAAKnF,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,2BAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAkBoO,WAAW,+B,GAnIG1F,aA6IjC3I,iBAAkByD,YAAWy8B,KJpI7BlgC,kBA7CO,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAN,OAClB,gBAAC,KAAKnD,MAAN,CAAYoD,aAAa,EAAzB,UACmCgxB,GAAd,aAAfjxB,EACwBkxB,GAAT,QAAflxB,EACe,cAAfA,EAGF,eAAC,KAAKE,UAAN,CAEEnO,UAAU,4BACVkD,GAAG,uBACHC,KAAK,QACL5C,OAAQ2+B,GALV,SAOGr/B,EAAE,6BANEgK,gBAqBP,eAAC,GAAD,CACE1H,WAAW,OACXC,SAAS,WAFX,SAGE,eAAC,KAAK+L,UAAN,CAEEnO,UAAU,4BACVkD,GAAG,kBACHC,KAAK,YACL5C,OAAQ4+B,GALV,SAOGt/B,EAAE,wBANEgK,wBK7BXo2B,G,oDACJ,WAAYt4B,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,sBACZD,QAAQC,IAAIsN,GAHK,E,2CAOnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EAGf6G,GAFQlH,KAAKmI,MAAMjE,MACTlE,KAAKmI,MAAMhE,QACT9D,EAAE,mBAEpB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,qBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAKnG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,8BACNA,EAAE,kCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,+BAYjD,eAAC,GAAD,CAAsBtE,WAAW,OACXC,SAAS,WAD/B,SAEE,eAAC,KAAKsD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,yBACNA,EAAE,6BACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,iCAOvD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,oB,GAxDYmC,aAkEb3I,iBAAkByD,YAAW48B,KC3EtCC,G,oDACJ,WAAYv4B,GAAQ,IAAD,EAKbw4B,EALa,qBACjB,cAAMx4B,GACNvN,QAAQC,IAAI,uBACZD,QAAQC,IAAIsN,GACZ,EAAKiE,MAAQlL,IAAM0/B,YAEnB,IAAMppB,EAAevY,aAAagS,QAAQ,EAAK9I,MAAM04B,iBANpC,OAQfF,EADEnpB,GAGW,GAGf,EAAKspB,MAAQ,CACXH,WAAYA,EACZI,YAAa,GACbC,mBAAoB,KAhBL,E,sDAoBnB,WACEhhC,KAAKihC,YAAc,KACnBjhC,KAAKoM,MAAMwhB,QAAQsT,U,kCAGrB,WACEC,aAAanhC,KAAKihC,e,0BAIpB,WAAgB,IAAD,OAETjhC,KAAKihC,aACPE,aAAanhC,KAAKihC,aAGpBjhC,KAAKihC,YAAc7qB,YAAW,WAE5B,EAAKgrB,SAAS,CAACL,YAAa,EAAK30B,MAAMwhB,QAAQnqB,QAC/C,EAAK0E,MAAMkF,SAAS,EAAKyzB,MAAMC,eAC9B/gC,KAAK8gC,MAAME,sB,2BAIhB,SAAc3vB,GACZrR,KAAKohC,SAAS,CAACT,WAAYtvB,EAAMtL,OAAOtC,U,oBAI1C,WAAU,IAAD,OAEDqT,GADI9W,KAAKmI,MAAM9H,EACDL,KAAKmI,MAAM2O,aAE/B,OACI,uBAAKtW,UAAU,qBAAf,UACE,sBAAKA,UAAU,MAAf,SACE,uBAAKA,UAAU,aAAf,UACE,uBAAMA,UAAU,mBAAhB,SACE,eAAC,KAAD,CAAM0E,KAAK,aAEb,wBACEsR,IAAKxW,KAAKoM,MACV5L,UAAU,eACVqE,KAAK,OACLiS,YAAaA,EACbrT,MAAOzD,KAAK8gC,MAAMH,WAClBU,QAASrhC,KAAKshC,aAAaC,KAAKvhC,MAChCqN,SAAUrN,KAAKwhC,cAAcD,KAAKvhC,aAIxC,sBAAKQ,UAAU,eAAf,SACE,eAAC,KAAD,CACEwE,MAAM,YACNrB,KAAK,IACL+H,UAAY1L,KAAK8gC,MAAMH,WACvB73B,QAAS,WACP,EAAKs4B,SAAS,CAACT,WAAY,GAAII,YAAa,KAAK,WAE/CnmC,QAAQC,IAAI,EAAKimC,OACjB,EAAK34B,MAAMkF,SAAS,EAAKyzB,MAAMC,4B,GAjFvBh4B,aA4F1B23B,GAAY13B,aAAe,CACzBqE,SAAU,SAAApE,GAAC,OAAEA,GACbw4B,QAAS,SAAAx4B,GAAC,OAAEA,IAGC7I,qBAAkBsgC,IC3G1B,SAAS3vB,KACd,IAAI2wB,EAAWziC,aAAagS,QAAQ9R,EAAK/B,8BACxB,OAAbskC,IACFA,GAAW,GAGb,IAAI1wB,EAAY,CACd0wB,SAAwB,SAAbA,EACXC,cAAUzwB,EACV0wB,aAAS1wB,EACT2wB,cAAU3wB,GAGR4wB,EAAS7iC,aAAagS,QAAQ9R,EAAKhC,2BAIvC,OAHA6T,EAAU+wB,WAAaD,EAEL7iC,aAAagS,QAAQ9R,EAAKjC,iCAE1C,IAAK,WACH8T,EAAU2wB,UAAW,EACrB,MACF,IAAK,UACH3wB,EAAU4wB,SAAU,EACpB,MACF,IAAK,WACH5wB,EAAU6wB,UAAW,EAOzB,OAFAjnC,QAAQC,IAAImW,GAELA,EC2CM5Q,I,kBAAAA,iBAAkByD,aArDjC,YAAiE,IAAjCxD,EAAgC,EAAhCA,EAAG8D,EAA6B,EAA7BA,QAAS5D,EAAoB,EAApBA,SAAUkP,EAAU,EAAVA,QACpD,OACE,eAAC,GAAD,UACE,sBAAKjP,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBAAtB,SACE,uBAAKG,UAAU,sBAAf,UACE,gBAAC,KAAKwhC,OAAN,CACExhC,UAAU,cACV6M,SAAU,SAACgE,GACTzW,QAAQC,IAAIwW,EAAMtL,OAAOtC,OACzBxE,aAAaC,QAAQC,EAAKjC,+BAAgCmU,EAAMtL,OAAOtC,OACvE7I,QAAQC,IAAI,gBACZD,QAAQC,IAAI4U,EAAQsB,QANxB,UASE,yBAAQtN,MAAM,GAAd,SAAkBpD,EAAE,0BACpB,yBAAQoD,MAAM,WAAd,SAA0BpD,EAAE,uBAC5B,yBAAQoD,MAAM,UAAd,SAAyBpD,EAAE,sBAC3B,yBAAQoD,MAAM,WAAd,SAA0BpD,EAAE,0BAE9B,eAAC,GAAD,CACEwgC,gBAAiB1hC,EAAKhC,0BACtB2Z,YAAY,YACZzJ,SAAU,SAAC5J,GACT7I,QAAQC,IAAI4I,GACZxE,aAAaC,QAAQC,EAAKhC,0BAA2BsG,GACrDgM,EAAQsB,cAKhB,gBAAC,KAAKtQ,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,UAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,4BADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,+BAG/C,eAAC,GAAD,CAAeoO,WAAW,8BClE3BwzB,GAAqBrmC,YAAH,03CAyElBsmC,GAAoBtmC,YAAH,qvBAgDjBumC,GAAcvmC,YAAH,gOAaXwmC,GAAiBxmC,YAAH,gOAadymC,GAAwBzmC,YAAH,iNAWrB0mC,GAAiB1mC,YAAH,iJC/HtBqD,aAAagS,QAAQ9R,EAAK/B,+BAC7B6B,aAAaC,QAAQC,EAAK/B,8BAA8B,GA2T3CgD,qBAAkByD,aAnRjC,YAA0C,IAAdxD,EAAa,EAAbA,EAEpB8M,GAFiC,EAAVhJ,QACTmF,qBAAWrI,IACAkM,YAC/B,EAAmDnK,YAASi/B,GAAoB,CAC9E14B,UAAWwH,KACX8B,YAAa,iBAFR5P,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMiB,EAA7B,EAA6BA,UAAWqL,EAAxC,EAAwCA,QAIxC,EAA8B7D,YAAYy2B,IAAnCE,EAAP,oBACA,EAAwB32B,YAAY02B,IAA7BE,EAAP,oBAEA,GAAIv/B,GAAYE,IAASA,EAAKs/B,SAAW,OACvC,eAAC,GAAD,UACE,eAAC,GAAD,CAAaj6B,UAAWnI,EAAE,4BAA1B,SACE,eAAC,KAAD,CAAQU,QAAQ,EACRC,QAAQ,QAMtB,GAAIkC,EAAO,OACT,eAAC,GAAD,UACE,eAAC,KAAD,UACE,eAAC,GAAD,CAAasF,UAAWnI,EAAE,4BAA1B,SACE,6BAAIA,EAAE,4CAMd,IAAMoJ,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAAoE,SAA5D/F,aAAagS,QAAQ9R,EAAK/B,8BAA4C,UAAW,YACzF2H,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAK/B,8BAA8B,GACxDqS,EAAQsB,OAJlB,SAOG1Q,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAoE,UAA5D/F,aAAagS,QAAQ9R,EAAK/B,8BAA6C,UAAW,YAC1F2H,KAAK,KACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAK/B,8BAA8B,GACxDqS,EAAQsB,OALlB,SAQG1Q,EAAE,wBAIHoiC,EAAWt/B,EAAKs/B,SAGpB,OAAKA,EAAS3gC,MAAM0E,OAalB,eAAC,GAAD,CAAuBiJ,QAASA,EAAhC,SACE,eAAC,GAAD,CACEjH,UAAWnI,EAAE,4BACboI,cAAegB,EACfd,aAAa,EACbT,SAAU/E,EAAKs/B,SAASv6B,SACxBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAKs/B,SAASv6B,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBw4B,SAAS3gC,MACpCoG,EAAW+B,EAAgBw4B,SAASv6B,SAE1C,OAAOgC,EAAS1D,OACZ,CAEAi8B,SAAU,CACRt4B,WAAYH,EAAey4B,SAASt4B,WACpCrI,MAAM,GAAD,oBAAOkI,EAAey4B,SAAS3gC,OAA/B,aAAyCoI,IAC9ChC,aAGJ8B,MAvBV,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,IACA,eAAC,KAAMA,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MALcC,kBASlB,eAAC,KAAMxD,KAAP,UACK47B,EAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAE,8BAAyBzB,EAAK4M,GAA9B,YAAR,SACI5M,EAAKqC,uBACL,eAAC,KAAD,CAAQS,KAAM,KAAML,SAAUzC,EAAKqC,yBACnC,eAAC,KAAD,CAAQS,KAAM,KAAMpB,KAAK,aAI/B,gBAAC,KAAMuC,IAAP,WACE,uBAAM1F,UAAU,OAAhB,SAAwByB,EAAKib,WAC7B,sBAAK1c,UAAU,aAAf,SACE,oBAAGiE,KAAI,iBAAYxC,EAAKmX,OAAxB,SAAkCnX,EAAKmX,UAEvCnX,EAAK0/B,SAAY,gCACf,eAAC,KAAD,CAAO38B,MAAM,UAAUxE,UAAU,OAAjC,SAAyCH,EAAE,wBACnC,KACV4B,EAAK2/B,QAAW,gCACd,eAAC,KAAD,CAAO58B,MAAM,OAAOxE,UAAU,OAA9B,SAAsCH,EAAE,uBAChC,KACV4B,EAAK4/B,SAAY,gCACf,eAAC,KAAD,CAAO78B,MAAM,YAAb,SAA0B3E,EAAE,wBACpB,OAbEgK,gBAehB,gBAAC,KAAMnE,IAAP,WACIjE,EAAK+oB,cAEL/oB,EAAK+oB,cAAclpB,MAAMyW,MAAM,GAAGmqB,UAAU/7B,KAAI,gBAASo5B,EAAT,EAAG99B,KAAH,OAC9C,+BACE,mCACA,eAAC,KAAD,CAAMiD,KAAK,SADX,IACsB,IACpB66B,EAAa9U,yBAAyB/lB,KAFxC,IAE+C,wBAC/C,sBAAK1E,UAAU,cAAf,SACE,mCACI8J,KAAOy1B,EAAapb,WAAWna,OAAO2C,GACtC4yB,EAAanb,QACb,wCAAUta,KAAOy1B,EAAanb,SAASpa,OAAO2C,MAC5C,gBAOV,GAEFlL,EAAK8oB,YAEL9oB,EAAK8oB,YAAYjpB,MAAMyW,MAAM,GAAGmqB,UAAU/7B,KAAI,gBAASg8B,EAAT,EAAG1gC,KAAH,OAC5C,+BACE,mCACA,eAAC,KAAD,CAAMiD,KAAK,gBADX,IAC6B,IAC3By9B,EAAU7X,sBAAsB5lB,KAFlC,IAEyC,wBACzC,sBAAK1E,UAAU,cAAf,SACE,mCACI8J,KAAOq4B,EAAUhe,WAAWna,OAAO2C,GADvC,IACsD,MAClD7C,KAAOq4B,EAAU/d,SAASpa,OAAO2C,GAFrC,IAEoD,MAChD9M,EAAE,6BAHN,KAGwCsiC,EAAUC,qCAMtD,KAvCUv4B,gBAqDhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACKyB,EAAKy/B,SAEN,eAAC,IAAD,CAAMh+B,GAAE,8BAAyBzB,EAAK4M,GAA9B,YAAR,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,oBAJP,uBAAMG,UAAU,aAAhB,SAA8BH,EAAE,gCAFGgK,gBAWvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,sBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IACI6mC,EADA7yB,EAAK5M,EAAK4M,GAGZ6yB,EAD6D,QAA3DziC,aAAagS,QAAQ9R,EAAK/B,8BAM9BmlC,EAAoB,CAAEh5B,UAAW,CAC/B6C,MAAO,CACLyC,KACA6yB,UAAWA,IAEhBn1B,eAAgB,CACf,CAACC,MAAOy1B,GAAoB14B,UAAWwH,SACvCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACStM,EAAZqhC,EAAc,iCAAqC,+BAAgC,CAClF90B,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OA9BtD,SAkCKjB,EAAKy/B,SACJ,eAAC,KAAD,CAAMpyB,OAAO,KAAKpK,KAAK,YACvB7E,EAAE,sBArC6BgK,gBA0CpCpI,EAAKy/B,SAAY,GAChB,eAAC,KAAMx7B,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,YA1RZ,SAAC,GAAoF,IAAnFzI,EAAkF,EAAlFA,EAAG8R,EAA+E,EAA/EA,WAAYC,EAAmE,EAAnEA,eAAgBC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,kBAClFC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAKlS,UAAU,YAAf,UACE,8BAAKH,EAAE,4BACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,+BACjE,0BACEG,UAAU,iBACVsI,QAAS,WACPwJ,EAAeC,GACZ9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,UAmBE,eAAC,KAAD,CAAMxN,KAAK,YAnBb,IAmB2B7E,EAAE,uCA+PX6R,CAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,yCACd+R,eAAgB,+BAAInQ,EAAK4gC,WAAT,IAAsB5gC,EAAK6gC,aAC3CzwB,WAAYhS,EAAE,8BACdiS,eAAgBkwB,EAChBjwB,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOy1B,GAAoB14B,UAAWwH,WAf/C,SAmBE,uBAAMvQ,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAnI7BA,4BAtD5B,eAAC,GAAD,CAAuBoF,QAASA,EAAhC,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,4BACZoI,cAAegB,EAD7B,SAEE,6BACgE,SAA5DxK,aAAagS,QAAQ9R,EAAK/B,8BAA4CiD,EAAE,iCAAmCA,EAAE,8CCnI5G0iC,GAAiBn4B,OAAaC,MAAM,CAC7C1F,UAAWyF,OACRK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACd+E,SAAUwF,OACPK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACd+Y,MAAOxO,OACJwO,MAAM/Y,YAAE,cACR0K,SAAS1K,YAAE,yBCmDHD,iBAAkByD,aA/CJ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASiH,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,OAAQ+O,EAArC,EAAqCA,WAArC,OAC3B,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,YACL1E,UAAY6K,EAAOlG,UAAa,0BAA4B,eAC5DqG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,WACL1E,UAAY6K,EAAOjG,SAAY,0BAA4B,eAC3DoG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO+N,MAAS,0BAA4B,eACxD5N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,2BAG5D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAjD,SACK/Z,EAAE,8BC7BX8I,GAAY,sBAwEH/I,qBAAkByD,aAtEjC,YAA4C,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAC/B,EAAqByH,YAAYu2B,IAA1Ba,EAAP,oBAEA,OACE,eAAC,GAAD,UACE,sBAAKxiC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,qBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oCAEf,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,GAAI2K,KAAM,IACjC7D,iBAAkB+2B,GAClB92B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjB62B,EAAW,CAAEz5B,UAAW,CACtB6C,MAAO,CACLjH,UAAW+G,EAAO/G,UAClBC,SAAU8G,EAAO9G,SACjBgU,MAAOlN,EAAOkN,QAEf7M,eAAgB,CACf,CAACC,MAAOy1B,GAAoB14B,UAAWwH,SAE1CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM8/B,EAAY9/B,EAAK+/B,cAAchwB,QAAQrE,GAC7C1K,EAAQX,KAAR,8BAAoCy/B,EAApC,aACAv2B,IAAMC,QAAStM,EAAE,wCAA0C,CACvDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzB1B,SA6BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,aAMzB,gBAAC,KAAKjD,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,UAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK2F,KADpC,UAEE,eAAC,KAAD,CAAMmG,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAeoO,WAAW,8BCiBzBrO,IC7FX+iC,GAEA1Y,GACAR,GACAmZ,GACAhZ,GACAiZ,GACAC,GACAt1B,GACAD,GACAw1B,GACAC,GACAC,GACAC,GDgFWtjC,kBA5Ff,YAA+D,EAAnCC,EAAmC,EAAhCoD,MAAiC,IAA1B9B,EAAyB,EAAzBA,KAAyB,IAAnBgiC,kBAAmB,MAAR,KAAQ,EAC7D,IAAKhiC,EACH,MAAO,GAGT,IAAMshC,EAAYthC,EAAKkN,GAEvB,OACE,eAAC,KAAD,UACE,eAAC,KAAKhI,KAAN,UACE,gBAAC,KAAD,WACE,eAAC,IAAD,CAAMnD,GAAE,8BAAyBu/B,EAAzB,kBAAR,SACIthC,EAAK2C,uBACL,eAAC,KAAD,CAAQS,KAAM4+B,EAAa,QAASj/B,SAAU/C,EAAK2C,yBACnD,eAAC,KAAD,CAAQS,KAAM4+B,EAAa,QAAShgC,KAAK,WAG7C,gBAAC,KAAMkD,KAAP,WACE,qBAAIrG,UAAU,OAAd,SAAsBmB,EAAKwD,UAAY,IAAMxD,EAAKyD,WAClD,sBAAK5E,UAAU,kBAAf,SACE,gBAAC,KAAD,CAAoBA,UAAU,YAA9B,UAEKmB,EAAKwX,MACJ,eAAC,KAAKvU,KAAN,CAAWg/B,QAAM,EAAjB,SACE,eAAC,KAAD,CAAS58B,QAASrF,EAAKwX,MAAO0qB,UAAU,MAAxC,SACE,gCACE,eAAC,KAAD,CAAMv0B,OAAO,KAAKpK,KAAK,gBAK7B,GAGDvD,EAAKmiC,OACJ,eAAC,KAAKl/B,KAAN,CAAWg/B,QAAM,EAAjB,SACE,eAAC,KAAD,CAAS58B,QAASrF,EAAKmiC,OAAQD,UAAU,MAAzC,SACE,gCACE,eAAC,KAAD,CAAMv0B,OAAO,KAAKpK,KAAK,qBAK3B,GAGN,eAAC,KAAKN,KAAN,CAAWg/B,QAAM,EAAjB,SACE,eAAC,KAAD,CAAS58B,QAASrF,EAAKyX,MAAOyqB,UAAU,MAAxC,SACE,oBAAGp/B,KAAM,UAAY9C,EAAKyX,MAA1B,SACE,eAAC,KAAD,CAAM9J,OAAO,KAAKpK,KAAK,iCE/C9B9E,kBANe,SAAC,GAAD,EAAGC,EAAH,OAC5B,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CAAY2I,UAAU,6BCVX46B,GAFW,CAAC,CAAC,KAAO1jC,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4CAA4C,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,qCAAqC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mDAAmD,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,2CAA2C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oDAAoD,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wDAAwD,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,wCAAwC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,6BAA6B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0CAA0C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kDAAkD,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,OCqQ1wXD,iBAAkByD,aAjPG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQa,EAArC,EAAqCA,OAAQsI,EAA7C,EAA6CA,UAAWD,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OAClC,gBAAC,KAAD,WACI,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,WACL2W,QAAS3P,EAAOy1B,WAEhB,uBAAMnhC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,yBAEnD,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,aAG5C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,UACL2W,QAAS3P,EAAO01B,UAChB,uBAAMphC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,wBAEnD,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,aAG3C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,WACL2W,QAAS3P,EAAO21B,WAChB,uBAAMrhC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,yBAEnD,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,gBAI9C,gBAAC,KAAKhL,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,YACL1E,UAAY6K,EAAOlG,UAAa,0BAA4B,eAC5DqG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,WACL1E,UAAY6K,EAAOjG,SAAY,0BAA4B,eAC3DoG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACC,eAAC,KAAKyF,IAAN,UACG,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO83B,YACjB32B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,cAAexJ,IACjDP,OAAQ,kBAAMiH,EAAgB,eAAe,MAE/C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,SACL1E,UAAY6K,EAAOynB,uBAA0B,0BAA4B,eACzEtnB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,KACd,yBAAQA,MAAM,IAAd,SAAmBpD,EAAE,oBACrB,yBAAQoD,MAAM,IAAd,SAAmBpD,EAAE,kBACrB,yBAAQoD,MAAM,IAAd,SAAmBpD,EAAE,sBAEvB,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO+N,MAAS,0BAA4B,eACxD5N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,YACL1E,UAAY6K,EAAO44B,UAAa,0BAA4B,eAC5Dz4B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,6BAIhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO8N,MAAS,0BAA4B,eACxD3N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,SACL1E,UAAY6K,EAAOy4B,OAAU,0BAA4B,eACzDt4B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAO6N,QAAW,0BAA4B,eAC1D1N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,WACL1E,UAAY6K,EAAO64B,SAAY,0BAA4B,eAC3D14B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAO84B,KAAQ,0BAA4B,eACvD34B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,UACL1E,UAAY6K,EAAO+4B,QAAW,0BAA4B,eAC1D54B,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,KACZsgC,GAAkBp9B,KAChB,SAAAy9B,GAAO,OAAI,yBAAQ3gC,MAAO2gC,EAAQC,KAAvB,SAAyCD,EAAQE,MAAfj6B,sBAGnD,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,wBACL1E,UAAY6K,EAAOirB,sBAAyB,0BAA4B,eACxE9qB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU0hB,wBAAwBp0B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,wBAAwBuG,UAAU,OAAOjL,UAAU,0BAG1E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,uBACL1E,UAAY6K,EAAOivB,qBAAwB,0BAA4B,eACvE9uB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU0lB,sBAAsBp4B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,6BAI3E,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,YACL1E,UAAY6K,EAAOk5B,UAAa,0BAA4B,eAC5D/4B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UAKJ,eAAC,KAAK2C,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BHJAD,sBA3Nf,YAAkD,IAA5BC,EAA2B,EAA3BA,EAAG4iC,EAAwB,EAAxBA,UAAWx0B,EAAa,EAAbA,WAChC,EAA+BzL,YAASk/B,GAAmB,CACvD34B,UAAW,CAACsF,GAAIo0B,KADbhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAIvB,GAAIF,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAEf,IAAM6S,EAAU/P,EAAK+P,QAIrB,OAHAtY,QAAQC,IAAI,2BACZD,QAAQC,IAAIqY,GAGV,gBAAC,KAAK5H,MAAN,CAAYoD,aAAa,EAAzB,UACgCy0B,GAAb,YAAf10B,EACe,gBAAfA,EACkCgc,GAAnB,kBAAfhc,EACgCwb,GAAjB,gBAAfxb,EAC4B20B,GAAb,YAAf30B,EAC8B2b,GAAf,cAAf3b,EAC4B40B,GAAb,YAAf50B,EACoC60B,GAArB,oBAAf70B,EAC2BT,GAAZ,WAAfS,EAC6BV,GAAd,aAAfU,EACiC80B,GAAlB,iBAAf90B,EAC0B+0B,GAAX,UAAf/0B,EAEEg1B,GADa,wCAAfh1B,EAGuCi1B,GAAxB,uBAAfj1B,EAGF,eAAC,KAAKE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,WAC1Ct/B,KAAK,OACL5C,OAAQoiC,GALZ,SAOK9iC,EAAE,+BANEgK,gBAqBT,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,sBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,iBAC1Ct/B,KAAK,OACL5C,OAAQ0pB,GALZ,SAOCpqB,EAAE,0CANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,mBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,eAC1Ct/B,KAAK,cACL5C,OAAQkpB,GALZ,SAOC5pB,EAAE,wCANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,yBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,WAC1Ct/B,KAAK,OACL5C,OAAQqiC,GALZ,SAOC/iC,EAAE,oCANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,6BAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,iBAC1Ct/B,KAAK,YACL5C,OAAQsiC,GALZ,SAOChjC,EAAE,0CANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,eAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,UAC1Ct/B,KAAK,YACL5C,OAAQiN,GALZ,SAOC3N,EAAE,mCANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,iBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,YAC1Ct/B,KAAK,YACL5C,OAAQgN,GALZ,SAOC1N,EAAE,qCANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,qBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,iBAC1Ct/B,KAAK,YACL5C,OAAQwiC,GALZ,SAOCljC,EAAE,0CANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,yCAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,wCAC1Ct/B,KAAK,OACL5C,OAAQ0iC,GALZ,SAOCpjC,EAAE,iEANMgK,kBASV6I,EAAQ0uB,QACP,eAAC,GAAD,CACIj/B,WAAW,OACXC,SAAS,wBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,mBAC1Ct/B,KAAK,YACL5C,OAAQuiC,GALZ,SAOCjjC,EAAE,4CANMgK,kBASf,GACF,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,0BAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,sBAC1Ct/B,KAAK,eACL5C,OAAQ2iC,GALZ,SAOCrjC,EAAE,+CANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,kBAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,aAC1Ct/B,KAAK,OACL5C,OAAQqpB,GALZ,SAOC/pB,EAAE,sCANMgK,kBASb,eAAC,GAAD,CACI1H,WAAW,OACXC,SAAS,cAFb,SAGI,eAAC,KAAK+L,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wBAA0Bu/B,EAAY,SAC1Ct/B,KAAK,iBACL5C,OAAQyiC,GALZ,SAOCnjC,EAAE,kCANMgK,wBIxLNjK,qBAAkByD,aAjCjC,YAA2G,EAArExD,EAAsE,IAAnE6D,EAAkE,EAAlEA,MAAO3D,EAA2D,EAA3DA,SAAUo3B,EAAiD,EAAjDA,KAAiD,IAA3CZ,qBAA2C,MAA7B,GAA6B,MAAzBtoB,kBAAyB,MAAd,GAAc,MAAV9M,YAAU,MAAL,GAAK,EACnGshC,EAAY/+B,EAAMkD,OAAOo9B,WAC3BC,EAAc,GAKlB,OAJI9iC,IACF8iC,EAAW,UAAM9iC,EAAKwD,UAAX,YAAwBxD,EAAKyD,WAIxC,eAAC,GAAD,UACE,sBAAK5E,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOo+B,EAApB,SACI9M,GAAe,eAAC,GAAD,MAEnB,gBAAC,KAAKl3B,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMA,IACvBo1B,EACD,eAAC,GAAD,CACEtoB,WAAYA,EACZw0B,UAAWA,qBCkJZ7iC,qBAAkByD,aA3JjC,YAA8C,IAAZxD,EAAW,EAAXA,EAC1B4iC,EADqC,EAAR/+B,MACXkD,OAAOo9B,WACzB/1B,EAAa,UAGnB,EAA+BzL,YAASk/B,GAAmB,CACzD34B,UAAW,CAACsF,GAAIo0B,KADXhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAwByI,YAAYw2B,IAA7BsC,EAAP,oBAEA,GAAIzhC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAzC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAEjB,eAAC,KAAKwG,KAAN,UACE,6BAAIxG,EAAE,sCAMd,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAzC,UACG7T,QAAQC,IAAIqI,GACb,gBAAC,KAAD,WACE,eAAC,KAAKkD,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAEjB,eAAC,KAAKwG,KAAN,UACE,6BAAIxG,EAAE,sCAMd,IAAM6S,EAAU/P,EAAK+P,QACrBtY,QAAQC,IAAIqY,GAIZ,IAAI8wB,EAAc,KACd9wB,EAAQ8wB,cACVA,EAAc,IAAI//B,KAAKiP,EAAQ8wB,cAGjC,IAAIl4B,EAAgB,CAClB61B,SAAUzuB,EAAQyuB,SAClBC,QAAS1uB,EAAQ0uB,QACjBC,SAAU3uB,EAAQ2uB,SAClB18B,UAAW+N,EAAQ/N,UACnBC,SAAU8N,EAAQ9N,SAClBgU,MAAOlG,EAAQkG,MACf4qB,YAAaA,EACbW,OAAQzxB,EAAQyxB,OAChBV,UAAW/wB,EAAQ+wB,UACnB9qB,MAAOjG,EAAQiG,MACf2qB,OAAQ5wB,EAAQ4wB,OAChB5qB,QAAShG,EAAQgG,QACjBgrB,SAAUhxB,EAAQgxB,SAClBC,KAAMjxB,EAAQixB,KACdC,QAASlxB,EAAQkxB,QACjBG,UAAWrxB,EAAQqxB,WAWrB,OARIrxB,EAAQojB,wBACVxqB,EAAcwqB,sBAAwBpjB,EAAQojB,sBAAsBznB,IAGlEqE,EAAQonB,uBACVxuB,EAAcwuB,qBAAuBpnB,EAAQonB,qBAAqBzrB,IAIlE,eAAC,GAAD,CACElN,KAAMuR,EACNzE,WAAYA,EAFd,SAIE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAGjB,eAAC,KAAD,CACIyL,cAAeA,EACfE,iBAAkB+2B,GAClB92B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI04B,EAAa,CACf/1B,GAAIo0B,EACJtB,SAAUz1B,EAAOy1B,SACjBC,QAAS11B,EAAO01B,QAChBC,SAAU31B,EAAO21B,SACjB18B,UAAW+G,EAAO/G,UAClBC,SAAU8G,EAAO9G,SACjBgU,MAAOlN,EAAOkN,MACdurB,OAAQz4B,EAAOy4B,OACfV,UAAW/3B,EAAO+3B,UAClB9qB,MAAOjN,EAAOiN,MACd2qB,OAAQ53B,EAAO43B,OACf5qB,QAAShN,EAAOgN,QAChBgrB,SAAUh4B,EAAOg4B,SACjBC,KAAMj4B,EAAOi4B,KACbC,QAASl4B,EAAOk4B,QAChBG,UAAWr4B,EAAOq4B,UAClBjO,sBAAuBpqB,EAAOoqB,sBAC9BgE,qBAAsBpuB,EAAOouB,sBAG3BpuB,EAAO83B,cACTY,EAAU,YAAkBzsB,GAAejM,EAAO83B,cAGpDU,EAAc,CAAEn7B,UAAW,CACzB6C,MAAOw4B,GACNr4B,eAAgB,CAEf,CAACC,MAAOy1B,GAAoB14B,UAAWwH,MAEvC,CAACvE,MAAO01B,GAAmB34B,UAAW,CAACsF,GAAIo0B,OAE9Cx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAnD1B,SAuDK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRsI,UAAWrR,gBC9HZ/C,iBAAkByD,aAnCQ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcjC,EAA7B,EAA6BA,UAAW+iB,EAAxC,EAAwCA,cAAeC,EAAvD,EAAuDA,eAAvD,IAAuEC,6BAAvE,MAA6F,SAAAnjB,GAAC,OAAEA,GAAhG,SACvC,gBAAC,KAAD,WACI,eAAC,KAAKpC,KAAN,UACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,eAOb,gBAAC,KAAKtjB,OAAN,WACI,eAAC,IAAD,CAAMnF,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAOxE,UAAU,aAA/B,SACGH,EAAE,sBAGP,eAAC,KAAD,CACE2E,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,8BC8HAD,I,GAAAA,iBAAkByD,aA3IjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACzC8+B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,UACbjG,EAAYnI,EAAE,oCACd8I,EAAS,8BAA0B85B,EAA1B,YAEf,EAA+BjgC,YAASk/B,GAAmB,CACzD34B,UAAW,CAACsF,GAAIo0B,KADXhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAwByI,YAAYw2B,IAA7BsC,EAAP,oBAGA,EAAgC13B,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAIpC,GAAIjC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAzC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,sCAMd,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAzC,UACG7T,QAAQC,IAAIqI,GACb,gBAAC,KAAD,WACE,eAAC,KAAKkD,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,sCAMd,IAAM6S,EAAU/P,EAAK+P,QAGrB,OAFAtY,QAAQC,IAAIqY,GAGV,eAAC,GAAD,CACEvR,KAAMuR,EACNzE,WAAYA,EAFd,SAIE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACIsD,cAAe,GAEfG,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAIygB,EAAY,CACd9d,GAAIo0B,GAGN,SAAS4B,IACPH,EAAc,CAAEn7B,UAAW,CACzB6C,MAAOugB,GACNpgB,eAAgB,CAEf,CAACC,MAAOy1B,GAAoB14B,UAAWwH,MAEvC,CAACvE,MAAO01B,GAAmB34B,UAAW,CAACsF,GAAIo0B,OAE9Cx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAR,8BAAoCy/B,EAApC,aACAv2B,IAAMC,QAAStM,EAAE,yCAA2C,CACxDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,MAIlB,IAAIygB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAU0I,MAAQrI,EAClBL,EAAU+I,cAAgBnJ,EAE1BsY,KAGF,IAAIlX,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAEd04B,KAzDV,SA6DK,gBAAGz5B,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdc,OAAQA,EACRsI,UAAWrR,EACX+oB,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBjjB,UAAWA,gBCjJZ/I,kBAbM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,EACtB,OAD4C,EAAnBm3B,cAEvB,IAAK,uBACH,OAAOn3B,EAAE,gCAEX,IAAK,iBACH,OAAOA,EAAE,0BAEX,QACE,OAAOA,EAAE,qCCZFykC,GAAuClpC,YAAH,utBC0IlCwE,I,kBAAAA,iBAAkByD,aA3GjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OAExCiJ,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WAC/B,EAA4CxhC,YAAS8hC,GAAsC,CACzFv7B,UAAW,CACT2J,QAAS+vB,KAFLhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAO9B,GAAInB,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAIsI,GAEZ,IAAM+P,EAAU/P,EAAK+P,QACf6xB,EAAoB5hC,EAAK6hC,yBAE/B,OACE,eAAC,GAAD,UACE,sBAAKxkC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CACE4B,UAAWnI,EAAE,8CACb6H,SAAU68B,EAAkB78B,SAC5BS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAK6hC,yBAAyB98B,SAAS4B,WAEhDC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+6B,yBAAyBljC,MACpDoG,EAAW+B,EAAgB+6B,yBAAyB98B,SAE1D,OAAOgC,EAAS1D,OACZ,CAGEw+B,yBAA0B,CACxB76B,WAAYH,EAAeg7B,yBAAyB76B,WACpDrI,MAAM,GAAD,oBAAOkI,EAAeg7B,yBAAyBljC,OAA/C,aAAyDoI,IAC9DhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,2BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,2BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,gEACpB,eAAC,KAAM+J,UAAP,UAAiB,uBAAM5J,UAAU,aAAhB,SAA8BH,EAAE,0BAJnCgK,kBAOlB,eAAC,KAAMxD,KAAP,UACKk+B,EAAkBjjC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAAcsxB,aAAcv1B,EAAKwF,SAAS+vB,gBAD5BntB,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAKgjC,cAAcz6B,OAAO2C,IADpB9C,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKijC,WAER,eAAC,KAAMh/B,IAAP,UACE,eAAC,GAAD,CAAyB2wB,SAAU50B,EAAKwF,SAASqwB,YAAat3B,UAAU,gBAD1D6J,kBAVFA,4BAmB5B,gBAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACxB,eAAC,GAAD,CACEzE,WAAW,qBACXw0B,UAAW/+B,EAAMkD,OAAOo9B,8BC7H3BW,GAAkCvpC,YAAH,k1BAkE/BwpC,GAA8BxpC,YAAH,qQClE3BypC,GAAyCzpC,YAAH,iMAYtC0pC,GAAsC1pC,YAAH,oPAWnC2pC,GAAsC3pC,YAAH,oPAWnC4pC,GAAsC5pC,YAAH,sMCoDjCwE,qBAAkByD,aAhEjC,YAA6G,IAAlExD,EAAiE,EAAjEA,EAAG6D,EAA8D,EAA9DA,MAAgB3D,GAA8C,EAAvD4D,QAAuD,EAA9C5D,UAA8C,IAApCklC,qBAAoC,MAAtB,GAAsB,MAAlBp2B,gBAAkB,SACpG4zB,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,EAAiCxhC,YAASk/B,GAAmB,CAC3D34B,UAAW,CAAEsF,GAAIo0B,KADXhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM6S,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,UACE,sBAAK1S,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACrBuyB,IAAoBp2B,EACrB,eAAC,GAAD,CAAsB1M,WAAW,MACXC,SAAS,4BAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,0BAAkEiB,EAAlE,iBAAR,SACE,gBAAC,KAAD,CAAQzgC,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,uDAI/C,GAEFgP,EACA,eAAC,GAAD,CAAsB1M,WAAW,OACXC,SAAS,qBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,mBAAR,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAIjD,GAEJ,eAAC,GAAD,CACEoO,WAAW,eACXw0B,UAAWA,qBCVZ7iC,iBAAkByD,aApDO,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,OACtC,gBAAC,KAAD,WACI,gBAAC,KAAKrF,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOq6B,OAAU,0BAA4B,eACzDl6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,MAAMuG,UAAU,OAAOjL,UAAU,4BAI1D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOs6B,OAAU,0BAA4B,eACzDn6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,MACL1E,UAAY6K,EAAOu6B,IAAO,0BAA4B,eACtDp6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,MAAMuG,UAAU,OAAOjL,UAAU,gCAK5D,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BCgHAD,qBAAkByD,aA3IjC,YAA6D,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAElCiJ,GAFoD,EAAXhJ,QAC3BmF,qBAAWrI,IACAkM,YAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WAG/B,EAAiCxhC,YAASmiC,GAAiC,CACzE57B,UAAW,CAAE2J,QAAS+vB,KADhBhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAAqCyI,YAAYw5B,IAAzCS,EAAR,oBACA,EAA4Cj6B,YAAY45B,IAAhDM,EAAR,oBAEA,GAAI7iC,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,gBAAC,GAAD,WACE,6BAAI7C,EAAE,+BAAiC,6BAAIA,EAAE,iCAKnD,IACM0lC,EADsB5iC,EAAK6iC,oBACclkC,MAAM,GAAGG,KAClDgkC,EAAWF,EAAmBE,SAGpC,OAFArrC,QAAQC,IAAIkrC,GAGV,gBAAC,GAAD,CAAiCN,cAAeM,EAAmBl3B,GAAnE,UACE,eAAC,KAAD,CAAMxI,MAAOhG,EAAE,yCAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CACb65B,OAAQI,EAAmBJ,OAC3BD,OAAQK,EAAmBL,OAC3BE,IAAKG,EAAmBH,KAG1B35B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI04B,EAAa,CACf/1B,GAAIk3B,EAAmBl3B,GACvB82B,OAAQz5B,EAAOy5B,OACfD,OAAQx5B,EAAOw5B,OACfE,IAAK15B,EAAO05B,KAGdC,EAAyB,CAAEt8B,UAAW,CACpC6C,MAAOw4B,GACNr4B,eAAgB,CAEf,CAACC,MAAO24B,GAAiC57B,UAAW,CAAE2J,QAAS+vB,OAElEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAnCxB,SAuCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,EAAiCqI,gBAAjC,EAAkD8C,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,SAKd+5B,EAASnkC,MAAM0E,OAAU,8BAAKnG,EAAE,oDAA0D,GAC5F,eAAC,KAAKI,IAAN,UACCwlC,EAASnkC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,eAAC,KAAKiE,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CAAMP,MAAOpE,EAAKikC,UAAlB,UACE,gBAAC,KAAKr/B,KAAN,WACGxG,EAAE,2DADL,IACkEiK,KAAOrI,EAAKkkC,eAAe37B,OAAO2C,GAClG,sBAAKrG,wBAAyB,CAAEC,OAAQ9E,EAAK+E,cAE/C,gBAAC,KAAK6B,OAAN,WACE,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,SACNH,KAAK,SACLiE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,+DACd+R,eAAgB,6BAAInQ,EAAKikC,YACzB7zB,WAAYhS,EAAE,oDACdiS,eAAgBwzB,EAChBvzB,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAO24B,GAAiC57B,UAAW,CAAE2J,QAAS+vB,SAlBzE,SAwBE,eAAC,KAAD,CAAM/9B,KAAK,cAEb,eAAC,IAAD,CAAMxB,GAAE,8BAAyBu/B,EAAzB,0BAAoD8C,EAAmBl3B,GAAvE,0BAA2F5M,EAAK4M,IAAxG,SACE,eAAC,KAAD,CACEhK,KAAK,SACLG,MAAM,YAFR,SAIK3E,EAAE,wCCvERD,iBAAkByD,aAjEc,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAuB+K,GAA1B,EAAMjH,QAAN,EAAeqQ,UAAf,EAA0BpJ,cAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAQ/C,EAAxF,EAAwFA,UAAxF,OAC7C,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,YACL1E,UAAY6K,EAAO66B,UAAa,0BAA4B,eAC5DpvB,YAAazW,EAAE,kEACfmL,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,2DAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOi6B,cACjB94B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,gBAAiBxJ,IACnDP,OAAQ,kBAAMiH,EAAgB,iBAAiB,MAEjD,eAAC,KAAD,CAAcrP,KAAK,gBAAgBuG,UAAU,OAAOjL,UAAU,6BAIpE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oDAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,UACbC,aAActL,EAAOlF,QACrB9L,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,UAAW5C,EAAE1O,OAAO2R,cAClCnD,EAAgB,WAAW,GAAM,MAGrC,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,+BAKhE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,gCCwBFD,qBAAkByD,aAtEjC,YAAuE,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACnD8+B,EAAY/+B,EAAMkD,OAAOo9B,WACzBiB,EAAgBvhC,EAAMkD,OAAOg/B,gBAC7Bj9B,EAAS,8BAA0B85B,EAA1B,kBAEf,EAA0Cr3B,YAAY05B,IAA/Ce,EAAP,oBAGA,OACE,eAAC,GAAD,CAAiCh3B,UAAU,EAA3C,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,0DAEjB,eAAC,KAAD,CACEyL,cAAe,CACbo6B,UAAW,GACXl/B,QAAS,GACTm/B,cAAe,IAAIliC,MAGrBgI,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZm6B,EAAgC,CAAE98B,UAAW,CAC3C6C,MAAO,CACL25B,mBAAoBN,EACpBS,UAAWh6B,EAAOo6B,SAClBt/B,QAASkF,EAAOlF,QAChBm/B,cAAehuB,GAAejM,EAAOi6B,iBAEtC55B,eAAgB,CACjB,CAACC,MAAO24B,GAAiC57B,UAAW,CAAE2J,QAAS+vB,OAEhEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8DAAgE,CAC7EuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQ0L,EAAjC,EAAiCA,WAAYrD,EAA7C,EAA6CA,gBAAiB8C,EAA9D,EAA8DA,cAA9D,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR0L,WAAYA,EACZrD,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,gBCsCV/I,qBAAkByD,aAjGjC,YAAwE,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACpD8+B,EAAY/+B,EAAMkD,OAAOo9B,WAEzB+B,GADgBriC,EAAMkD,OAAOg/B,gBACjBliC,EAAMkD,OAAOyH,IACzB1F,EAAS,8BAA0B85B,EAA1B,kBAEf,EAAiCjgC,YAASqiC,GAAwC,CAChF97B,UAAW,CAAC,GAAMg9B,KADZtjC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA0CyI,YAAY25B,IAA/CiB,EAAP,oBAEA,GAAIvjC,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,gBAAC,GAAD,WACE,6BAAI7C,EAAE,+BAAiC,6BAAIA,EAAE,iCAKnD,IAAMomC,EAAUtjC,EAAKujC,0BAIjBC,EAAW,KAKf,OAJIF,EAAQN,gBACVQ,EAAW,IAAI1iC,KAAKwiC,EAAQN,gBAI5B,eAAC,GAAD,CAAiC92B,UAAU,EAA3C,SACE,gBAAC,KAAD,WACE,eAAC,KAAKjJ,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,0DAEjB,eAAC,KAAD,CACEyL,cAAe,CACbo6B,UAAWO,EAAQP,UACnBl/B,QAASy/B,EAAQz/B,QACjBm/B,cAAeQ,GAGjB16B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZs6B,EAAgC,CAAEj9B,UAAW,CAC3C6C,MAAO,CACLyC,GAAI03B,EACJL,UAAWh6B,EAAOo6B,SAClBt/B,QAASkF,EAAOlF,QAChBm/B,cAAehuB,GAAejM,EAAOi6B,iBAEtC55B,eAAgB,CACjB,CAACC,MAAO24B,GAAiC57B,UAAW,CAAE2J,QAAS+vB,OAEhEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+DAAiE,CAC9EuM,SAAUF,IAAMG,SAASC,eAE7B3I,EAAQX,KAAK2F,GACbgD,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQ0L,EAAjC,EAAiCA,WAAYrD,EAA7C,EAA6CA,gBAAiB8C,EAA9D,EAA8DA,cAA9D,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR0L,WAAYA,EACZrD,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,gBC9FV/I,sBAhBf,YAA4C,IAAdC,EAAa,EAAbA,EAC5B,OADyC,EAAV+I,QAE7B,IAAK,YACH,OAAO,eAAC,KAAD,CAAOpE,MAAM,UAAb,SAAwB3E,EAAE,gEAEnC,IAAK,SACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,6DAEnC,IAAK,YACH,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,gEAEnC,QACE,OAAOA,EAAE,qECkCAD,I,YAAAA,iBAAkByD,aApCjC,YAAyE,EAA3CxD,EAA4C,IAAzC6D,EAAwC,EAAxCA,MAAgB3D,GAAwB,EAAjC4D,QAAiC,EAAxB5D,UAAwB,IAAd2S,eAAc,MAAN,GAAM,EACjE+vB,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,OACE,eAAC,GAAD,UACE,sBAAKhkC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQgK,SAA5B,SACE,eAAC,GAAD,MAEF,gBAAC,KAAKzc,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IASxB,eAAC,GAAD,CACEzE,WAAW,UACXw0B,UAAWA,qBC1Cd2D,GAA4BhrC,YAAH,++BCCzBirC,GAAsCjrC,YAAH,+/BAkDnCkrC,GAAmClrC,YAAH,8LAShCmrC,GAAkCnrC,YAAH,wOCW7BwE,qBAAkByD,aAtDjC,YAAwD,IAA3BxD,EAA0B,EAA1BA,EAAU4B,GAAgB,EAAvBiC,MAAuB,EAAhBjC,MAAMiR,EAAU,EAAVA,QACrC+N,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAC/B,EAAiDtV,YAAYk7B,IAA7D,mBAAOG,EAAP,KAOA,OAPA,KAAuC9jC,KAEvCvI,QAAQC,IAAI,sBACZD,QAAQC,IAAIoH,GACZrH,QAAQC,IAAIqY,GACZtY,QAAQC,IAAI,OAGV,yBAAQ2F,UAAU,sCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,wDACd+R,eAAgB,6BACd,gBAAC,KAAD,WACE,gBAAC,KAAKxN,KAAN,WACGvE,EAAE,gBADL,KACyBiK,KAAOrI,EAAK4L,MAAMrD,OAAO2C,GADlD,IACkE,IAC/D7C,KAAOrI,EAAK4L,KAAO,IAAM5L,EAAKilC,aAAaC,WAAW38B,OAAOw8B,MAEhE,gBAAC,KAAKpiC,KAAN,WACGvE,EAAE,iBADL,KACyB4B,EAAKilC,aAAa3R,sBAAsBrwB,QAEjE,gBAAC,KAAKN,KAAN,WACGvE,EAAE,oBADL,KAC4B4B,EAAKilC,aAAatL,yBAAyBlC,qBAAqBx0B,aAIhGmN,WAAYhS,EAAE,oDACdiS,eAAgB20B,EAChB10B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAAEC,MAAOo6B,GACPr9B,UAAW,CAAE2J,QAASA,EAAQrE,UA/B1C,SAoCE,uBAAMrO,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBC6HzC9E,I,kBAAAA,iBAAkByD,aArKjC,YAAgD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACrB+c,GADuC,EAAX9c,QACdmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBACzBsjB,EAAatgC,EAAMkD,OAAOo9B,WAC1Bh8B,EAAYnI,EAAE,mCACpB,EAA4C2C,YAAS4jC,GAA2B,CAC9Er9B,UAAW,CAAC,QAAWi7B,GACvB3xB,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,UACE,eAAC,KAAD,CAAMoD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,qCAMd,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oCAOhBzF,QAAQC,IAAI,wBACZD,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QACfk0B,EAA0BjkC,EAAKikC,wBAGrC,OAAKA,EAAwBtlC,MAAM0E,OAcjC,eAAC,GAAD,CAAoB0M,QAASA,EAA7B,SACE,eAAC,GAAD,CACE1K,UAAWA,EACXN,SAAUk/B,EAAwBl/B,SAClCS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOu9B,EAAwBl/B,SAAS4B,WAE1CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBm9B,wBAAwBtlC,MACnDoG,EAAW+B,EAAgBm9B,wBAAwBl/B,SAEzD,OAAOgC,EAAS1D,OACZ,CAGE4gC,wBAAyB,CACvBj9B,WAAYH,EAAeo9B,wBAAwBj9B,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeo9B,wBAAwBtlC,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACGugC,EAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,gBAAC,KAAMxB,IAAP,WACI7F,QAAQC,IAAIoH,GACZrH,QAAQC,IAAIqY,GACd,gBAAC,KAAMhN,IAAP,WACIoE,KAAOrI,EAAK4L,MAAMrD,OAAO2C,GAD7B,IAC2C,wBACzC,uBAAM3M,UAAU,aAAhB,SACG8J,KAAOrI,EAAK4L,KAAO,IAAM5L,EAAKilC,aAAaC,WAAW38B,OAAOw8B,QAGlE,eAAC,KAAM9gC,IAAP,UACIjE,EAAKilC,aAAa3R,sBAAsBrwB,OAE5C,gBAAC,KAAMgB,IAAP,WACIjE,EAAKilC,aAAatL,yBAAyBlC,qBAAqBx0B,KADpE,IAC2E,wBACzE,uBAAM1E,UAAU,aAAhB,SACIyB,EAAKilC,aAAatL,yBAAyB12B,UAGjD,eAAC,KAAMgB,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKolC,kBAEnC,eAAC,KAAMnhC,IAAP,UACE,eAAC,GAAD,CAAoBgN,QAASA,EAASjR,KAAMA,QAtBhCoI,4BArDxB,eAAC,GAAD,CAAoB6I,QAASA,EAA7B,SACE,eAAC,KAAD,CAAM7M,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oDCvELinC,GAAgC1rC,YAAH,8tBAoC7B2rC,GAA8B3rC,YAAH,0wBAyC3BmzB,GAAyBnzB,YAAH,olBA8BtB4rC,GAA2B5rC,YAAH,mbAuBxB6rC,GAA2B7rC,YAAH,2YAuBxB8rC,GAA2B9rC,YAAH,4KCatBwE,qBAAkByD,aA9IjC,YAAyC,IAAZxD,EAAW,EAAXA,EAAG6D,EAAQ,EAARA,MAExBiJ,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,cACbjG,EAAYnI,EAAE,uCACd02B,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,MACXC,SAAS,mBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAE,8BAAyBu/B,EAAzB,oBAAR,SACE,gBAAC,KAAD,CAAQj+B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,4CAKnD,EAA0C2C,YAASskC,GAA+B,CAChF/9B,UAAW,CAAE05B,UAAWA,KADnBhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMiB,EAA7B,EAA6BA,UAG7B,EAAiCwH,YAAY87B,IAAtCC,EAAP,oBAEA,GAAI1kC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAM6S,EAAU/P,EAAK+P,QACf2X,EAAqB1nB,EAAK0nB,mBAEhC,OACE,eAAC,GAAD,CACElpB,KAAMuR,EACNzE,WAAYA,EACZsoB,cAAeA,EAHjB,SAKE,eAAC,GAAD,CACEvuB,UAAWnI,EAAE,uCACb6H,SAAU2iB,EAAmB3iB,SAC7BS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOghB,EAAmB3iB,SAAS4B,WAErCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4gB,mBAAmB/oB,MAC9CoG,EAAW+B,EAAgB4gB,mBAAmB3iB,SAEpD,OAAOgC,EAAS1D,OACZ,CAGEqkB,mBAAoB,CAClB1gB,WAAYH,EAAe6gB,mBAAmB1gB,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAe6gB,mBAAmB/oB,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,+BACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACKgkB,EAAmB/oB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAK6oB,sBAAsB5lB,MADdmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,IADjB9C,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,IADf9C,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAE,8BAAyBu/B,EAAzB,gCAA0DhhC,EAAK4M,IAAvE,SACG5M,EAAK2gC,2BAFMv4B,gBAKhB,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACE,eAAC,IAAD,CAAMkD,GAAI,uBAAyBQ,EAAMkD,OAAOo9B,WAAa,qBAAuBviC,EAAK4M,GAAzF,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,oBAGP,yBAAQG,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,oDACd+R,eAAgB,+BAAInQ,EAAK6oB,sBAAsB5lB,KAA/B,IAAsCjD,EAAK0iB,aAC3DtS,WAAYhS,EAAE,yCACdiS,eAAgBq1B,EAChBp1B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAO86B,GAA+B/9B,UAAW,CAAE05B,UAAWA,SAfvE,SAmBE,uBAAMziC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,kBA1BfmF,kBAfzBA,gCC9GnBmoB,GAAmB5nB,OAAaC,MAAM,CACjDigB,sBAAuBlgB,OACpBG,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNg9B,WACH/vB,KAAMjN,SCgGOxK,iBAAkByD,aAtFJ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAS0c,EAAf,EAAeA,OAAQrM,EAAvB,EAAuBA,UAAWpJ,EAAlC,EAAkCA,aAAciM,EAAhD,EAAgDA,cAAe9C,EAA/D,EAA+DA,gBAAiBlJ,EAAhF,EAAgFA,OAAQa,EAAxF,EAAwFA,OAAQ/C,EAAhG,EAAgGA,UAAhG,OAC3B,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,wBACL1E,UAAY6K,EAAOyf,sBAAyB,0BAA4B,eACxEtf,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU0d,wBAAwBpwB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,wBAAwBuG,UAAU,OAAOjL,UAAU,4BAI5E,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG3DqgB,EAeD,GAdA,eAAC,KAAK3a,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,0CAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAKhE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGlC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAH9B,SAKG9I,EAAE,8BC+BED,qBAAkByD,aA1GjC,YAAmD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAChC8+B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,cACbjG,EAAYnI,EAAE,2CACd8I,EAAS,8BAA0B85B,EAA1B,gBAEf,EAA+BjgC,YAAS+rB,GAAwB,CAC9DxlB,UAAW,CAAE05B,UAAWA,KADnBhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAiCyI,YAAY47B,IAAtCK,EAAP,oBAEM9Q,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SACpB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,GAAI4C,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAMmU,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,CACEzE,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEb,eAAC,KAAD,CACEsD,cAAe,CACbgf,sBAAuB,GACvBnG,UAAW,IAAI1gB,KACf4T,KAAM,IAER7L,iBAAkBwmB,GAClBvmB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAGZw8B,EAAuB,CAAEt+B,UAAW,CAClC6C,MAAO,CACL8G,QAAS+vB,EACTnY,sBAAuB5e,EAAO4e,sBAC9BnG,UAAWxM,GAAejM,EAAOyY,WACjC9M,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAO86B,GAA+B/9B,UAAW,CAAE05B,UAAWA,OAElEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM2kC,EAAc3kC,EAAK0kC,uBAAuBE,iBAAiBl5B,GACjE1K,EAAQX,KAAR,8BAAoCy/B,EAApC,6BAAkE6E,IAClEp7B,IAAMC,QAAStM,EAAE,mDAAqD,CAClEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAnCxB,SAuCG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACE2U,QAAQ,EACRrM,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EARb,SAUGvO,QAAQC,IAAIwQ,iBCmCdjL,I,GAAAA,iBAAkByD,aA9HjC,YAAoD,IAArBxD,EAAoB,EAApBA,EAAY6D,GAAQ,EAAjBC,QAAiB,EAARD,OACnC2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,cACbjG,EAAYnI,EAAE,4CACd8I,EAAS,8BAA0B85B,EAA1B,gBAEf,EAA+BjgC,YAASukC,GAA6B,CACnEh+B,UAAW,CAAEsF,GAAIA,EAAIo0B,UAAWA,KAD3BhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAA0ByI,YAAY67B,IAA/B1U,EAAP,oBAEMgE,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SACpB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,GAAI4C,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAMmU,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QACf80B,EAAc7kC,EAAK4kC,iBAIrBpjB,EAAY,KACZC,EAAU,KAQd,OAPIojB,EAAYrjB,YACdA,EAAY,IAAI1gB,KAAK+jC,EAAYrjB,YAE/BqjB,EAAYpjB,UACdA,EAAU,IAAI3gB,KAAK+jC,EAAYpjB,UAI/B,eAAC,GAAD,CACEnW,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEb,eAAC,KAAD,CACEsD,cAAe,CACbgf,sBAAuBkd,EAAYld,sBAAsBjc,GACzD8V,UAAWA,EACXC,QAASA,EACT/M,KAAMmwB,EAAYnwB,MAEpB7L,iBAAkBwmB,GAClBvmB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAM1CuZ,EANazY,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAKVuZ,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBmO,EAAgB,CAAExpB,UAAW,CAC3B6C,MAAO,CACLyC,GAAIA,EACJic,sBAAuB5e,EAAO4e,sBAC9BnG,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT/M,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAO86B,GAA+B/9B,UAAW,CAAE05B,UAAWA,OAElEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,oDAAsD,CACnEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3CxB,SA+CG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EAPb,SASGvO,QAAQC,IAAIwQ,iBCjJhB48B,GAAsCrsC,YAAH,ymCCwIjCwE,I,eAAAA,iBAAkByD,aAnHjC,YAA8C,IAAZxD,EAAW,EAAXA,EAAG6D,EAAQ,EAARA,MAC7B+c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB9D,EAAuB4X,EAAY5X,qBAEnCwF,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,cACbjG,EAAYnI,EAAE,+CACds3B,EAAO,sBAAKn3B,UAAU,sBAAf,SACX,eAAC,GAAD,CAAY2I,UAAS,8BAAyB85B,EAAzB,oBAGvB,EAA0CjgC,YAASilC,GAAqC,CACtF1+B,UAAW,CACT05B,UAAWA,EACXp0B,GAAIA,KAHD5L,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMiB,EAA7B,EAA6BA,UAO7B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYkpB,KAAMA,EAA3D,SACE,eAAC,KAAD,CAAMtxB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYkpB,KAAMA,EAA3D,UACG/8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAM6S,EAAU/P,EAAK+P,QACf60B,EAAmB5kC,EAAK4kC,iBACxB1V,EAAU0V,EAAiB1V,QAGjC,OAFAz3B,QAAQC,IAAIw3B,GAEPA,EAAQvwB,MAAM0E,OAcjB,eAAC,GAAD,CAA6B7E,KAAMuR,EAASzE,WAAYA,EAAYkpB,KAAMA,EAA1E,SACE,eAAC,GAAD,CACEnvB,UAAS,UAAKA,EAAL,YAAkBu/B,EAAiBjd,sBAAsB5lB,KAAzD,aAAkEoF,KAAOy9B,EAAiBpjB,WAAWna,OAAO2C,GAA5G,KACTjF,SAAUmqB,EAAQnqB,SAClBS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOwoB,EAAQnqB,SAAS4B,WAE1BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBooB,QAAQvwB,MACnCoG,EAAW+B,EAAgBooB,QAAQnqB,SAEzC,OAAOgC,EAAS1D,OACZ,CAGE6rB,QAAS,CACPloB,WAAYH,EAAeqoB,QAAQloB,WACnCrI,MAAM,GAAD,oBAAOkI,EAAeqoB,QAAQvwB,OAA9B,aAAwCoI,IAC7ChC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACKwrB,EAAQvwB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAO,IAAIrG,KAAKhC,EAAK4L,KAAO,IAAM5L,EAAKilC,aAAaC,YAAY38B,OAAOnB,IAD1DgB,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKilC,aAAatL,yBAAyBlC,qBAAqBx0B,MADnDmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKilC,aAAa3R,sBAAsBrwB,MAD3BmF,kBAPFA,4BApD5B,gBAAC,GAAD,CAA6B1I,KAAMuR,EAASzE,WAAYA,EAAYkpB,KAAMA,EAA1E,UACG/8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,iECrEA22B,GAAsBp7B,YAAH,iiBA+BnBq7B,GAAqBr7B,YAAH,8TAmBlBs7B,GAAet7B,YAAH,2MAUZu7B,GAAkBv7B,YAAH,2MAUfw7B,GAAkBx7B,YAAH,wKCvCbwE,qBAAkByD,aAlBjC,YAA4F,IAAhDxD,EAA+C,EAA/CA,EAAG8D,EAA4C,EAA5CA,QAAS+jC,EAAmC,EAAnCA,kBAAmC,IAAhB1nC,iBAAgB,MAAN,GAAM,EACzF,EAAyBoL,YAAY/P,GAA9BgY,EAAP,oBAEA,OACE,eAAC,KAAD,CACE7O,MAAO,aAAexE,EACtBuE,KAAK,KACLpB,KAAK,iBACL8jB,cAAc,IACd3e,QAAS,kBAAM8K,GACfC,EAAgB1P,EAAS+jC,IAN3B,SASG7nC,EAAE,0BC6IMD,qBAAkByD,aA3IjC,YAAuC,IAAZxD,EAAW,EAAXA,EAAG6D,EAAQ,EAARA,MAEtBiJ,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,YACbjG,EAAYnI,EAAE,qCACd02B,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,MACXC,SAAS,kBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAE,8BAAyBu/B,EAAzB,kBAAR,SACE,gBAAC,KAAD,CAAQj+B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,0CAKnD,EAA0C2C,YAASg0B,GAAqB,CACtEztB,UAAW,CAAE2J,QAAS+vB,KADjBhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMiB,EAA7B,EAA6BA,UAG7B,EAAgCwH,YAAYwrB,IAArC+Q,EAAP,oBAEA,GAAIllC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAM6S,EAAU/P,EAAK+P,QACfk1B,EAAmBjlC,EAAKilC,iBAG9B,OAFAxtC,QAAQC,IAAIutC,GAGV,eAAC,GAAD,CACEzmC,KAAMuR,EACNzE,WAAYA,EACZsoB,cAAeA,EAHjB,SAKE,eAAC,GAAD,CACEvuB,UAAWnI,EAAE,qCACb6H,SAAUkgC,EAAiBlgC,SAC3BS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOu+B,EAAiBlgC,SAAS4B,WAEnCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBm+B,iBAAiBtmC,MAC5CoG,EAAW+B,EAAgBm+B,iBAAiBlgC,SAElD,OAAOgC,EAAS1D,OACZ,CAGE4hC,iBAAkB,CAChBj+B,WAAYH,EAAeo+B,iBAAiBj+B,WAC5CrI,MAAM,GAAD,oBAAOkI,EAAeo+B,iBAAiBtmC,OAAvC,aAAiDoI,IACtDhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,MAJcC,kBAOlB,eAAC,KAAMxD,KAAP,UACKuhC,EAAiBtmC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC1B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKoD,aADQgF,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK4c,WAAWrU,OAAO2C,IADjB9C,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAkCgiC,kBAAmBjmC,EAAKomC,wBAD5Ch+B,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAI,uBAAyBu/B,EAAY,mBAAqBhhC,EAAK4M,GAAzE,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,kDACd+R,eAAgB,6BAAInQ,EAAKoD,cACzBgN,WAAYhS,EAAE,uCACdiS,eAAgB61B,EAChB51B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOwqB,GAAqBztB,UAAW,CAAE2J,QAAS+vB,SAf3D,SAmBE,uBAAMziC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAlBzBA,gCCnDjBjK,qBAAkByD,aAjDjC,YAAmJ,IAApHxD,EAAmH,EAAnHA,EAAG8D,EAAgH,EAAhHA,QAASkH,EAAuG,EAAvGA,OAAgBD,GAAuF,EAA/Fc,OAA+F,EAAvFd,cAAcjC,EAAyE,EAAzEA,UAAW+iB,EAA8D,EAA9DA,cAAeC,EAA+C,EAA/CA,eAA+C,IAA/BC,6BAA+B,MAAT,SAAAnjB,GAAC,OAAEA,GAAM,EAChJ,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKpC,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,4BAIlE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,gBAOb,gBAAC,KAAKtjB,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAH9B,SAKG9I,EAAE,8BCsGAD,qBAAkByD,aA1IjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAC/B8+B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,cACbjG,EAAYnI,EAAE,yCACd8I,EAAS,8BAA0B85B,EAA1B,cAEf,EAAiCjgC,YAASk/B,GAAmB,CAC3D34B,UAAW,CAAEsF,GAAIo0B,KADXhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAA6ByI,YAAYsrB,IAAlCoR,EAAP,oBAGA,EAAgCt7B,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAG9B6xB,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SACpB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,GAAI4C,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAMmU,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,CACEzE,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACEsD,cAAe,CACbzG,YAAa,IAGf4G,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACdzZ,QAAS+vB,EACT59B,YAAa6G,EAAO7G,YACpB2yB,iBAAkBzL,GAGhBK,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAUllB,SAAWulB,EAErBsb,EAAmB,CAAE/+B,UAAW,CAC9B6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOwqB,GAAqBztB,UAAW,CAAC2J,QAAS+vB,OAErDx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAIpB,IAAIwhB,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxJ,MAAM7C,EAAE,gCAAiC,CAC7CuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAzDpB,SA6DG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRggB,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBjjB,UAAWA,EARb,SAUGvO,QAAQC,IAAIwQ,iBCtJdk9B,GAAkB39B,OAAaC,MAAM,CAC9CxF,YAAauF,OACVK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBCgDHD,qBAAkByD,aAtCjC,YAA2F,IAAxDxD,EAAuD,EAAvDA,EAAYgL,GAA2C,EAApDlH,QAAoD,EAA3CkH,QAAgBD,GAA2B,EAAnCc,OAAmC,EAA3Bd,cAAcjC,EAAa,EAAbA,UAC3E,OACE,gBAAC,KAAD,WACE,eAAC,KAAKtC,KAAN,UACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,8BAKpE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIG3E,EAAE,gCCqFFD,qBAAkByD,aApGjC,YAAmD,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAASD,EAAQ,EAARA,MAClC2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzB/1B,EAAa,YACbjG,EAAYnI,EAAE,0CACd8I,EAAS,8BAA0B85B,EAA1B,cAEf,EAA+BjgC,YAASi0B,GAAoB,CAC1D1tB,UAAW,CAAEsF,GAAIA,EAAIqE,QAAS+vB,KADzBhgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAyByI,YAAYurB,IAA9Bc,EAAP,oBAEMlB,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SACpB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIjD,GAAI4C,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAMmU,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QACf80B,EAAc7kC,EAAKqlC,gBAEzB,OACE,eAAC,GAAD,CACE/5B,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEf,eAAC,KAAD,CACEsD,cAAe,CACbzG,YAAa2iC,EAAY3iC,aAE3B2G,iBAAkBu8B,GAClBt8B,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ4sB,EAAe,CAAE1uB,UAAW,CAC1B6C,MAAO,CACLyC,GAAIA,EACJxJ,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACjB,CAACC,MAAOwqB,GAAqBztB,UAAW,CAAE2J,QAAS+vB,OAEpDx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,kDAAoD,CACjEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BxB,SAkCG,gBAAGf,EAAH,EAAGA,aAA8CC,GAAjD,EAAiBgM,cAAjB,EAAgC9C,gBAAhC,EAAiDlJ,QAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EALb,SAOGvO,QAAQC,IAAIwQ,iBChCZjL,I,kBAAAA,iBAAkByD,aA/DjC,YAAuG,IAAhDxD,EAA+C,EAA/CA,EAAY6D,GAAmC,EAA5CC,QAA4C,EAAnCD,OAAO3D,EAA4B,EAA5BA,SAA4B,IAAlB8O,gBAAkB,SAC9F4zB,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,EAAiCxhC,YAASk/B,GAAmB,CAC3D34B,UAAW,CAAEsF,GAAIo0B,KADXhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM6S,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,UACE,sBAAK1S,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACrB7D,EASC,GARF,eAAC,GAAD,CAAsB1M,WAAW,MACXC,SAAS,yCAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,6CAAR,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,qEAMjDgP,EACA,eAAC,GAAD,CAAsB1M,WAAW,OACXC,SAAS,yCAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,0CAAR,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAIjD,GAEJ,eAAC,GAAD,CACEoO,WAAW,sCACXw0B,UAAWA,qBC9EdwF,GAAyD7sC,YAAH,qlBA0BtD8sC,GAAwD9sC,YAAH,ilBA+BrDmzB,GAAyBnzB,YAAH,kcAoBtB+sC,GAAqD/sC,YAAH,ySAUlDgtC,GAAqDhtC,YAAH,ySAUlDitC,GAAqDjtC,YAAH,8OC2DhDwE,qBAAkByD,aAjIjC,YAAyE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACvD++B,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,EAA4CxhC,YAASylC,GAAwD,CAC3Gl/B,UAAW,CAAE2J,QAAS+vB,KADhBhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAAuDwH,YAAYi9B,IAA5DC,EAAP,oBAEA,GAAI7lC,EAAS,OACX,eAAC8lC,GAAD,UACE,6BAAI1oC,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC6lC,GAAD,UACE,6BAAI1oC,EAAE,gCAKZ,IAAI2oC,EAAqB7lC,EAAK8lC,wCAE9B,OACE,eAACF,GAAD,UACE,eAAC,GAAD,CACEvgC,UAAWnI,EAAE,gEACbsI,aAAa,EACbT,SAAU8gC,EAAmB9gC,SAC7BG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOm/B,EAAmB9gC,SAAS4B,WAErCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBg/B,wCAAwCnnC,MACnEoG,EAAW+B,EAAgBg/B,wCAAwC/gC,SAEzE,OAAOgC,EAAS1D,OACZ,CAGEwiC,mBAAoB,CAClB7+B,WAAYH,EAAei/B,wCAAwC9+B,WACnErI,MAAM,GAAD,oBAAOkI,EAAei/B,wCAAwCnnC,OAA9D,aAAwEoI,IAC7EhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAPcC,kBAUlB,eAAC,KAAMxD,KAAP,UACKmiC,EAAmBlnC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKqK,MADQjC,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKoK,OADQhC,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK8X,eADQ1P,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK2d,4BAA4B1a,MADpBmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKoD,YAAY6jC,QAAQ,aAAc,UAD1B7+B,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,sDAA8FviC,EAAK4M,IAA3G,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,KAAMnE,IAAP,UACE,yBACE1F,UAAU,2BACV6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,6EACd+R,eAAgB,+BAAG,wBAAOnQ,EAAK2d,4BAA4B1a,KAA3C,IAAkDjD,EAAK8X,cAAvD,IAAsE,wBAAM9X,EAAKoD,eACjGgN,WAAYhS,EAAE,kEACdiS,eAAgBw2B,EAChBv2B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOi8B,GAAwDl/B,UAAW,CACzE2J,QAAS+vB,SAjBnB,SAsBE,uBAAMziC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBA/CxCmF,gCC9FnB8+B,GAAqDv+B,OAAaC,MAAM,CACnF+U,4BAA6BhV,OAC1BG,SAAS1K,YAAE,uBACdiM,KAAM1B,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPmB,MAAOzB,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPiS,OAAQvS,OACLG,SAAS1K,YAAE,uBACdgF,YAAauF,SCqFAxK,iBAAkByD,aAlFmB,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYmU,GAAf,EAAMrQ,QAAN,EAAeqQ,WAAWpJ,EAA1B,EAA0BA,aAAcC,EAAxC,EAAwCA,OAAQlC,EAAhD,EAAgDA,UAAhD,OAClD,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,OACL1E,UAAY6K,EAAOiB,KAAQ,0BAA4B,eACvDd,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOgB,MAAS,0BAA4B,eACxDb,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,6BAI5D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,SACL1E,UAAY6K,EAAO8R,OAAU,0BAA4B,eACzD3R,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,8BACL1E,UAAY6K,EAAOuU,4BAA+B,0BAA4B,eAC9EpU,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUuM,8BAA8Bjf,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjD,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,8BAA8BuG,UAAU,OAAOjL,UAAU,6BAIlF,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKpE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIG3E,EAAE,gCCwBAD,qBAAkByD,aA/FjC,YAA2E,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAChD8+B,EADkE,EAAT/+B,MACvCkD,OAAOo9B,WACzBr7B,EAAS,8BAA0B85B,EAA1B,yCAEf,EAAiCjgC,YAAS+rB,IAAlC9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAAoDyI,YAClD+8B,IADKS,EAAP,oBAIA,GAAInmC,EACF,OACE,eAAC8lC,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,oEAAf,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,mCAOb,GAAI6C,EACF,OACE,eAAC6lC,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,oEAAf,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,8EAOb,IAAMmU,EAAYrR,EAElB,OACE,eAAC4lC,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOhG,EAAE,oEAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CACb8T,4BAA6B,GAC7BtT,MAAM,IAAIrI,MAAO6B,cACjBuG,OAAO,IAAIpI,MAAO8H,WAAa,EAC/BoR,OAAQ,GACR9X,YAAa,IAEf2G,iBAAkBm9B,GAClBl9B,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ+9B,EAA0C,CAAE7/B,UAAW,CACrD6C,MAAO,CACL8G,QAAS+vB,EACT9lB,OAAQjR,EAAOiR,OACf7Q,KAAMJ,EAAOI,KACbD,MAAOH,EAAOG,MACduT,4BAA6B1T,EAAO0T,4BACpCva,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOi8B,GAAwDl/B,UAAW,CAAC2J,QAAS+vB,OAExFx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,4EAA8E,CAC3FuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCxB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,EAJb,SAMGvO,QAAQC,IAAIwQ,gBCcZjL,I,SAAAA,iBAAkByD,aApGjC,YAA4E,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAC1D++B,EAAY/+B,EAAMkD,OAAOo9B,WACzB6E,EAA2CnlC,EAAMkD,OAAOyH,GACxD1F,EAAS,8BAA0B85B,EAA1B,yCACTz6B,EAAYnI,EAAE,qEAEpB,EAAiC2C,YAAS0lC,GAAuD,CAAEn/B,UAAW,CAC5GsF,GAAIw6B,KADEpmC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAuDyI,YACrDg9B,IADKU,EAAP,oBAIA,GAAIrmC,EACF,OACE,eAAC8lC,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,mCAOb,GAAI6C,EACF,OACE,eAAC6lC,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,8EAOb,IAAMmU,EAAYrR,EACZ2I,EAAgB3I,EAAKomC,uCAE3B,OACE,eAACR,GAAD,CAA6C15B,UAAU,EAAvD,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb8T,4BAA6B9T,EAAc8T,4BAA4B/Q,GACvEvC,KAAMR,EAAcQ,KACpBD,MAAOP,EAAcO,MACrB8Q,OAAQrR,EAAcqR,OACtB9X,YAAayG,EAAczG,aAE7B2G,iBAAkBm9B,GAClBl9B,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZi+B,EAA6C,CAAE//B,UAAW,CACxD6C,MAAO,CACLyC,GAAIw6B,EACJlsB,OAAQjR,EAAOiR,OACf7Q,KAAMJ,EAAOI,KACbD,MAAOH,EAAOG,MACduT,4BAA6B1T,EAAO0T,4BACpCva,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAOi8B,GAAwDl/B,UAAW,CAAC2J,QAAS+vB,OAExFx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6EAA+E,CAC5FuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCxB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,EAAyBa,OAAzB,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdC,OAAQA,EACRlC,UAAWA,EAJb,SAMGvO,QAAQC,IAAIwQ,gBClHdm+B,GAA6B5tC,YAAH,q5BAyG1BmzB,GAAyBnzB,YAAH,2jBA6BtB6tC,GAAyB7tC,YAAH,yMCzEpBwE,qBAAkByD,aAzCjC,YAA2E,IAErE6lC,EAFyBrpC,EAA2C,EAA3CA,EAAG6D,EAAwC,EAAxCA,MAAgB3D,GAAwB,EAAjC4D,QAAiC,EAAxB5D,UAAwB,IAAd2S,eAAc,MAAN,GAAM,EAClE+vB,EAAY/+B,EAAMkD,OAAOo9B,WAM/B,OAJItxB,IACFw2B,EAAax2B,EAAQgK,UAIrB,eAAC,GAAD,UACE,sBAAK1c,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOqjC,EAApB,SACE,eAAC,GAAD,MAEF,gBAAC,KAAKjpC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACtB,eAAC,GAAD,CAAsBvQ,WAAW,MACXC,SAAS,iBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBu/B,EAAzB,iBAAR,SACE,gBAAC,KAAD,CAAQj+B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,yCAInD,eAAC,GAAD,CACEoO,WAAW,WACXw0B,UAAWA,qBC6HZ7iC,qBAAkByD,aApJjC,YAA2D,IAAhCxD,EAA+B,EAA/BA,EAAGsS,EAA4B,EAA5BA,SAAUzO,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAEvCgJ,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzBh8B,EAAYnI,EAAE,oCAEpB,EAA4C2C,YAASwmC,GAA4B,CAC/EjgC,UAAW,CAAC05B,UAAWA,GACvBpwB,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAI9B,EAA+BwH,YAAYiG,IAApCiB,EAAP,oBAGA,GAAI7P,EAAS,OACX,eAAC,GAAD,UACE,eAAC,KAAD,CAAMoD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,qCAMd,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oCAQhBpB,aAAaC,QAAQC,EAAK1C,6BAA8BkW,EAASC,UAEjE,IAAII,EAAkB7P,EAAK6P,gBACrBE,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,CAAqBA,QAASA,EAA9B,SACE,eAAC,GAAD,CACE1K,UAAWA,EACXN,SAAU8K,EAAgB9K,SAC1BS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOmJ,EAAgB9K,SAAS4B,WAElCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+I,gBAAgBlR,MAC3CoG,EAAW+B,EAAgB+I,gBAAgB9K,SAEjD,OAAOgC,EAAS1D,OACZ,CAGEwM,gBAAiB,CACf7I,WAAYH,EAAegJ,gBAAgB7I,WAC3CrI,MAAM,GAAD,oBAAOkI,EAAegJ,gBAAgBlR,OAAtC,aAAgDoI,IACrDhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,mCAApB,MAA2DA,EAAE,+BAC7D,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,yBAApB,MAAiDA,EAAE,2BACnD,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAPcC,kBAUlB,eAAC,KAAMxD,KAAP,UACKmM,EAAgBlR,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAACyjC,GAAD,CAAsBvgC,OAAQnH,EAAKmH,UADrBiB,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKgR,cADR,IACuB,wBACrB,eAAC,KAAKI,MAAN,CAAYrO,MAAM,OAAlB,SAA0B/C,EAAKqR,QAAQC,MAAM,QAF/BlJ,gBAIhB,gBAAC,KAAMnE,IAAP,WACGoE,KAAOrI,EAAKuR,UAAUhJ,OAAO2C,GADhC,IAC6C,wBAC3C,eAAC,KAAKkG,MAAN,CAAYrO,MAAM,OAAlB,SAA0BsF,KAAOrI,EAAKwR,SAASjJ,OAAO2C,OAFxC9C,gBAIhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKyR,cADQrJ,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK0R,gBADQtJ,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,KAAD,CAAQA,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,0BAA4BvB,EAAK4M,KAC7D7J,MAAM,YAFd,SAGG3E,EAAE,mBAJgCgK,gBAOvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,uCACd+R,eAAgB,6BAAInQ,EAAKgR,gBACzBZ,WAAYhS,EAAE,4BACdiS,eAAgBQ,EAChBP,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAOg9B,GAA4BjgC,UAAW,CAAC05B,UAAWA,SAjBrE,SAsBE,uBAAMziC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBAvBfmF,kBAzBzBA,gCCtDjBjK,IC1DoBwK,OAAaC,MAAM,CACpDogB,yBAA0BrgB,OACvBG,SAAS1K,YAAE,uBACdyY,qBAAsBlO,OACtB+Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNg9B,WACHgC,oBAAqBh/B,OACrBiN,KAAMjN,SDiDOxK,cAAkByD,aA7CH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYmU,GAAf,EAAMrQ,QAAN,EAAeqQ,WAAWpJ,EAA1B,EAA0BA,aAA8CC,GAAxE,EAAwCgM,cAAxC,EAAuD9C,gBAAvD,EAAwElJ,QAAgB+O,GAAxF,EAAgFlO,OAAhF,EAAwFkO,YAAxF,OAC5B,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,iCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,sBACL1E,UAAY6K,EAAO2Q,oBAAuB,0BAA4B,eACtExQ,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU2G,qBAAqBrZ,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,sBAAsBuG,UAAU,OAAOjL,UAAU,wBAEtE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAOiI,QAAW,0BAA4B,eAC1D9H,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,2BAG5D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAI0W,EAAV,SACE,eAAC,KAAD,CACEvV,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,iCEuGFD,I,kBAAAA,iBAAkByD,aA5HjC,YAAmD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC/BqgC,EAAatgC,EAAMkD,OAAOo9B,WAC1B/1B,EAAa,WACbjG,EAAYnI,EAAE,wCACd8I,EAAS,8BAA0Bq7B,EAA1B,aACTzN,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SAClB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAInD,EAAiC2C,YAAS+rB,GAAwB,CAC9DxlB,UAAW,CACT05B,UAAWuB,KAFTvhC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAwByI,YAAY69B,GAAwB,IAArDI,EAAP,oBAMA,GAAI5mC,EACF,OAAO,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACH,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,qCAMhB,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,eAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,SACH,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oCAMhBzF,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QAGrB,OACE,eAAC,GAAD,CAA6BzE,WAAYA,EAAY9M,KAAMuR,EAAS6jB,cAAeA,EAAnF,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACbkQ,oBAAqB,GACrB1I,QAAS,IAGXrH,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ29B,EAAc,CAAEtgC,UAAW,CACzB6C,MAAO,CACL8G,QAASsxB,EACTxoB,oBAAqB9P,EAAO8P,oBAC5B1I,QAASpH,EAAOoH,UAEjB/G,eAAgB,KAElBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,wCAA0C,CACvDuM,SAAUF,IAAMG,SAASC,eAE7B3I,EAAQX,KAAK,0BAA4BL,EAAK2mC,qBAAqB51B,eAAerF,IAClF1C,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9BtB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQ0L,EAAjC,EAAiCA,WAAYrD,EAA7C,EAA6CA,gBAAiB8C,EAA9D,EAA8DA,cAA9D,OACC,eAAC,GAAD,CACE7C,UAAWrR,EACXiI,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR0L,WAAYA,EACZrD,gBAAiBA,EACjB8C,cAAeA,EACf+C,WAAYjR,eC7Hb4gC,GAAgCnuC,YAAH,+uBAsC7BouC,GAA+BpuC,YAAH,opCA4D5BmzB,GAAyBnzB,YAAH,25BCjE7BquC,GAA4BruC,YAAH,+KAuJhBwE,iBAAkByD,aA9IN,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY6D,GAAf,EAAMC,QAAN,EAAeD,OAAf,IAAsBqL,gBAAtB,gBACzB,eAAC,GAAD,UACE,sBAAK/O,UAAU,eAAf,SACE,eAAC,QAAD,CAAOgM,MAAOu9B,GAA+BxgC,UAAW,CAAEgG,SAAUA,EAAU0zB,UAAW/+B,EAAMkD,OAAOo9B,YAAtG,SACG,YAAmD,IAAhDvhC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAeiB,GAAgB,EAAzBqL,QAAyB,EAAhBrL,WAEjC,GAAInB,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM6S,EAAU/P,EAAK+P,QACfg3B,EAAqB/mC,EAAK+mC,mBAEhC,OACE,gBAAC,KAAD,WACE,eAAC,KAAK9jC,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CACE4B,UAAWnI,EAAE,uCACb6H,SAAUgiC,EAAmBhiC,SAC7BG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOqgC,EAAmBhiC,SAAS4B,WAErCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBigC,mBAAmBpoC,MAC9CoG,EAAW+B,EAAgBigC,mBAAmBhiC,SAEpD,OAAOgC,EAAS1D,OACZ,CAGE0jC,mBAAoB,CAClB//B,WAAYH,EAAekgC,mBAAmB//B,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAekgC,mBAAmBpoC,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAtBZ,SA2BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACKqjC,EAAmBpoC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAK6wB,uBAAuB5tB,MADfmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK0iB,WADQta,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK2iB,SADQva,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAK6W,qBAAwB7W,EAAK6W,qBAAqB5T,KAAO,IADlDmF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAI,uBAAyBQ,EAAMkD,OAAOo9B,WAAa,qBAAuBviC,EAAK4M,GAAzF,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,WAAD,CAAUilB,SAAU2a,GAApB,SACG,SAACE,EAAD,KAA4BhnC,KAA5B,OACC,eAAC,KAAM+C,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,oDACd+R,eAAgB,+BAAInQ,EAAK6wB,uBAAuB5tB,KAAhC,IAAuCjD,EAAK0iB,aAC5DtS,WAAYhS,EAAE,yCACdiS,eAAgB63B,EAChB53B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOu9B,GAA+BxgC,UAAW,CAAEgG,SAAUA,EAAU0zB,UAAW/+B,EAAMkD,OAAOo9B,kBAfxG,SAmBE,uBAAMhkC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAFSA,kBArBtCA,4BAsD5B,gBAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACxB,eAAC,GAAD,CAAsBvQ,WAAW,MACXC,SAAS,oBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAI,uBAAyBQ,EAAMkD,OAAOo9B,WAAa,mBAA7D,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UAEE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,4CAIjD,eAAC,GAAD,CACEoO,WAAW,cACX+1B,WAAYtgC,EAAMkD,OAAOo9B,iCCzKhCxH,GAAoBpyB,OAAaC,MAAM,CAClDioB,uBAAwBloB,OACrBG,SAAS1K,YAAE,uBACdyY,qBAAsBlO,OACtB+Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBAGdwX,KAAMjN,SC6GOxK,iBAAkByD,aApGH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASqQ,EAAf,EAAeA,UAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAQkO,EAAxF,EAAwFA,WAAxF,OAC5B,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,yBACL1E,UAAY6K,EAAOynB,uBAA0B,0BAA4B,eACzEtnB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUsoB,wBAAwBh7B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,yBAAyBuG,UAAU,OAAOjL,UAAU,0BAG3E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,uBACL1E,UAAY6K,EAAOyN,qBAAwB,0BAA4B,eACvEtN,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUuE,sBAAsBjX,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,6BAI3E,gBAAC,KAAKC,IAAN,WACI,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAgC,YAAxBW,EAAOk+B,cAA+B/pC,EAAE,gBAAkBA,EAAE,sBAAhF,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAGnC,YAAxB0L,EAAOk+B,cAA+B,GACvC,eAAC,KAAKlkC,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,0CAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAKlE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGlC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAH9B,SAKK/Z,EAAE,8BCnFTgqC,GAA4BzuC,YAAH,sgBA4BzB0uC,G,oDACJ,WAAYniC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,iCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf8D,EAAUnE,KAAKmI,MAAMhE,QAErBqgC,EADQxkC,KAAKmI,MAAMjE,MACAkD,OAAOo9B,WAC1BpqB,EAAa,uBAAyBoqB,EAAa,eAEzD,OACE,eAAC,GAAD,UACE,sBAAKhkC,UAAU,eAAf,SACA,eAAC,QAAD,CAAOgM,MAAOuiB,GAAwBxlB,UAAa,CAACgG,UAAU,EAAO0zB,UAAWuB,GAAhF,SACG,YAAwC,IAArCvhC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QAErB,OACE,gBAAC,KAAD,WACC,eAAC,KAAK9M,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,WACtD,gBAAC,KAAK3E,IAAN,WACG,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,+CAEf,eAAC,WAAD,CAAUivB,SAAU+a,GAA2B/sB,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAA/E,SACC,SAAC+iB,EAAD,KAAqBh6B,KAArB,OACG,eAAC,KAAD,CACI2I,cAAe,CACbgnB,uBAAwB,GACxBha,qBAAsB,GACtB6L,UAAW,IAAI1gB,KACf4T,KAAM,IAER7L,iBAAkBgxB,GAClB/wB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAM1CuZ,EANazY,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAKVuZ,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBuY,EAAiB,CAAE5zB,UAAW,CAC5B6C,MAAO,CACL8G,QAASsxB,EACT1R,uBAAwB5mB,EAAO4mB,uBAC/Bha,qBAAsB5M,EAAO4M,qBAC7B6L,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT/M,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOu9B,GAA+BxgC,UAAW,CAACgG,UAAU,EAAO0zB,UAAWuB,OAElF/3B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,mDAAqD,CAClEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3C1B,SA+CK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,EAPd,SASGxf,QAAQC,IAAIwQ,gBAQ7B,gBAAC,KAAKnF,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,oBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAI0W,EAAV,SACE,gBAAC,KAAD,CAAQpV,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CAAamkC,WAAYA,EAAY/1B,WAAW,oC,GArHjC1F,aAiIpB3I,iBAAkByD,YAAWymC,KC7JtCC,GAA4B3uC,YAAH,igBA4BzB4uC,G,oDACJ,WAAYriC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,iCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf8D,EAAUnE,KAAKmI,MAAMhE,QACrBD,EAAQlE,KAAKmI,MAAMjE,MACnB2K,EAAK3K,EAAMkD,OAAOyH,GAClB21B,EAAatgC,EAAMkD,OAAOo9B,WAC1BpqB,EAAa,uBAAyBoqB,EAAa,eAEzD,OACE,eAAC,GAAD,UACE,sBAAKhkC,UAAU,eAAf,SACA,eAAC,QAAD,CAAOgM,MAAOw9B,GAA8BzgC,UAAa,CAACgG,UAAU,EAAQ0zB,UAAWuB,EAAY31B,GAAIA,GAAvG,SACG,YAAwC,IAArC5L,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGfzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QACf80B,EAAc7kC,EAAKsnC,kBAErBzxB,EAAuB,GAK3B,OAJIgvB,EAAYlvB,uBACdE,EAAuBgvB,EAAYlvB,qBAAqBjK,IAIxD,gBAAC,KAAD,WACC,eAAC,KAAKzI,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,WACtD,gBAAC,KAAK3E,IAAN,WACG,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,gDAEf,eAAC,WAAD,CAAUivB,SAAUib,GAA2BjtB,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAA/E,SACC,SAACswB,EAAD,KAAqBvnC,KAArB,OACG,eAAC,KAAD,CACI2I,cAAe,CACbgnB,uBAAwBkV,EAAYlV,uBAAuBjkB,GAC3DiK,qBAAsBE,EACtB2L,UAAWqjB,EAAYrjB,UACvBC,QAASojB,EAAYpjB,QACrB/M,KAAMmwB,EAAYnwB,KAClB+xB,oBAAqB5B,EAAY4B,qBAEnC59B,iBAAkBgxB,GAClB/wB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAM1CuZ,EANazY,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAKVuZ,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnB8lB,EAAiB,CAAEnhC,UAAW,CAC5B6C,MAAO,CACLyC,GAAIA,EACJikB,uBAAwB5mB,EAAO4mB,uBAC/Bha,qBAAsB5M,EAAO4M,qBAC7B6L,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT/M,KAAM3L,EAAO2L,KACb+xB,oBAAqB19B,EAAO09B,sBAE7Br9B,eAAgB,CACf,CAACC,MAAOu9B,GAA+BxgC,UAAW,CAACgG,UAAU,EAAO0zB,UAAWuB,OAElF/3B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,oDAAsD,CACnEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9C1B,SAkDK,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRkO,WAAYA,EAPd,SASGxf,QAAQC,IAAIwQ,gBAQ7B,gBAAC,KAAKnF,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,oBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAI0W,EAAV,SACE,gBAAC,KAAD,CAAQpV,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CAAamkC,WAAYA,EAAY/1B,WAAW,oC,GA/HhC1F,aA2IrB3I,iBAAkByD,YAAW2mC,KC5LtCG,G,+MASFpjC,eAAiB,WAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,IAAMM,EAAW,EAAKC,MAAMD,SACxBA,GACEA,EAASE,aACX,EAAKD,MAAME,e,wDAvBnB,WACEP,OAAOQ,iBAAiB,SAAUtI,KAAKuH,kB,kCAGzC,WACEO,OAAOS,oBAAoB,SAAUvI,KAAKuH,kB,oBAwB5C,WACE,IAAMlH,EAAIL,KAAKmI,MAAM9H,EACfgI,EAAarI,KAAKmI,MAAME,WACxBH,EAAWlI,KAAKmI,MAAMD,SACtB3H,EAAWP,KAAKmI,MAAM5H,SAG5B,OACE,iCACE,eAAC,KAAKE,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,MAGL,eAAC,KAAKE,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,UACE,eAAC,KAAKC,KAAN,UACKqB,EACAA,EAASE,YACR,eAAC,KAAD,CACEnB,MAAI,EACJ6B,QAAST,EAFX,SAIGhI,EAAE,uBAELA,EAAE,sBARS,kB,GAhDI0I,aAmErC4hC,GAAuB3hC,aAAe,CACpCX,WAAY,SAAAY,GAAC,OAAEA,IAGF7I,qBAAkBuqC,ICSlBvqC,I,eAAAA,iBAAkByD,aA/DjC,YAA4E,IAAhDxD,EAA+C,EAA/CA,EAAY6D,GAAmC,EAA5CC,QAA4C,EAAnCD,OAAO3D,EAA4B,EAA5BA,SAA4B,IAAlB8O,gBAAkB,SACnE4zB,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,EAAiCxhC,YAASk/B,GAAmB,CAC3D34B,UAAW,CAAEsF,GAAIo0B,KADXhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OAAO,6BAAI5C,EAAE,+BAE1B,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,6BAAI7C,EAAE,8BAGf,IAAM6S,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,UACE,sBAAK1S,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACrB7D,EASC,GARF,eAAC,GAAD,CAAsB1M,WAAW,MACXC,SAAS,cAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,cAAR,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,sCAMjDgP,EACA,eAAC,GAAD,CAAsB1M,WAAW,OACXC,SAAS,cAD/B,SAEE,eAAC,IAAD,CAAMc,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,WAAR,SACE,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAIjD,GAEJ,eAAC,GAAD,CACEoO,WAAW,QACXw0B,UAAWA,qBC9Ed2H,GAA0BhvC,YAAH,kjBA0BvBivC,GAAyBjvC,YAAH,2IAWtBkvC,GAAsBlvC,YAAH,6LAUnBmvC,GAAsBnvC,YAAH,6LAUnBovC,GAAsBpvC,YAAH,6JCzDzB,SAASmV,GAAyBkyB,GACvC,IAAIjyB,EAAY,CACZkC,QAAS+vB,GAGTgI,EAAWhsC,aAAagS,QAAQ9R,EAAK9B,mCAMzC,OAJA2T,EAAUi6B,SAAWA,EAErBrwC,QAAQC,IAAImW,GAELA,EC4KM5Q,qBAAkByD,aA/IjC,YAA8C,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OAE7BjF,aAAagS,QAAQ9R,EAAK9B,oCAC7B4B,aAAaC,QAAQC,EAAK9B,kCAAmC,cAG/D,IACMgM,EADcC,qBAAWrI,IACUoI,qBAEnC45B,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,EAAqDxhC,YAAS4nC,GAAyB,CACrFrhC,UAAWwH,GAAyBkyB,KAD9BhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAAWqL,EAAzC,EAAyCA,QAGzC,EAA4B7D,YAAYo/B,IAAjCE,EAAP,oBAEA,GAAIjoC,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZ,IAAI8qC,EAAQhoC,EAAKioC,aAEjB,OACE,gBAAC,GAAD,WACE,eAAC,KAAK3qC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,sBAAK1F,UAAU,mBAAf,SACE,gBAAC,KAAOogB,KAAR,WACE,eAAC,KAAD,CAAQ5b,MAAyE,eAAjE/F,aAAagS,QAAQ9R,EAAK9B,mCAAuD,UAAW,YACpG0H,KAAK,GACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAK9B,kCAAmC,cAC7DoS,EAAQsB,GAAyBkyB,KAJ3C,SAOG5iC,EAAE,wCAEL,eAAC,KAAD,CAAQ2E,MAAyE,aAAjE/F,aAAagS,QAAQ9R,EAAK9B,mCAAqD,UAAW,YAClG0H,KAAK,GACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAK9B,kCAAmC,YAC7DoS,EAAQsB,GAAyBkyB,KAL3C,SAQG5iC,EAAE,+CAMb,eAAC,GAAD,CACE6H,SAAUijC,EAAMjjC,SAChBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOshC,EAAMjjC,SAAS4B,WAExBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBmhC,aAAatpC,MACxCoG,EAAW+B,EAAgBmhC,aAAaljC,SAE9C,OAAOgC,EAAS1D,OACZ,CAGE4kC,aAAc,CACZjhC,WAAYH,EAAeohC,aAAajhC,WACxCrI,MAAM,GAAD,oBAAOkI,EAAeohC,aAAatpC,OAAnC,aAA6CoI,IAClDhC,aAGJ8B,MArBZ,SA0BGmhC,EAAMrpC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACf,gBAAC,KAAD,WACE,gBAAC,KAAK4E,KAAN,WACI5E,EAAKopC,OAAU,eAAC,KAAD,CAAOrmC,MAAM,SAASxE,UAAU,cAAhC,SAA+CH,EAAE,oBAA6B,GAC/F,sBAAKyG,wBAAyB,CAACC,OAAQ9E,EAAK4V,WAE9C,gBAAC,KAAKhP,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,SACND,KAAK,KACLvE,UAAU,cACVsE,SAAO,EACPgE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,8CACd+R,eAAgB,6BAAG,sBAAKtL,wBAAyB,CAACC,OAAQ9E,EAAK4V,UAC/DxF,WAAYhS,EAAE,mCACdiS,eAAgB44B,EAChB34B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAACC,MAAOo+B,GAAyBrhC,UAAWwH,GAAyBkyB,SAnB/E,SAyBE,eAAC,KAAD,CAAM/9B,KAAK,cAEb,eAAC,IAAD,CAAMxB,GAAE,8BAAyBQ,EAAMkD,OAAOo9B,WAAtC,uBAA+DviC,EAAK4M,IAA5E,SACE,eAAC,KAAD,CACE7J,MAAM,YACND,KAAK,KACLvE,UAAU,mBACVsE,SAAO,EAJT,SAMGzE,EAAE,oBAGP,wBAAOG,UAAU,8BAAjB,SAAgD8J,KAAOrI,EAAK4c,WAAWrU,OAAOnB,KAC7EpH,EAAKqpC,OAAOpuB,SAvCf,IAuCyB,0CChGtB9c,iBAAkByD,aA3DT,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcc,EAA7B,EAA6BA,OAAgBqI,GAA7C,EAAqClJ,OAArC,EAA6CkJ,iBAAiB8C,EAA9D,EAA8DA,cAAelO,EAA7E,EAA6EA,UAA7E,OACtB,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACA,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,QAAQ,GACxB8C,EAAc,OAAQ5C,EAAE1O,OAAO2R,iBAGnC,eAAC,KAAD,CAAcxS,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAIzD,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACL2W,QAAS3P,EAAOm/B,SAChB,uBAAM7qC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uBAEnD,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,kBAK9C,gBAAC,KAAK5C,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIG3E,EAAE,gCC8BAD,qBAAkByD,aAxEjC,YAAgD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAEhC+mC,EAAWhsC,aAAagS,QAAQ9R,EAAK9B,mCACpC4tC,GACHhsC,aAAaC,QAAQC,EAAK9B,kCAAmC,cAG/D,IAAM4lC,EAAY/+B,EAAMkD,OAAOo9B,WACzBr7B,EAAS,8BAA0B85B,EAA1B,UACTz6B,EAAYnI,EAAE,qCAEpB,EAAkBuL,YAChBk/B,IADKS,EAAP,oBAIA,OACE,eAAC,GAAD,CAAkBl8B,UAAU,EAA5B,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACbu/B,QAAQ,EACRxzB,KAAM,IAGR5L,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZkgC,EAAQ,CAAEhiC,UAAW,CACnB6C,MAAO,CACL8G,QAAS+vB,EACTgI,SAAUA,EACVI,OAAQn/B,EAAOm/B,OACfxzB,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOo+B,GAAyBrhC,UAAWwH,GAAyBkyB,OAExEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhCxB,SAoCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,EANb,SAQGvO,QAAQC,IAAIwQ,gBCwBZjL,qBAAkByD,aAxFjC,YAAiD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAG/B++B,EAAY/+B,EAAMkD,OAAOo9B,WACzBgH,EAAStnC,EAAMkD,OAAOyH,GACtB1F,EAAS,8BAA0B85B,EAA1B,UACTz6B,EAAYnI,EAAE,sCAEpB,EAAiC2C,YAAS6nC,GAAwB,CAChEthC,UAAW,CAAEsF,GAAI28B,KADXvoC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAqByI,YACnBm/B,IADKU,EAAP,oBAIA,GAAIxoC,EAAS,OACX,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKZ,IAAMwX,EAAO1U,EAAKuoC,YAElB,OACE,eAAC,GAAD,CAAkBr8B,UAAU,EAA5B,SACE,eAAC,KAAD,CAAMhJ,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACbu/B,OAAQxzB,EAAKwzB,OACbxzB,KAAMA,EAAKA,MAGb5L,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZogC,EAAW,CAAEliC,UAAW,CACtB6C,MAAO,CACLyC,GAAI28B,EACJH,OAAQn/B,EAAOm/B,OACfxzB,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOo+B,GAAyBrhC,UAAWwH,GAAyBkyB,OAExEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,EANb,SAQGvO,QAAQC,IAAIwQ,gBC7DZjL,I,GAAAA,iBAAkByD,aA5BjC,YAAwE,EAA3CxD,EAA4C,IAAzC6D,EAAwC,EAAxCA,MAAgB3D,GAAwB,EAAjC4D,QAAiC,EAAxB5D,UAAwB,IAAd2S,eAAc,MAAN,GAAM,EAChE+vB,EAAY/+B,EAAMkD,OAAOo9B,WAE/B,OACE,eAAC,GAAD,UACE,sBAAKhkC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQgK,SAA5B,SACE,eAAC,GAAD,MAEF,gBAAC,KAAKzc,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACxB,eAAC,GAAD,CACEzE,WAAW,SACXw0B,UAAWA,qBClCd0I,GAA2B/vC,YAAH,uwBC4DtBwE,qBAAkByD,aA3CjC,YAAwD,IAA3BxD,EAA0B,EAA1BA,EAAU4B,GAAgB,EAAvBiC,MAAuB,EAAhBjC,MAAMiR,EAAU,EAAVA,QACrC+N,EAAc3X,qBAAWrI,IAG/B,GAFmBggB,EAAY9T,WACZ8T,EAAYC,iBACCtV,YAAY2S,KAA5C,mBAAOC,EAAP,KAOA,OAPA,KAAsBrb,KAEtBvI,QAAQC,IAAI,sBACZD,QAAQC,IAAIoH,GACZrH,QAAQC,IAAIqY,GACZtY,QAAQC,IAAI,OAGV,yBAAQ2F,UAAU,sCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,+CACd+R,eAAgB,+BACb/R,EAAE,iBADW,KACS4B,EAAKwc,eAE9BpM,WAAYhS,EAAE,2CACdiS,eAAgBkM,EAChBjM,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAAEC,MAAOm/B,GACPpiC,UAAW,CAAE2J,QAASA,EAAQrE,UApB1C,SAyBE,uBAAMrO,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBCiGzC9E,I,MAAAA,iBAAkByD,aA/HjC,YAA+C,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACpB+c,GADsC,EAAX9c,QACbmF,qBAAWrI,KAEzByd,GADauC,EAAY9T,WACR8T,EAAY5X,sBAC7Bb,EAAYnI,EAAE,kCACdmkC,EAAatgC,EAAMkD,OAAOo9B,WAChC,EAA4CxhC,YAAS2oC,GAA0B,CAC7EpiC,UAAW,CAAC,QAAWi7B,KADjBvhC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAK9B,GAAInB,EAAS,OACX,eAAC,GAAD,UACE,eAAC,KAAD,CAAMoD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,qCAMd,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oCAOhBzF,QAAQC,IAAI,wBACZD,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QACf0L,EAAgBzb,EAAKyb,cAG3B,OAAKA,EAAc9c,MAAM0E,OAcvB,eAAC,GAAD,CAAmB0M,QAASA,EAA5B,SACE,eAAC,GAAD,CACE1K,UAAWnI,EAAE,kCACb6H,SAAU0W,EAAc1W,SACxBS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO+U,EAAc1W,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB2U,cAAc9c,MACzCoG,EAAW+B,EAAgB2U,cAAc1W,SAE/C,OAAOgC,EAAS1D,OACZ,CAGEoY,cAAe,CACbzU,WAAYH,EAAe4U,cAAczU,WACzCrI,MAAM,GAAD,oBAAOkI,EAAe4U,cAAc9c,OAApC,aAA8CoI,IACnDhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACA,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBAClB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,iCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACK+X,EAAc9c,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKmH,UADnBiB,gBAGhB,gBAAC,KAAMnE,IAAP,gBACKjE,EAAKwc,cADMpU,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK4c,WAAWrU,OAAOkU,KAEjC,eAAC,KAAMxY,IAAP,UACGjE,EAAKyR,cADQrJ,gBAGhB,gBAAC,KAAMnE,IAAP,WACA,eAAC0lC,GAAD,CAAoB3pC,KAAMA,EAAMiR,QAASA,IACvC,eAAC,IAAD,CAAMxP,GAAI,wBAA0BzB,EAAK4M,GAAzC,SACE,eAAC,KAAD,CAAQrO,UAAU,qBACVwE,MAAM,YADd,SAEG3E,EAAE,sBALOgK,kBAbFA,4BArD1B,eAAC,GAAD,CAAmB6I,QAASA,EAA5B,SACE,eAAC,KAAD,CAAM7M,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,mDCrELwrC,GAA2CjwC,YAAH,o9BCAxCkwC,GAAclwC,YAAH,4OCmGTwE,I,YAAAA,iBAAkByD,aAvDjC,YAAyE,IAA/BxD,EAA8B,EAA9BA,EAAY6D,GAAkB,EAA3BC,QAA2B,EAAlBD,OAAO3D,EAAW,EAAXA,SACrD0iC,EAAY/+B,EAAMkD,OAAOo9B,WAC/B,EAAiCxhC,YAAS8oC,GAAa,CAAEviC,UAAW,CAClE05B,UAAWA,KADLhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OACX,6BACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,6BACG7C,EAAE,qCAIPzF,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QAGrB,OAFAtY,QAAQC,IAAIqY,GAGV,eAAC,GAAD,UACE,sBAAK1S,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAO6M,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAtD,SACE,eAAC,GAAD,MAEF,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IASxB,eAAC,GAAD,CACEzE,WAAW,UACXw0B,UAAWA,qBCxFd4I,GAA2CjwC,YAAH,6hBA2FxCmwC,IAlEgDnwC,YAAH,onCAkENA,YAAH,yPAULA,YAAH,qLCyQ1BwE,I,qBAAAA,iBAAkByD,aA7UjC,YAA2D,IAArBxD,EAAoB,EAApBA,EAAY6D,GAAQ,EAAjBC,QAAiB,EAARD,OAE1C+c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WAGzB81B,GAFahiB,EAAYC,iBAEbhd,EAAMkD,OAAOo9B,YAC/B,EAA4CxhC,YAAS6oC,GAA0C,CAAEtiC,UAAW,CAC1G2J,QAAS+vB,KADHhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAA2CwH,YAAYmgC,IAAhDC,EAAP,oBAGA,GAAI/oC,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,oCAIPzF,QAAQC,IAAIsI,GACZ,IAAM8oC,EAA8B9oC,EAAK8oC,4BAIzC,OAHArxC,QAAQC,IAAIoxC,GAIV,eAAC,GAAD,UACE,eAAC,GAAD,CACEzjC,UAAWnI,EAAE,yCACb6H,SAAU+jC,EAA4B/jC,SACtCS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOoiC,EAA4B/jC,SAAS4B,WAE9CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBgiC,4BAA4BnqC,MACvDoG,EAAW+B,EAAgBgiC,4BAA4B/jC,SAE7D,OAAOgC,EAAS1D,OACZ,CAGEylC,4BAA6B,CAC3B9hC,WAAYH,EAAeiiC,4BAA4B9hC,WACvDrI,MAAM,GAAD,oBAAOkI,EAAeiiC,4BAA4BnqC,OAAlD,aAA4DoI,IACjEhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4CACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACKolC,EAA4BnqC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKiqC,oBAAoBC,cAAcjnC,KAD1C,IACgD,wBAC9C,eAAC,KAAD,UAAQjD,EAAKiqC,oBAAoBhnC,OAFnC,IAEkD,IAC9CjD,EAAKmqC,UAAa,eAAC,KAAD,CAAOpnC,MAAM,UAAb,SAAwB3E,EAAE,uBAAgC,MAEhF,eAAC,KAAM6F,IAAP,UACGoE,KAAOrI,EAAKiqC,oBAAoBC,cAAcxnB,WAAWna,OAAO2C,KAEnE,eAAC,KAAMjH,IAAP,UACIjE,EAAKoqC,aAAavqC,MAAM0E,OACxB,kCACE,eAAC,IAAD,CAAM9C,GAAE,iCAA4BzB,EAAKoqC,aAAavqC,MAAM,GAAGG,KAAKiS,eAAerF,IAAnF,SACG5M,EAAKoqC,aAAavqC,MAAM,GAAGG,KAAKiS,eAAejB,gBAFpD,IAGU,wBACR,eAAC,GAAD,CAAuB7J,OAAQnH,EAAKoqC,aAAavqC,MAAM,GAAGG,KAAKiS,eAAe9K,YAG9E,KAqBN,eAAC,KAAMlD,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKqqC,iBAE5B,eAAC,KAAMpmC,IAAP,UACIjE,EAAKmqC,UACL,eAAC,KAAD,CACE5rC,UAAU,aACVwE,MAAM,UACN8D,QAAS,kBACPkjC,EAAiC,CAAEziC,UAAW,CAC5C6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTu9B,WAAW,IAEZ7/B,eAAgB,CACjB,CACEC,MAAOq/B,GACPtiC,UAAW,CAAE2J,QAAS+vB,OAGzBx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAxB5D,SA6BG7C,EAAE,sBAGL,eAAC,KAAD,CACEG,UAAU,aACVwE,MAAM,UACN8D,QAAS,kBACPkjC,EAAiC,CAAEziC,UAAW,CAC5C6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTu9B,WAAW,IAEZ7/B,eAAgB,CACf,CACEC,MAAOq/B,GACPtiC,UAAW,CAAE2J,QAAS+vB,OAG3Bx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAxB5D,SA4BK7C,EAAE,wBAxGGgK,gCCxGnBkiC,GAAkC3wC,YAAH,y0BAyC/B4wC,GAAiC5wC,YAAH,2sCA+D9BmzB,GAAyBnzB,YAAH,67BA8DtB6wC,IAfoB7wC,YAAH,6OAeaA,YAAH,ijBA4B3B8wC,GAA8B9wC,YAAH,gjBA4B3B+wC,GAA8B/wC,YAAH,qLClDzBwE,qBAAkByD,aAlJjC,YAA2C,IAAZxD,EAAW,EAAXA,EAAG6D,EAAQ,EAARA,MAE1BiJ,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzBh8B,EAAYnI,EAAE,yCACdoO,EAAa,gBACnB,EAA4CzL,YAASupC,GAAiC,CACpFhjC,UAAW,CAAC05B,UAAWA,KADjBhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAAoCwH,YAAY+gC,IAAzCC,EAAP,oBAEA,GAAI3pC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAzC,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAzC,UACG7T,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAM6S,EAAU/P,EAAK+P,QACf25B,EAAuB1pC,EAAK0pC,qBAC5B9V,EAAgB,eAAC,GAAD,CACpBp0B,WAAW,MACXC,SAAS,sBAFW,SAGlB,eAAC,IAAD,CAAMc,GAAI,uBAAyBQ,EAAMkD,OAAOo9B,WAAa,qBAA7D,SACA,gBAAC,KAAD,CAAQx/B,MAAM,yBAAd,UAEA,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBAFvB,IAEyC7E,EAAE,8CAK/C,OACE,eAAC,GAAD,CACEoO,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,eAAC,GAAD,CACEvuB,UAAWnI,EAAE,yCACb6H,SAAU2kC,EAAqB3kC,SAC/BS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOgjC,EAAqB3kC,SAAS4B,WAEvCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4iC,qBAAqB/qC,MAChDoG,EAAW+B,EAAgB4iC,qBAAqB3kC,SAEtD,OAAOgC,EAAS1D,OACZ,CAGEqmC,qBAAsB,CACpB1iC,WAAYH,EAAe6iC,qBAAqB1iC,WAChDrI,MAAM,GAAD,oBAAOkI,EAAe6iC,qBAAqB/qC,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MAvBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,MANcC,kBASlB,eAAC,KAAMxD,KAAP,UACKgmC,EAAqB/qC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC9B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKgpB,yBAAyB/lB,MADjBmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,IADjB9C,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK6qC,SAAWxiC,KAAOrI,EAAK2iB,SAASpa,OAAO2C,IAD/B9C,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAK6W,qBAAwB7W,EAAK6W,qBAAqB5T,KAAO,IADlDmF,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAK8qC,aADQ1iC,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAI,uBAAyBQ,EAAMkD,OAAOo9B,WAAa,uBAAyBviC,EAAK4M,GAA3F,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAJ8BgK,gBAQvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,sDACd+R,eAAgB,+BAAInQ,EAAKgpB,yBAAyB/lB,KAAlC,IAAyCjD,EAAK0iB,aAC9DtS,WAAYhS,EAAE,2CACdiS,eAAgBs6B,EAChBr6B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAO+/B,GAAiChjC,UAAW,CAAE05B,UAAWA,SAfzE,SAmBE,uBAAMziC,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBApBfmF,kBAxBzBA,gCCjHnB2zB,GAAsBpzB,OAAaC,MAAM,CACpDogB,yBAA0BrgB,OACvBG,SAAS1K,YAAE,uBACdyY,qBAAsBlO,OACtB+Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNg9B,WACHgC,oBAAqBh/B,OACrBiN,KAAMjN,SCwHOxK,iBAAkByD,aAhHD,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASqQ,EAAf,EAAeA,UAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAQkO,EAAxF,EAAwFA,WAAxF,OAC9B,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,wBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,2BACL1E,UAAY6K,EAAO4f,yBAA4B,0BAA4B,eAC3Ezf,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUqpB,0BAA0B/7B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,2BAA2BuG,UAAU,OAAOjL,UAAU,0BAG7E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0BAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,uBACL1E,UAAY6K,EAAOyN,qBAAwB,0BAA4B,eACvEtN,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUuE,sBAAsBjX,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,6BAI3E,gBAAC,KAAKC,IAAN,WACI,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAgC,YAAxBW,EAAOk+B,cAA+B/pC,EAAE,gBAAkBA,EAAE,sBAAhF,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAGnC,YAAxB0L,EAAOk+B,cAA+B,GACvC,eAAC,KAAKlkC,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,0CAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAKlE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGpC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,sBACL2W,QAAS3P,EAAO09B,sBAClB,uBAAMppC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,8DAEnD,eAAC,KAAD,CAAc6E,KAAK,sBAAsBuG,UAAU,cAGvD,gBAAC,KAAK5C,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,KAAD,CACEwE,KAAK,SACLG,MAAM,OACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAH9B,SAKK/Z,EAAE,8BCoJAD,qBAAkByD,aA1PjC,YAAsD,IAArBxD,EAAoB,EAApBA,EAAG8D,EAAiB,EAAjBA,QAC5B8+B,EAD6C,EAAR/+B,MACnBkD,OAAOo9B,WACzB/1B,EAAa,gBACbjG,EAAYnI,EAAE,6CACd8I,EAAS,8BAA0B85B,EAA1B,kBACf,EAA+BjgC,YAAS+rB,GAAwB,CAC9DxlB,UAAW,CAAEgG,UAAU,EAAO0zB,UAAWA,KADpChgC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAoCyI,YAAY6gC,IAAzCO,EAAP,oBACMjW,EAAgB,eAAC,IAAD,CAAMrzB,GAAIyF,EAAV,SAClB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAInD,GAAI4C,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAYsoB,cAAeA,EAApE,SACE,eAAC,KAAD,CAAM1wB,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAYsoB,cAAeA,EAApE,UACGn8B,QAAQC,IAAIqI,GACb,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACGnI,EAAE,iCAKT,IAAMmU,EAAYrR,EACZ+P,EAAU/P,EAAK+P,QAErB,OACE,eAAC,GAAD,CACEzE,WAAYA,EACZ9M,KAAMuR,EACN6jB,cAAeA,EAHjB,SAKE,gBAAC,KAAD,WACE,eAAC,KAAK3wB,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEb,eAAC,KAAD,CACEsD,cAAe,CACbmf,yBAA0B,GAC1BnS,qBAAsB,GACtB6L,UAAW,IAAI1gB,KACf4T,KAAM,GACN+xB,qBAAqB,GAEvB59B,iBAAkBgyB,GAClB/xB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAM1CuZ,EANazY,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAKVuZ,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBooB,EAA0B,CAAEzjC,UAAW,CACrC6C,MAAO,CACL8G,QAAS+vB,EACThY,yBAA0B/e,EAAO+e,yBACjCnS,qBAAsB5M,EAAO4M,qBAC7B6L,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT/M,KAAM3L,EAAO2L,KACb+xB,oBAAqB19B,EAAO09B,sBAE7Br9B,eAAgB,CACf,CAACC,MAAO+/B,GAAiChjC,UAAW,CAAC05B,UAAWA,OAEnEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM8pC,EAAiB9pC,EAAK6pC,0BAA0BE,oBAAoBr+B,GAC1E1K,EAAQX,KAAR,8BAAoCy/B,EAApC,+BAAoEgK,IACpEvgC,IAAMC,QAAStM,EAAE,qDAAuD,CACpEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/CxB,SAmDG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EAPb,SASGvO,QAAQC,IAAIwQ,iBC9FdjL,sBAzBf,YAAsD,EAAlCC,EAAmC,IAAD,IAA/BuM,gBAA+B,MAAtB,MAAsB,EAAfugC,EAAe,EAAfA,KAAMpsC,EAAS,EAATA,OACvCqsC,EAAsB,gBAC1B,OAAOxgC,GACL,IAAK,MACH,MACF,IAAK,SACHwgC,EAAsB,gBAM1B,OACE,sBAAK5sC,UAAS,oBAAe4sC,GAA7B,SAEID,EAAKxmC,KAAI,gBAAEzB,EAAF,EAAEA,KAAMmB,EAAR,EAAQA,MAAOY,EAAf,EAAeA,KAAf,OACP,eAAC,IAAD,CAAiBvD,GAAIuD,EAAMzG,UAAS,yBAAqB0E,IAASnE,EAAU,SAAU,IAAtF,SACE,sBAAIP,UAAU,aAAd,cAA6B6F,EAA7B,QADSgE,wBCuBNjK,sBA1Cf,YAAiF,IAA1CC,EAAyC,EAAzCA,EAAGU,EAAsC,EAAtCA,OAAQyjC,EAA8B,EAA9BA,WAAY5E,EAAkB,EAAlBA,gBAE5D,OACE,eAAC,GAAD,CACEhzB,SAAS,MACTugC,KAAM,CACF,CACEjoC,KAAM,UACNmB,MAAOhG,EAAE,gDACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,IAEhE,CACE16B,KAAM,SACNmB,MAAOhG,EAAE,+CACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,EAA1D,YAEN,CACE16B,KAAM,SACNmB,MAAOhG,EAAE,+CACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,EAA1D,YAEN,CACE16B,KAAM,aACNmB,MAAOhG,EAAE,mDACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,EAA1D,gBAEN,CACE16B,KAAM,WACNmB,MAAOhG,EAAE,iDACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,EAA1D,cAEN,CACE16B,KAAM,UACNmB,MAAOhG,EAAE,gDACT4G,KAAK,uBAAD,OAAyBu9B,EAAzB,+BAA0D5E,EAA1D,cAGV7+B,OAAQA,OCiCCX,qBAAkByD,aArDjC,YAAsH,IAA5ExD,EAA2E,EAA3EA,EAAY6D,GAA+D,EAAxEC,QAAwE,EAA/DD,OAAO3D,EAAwD,EAAxDA,SAAwD,IAA9C2S,eAA8C,MAAtC,KAAsC,MAAhC6sB,oBAAgC,MAAnB,KAAmB,EAAbsN,EAAa,EAAbA,WAEhGlgC,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAY,uBAAyB85B,EAAY,iBACjDz6B,EAAau3B,EACjB,wBAAMv/B,UAAU,aAAhB,eACKu/B,EAAa9U,yBAAyB/lB,KAAO,IAAMoF,KAAOy1B,EAAapb,WAAWna,OAAO2C,GAD9F,MAC8G4yB,EAAagN,YAD3H,IACyI1sC,EAAE,sBACjI,GAEZ,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAQ6M,EAAWA,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAW,KAC7E,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,gBAAC,KAAKwC,MAAN,WAAavI,EAAE,8CAAf,IAA+DmI,OAEjE,eAAC,GAAD,CACEg8B,WAAYvB,EACZrD,gBAAiBqN,EACjBlsC,OAAQssC,IAET9sC,OAGL,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACxB,eAAC,GAAD,CAAsBvQ,WAAW,SACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CACEoO,WAAW,gBACXw0B,UAAWA,qBCFZ7iC,qBAAkByD,aAlCjC,YAAiF,IAA3CxD,EAA0C,EAA1CA,EAAY6D,GAA8B,EAAvCC,QAAuC,EAA9BD,OAAO3D,EAAuB,EAAvBA,SAAU8sC,EAAa,EAAbA,WAC3DpK,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAAiC58B,YAASwpC,GAAgC,CACxEjjC,UAAW,CACT05B,UAAWA,EACXp0B,GAAIo+B,KAHAhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYA,EAA7C,SACGhtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYA,EAA7C,UACE,6BAAIhtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QACf6sB,EAAe58B,EAAK+pC,oBAE1B,OACE,eAAC,GAAD,CAAiCG,WAAYA,EAAYn6B,QAASA,EAAS6sB,aAAcA,EAAzF,SACGx/B,QC2FQH,qBAAkByD,aAxHjC,YAAuD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC7B2K,GAD8C,EAAV1K,QAC/BD,EAAMkD,OAAOw4B,iBAClBqD,EAAY/+B,EAAMkD,OAAOo9B,WACzBr7B,EAAS,8BAA0B85B,EAA1B,kBACTqK,EAAY,UAElB,EAAiCtqC,YAASwpC,GAAgC,CACxEjjC,UAAW,CACTgG,UAAU,EACV0zB,UAAWA,EACXp0B,GAAIA,KAJA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAQxB,EAA+ByI,YAAY8gC,IAAnClO,EAAR,oBAEA,GAAIv7B,EAAS,OACX,eAAC,GAAD,CAA6BoqC,WAAYC,EAAzC,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BmqC,WAAYC,EAAzC,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAEZ6kC,GADU7kC,EAAK+P,QACD/P,EAAK+pC,qBAErBl0B,EAAuB,GACvBgvB,EAAYlvB,uBACdE,EAAuBgvB,EAAYlvB,qBAAqBjK,IAK1D,IAAI8V,EAAY,KACZC,EAAU,KAQd,OAPIojB,EAAYrjB,YACdA,EAAY,IAAI1gB,KAAK+jC,EAAYrjB,YAE/BqjB,EAAYpjB,UACdA,EAAU,IAAI3gB,KAAK+jC,EAAYpjB,UAI/B,eAAC,GAAD,CAA6ByoB,WAAYC,EAAzC,SACE,eAAC,KAAD,CACExhC,cAAe,CACbmf,yBAA0B+c,EAAY/c,yBAAyBpc,GAC/DiK,qBAAsBE,EACtB2L,UAAWA,EACXC,QAASA,EACT/M,KAAMmwB,EAAYnwB,KAClB+xB,oBAAqB5B,EAAY4B,qBAEnC59B,iBAAkBgyB,GAClB/xB,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAM1CuZ,EANazY,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAKVuZ,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnB4Z,EAAmB,CAAEj1B,UAAW,CAC9B6C,MAAO,CACLyC,GAAIA,EACJoc,yBAA0B/e,EAAO+e,yBACjCnS,qBAAsB5M,EAAO4M,qBAC7B6L,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT/M,KAAM3L,EAAO2L,KACb+xB,oBAAqB19B,EAAO09B,sBAE7Br9B,eAAgB,CACf,CAACC,MAAO+/B,GAAiChjC,UAAW,CAAC05B,UAAWA,OAEnEx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sDAAwD,CACrEuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9CxB,SAkDG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRkO,WAAYjR,EAPd,SASGvO,QAAQC,IAAIwQ,cCpHVjL,I,SAAAA,iBAAkByD,aAfjC,YAA8D,IAA7BxD,EAA4B,EAA5BA,EAAmBktC,GAAS,EAAzBrpC,MAAyB,EAAlBC,QAAkB,EAATopC,QAClD,OACE,eAAC,IAAD,CAAM7pC,GAAI6pC,EAAV,SACE,eAAC,KAAD,CACEvoC,MAAM,UACND,KAAK,KACLpB,KAAK,cACLnD,UAAU,cAJZ,SAMGH,EAAE,uBCnBEmtC,GAA4C5xC,YAAH,2mBA6BzC6xC,GAA2C7xC,YAAH,sQAiBxC8xC,GAAwC9xC,YAAH,6MC0CnCwE,qBAAkByD,aAhEjC,YAUI,IATFxD,EASC,EATDA,EAEA6D,GAOC,EARDC,QAQC,EAPDD,OACA3D,EAMC,EANDA,SAMC,IALD2S,eAKC,MALO,KAKP,MAJD6sB,oBAIC,MAJY,KAIZ,EAHD73B,EAGC,EAHDA,SACAG,EAEC,EAFDA,WACAglC,EACC,EADDA,WAIMlgC,EADc7D,qBAAWrI,IACAkM,WAEzB81B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAY,uBAAyB85B,EAAY,iBACjDz6B,EAAau3B,EACjB,wBAAMv/B,UAAU,aAAhB,eACKu/B,EAAa9U,yBAAyB/lB,KAAO,IAAMoF,KAAOy1B,EAAapb,WAAWna,OAAO2C,GAD9F,MAC8G4yB,EAAagN,YAD3H,IACyI1sC,EAAE,sBACjI,GAEZ,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAQ6M,EAAWA,EAAQ/N,UAAY,IAAM+N,EAAQ9N,SAAW,KAC7E,gBAAC,KAAK3E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CACE4B,UAAW,kCAAOnI,EAAE,8CAAT,IAAyDmI,KACpEN,SAAUA,EACVG,WAAYA,EACZK,SAAU,eAAC,GAAD,CACR87B,WAAYvB,EACZrD,gBAAiBqN,EACjBlsC,OAAQssC,IAPZ,SASG9sC,MAGL,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAkBjF,KAAMuR,IACxB,eAAC,GAAD,CAAsBvQ,WAAW,SACXC,SAAS,sBAD/B,SAEE,eAAC,IAAD,CAAMc,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CACEoO,WAAW,gBACXw0B,UAAWA,qBCRZ7iC,qBAAkByD,aAxCjC,YAA2G,IAAjExD,EAAgE,EAAhEA,EAAY6D,GAAoD,EAA7DC,QAA6D,EAApDD,OAAO3D,EAA6C,EAA7CA,SAAU2H,EAAmC,EAAnCA,SAAUG,EAAyB,EAAzBA,WAAYglC,EAAa,EAAbA,WACrFpK,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAAiC58B,YAASwpC,GAAgC,CACxEjjC,UAAW,CACT05B,UAAWA,EACXp0B,GAAIo+B,KAHAhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAAIF,EAAS,OACX,eAAC0qC,GAAD,CAAqCN,WAAYA,EAAjD,SACGhtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAACyqC,GAAD,CAAqCN,WAAYA,EAAjD,UACE,6BAAIhtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAIsI,GACZ,IAAM+P,EAAU/P,EAAK+P,QACf6sB,EAAe58B,EAAK+pC,oBAE1B,OACE,eAACS,GAAD,CACEN,WAAYA,EACZn6B,QAASA,EACT6sB,aAAcA,EACd73B,SAAUA,EACV0lC,UAAWvlC,EALb,SAOG9H,QClBQH,qBAAkByD,aAnCjC,YAAyE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAC3Do+B,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAAsDh0B,YAAY8hC,IAAlE,mBAAOG,EAAP,KACMC,GADN,KAA4C3qC,KACzB,CACjB+pC,oBAAqBD,IAGvB,OACE,yBAAQzsC,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,iEACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,6DACdiS,eAAgBu7B,EAChBt7B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOghC,GAA2CjkC,UAAWukC,QAhBzE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBC2Gd9E,qBAAkByD,aAxHjC,YAAgE,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACtC+c,GADuD,EAAV9c,QAC/BmF,qBAAWrI,KACZggB,EAAY9T,WAC/BvS,QAAQC,IAAIomB,GAED/c,EAAMkD,OAAOw4B,gBAAxB,IACMqD,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAE9B0N,GADS,8BAA0BrK,EAA1B,kBACG,cAEZ8K,EAAY,eAAC,GAAD,CACER,OAAM,8BAAyBtK,EAAzB,+BAAyDgK,EAAzD,qBAE1B,EAA4CjqC,YAASwqC,GAA2C,CAC9FjkC,UAAW,CACT2jC,oBAAqBD,KAFjBhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYC,EAA7C,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYC,EAA7C,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAM6qC,EAA+B7qC,EAAK6qC,6BACpC9lC,EAAW/E,EAAK6qC,6BAA6B9lC,SAGjD,OAAK8lC,EAA6BlsC,MAAM0E,OAiCxC,gBAAC,GAAD,CAAiC6mC,WAAYC,EAAWplC,SAAUA,EAAUG,WAzB3D,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOmkC,EAA6B9lC,SAAS4B,WAE/CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+jC,6BAA6BlsC,MACxDoG,EAAW+B,EAAgB+jC,6BAA6B9lC,SAE9D,OAAOgC,EAAS1D,OACZ,CAGEwnC,6BAA8B,CAC5B7jC,WAAYH,EAAegkC,6BAA6B7jC,WACxDrI,MAAM,GAAD,oBAAOkI,EAAegkC,6BAA6BlsC,OAAnD,aAA6DoI,IAClEhC,aAGJ8B,MAMR,UACE,sBAAKxJ,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,2DACP,gBAAC,KAAD,WACE,eAAC,KAAM+F,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,+BACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,gCACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MANcC,kBASlB,eAAC,KAAMxD,KAAP,UACKmnC,EAA6BlsC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAK6I,mBAER,eAAC,KAAM5E,IAAP,UACGjE,EAAKkJ,oBAER,eAAC,KAAMjF,IAAP,UACGjE,EAAK8X,gBAER,eAAC,KAAM7T,IAAP,UACA,sBAAKY,wBAAyB,CAACC,OAAQ9E,EAAKoD,iBAE5C,eAAC,KAAMa,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,8BAAyBu/B,EAAzB,+BAAyDgK,EAAzD,4BAA2FhrC,EAAK4M,IAAxG,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAAuCqO,GAAI5M,EAAK4M,SAtBpCxE,2BAhDxB,gBAAC,GAAD,CAAiCgjC,WAAYC,EAA7C,UACE,sBAAK9sC,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,2DACP,6BAAIA,EAAE,kECrED4tC,GAAwCrjC,OAAaC,MAAM,CACtEC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPiS,OAAQvS,OACLG,aCQU3K,qBAAkByD,aAdjC,YAA6E,EAA9BxD,EAA8B,EAA3B8D,QAA4B,IAAnBD,EAAkB,EAAlBA,MAAO3D,EAAW,EAAXA,SAE1D0iC,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAGpC,MAFe,8BAA0BqD,EAA1B,+BAA0DgK,EAA1D,gBAGb,eAAC,GAAD,CAA6BI,WANb,aAMhB,SACG9sC,QCsGQH,I,GAAAA,iBAAkByD,aApGjC,YAYC,IAEKwC,EAbJhG,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OAEA/C,GAIF,EALEqL,UAKF,EAJErL,WACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAEF,IADE4U,UAUA,OALE5lB,EAAQhG,EADQ,gBAHpB,MADY,SACZ,GAIc,iDAEA,mDAIV,gBAAC,KAAD,WACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKR,IACL,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,mBACL1E,UAAY6K,EAAOP,iBAAoB,0BAA4B,eACnEU,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,oBACL1E,UAAY6K,EAAOF,kBAAqB,0BAA4B,eACpEK,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,0BAGtE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,SACL1E,UAAY6K,EAAO8R,OAAU,0BAA4B,eACzD3R,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI/D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,4BAIhE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGpC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,+BAK3D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC9FX6tC,GAAqCtyC,YAAH,4PAiFzBwE,I,GAAAA,iBAAkByD,aAtEjC,YAAoE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAClD++B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,gBAGf,EAAkCrhC,YAAYsiC,GAAoC,CAChF5wB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3BglC,EAAP,oBAIA,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACEriC,cAAe,CACbhB,kBAAkB,IAAI7G,MAAO6B,cAC7BqF,mBAAmB,IAAIlH,MAAO8H,WAAa,EAC3CoR,OAAQ,EACR9X,YAAa,GACbwS,KAAM,IAER7L,iBAAkBiiC,GAClBhiC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZiiC,EAAwB,CAAE5kC,UAAW,CACnC6C,MAAO,CACL8gC,oBAAqBD,EACrBniC,iBAAkBoB,EAAOpB,iBACzBK,kBAAmBe,EAAOf,kBAC1BgS,OAAQjR,EAAOiR,OACf9X,YAAa6G,EAAO7G,YACpBwS,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOghC,GAA2CjkC,UAAW,CAC5D2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,gEAAkE,CAC/EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCzEhBmiB,GAAwCxyC,YAAH,4PA6G5BwE,I,SAAAA,iBAAkByD,aAlGjC,YAAqE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACnD2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,gBAEf,EAAkCjqC,YAASyqC,GAA0C,CACnFlkC,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAqCyI,YAAYwiC,GAAuC,CACtF9wB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3BklC,EAAP,oBAIA,GAAIprC,EAAS,OACX,eAAC,GAAD,UACI,6BAAI5C,EAAE,iCAIZ,GAAI6C,EACF,OACE,gBAAC,GAAD,WACMtI,QAAQC,IAAIqI,GACd,6BAAI7C,EAAE,iCAKdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IACMmrC,EAA8BnrC,EAAKmrC,4BAIzC,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACExiC,cAAe,CACbhB,iBAAkBwjC,EAA4BxjC,iBAC9CK,kBAAmBmjC,EAA4BnjC,kBAC/CgS,OAAQmxB,EAA4BnxB,OACpC9X,YAAaipC,EAA4BjpC,YACzCwS,KAAMy2B,EAA4Bz2B,MAEpC7L,iBAAkBiiC,GAClBhiC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZmiC,EAA2B,CAAE9kC,UAAW,CACtC6C,MAAO,CACLyC,GAAIA,EACJ/D,iBAAkBoB,EAAOpB,iBACzBK,kBAAmBe,EAAOf,kBAC1BgS,OAAQjR,EAAOiR,OACf9X,YAAa6G,EAAO7G,YACpBwS,KAAM3L,EAAO2L,OAEdtL,eAAgB,CACf,CAACC,MAAOghC,GAA2CjkC,UAAW,CAC5D2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,iEAAmE,CAChFuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCnHTsiB,GAAwC3yC,YAAH,2hBAyBrC4yC,GAAuC5yC,YAAH,yNAepC6yC,GAAoC7yC,YAAH,oMCM/BwE,qBAAkByD,aAnCjC,YAAsE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IACxDo+B,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAAmDh0B,YAAY6iC,IAA/D,mBAAOC,EAAP,KACMZ,GADN,KAAyC3qC,KACtB,CACjB+pC,oBAAqBD,IAGvB,OACE,yBAAQzsC,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,6DACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,yDACdiS,eAAgBo8B,EAChBn8B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAO+hC,GAAuChlC,UAAWukC,QAhBrE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBCuGd9E,qBAAkByD,aApHjC,YAA6D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACnC+c,GADoD,EAAV9c,QAC5BmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WAC/BvS,QAAQC,IAAIomB,GAED/c,EAAMkD,OAAOw4B,gBAAxB,IACMqD,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAE9B0N,GADS,8BAA0BrK,EAA1B,kBACG,UAEZ8K,EAAY,eAAC,GAAD,CACER,OAAM,8BAAyBtK,EAAzB,+BAAyDgK,EAAzD,iBAE1B,EAA4CjqC,YAASurC,GAAuC,CAC1FhlC,UAAW,CACT2jC,oBAAqBD,KAFjBhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYC,EAA7C,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYC,EAA7C,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMwrC,EAA4BxrC,EAAKwrC,0BACjCzmC,EAAW/E,EAAKwrC,0BAA0BzmC,SAG9C,OAAKymC,EAA0B7sC,MAAM0E,OAiCrC,gBAAC,GAAD,CAAiC6mC,WAAYC,EAAWplC,SAAUA,EAAUG,WAzB3D,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAO8kC,EAA0BzmC,SAAS4B,WAE5CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB0kC,0BAA0B7sC,MACrDoG,EAAW+B,EAAgB0kC,0BAA0BzmC,SAE3D,OAAOgC,EAAS1D,OACZ,CAGEmoC,0BAA2B,CACzBxkC,WAAYH,EAAe2kC,0BAA0BxkC,WACrDrI,MAAM,GAAD,oBAAOkI,EAAe2kC,0BAA0B7sC,OAAhD,aAA0DoI,IAC/DhC,aAGJ8B,MAMR,UACE,sBAAKxJ,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,uDACP,gBAAC,KAAD,WACE,eAAC,KAAM+F,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACK8nC,EAA0B7sC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,KAE/B,eAAC,KAAMjH,IAAP,UACE,sBAAKY,wBAAyB,CAACC,OAAQ9E,EAAKoD,iBAE9C,eAAC,KAAMa,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,8BAAyBu/B,EAAzB,+BAAyDgK,EAAzD,wBAAuFhrC,EAAK4M,IAApG,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAAoCqO,GAAI5M,EAAK4M,SAnBjCxE,2BA/CxB,gBAAC,GAAD,CAAiCgjC,WAAYC,EAA7C,UACE,sBAAK9sC,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,uDACP,6BAAIA,EAAE,8DCrEDuuC,GAAoChkC,OAAaC,MAAM,CAClE8Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNG,SAAS1K,YAAE,yBCgBDD,qBAAkByD,aAdjC,YAA0E,EAA9BxD,EAA8B,EAA3B8D,QAA4B,IAAnBD,EAAkB,EAAlBA,MAAO3D,EAAW,EAAXA,SAEvD0iC,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAGpC,MAFe,8BAA0BqD,EAA1B,+BAA0DgK,EAA1D,YAGb,eAAC,GAAD,CAA6BI,WANb,SAMhB,SACG9sC,QCsFQH,I,GAAAA,iBAAkByD,aApFjC,YAYC,IAEKwC,EAbJhG,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OAEA/C,GAIF,EALEqL,UAKF,EAJErL,WACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAEF,IADE4U,UAUA,OALE5lB,EAAQhG,EADQ,gBAHpB,MADY,SACZ,GAIc,6CAEA,+CAIV,gBAAC,KAAD,WACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKR,IACL,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOuZ,QAAW,0BAA4B,eAC1DxX,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAG3C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKlE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC9EXwuC,GAAiCjzC,YAAH,gPA4ErBwE,I,GAAAA,iBAAkByD,aAjEjC,YAAiE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAC/C++B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,YAGf,EAA+BrhC,YAAYijC,GAAgC,CACzEvxB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B2lC,EAAP,oBAIA,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACEhjC,cAAe,CACb6Y,UAAW,IAAI1gB,KACfoB,YAAa,IAEf2G,iBAAkB4iC,GAClB3iC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ4iC,EAAqB,CAAEvlC,UAAW,CAChC6C,MAAO,CACL8gC,oBAAqBD,EACrBtoB,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/Bvf,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO+hC,GAAuChlC,UAAW,CACxD2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4DAA8D,CAC3EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhCtB,SAoCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCnEhB8iB,GAAoCnzC,YAAH,gPAyGxBwE,qBAAkByD,aA9FjC,YAAkE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAChD2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,YAEf,EAAkCjqC,YAASwrC,GAAsC,CAC/EjlC,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAkCyI,YAAYmjC,GAAmC,CAC/EzxB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B6lC,EAAP,oBAIA,GAAI/rC,EAAS,OACX,eAAC,GAAD,UACI,6BAAI5C,EAAE,iCAIZ,GAAI6C,EACF,OACE,gBAAC,GAAD,WACMtI,QAAQC,IAAIqI,GACd,6BAAI7C,EAAE,iCAKdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IACM8rC,EAA2B9rC,EAAK8rC,yBAItC,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACEnjC,cAAe,CACb6Y,UAAW,IAAI1gB,KAAKgrC,EAAyBtqB,WAC7CC,QAAS,IAAI3gB,KAAKgrC,EAAyBrqB,SAC3Cvf,YAAa4pC,EAAyB5pC,aAExC2G,iBAAkB4iC,GAClB3iC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ8iC,EAAwB,CAAEzlC,UAAW,CACnC6C,MAAO,CACLyC,GAAIA,EACJ8V,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/Bvf,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO+hC,GAAuChlC,UAAW,CACxD2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6DAA+D,CAC5EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBC5FP7rB,I,SAAAA,kBAbf,YACE,OAD4D,EAAnBC,EAAmB,EAAhB6uC,cAE1C,IAAK,MACH,OAAO,eAAC,KAAD,CAAOlqC,MAAM,UAAb,eAET,IAAK,MACH,OAAO,eAAC,KAAD,CAAOA,MAAM,YAAb,eAET,QACE,MAAO,OChBAmqC,GAAyCvzC,YAAH,uiBAyBtCwzC,GAAwCxzC,YAAH,oPAgBrCyzC,GAAqCzzC,YAAH,uMCWhCwE,qBAAkByD,aAxCjC,YAAuE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IACzDo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAA0Ch0B,YAAYyjC,IAA/CC,EAAP,oBACMxB,EAAa,CACjBZ,oBAAqBD,GAGvB,OACE,yBAAQzsC,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,8DACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,0DACdiS,eAAgBg9B,EAChB/8B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAO2iC,GAAwC5lC,UAAWukC,GAC5D,CAAEthC,MAAOggC,GAAgCjjC,UAAW,CAClD05B,UAAWA,EACXp0B,GAAIo+B,SAnBhB,SAyBE,eAAC,KAAD,CAAM39B,OAAO,KAAKpK,KAAK,kBC2Gd9E,qBAAkByD,aAzHjC,YAA8D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACpC+c,GADqD,EAAV9c,QAC7BmF,qBAAWrI,KAGzBoI,GAFa4X,EAAY9T,WACZ8T,EAAYC,iBACFD,EAAY5X,sBACzCzO,QAAQC,IAAIomB,GAED/c,EAAMkD,OAAOw4B,gBAAxB,IACMqD,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAE9B0N,GADS,8BAA0BrK,EAA1B,kBACG,WAEZ8K,EAAY,eAAC,GAAD,CACCR,OAAM,8BAAyBtK,EAAzB,+BAAyDgK,EAAzD,kBAEzB,EAA4CjqC,YAASmsC,GAAwC,CAC3F5lC,UAAW,CACT2jC,oBAAqBD,KAFjBhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYC,EAA7C,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYC,EAA7C,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMosC,EAA6BpsC,EAAKosC,2BAClCrnC,EAAW/E,EAAKosC,2BAA2BrnC,SAkCjD,OACE,gBAAC,GAAD,CAAiCmlC,WAAYC,EAAWplC,SAAUA,EAAUG,WAzB3D,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAO0lC,EAA2BrnC,SAAS4B,WAE7CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBslC,2BAA2BztC,MACtDoG,EAAW+B,EAAgBslC,2BAA2BrnC,SAE5D,OAAOgC,EAAS1D,OACZ,CAGE+oC,2BAA4B,CAC1BplC,WAAYH,EAAeulC,2BAA2BplC,WACtDrI,MAAM,GAAD,oBAAOkI,EAAeulC,2BAA2BztC,OAAjD,aAA2DoI,IAChEhC,aAGJ8B,MAMR,UACE,sBAAKxJ,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,wDACP,gBAAC,KAAD,WACE,eAAC,KAAM+F,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MANcC,kBASlB,eAAC,KAAMxD,KAAP,UACK0oC,EAA2BztC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAOrI,EAAK4c,WAAWrU,OAAOnB,KAEjC,eAAC,KAAMnD,IAAP,UACE,sBAAKY,wBAAyB,CAACC,OAAQ9E,EAAKoD,iBAE9C,eAAC,KAAMa,IAAP,UACGjE,EAAKutC,iBAER,eAAC,KAAMtpC,IAAP,UACE,eAAC,GAAD,CAAiCgpC,aAAcjtC,EAAKitC,iBAEtD,eAAC,KAAMhpC,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,8BAAyBu/B,EAAzB,+BAAyDgK,EAAzD,yBAAwFhrC,EAAK4M,IAArG,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAAqCqO,GAAI5M,EAAK4M,SAtBlCxE,+BCxHjBolC,GAAqC7kC,OAAaC,MAAM,CACnE2kC,eAAgB5kC,OACbG,SAAS1K,YAAE,yBCkBDD,qBAAkByD,aAdjC,YAA2E,EAA9BxD,EAA8B,EAA3B8D,QAA4B,IAAnBD,EAAkB,EAAlBA,MAAO3D,EAAW,EAAXA,SAExD0iC,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAGpC,MAFe,8BAA0BqD,EAA1B,+BAA0DgK,EAA1D,aAGb,eAAC,GAAD,CAA6BI,WANb,UAMhB,SACG9sC,QCqFQH,I,GAAAA,iBAAkByD,aAnFjC,YAYC,IAEKwC,EAbJhG,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OAEA/C,GAIF,EALEqL,UAKF,EAJErL,WACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAEF,IADE4U,UAUA,OALE5lB,EAAQhG,EADQ,gBAHpB,MADY,SACZ,GAIc,8CAEA,gDAIV,gBAAC,KAAD,WACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKR,IACL,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,iBACL1E,UAAY6K,EAAOmkC,eAAkB,0BAA4B,eACjEhkC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,0BAGnE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,wDAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,eACL1E,UAAY6K,EAAO6jC,aAAgB,0BAA4B,eAC/D1jC,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,MAAd,SAAqBpD,EAAE,iBACvB,yBAAQoD,MAAM,MAAd,SAAqBpD,EAAE,yBAEzB,eAAC,KAAD,CAAc6E,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAG3C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKlE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC5EXqvC,GAAkC9zC,YAAH,oPAgFtBwE,I,GAAAA,iBAAkByD,aArEjC,YAAkE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAChD++B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,aAEf,EAAgCrhC,YAAY8jC,GAAiC,CAC3EpyB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3BwmC,EAAP,oBAIA,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACE7jC,cAAe,CACbojC,aAAc,MACdM,eAAgB,EAChBnqC,YAAa,IAEf2G,iBAAkByjC,GAClBxjC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZyjC,EAAsB,CAAEpmC,UAAW,CACjC6C,MAAO,CACL8gC,oBAAqBD,EACrBiC,aAAchjC,EAAOgjC,aACrBM,eAAgBtjC,EAAOsjC,eACvBnqC,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO2iC,GAAwC5lC,UAAW,CACzD2jC,oBAAqBD,IAEvB,CAACzgC,MAAOggC,GAAgCjjC,UAAW,CACjD05B,UAAWA,EACXp0B,GAAIo+B,OAGTxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6DAA+D,CAC5EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCvEhB2jB,GAAqCh0C,YAAH,oPA2GzBwE,I,MAAAA,iBAAkByD,aAhGjC,YAAmE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACjD2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,aAEf,EAAkCjqC,YAASosC,GAAuC,CAChF7lC,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAmCyI,YAAYgkC,GAAoC,CACjFtyB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B0mC,EAAP,oBAIA,GAAI5sC,EAAS,OACX,eAAC,GAAD,UACI,6BAAI5C,EAAE,iCAIZ,GAAI6C,EACF,OACE,gBAAC,GAAD,WACMtI,QAAQC,IAAIqI,GACd,6BAAI7C,EAAE,iCAKdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM2sC,EAA4B3sC,EAAK2sC,0BAGvC,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACEhkC,cAAe,CACbojC,aAAcY,EAA0BZ,aACxCM,eAAgBM,EAA0BN,eAC1CnqC,YAAayqC,EAA0BzqC,aAEzC2G,iBAAkByjC,GAClBxjC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ2jC,EAAyB,CAAEtmC,UAAW,CACpC6C,MAAO,CACLyC,GAAIA,EACJqgC,aAAchjC,EAAOgjC,aACrBM,eAAgBtjC,EAAOsjC,eACvBnqC,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO2iC,GAAwC5lC,UAAW,CACzD2jC,oBAAqBD,IAEvB,CAACzgC,MAAOggC,GAAgCjjC,UAAW,CACjD05B,UAAWA,EACXp0B,GAAIo+B,OAGTxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8DAAgE,CAC7EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCnHT8jB,GAAiCn0C,YAAH,wpBA8B9BmzB,GAAyBnzB,YAAH,oYCsBpBwE,qBAAkByD,aAxCjC,YAAwE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAE1Do+B,GADY/oC,EAAMkD,OAAOo9B,WACRtgC,EAAMkD,OAAOw4B,iBACpC,EAA2Ch0B,YAAYiG,IAAhDm+B,EAAP,oBACMlC,EAAa,CACjBZ,oBAAqBD,GAGvB,OACE,yBAAQzsC,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,uCACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,4BACdiS,eAAgB09B,EAChBz9B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOujC,GAAgCxmC,UAAWukC,QAhB9D,SAyBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBC+Id9E,qBAAkByD,aAzJjC,YAAyE,IAA/BxD,EAA8B,EAA9BA,EAAGsS,EAA2B,EAA3BA,SAAUzO,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACtD8c,EAAc3X,qBAAWrI,IACZggB,EAAY9T,WACZ8T,EAAYC,iBACFD,EAAY5X,qBACzCzO,QAAQC,IAAIomB,GAED/c,EAAMkD,OAAOw4B,gBAAxB,IACMqD,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAE9B0N,GADS,8BAA0BrK,EAA1B,kBACG,YAEZ8K,EAAY,eAAC,GAAD,CACCR,OAAM,8BAAyBtK,EAAzB,+BAAyDgK,EAAzD,mBAEzB,EAA4CjqC,YAAS+sC,GAAgC,CACnFxmC,UAAW,CACT2jC,oBAAqBD,KAFjBhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYC,EAA7C,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYC,EAA7C,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZlE,aAAaC,QAAQC,EAAK1C,6BAA8BkW,EAASC,UAEjE,IAAMq9B,EAAsB9sC,EAAK8sC,oBAC3B/nC,EAAW/E,EAAK8sC,oBAAoB/nC,SAkC1C,OACE,gBAAC,GAAD,CAAiCmlC,WAAYC,EAAWplC,SAAUA,EAAUG,WAzB3D,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOomC,EAAoB/nC,SAAS4B,WAEtCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBgmC,oBAAoBnuC,MAC/CoG,EAAW+B,EAAgBgmC,oBAAoB/nC,SAErD,OAAOgC,EAAS1D,OACZ,CAGEypC,oBAAqB,CACnB9lC,WAAYH,EAAeimC,oBAAoB9lC,WAC/CrI,MAAM,GAAD,oBAAOkI,EAAeimC,oBAAoBnuC,OAA1C,aAAoDoI,IACzDhC,aAGJ8B,MAMR,UACE,sBAAKxJ,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,yDACP,gBAAC,KAAD,WACE,eAAC,KAAM+F,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBACpB,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,mCAApB,MAA2DA,EAAE,+BAC7D,gBAAC,KAAM+J,UAAP,WAAkB/J,EAAE,yBAApB,MAAiDA,EAAE,2BAEnD,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MARcC,kBAWlB,eAAC,KAAMxD,KAAP,UACKopC,EAAoBnuC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,GAAD,CAAuBkD,OAAQnH,EAAKiS,eAAe9K,UADrCiB,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKiS,eAAejB,cADvB,IACsC,wBACpC,eAAC,KAAKI,MAAN,CAAYrO,MAAM,OAAlB,SAA0B/C,EAAKiS,eAAeZ,QAAQC,MAAM,QAF9ClJ,gBAKhB,gBAAC,KAAMnE,IAAP,WACGoE,KAAOrI,EAAKiS,eAAeV,UAAUhJ,OAAO,MAD/C,IACsD,wBACnDF,KAAOrI,EAAKiS,eAAeT,SAASjJ,OAAO,QAF9BH,gBAIhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiS,eAAeR,cADPrJ,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKiS,eAAeP,gBADPtJ,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,KAAD,CAAQA,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,0BAA4BvB,EAAKiS,eAAerF,KAC5E7J,MAAM,YAFd,SAGG3E,EAAE,mBAJgCgK,gBAOvC,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAsC2I,GAAI5M,EAAKiS,eAAerF,SA3BlDxE,+BChIjB6lC,GAAsCtlC,OAAaC,MAAM,CACpEmR,oBAAqBpR,OAClBG,SAAS1K,YAAE,uBACdyK,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MCQM9K,qBAAkByD,aAdjC,YAA+E,EAA9BxD,EAA8B,EAA3B8D,QAA4B,IAAnBD,EAAkB,EAAlBA,MAAO3D,EAAW,EAAXA,SAE5D0iC,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAGpC,MAFe,8BAA0BqD,EAA1B,+BAA0DgK,EAA1D,cAGb,eAAC,GAAD,CAA6BI,WANb,WAMhB,SACG9sC,QCqFQH,qBAAkByD,aAlFjC,YAYC,IAXCxD,EAWF,EAXEA,EAGA+K,GAQF,EAVEjH,QAUF,EATED,MASF,EAREkH,cACAC,EAOF,EAPEA,OAEAmJ,GAKF,EANEtI,OAMF,EALEsI,WACArL,EAIF,EAJEA,UAMM9C,GAFR,EAHEkO,gBAGF,EAFE8C,cAEF,EADE4U,UAGc5rB,EAAE,iDAEhB,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKR,IACL,gBAAC,KAAKiF,MAAN,CAAYC,MAAOlL,EAAE,iCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,sBACL1E,UAAY6K,EAAO2Q,oBAAuB,0BAA4B,eACtExQ,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU2G,qBAAqBrZ,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,sBAAsBuG,UAAU,OAAOjL,UAAU,wBAEtE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAOiI,QAAW,0BAA4B,eAC1D9H,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,mBACL1E,UAAY6K,EAAOP,iBAAoB,0BAA4B,eACnEU,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,SACJK,KAAK,oBACL1E,UAAY6K,EAAOF,kBAAqB,0BAA4B,eACpEK,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,gCAK1E,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIK3E,EAAE,gCCsBJD,I,SAAAA,iBAAkByD,aAlGjC,YAAmE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACjD++B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,cAEf,EAAsEjqC,YAAS+rB,IAA9DjS,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAyBitC,EAAxD,EAAkDhtC,KAElD,EAA8ByI,YAAY69B,GAAwB,CAChEnsB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD1BinC,EAAR,oBAKE,OAAItzB,EACF,eAAC,GAAD,UACE,6BAAIzc,EAAE,iCAIN0c,GACFniB,QAAQC,IAAIkiB,GAEV,eAAC,GAAD,UACE,6BAAI1c,EAAE,kCAKZzF,QAAQC,IAAIs1C,GAGZ,eAAC,GAAD,UACE,eAAC,KAAD,CACErkC,cAAe,CACbkQ,oBAAqB,GACrB1I,QAAS,GACTxI,kBAAkB,IAAI7G,MAAO6B,cAC7BqF,mBAAmB,IAAIlH,MAAO8H,WAAa,GAE7CC,iBAAkBkkC,GAClBjkC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZkkC,EAAkB,CAAE7mC,UAAW,CAC7B6C,MAAO,CACL8G,QAAS+vB,EACTiK,oBAAqBD,EACrBjxB,oBAAqB9P,EAAO8P,oBAC5BlR,iBAAkBoB,EAAOpB,iBACzBK,kBAAmBe,EAAOf,kBAC1BmI,QAASpH,EAAOoH,UAEjB/G,eAAgB,CACf,CAACC,MAAOujC,GAAgCxmC,UAAW,CACjD2jC,oBAAqBD,OAO1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAMktC,EAAmBltC,EAAK2mC,qBAAqB51B,eAAerF,GAClE1K,EAAQX,KAAR,iCAAuC6sC,IACvC3jC,IAAMC,QAAStM,EAAE,8DAAgE,CAC/EuM,SAAUF,IAAMG,SAASC,eAE3BJ,IAAMC,QAAStM,EAAE,sEAAwE,CACvFuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA7CtB,SAiDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAW27B,EACX/kC,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,qBCzGTqkB,GAAwC10C,YAAH,2hBAyBrC20C,GAAuC30C,YAAH,yNAepC40C,GAAoC50C,YAAH,oMCM/BwE,qBAAkByD,aAnCjC,YAAsE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IACxDo+B,EAAiB/oC,EAAMkD,OAAOw4B,gBACpC,EAAmDh0B,YAAY4kC,IAA/D,mBAAOC,EAAP,KACM3C,GADN,KAAyC3qC,KACtB,CACjB+pC,oBAAqBD,IAGvB,OACE,yBAAQzsC,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,6DACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,yDACdiS,eAAgBm+B,EAChBl+B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAO8jC,GAAuC/mC,UAAWukC,QAhBrE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBCsHd9E,qBAAkByD,aA9HjC,YAA6D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACnC+c,GADoD,EAAV9c,QAC5BmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACZ8T,EAAYC,iBACFD,EAAY5X,qBACzCzO,QAAQC,IAAIomB,GAED/c,EAAMkD,OAAOw4B,gBAAxB,IACMqD,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAE9B0N,GADS,8BAA0BrK,EAA1B,kBACG,UAEZ8K,EAAY,eAAC,GAAD,CACER,OAAM,8BAAyBtK,EAAzB,+BAAyDgK,EAAzD,iBAE1B,EAA4CjqC,YAASstC,GAAuC,CAC1F/mC,UAAW,CACT2jC,oBAAqBD,KAFjBhqC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAAiCoqC,WAAYC,EAA7C,SACGjtC,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAAiCmqC,WAAYC,EAA7C,UACE,6BAAIjtC,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMutC,EAA4BvtC,EAAKutC,0BACjCxoC,EAAW/E,EAAKutC,0BAA0BxoC,SAG9C,OAAKwoC,EAA0B5uC,MAAM0E,OAyCrC,gBAAC,GAAD,CAAiC6mC,WAAYC,EAAWplC,SAAUA,EAAUG,WAzB3D,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAO6mC,EAA0BxoC,SAAS4B,WAE5CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBymC,0BAA0B5uC,MACrDoG,EAAW+B,EAAgBymC,0BAA0BxoC,SAE3D,OAAOgC,EAAS1D,OACZ,CAGEkqC,0BAA2B,CACzBvmC,WAAYH,EAAe0mC,0BAA0BvmC,WACrDrI,MAAM,GAAD,oBAAOkI,EAAe0mC,0BAA0B5uC,OAAhD,aAA0DoI,IAC/DhC,aAGJ8B,MAMR,UACE,sBAAKxJ,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,uDACP,gBAAC,KAAD,WACE,eAAC,KAAM+F,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACK6pC,EAA0B5uC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,KAE/B,eAAC,KAAMjH,IAAP,UACA,sBAAKY,wBAAyB,CAACC,OAAQ9E,EAAKoD,iBAE5C,eAAC,KAAMa,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,8BAAyBu/B,EAAzB,+BAAyDgK,EAAzD,wBAAuFhrC,EAAK4M,IAApG,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAAoCqO,GAAI5M,EAAK4M,SAnBjCxE,2BAvDxB,gBAAC,GAAD,CAAiCgjC,WAAYC,EAA7C,UACE,sBAAK9sC,UAAU,aAAf,SAA6ButC,IAC7B,8BAAK1tC,EAAE,uDACP,6BAAIA,EAAE,8DC5EDswC,GAAoC/lC,OAAaC,MAAM,CAClE8Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNG,SAAS1K,YAAE,yBCmCDD,qBAAkByD,aAdjC,YAA0E,EAA9BxD,EAA8B,EAA3B8D,QAA4B,IAAnBD,EAAkB,EAAlBA,MAAO3D,EAAW,EAAXA,SAEvD0iC,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAGpC,MAFe,8BAA0BqD,EAA1B,+BAA0DgK,EAA1D,YAGb,eAAC,GAAD,CAA6BI,WANb,SAMhB,SACG9sC,QCmEQH,I,GAAAA,iBAAkByD,aApFjC,YAYC,IAEKwC,EAbJhG,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OAEA/C,GAIF,EALEqL,UAKF,EAJErL,WACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAEF,IADE4U,UAUA,OALE5lB,EAAQhG,EADQ,gBAHpB,MADY,SACZ,GAIc,6CAEA,+CAIV,gBAAC,KAAD,WACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKR,IACL,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOuZ,QAAW,0BAA4B,eAC1DxX,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAG3C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,+BAKlE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC9EXuwC,GAAiCh1C,YAAH,gPA2ErBwE,I,GAAAA,iBAAkByD,aAhEjC,YAAiE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAC/C++B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,YAEf,EAA+BrhC,YAAYglC,GAAgC,CACzEtzB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B0nC,EAAP,oBAIA,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACE/kC,cAAe,CACb6Y,UAAW,IAAI1gB,KACfoB,YAAa,IAEf2G,iBAAkB2kC,GAClB1kC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ2kC,EAAqB,CAAEtnC,UAAW,CAChC6C,MAAO,CACL8gC,oBAAqBD,EACrBtoB,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/Bvf,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO8jC,GAAuC/mC,UAAW,CACxD2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4DAA8D,CAC3EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhCtB,SAoCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBClEhB6kB,GAAoCl1C,YAAH,gPAyGxBwE,I,MAAAA,iBAAkByD,aA9FjC,YAAkE,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAChD2K,EAAK3K,EAAMkD,OAAOyH,GAClBo0B,EAAY/+B,EAAMkD,OAAOo9B,WACzByI,EAAiB/oC,EAAMkD,OAAOw4B,gBAC9Bz2B,EAAS,8BAA0B85B,EAA1B,+BAA0DgK,EAA1D,YAEf,EAAkCjqC,YAASutC,GAAsC,CAC/EhnC,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAkCyI,YAAYklC,GAAmC,CAC/ExzB,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B4nC,EAAP,oBAIA,GAAI9tC,EAAS,OACX,eAAC,GAAD,UACI,6BAAI5C,EAAE,iCAIZ,GAAI6C,EACF,OACE,gBAAC,GAAD,WACMtI,QAAQC,IAAIqI,GACd,6BAAI7C,EAAE,iCAKdzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IACM6tC,EAA2B7tC,EAAK6tC,yBAItC,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CACEllC,cAAe,CACb6Y,UAAW,IAAI1gB,KAAK+sC,EAAyBrsB,WAC7CC,QAAS,IAAI3gB,KAAK+sC,EAAyBpsB,SAC3Cvf,YAAa2rC,EAAyB3rC,aAExC2G,iBAAkB2kC,GAClB1kC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ6kC,EAAwB,CAAExnC,UAAW,CACnC6C,MAAO,CACLyC,GAAIA,EACJ8V,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/Bvf,YAAa6G,EAAO7G,cAErBkH,eAAgB,CACf,CAACC,MAAO8jC,GAAuC/mC,UAAW,CACxD2jC,oBAAqBD,OAG1BxgC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6DAA+D,CAC5EuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBC/GTglB,GAAoCr1C,YAAH,qqBAwCjCs1C,GAAiCt1C,YAAH,oOCxC9Bu1C,GAAiCvmC,OAAaC,MAAM,CAC/DwnB,QAASznB,OACTukB,aAAcvkB,OACdwmC,OAAQxmC,OACRwS,KAAMxS,OACNymC,UAAWzmC,OACX0mC,IAAK1mC,OACL2mC,OAAQ3mC,OACLmJ,IAAI1T,YAAE,YACT80B,WAAYvqB,OACTmJ,IAAI1T,YAAE,cCkIID,iBAAkByD,aA1HU,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQa,EAArC,EAAqCA,OAAoBqI,GAAzD,EAA6C6F,WAA7C,EAAyD7F,iBAAiB8C,EAA1E,EAA0EA,cAA1E,OACzC,gBAAC,KAAD,WACI,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,UACL2W,QAAS3P,EAAOmmB,UAChB,uBAAM7xB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,kDAEnD,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,aAG3C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACL2W,QAAS3P,EAAOklC,SAChB,uBAAM5wC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,iDAEnD,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,aAG1C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,eACL2W,QAAS3P,EAAOijB,eAChB,uBAAM3uB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uDAEnD,eAAC,KAAD,CAAc6E,KAAK,eAAeuG,UAAU,gBAIlD,eAAC,KAAKhL,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAO+R,KAAQ,0BAA4B,eACvD5R,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAI3D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,YACbC,aAActL,EAAOmlC,UACrBn2C,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,aAAa,GAC7B8C,EAAc,YAAa5C,EAAE1O,OAAO2R,iBAG1C,eAAC,KAAD,CAAcxS,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,wBAE5D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,eAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,MACbC,aAActL,EAAOolC,IACrBp2C,KAAM6b,GACNzJ,OAAQ,SAACmH,GACPF,EAAgB,OAAO,GACvB8C,EAAc,MAAO5C,EAAE1O,OAAO2R,iBAGpC,eAAC,KAAD,CAAcxS,KAAK,MAAMuG,UAAU,OAAOjL,UAAU,wBAEtD,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,6CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOkmC,OAAU,0BAA4B,eACzD/lC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,aACL1E,UAAY6K,EAAO8pB,WAAc,0BAA4B,eAC7D3pB,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,aAAauG,UAAU,OAAOjL,UAAU,gCAKnE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BC6HAD,qBAAkByD,aA9OjC,YAAsD,IAAZxD,EAAW,EAAXA,EAClC4iC,EAD6C,EAAR/+B,MACnBkD,OAAOo9B,WACzB/1B,EAAa,kBACnB,EAAiCzL,YAASiuC,GAAmC,CAC3E1nC,UAAW,CAAEsF,GAAIo0B,KADXhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAsCyI,YAAYslC,IAA3CM,EAAP,oBAEA,GAAIvuC,EAAS,OACX,eAAC,GAAD,CAA6BwL,WAAYA,EAAzC,SACE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAEjB,eAAC,KAAKwG,KAAN,UACE,6BAAIxG,EAAE,sCAMd,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA6BuL,WAAYA,EAAzC,UACG7T,QAAQC,IAAIqI,GACb,gBAAC,KAAD,WACE,eAAC,KAAKkD,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAEjB,eAAC,KAAKwG,KAAN,UACE,6BAAIxG,EAAE,sCAMd,IAAM6S,EAAU/P,EAAK+P,QACfjD,EAAc9M,EAAKiuB,uBAAuBtvB,MAAM,GAAGG,KAEzD,OACE,eAAC,GAAD,CACEN,KAAMuR,EACNzE,WAAYA,EAFd,SAIE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,kCAEjB,eAAC,KAAD,CACEyL,cAAe,CACbumB,QAASpiB,EAAYoiB,QACrBlD,aAAclf,EAAYkf,aAC1BiiB,OAAQnhC,EAAYmhC,OACpBh0B,KAAMnN,EAAYmN,KAClBi0B,UAAWphC,EAAYohC,UACvBC,IAAKrhC,EAAYqhC,IACjBC,OAAQthC,EAAYshC,OACpBpc,WAAYllB,EAAYklB,YAE1BnpB,iBAAkBmlC,GAClBllC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZslC,EAA4B,CAAEjoC,UAAW,CACvC6C,MAAO,CACL8G,QAASjD,EAAYiD,QAAQrE,GAC7BwjB,QAASnmB,EAAOmmB,QAChBlD,aAAcjjB,EAAOijB,aACrBiiB,OAAQllC,EAAOklC,OACfh0B,KAAMlR,EAAOkR,KACbi0B,UAAWnlC,EAAOmlC,UAClBC,IAAKplC,EAAOolC,IACZC,OAAQrlC,EAAOqlC,OACfpc,WAAYjpB,EAAOipB,aAEpB5oB,eAAgB,CAEf,CAACC,MAAOykC,GAAmC1nC,UAAW,CAACsF,GAAIo0B,OAE9Dx2B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,wDAA0D,CACvEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3CxB,SA+CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,gBCtHf,SAAS6E,KACd,IAAIC,EAAY,GAEZ8wB,EAAS7iC,aAAagS,QAAQ9R,EAAK5B,6BACnCk0C,EAAexyC,aAAagS,QAAQ9R,EAAK7B,mCAc7C,OAZIwkC,IACF9wB,EAAU9L,KAAO48B,GAGjB9wB,EAAUzB,SADS,SAAjBkiC,EAOJ72C,QAAQC,IAAImW,GAELA,ECCT,I,YAsCiB5Q,iBAAkByD,aAtCV,SAAC,GAAD,IAAExD,EAAF,EAAEA,EAAG8D,EAAL,EAAKA,QAASsL,EAAd,EAAcA,QAASlP,EAAvB,EAAuBA,SAAvB,OACvB,eAAC,GAAD,UACE,sBAAKC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,mBAAtB,SACE,sBAAKG,UAAU,sBAAf,SACE,eAAC,GAAD,CACEqgC,gBAAiB1hC,EAAK5B,4BACtBuZ,YAAY,YACZzJ,SAAU,SAAC5J,GACT7I,QAAQC,IAAI4I,GACZxE,aAAaC,QAAQC,EAAK5B,4BAA6BkG,GACvDgM,EAAQsB,aAKhB,gBAAC,KAAKtQ,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,WAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,uBADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,0BAG/C,eAAC,GAAD,CAAeoO,WAAW,yBChDzBijC,GAAuB91C,YAAH,ouBAkCpB+1C,GAAqB/1C,YAAH,iVAsBlBg2C,GAAkBh2C,YAAH,mMCdbi2C,GApCS,SAAC,GAAqF,IAApFxxC,EAAmF,EAAnFA,EAAG8R,EAAgF,EAAhFA,WAAYC,EAAoE,EAApEA,eAAgBC,EAAoD,EAApDA,WAAYy/B,EAAwC,EAAxCA,gBAAiBv/B,EAAuB,EAAvBA,kBAClFC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAKlS,UAAU,YAAf,UACE,8BAAKH,EAAE,6BACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,gCACjE,0BACEG,UAAU,kBACVsI,QAAS,WACPgpC,EAAgBv/B,GACb9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,UAmBE,eAAC,KAAD,CAAMxN,KAAK,UAnBb,IAmByB7E,EAAE,yCCQxB0xC,GApCW,SAAC,GAAqF,IAApF1xC,EAAmF,EAAnFA,EAAG8R,EAAgF,EAAhFA,WAAYC,EAAoE,EAApEA,eAAgBC,EAAoD,EAApDA,WAAYy/B,EAAwC,EAAxCA,gBAAiBv/B,EAAuB,EAAvBA,kBACpFC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAKlS,UAAU,YAAf,UACE,8BAAKH,EAAE,+BACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,kCACjE,0BACEG,UAAU,kBACVsI,QAAS,WACPgpC,EAAgBv/B,GACb9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,UAmBE,eAAC,KAAD,CAAMxN,KAAK,mBAnBb,IAmBkC7E,EAAE,2CCI1C2xC,GAAkBp2C,YAAH,oJAiaNwE,I,GAAAA,iBAAkByD,aAxZjC,YAAuC,IAAfxD,EAAc,EAAdA,EAAc,EAAX8D,QAEpBlF,aAAagS,QAAQ9R,EAAK7B,oCAC7B2B,aAAaC,QAAQC,EAAK7B,mCAAmC,GAG/D,MAAqD0F,YAAS0uC,GAAsB,CAClFnoC,UAAWwH,OADL9N,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAAWqL,EAAzC,EAAyCA,QAGzC,EAAyB7D,YAAYgmC,IAA9BK,EAAP,oBACA,EAAyBrmC,YAAYomC,IAA9BE,EAAP,oBAEMzoC,EAAgB,gBAAC,KAAKC,QAAN,WACpB,eAAC,KAAD,CAAQ1E,MAAyE,UAAjE/F,aAAagS,QAAQ9R,EAAK7B,mCAAkD,UAAW,YAC/FyH,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAK7B,mCAAmC,GAC7DmS,EAAQsB,OAJlB,SAOG1Q,EAAE,qBAEL,eAAC,KAAD,CAAQ2E,MAAyE,SAAjE/F,aAAagS,QAAQ9R,EAAK7B,mCAAiD,UAAW,YAC9FyH,KAAK,KACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAK7B,mCAAmC,GAC7DmS,EAAQsB,OALlB,SAQG1Q,EAAE,wBAIP,GAAI4C,EAAS,OACX,eAAC,GAAD,CAAkBwM,QAASA,EAA3B,SACE,eAAC,GAAD,UACGpP,EAAE,iCAIT,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAkBuM,QAASA,EAA3B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,uBAA1B,SACE,6BAAIA,EAAE,qCAKZ,IAAI8xC,EAAahvC,EAAKgvC,WAGtB,OAAKA,EAAWrwC,MAAM0E,QAatB5L,QAAQC,IAAIsI,GAKV,eAAC,GAAD,CAAkBsM,QAASA,EAA3B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,uBACZoI,cAAegB,EACfd,aAAa,EACbT,SAAUiqC,EAAWjqC,SACrBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOsoC,EAAWjqC,SAAS4B,WAE7BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBkoC,WAAWrwC,MACtCoG,EAAW+B,EAAgBkoC,WAAWjqC,SAE5C,OAAOgC,EAAS1D,OACZ,CAGE2rC,WAAY,CACVhoC,WAAYH,EAAemoC,WAAWhoC,WACtCrI,MAAM,GAAD,oBAAOkI,EAAemoC,WAAWrwC,OAAjC,aAA2CoI,IAChDhC,aAGN8B,MAvBtB,SA2BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACK1D,EAAKgvC,WAAWrwC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,MADQmF,gBAGhB,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,IAAD,CAAMqD,GAAE,yBAAoBzB,EAAK4M,GAAzB,SAAR,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,qBAN4BgK,gBAYvC,gBAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,UACE,yBAAQA,UAAU,2BAChB6F,MAAOhG,EAAE,mBACToE,KAAK,GACLqE,QAAS,WACPlO,QAAQC,IAAI,oBACZ,IACIu3C,EADAvjC,EAAK5M,EAAK4M,GAGZujC,EADkE,QAAhEnzC,aAAagS,QAAQ9R,EAAK7B,mCAM9B20C,EAAe,CAAE1oC,UAAW,CAC1B6C,MAAO,CACLyC,KACAU,UAAWtN,EAAKsN,WAElBhD,eAAgB,CAClB,CAACC,MAAOklC,GAAsBnoC,UAAWwH,SACrCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACVvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAC2CtM,EAA7C+xC,EAA+C,yBAA7B,0BAAwD,CAC1ExlC,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OA9B1D,SAkCMjB,EAAKsN,SAELlP,EAAE,mBADF,eAAC,KAAD,CAAMiP,OAAO,KAAKpK,KAAK,YAOzBjD,EAAKsN,SACL,yBAAQ/O,UAAU,2BAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,oCACd+R,eAAgB,kCAAM,wBAAM,wBAAM,8BAAI,8BAAKnQ,EAAKiD,YAChDmN,WAAYhS,EAAE,yBACdiS,eAAgB4/B,EAChB3/B,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAOklC,GAAsBnoC,UAAWwH,WAfjD,SAoBE,uBAAMvQ,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,gBArBnC,KA3CgBmF,kBAhBzBA,6BAvD5B,eAAC,GAAD,CAAkBoF,QAASA,EAA3B,SACE,eAAC,GAAD,CAAajH,UAAWnI,EAAE,uBACboI,cAAegB,EAD5B,SAEE,6BACqE,SAAjExK,aAAagS,QAAQ9R,EAAK7B,mCAC1B+C,EAAE,+BACFA,EAAE,sCC7DCD,iBAAkByD,aA/BL,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASiH,EAAf,EAAeA,aAAcC,EAA7B,EAA6BA,OAAQ+O,EAArC,EAAqCA,WAArC,OAC1B,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACI,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,8BAK/D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAjD,SACK/Z,EAAE,8BCTXgyC,GAAez2C,YAAH,gLAUZwe,GAAa,iBAwEJha,qBAAkByD,aAtEjC,YAA0C,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAC5B,EAAsByH,YAAYymC,IAA3BC,EAAP,oBAEA,OACE,eAAC,GAAD,UACE,sBAAK9xC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,qBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,+BAEf,eAAC,KAAD,CACIyL,cAAe,CAAE5G,KAAM,IAEvB+G,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBmmC,EAAY,CAAE/oC,UAAW,CACvB6C,MAAO,CACLlH,KAAMgH,EAAOhH,KACbqtC,KAAK,IAENhmC,eAAgB,CACf,CAACC,MAAOklC,GAAsBnoC,UAAWwH,SAE5CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxB,IAAMqvC,EAAarvC,EAAKsvC,eAAeC,SAAS7jC,GAChD1K,EAAQX,KAAR,yBAA+BgvC,EAA/B,UACA9lC,IAAMC,QAAStM,EAAE,mCAAqC,CAClDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxB1B,SA4BK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACG,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,EACR+O,WAAYA,aAM1B,gBAAC,KAAKlU,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,WAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,KADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAeoO,WAAW,8BCvCzBrO,qBAAkByD,aA1CjC,YAA8E,IAA9CxD,EAA6C,EAA7CA,EAAmBE,GAA0B,EAA1C2D,MAA0C,EAAnCC,QAAmC,EAA1B5D,UAA0B,IAAhBiI,iBAAgB,MAAN,GAAM,EAG3E,OACE,eAAC,GAAD,UACE,sBAAKhI,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,qBAGtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACA,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEdjI,OAGH,eAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,SAEE,eAAC,GAAD,CAAsBjE,WAAW,SACXC,SAAS,WAD/B,SAEE,eAAC,IAAD,CAAMc,GAtBF,iBAsBJ,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uCCgHlDD,qBAAkByD,aA3IjC,YAAyH,IAAzFxD,EAAwF,EAAxFA,EAAY+K,GAA4E,EAArFjH,QAAqF,EAA5EiH,cAAcC,EAA8D,EAA9DA,OACxD,OADsH,EAAtDa,OAAsD,EAA9CkO,WAA8C,EAAlC7F,gBAAkC,EAAjB8C,cAEnG,gBAAC,KAAD,WACE,gBAAC,KAAKxQ,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAI3D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOsnC,aAAgB,0BAA4B,eAC/DnnC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,0BAGjE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOunC,aAAgB,0BAA4B,eAC/DpnC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO8N,MAAS,0BAA4B,eACxD3N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOwnC,OAAU,0BAA4B,eACzDrnC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAO6N,QAAW,0BAA4B,eAC1D1N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,WACL1E,UAAY6K,EAAO64B,SAAY,0BAA4B,eAC3D14B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAO84B,KAAQ,0BAA4B,eACvD34B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,UACL1E,UAAY6K,EAAO+4B,QAAW,0BAA4B,eAC1D54B,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,KACZsgC,GAAkBp9B,KAChB,SAAAy9B,GAAO,OAAI,yBAAQ3gC,MAAO2gC,EAAQC,KAAvB,SAAyCD,EAAQE,MAAfj6B,sBAGnD,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,eACL1E,UAAY6K,EAAOgO,aAAgB,0BAA4B,eAC/D7N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,0BAGjE,eAAC,KAAK0F,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sDAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,kBACL1E,UAAY6K,EAAOiO,gBAAmB,0BAA4B,eAClE9N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,gCAKxE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UAENH,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,6BClBAD,ICtHX0yC,GACA1P,GDqHWhjC,iBAAkByD,aAlGjC,YAAiD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACvBsuC,GADwC,EAAVruC,QACjBD,EAAMkD,OAAO2rC,aAChC,EAAyBnnC,YAAYgmC,IAA9BK,EAAP,oBACA,EAA0CjvC,YAAS2uC,GAAoB,CACrEpoC,UAAW,CACTsF,GAAI2jC,KAFAvvC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAPA,EAA8BsM,QAO1BxM,EAAS,OAAO,eAAC,GAAD,UAChB,eAAC,KAAK4D,KAAN,UAAYxG,EAAE,iCAGlB,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GACL,eAAC,GAAD,UACL,eAAC,KAAK2D,KAAN,UAAYxG,EAAE,gCAIlB,IAAM4P,EAAc9M,EAAKuvC,SAGzB,OAFA93C,QAAQC,IAAIoV,GAGV,eAAC,GAAD,CAAsBzH,UAAWnI,EAAE,4BAAnC,SACE,eAAC,KAAD,CACEyL,cAAe,CACb5G,KAAM+K,EAAY/K,KAClBiU,MAAOlJ,EAAYkJ,MACnB05B,OAAQ5iC,EAAY4iC,OACpB35B,QAASjJ,EAAYiJ,QACrBgrB,SAAUj0B,EAAYi0B,SACtBC,KAAMl0B,EAAYk0B,KAClBC,QAASn0B,EAAYm0B,QACrBwO,aAAc3iC,EAAY2iC,aAC1BD,aAAc1iC,EAAY0iC,aAC1Bt5B,aAAcpJ,EAAYoJ,aAC1BC,gBAAiBrJ,EAAYqJ,iBAG/BrN,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI04B,EAAa,CACf/1B,GAAI2jC,EACJttC,KAAMgH,EAAOhH,KACbiU,MAAOjN,EAAOiN,MACd05B,OAAQ3mC,EAAO2mC,OACf35B,QAAShN,EAAOgN,QAChBgrB,SAAUh4B,EAAOg4B,SACjBC,KAAMj4B,EAAOi4B,KACbC,QAASl4B,EAAOk4B,QAChBwO,aAAc1mC,EAAO0mC,aACrBD,aAAczmC,EAAOymC,aACrBt5B,aAAcnN,EAAOmN,aACrBC,gBAAiBpN,EAAOoN,iBAG1B24B,EAAe,CAAE1oC,UAAW,CAC1B6C,MAAOw4B,GACNr4B,eAAgB,CAEf,CAACC,MAAOklC,GAAsBnoC,UAAWwH,MAEzC,CAACvE,MAAOmlC,GAAoBpoC,UAAW,CAAC,GAAMipC,OAEjD/lC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,oCAAsC,CACnDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArDxB,SAyDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,aCtDL9L,kBApDM,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAN,OACnB,gBAAC,KAAKnD,MAAN,CAAYoD,aAAa,EAAzB,UACmB,iBAAfD,EAC2BqkC,GAAZ,WAAfrkC,EAC4B20B,GAAb,YAAf30B,EAGF,eAAC,GAAD,CACI7L,SAAS,gBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAG,qBACHC,KAAK,OACL5C,OAAQqiC,GALZ,SAOK/iC,EAAE,2BANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,gBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAG,oBACHC,KAAK,YACL5C,OAAQ+xC,GALZ,SAOKzyC,EAAE,0BANEgK,wBCnBT2oC,G,oDACJ,WAAY7qC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,wBACZD,QAAQC,IAAIsN,GAHK,E,2CAOnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MAGnBgD,GAFUlH,KAAKmI,MAAMhE,QAChBD,EAAMkD,OAAOyH,GACNxO,EAAE,mBAEpB,OACE,eAAC,GAAD,UACE,sBAAKG,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAKnG,IAAN,WACE,eAAC,GAAD,CACEmC,SAAS,gBACTD,WAAW,OAFb,SAIE,eAAC,KAAKuD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,4BACNA,EAAE,gCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,+BAKnD,eAAC,GAAD,CACErE,SAAS,gBACTD,WAAW,OAFb,SAIE,eAAC,KAAKuD,IAAN,CAAUU,GAAI,EAAGmI,GAAI,EAArB,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,2BACNA,EAAE,+BACH,wBAAM,wBACN,eAAC,GAAD,CAAgB6G,UAAWA,EAAWD,KAAK,mCAiBvD,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,oB,GAlEWmC,aA4EZ3I,iBAAkByD,YAAWmvC,KCjGrC,SAASjiC,KACd,IAAIkiC,EACApjB,EACA6J,EAEA1oB,EAAY,CACdkiC,SAAUj0C,aAAagS,QAAQ9R,EAAK3B,iCACpC21C,UAAWl0C,aAAagS,QAAQ9R,EAAK1B,mCAwBvC,OArBAw1C,EAAUh0C,aAAagS,QAAQ9R,EAAKzB,mCAElCsT,EAAUiiC,QAAUA,GAGtBpjB,EAA0B5wB,aAAagS,QAAQ9R,EAAKxB,wCAElDqT,EAAU6e,wBADRA,GAGkC,GAGtC6J,EAAuBz6B,aAAagS,QAAQ9R,EAAKvB,uCAE/CoT,EAAU0oB,qBADRA,GAG+B,GAGnC9+B,QAAQC,IAAImW,GAELA,ECrBT,SAASG,GAAgB1N,GACvB,IAAI2N,EAAenS,aAAagS,QAAQxN,GACxC,OAAI2N,GAGK,GAUX,I,YA0CehR,iBAAkByD,aAvCE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY8C,GAAf,EAAMgB,QAAN,EAAehB,MAAMsM,EAArB,EAAqBA,QAArB,OACjC,+BAEE,0BACEjP,UAPc,oBAQd4Q,aAAcD,GAAgBhS,EAAKvB,uCACnCyP,SAAW,SAACgE,IAdlB,SAAsCC,EAAK7N,EAAOgM,GAChDxQ,aAAaC,QAAQoS,EAAK7N,GAC1BgM,EAAQsB,MAaFQ,CACEpS,EAAKvB,sCACLyT,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,+CAATgK,gBACrBlH,EAAK21B,sBAAsBh3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,4BC5CxBwkB,GAAyBjzB,YAAH,8sDA4FtBkzB,GAAwBlzB,YAAH,y0BA0CrBmzB,GAAyBnzB,YAAH,67CC3F7Bw3C,GAA8Bx3C,YAAH,qLAU5BqD,aAAagS,QAAQ9R,EAAK3B,mCAC7B5C,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAK3B,gCAAiC8M,OAASE,OAAO,eAC3EvL,aAAaC,QAAQC,EAAK1B,iCAAkC6M,OAAS7H,IAAI,EAAG,QAAQ+H,OAAO,gBAI7F,I,GClDI6oC,GACAC,GDyUWlzC,iBAAkByD,aAxRJ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAN,OAC3B,eAAC,GAAD,UACE,sBAAK3D,UAAU,eAAf,SACE,eAAC,QAAD,CAAOgM,MAAOqiB,GAAwBtlB,UAAWwH,KAAjD,SACG,YAAwC,IAArC9N,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAMsM,EAAc,EAAdA,QAExB,OAAIxM,EACF,eAAC,KAAD,UACE,6BAAI5C,EAAE,iCAIN6C,GACFtI,QAAQC,IAAIqI,GAEV,eAAC,KAAD,UACE,6BAAI7C,EAAE,iCAMP8C,EAAKowC,qBAAqB/sC,OAS7B,gBAAC,KAAD,WACE,eAAC,KAAKJ,OAAN,CAAaC,MAAOhG,EAAE,kBAAtB,SACE,uBAAKG,UAAU,sBAAf,UACE,uBAAM6F,MAAOhG,EAAE,kDAAf,SACE,eAAC,KAAD,CACEsD,KAAK,OACL4jB,QAAQ,OACR/mB,UAAU,OACVwE,MACkE,aAA9D/F,aAAagS,QAAQ9R,EAAKzB,iCAAqDuB,aAAagS,QAAQ9R,EAAKzB,gCACjG,YAAV,QAEFoL,QAAS,WACP7J,aAAaC,QAAQC,EAAKzB,+BAAgC,YAC1D+R,EAAQsB,WAId,uBAAM1K,MAAOhG,EAAE,mDAAf,SACE,eAAC,KAAD,CACEsD,KAAK,QACLnD,UAAU,OACVwE,MACiE,cAA9D/F,aAAagS,QAAQ9R,EAAKzB,gCAC3B,QAAU,YAEZoL,QAAS,WACP7J,aAAaC,QAAQC,EAAKzB,+BAAgC,aAC1D+R,EAAQsB,WAId,eAAC,GAAD,CACEvQ,UAAU,+CACV4M,SAAU,IAAInJ,KAAKhF,aAAagS,QAAQ9R,EAAK3B,kCAC7C+P,aAAa,EACbF,SAAU,SAACQ,GACT,IAAI2lC,EAAelpC,KAAOuD,GACtB4lC,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAK3B,gCAAiCg2C,EAAahpC,OAAO,eAC/EvL,aAAaC,QAAQC,EAAK1B,iCAAkCg2C,EAAcjpC,OAAO,eAEjF5P,QAAQC,IAAIkW,MAEZtB,EAAQsB,OAEVvD,gBAAiBnN,EAAE,sCAErB,gBAAC,KAAOugB,KAAR,CAAapgB,UAAU,sCAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0qC,EAAelpC,KAAOrL,aAAagS,QAAQ9R,EAAK3B,kCAAkCk2C,SAAS,EAAG,QAC9FD,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAK3B,gCAAiCg2C,EAAahpC,OAAO,eAC/EvL,aAAaC,QAAQC,EAAK1B,iCAAkCg2C,EAAcjpC,OAAO,eAEjFiF,EAAQsB,SAEZ,eAAC,KAAD,CACEpN,KAAK,MACLqB,MAAM,YACN8D,QAAU,WACR,IAAI6qC,EAAkBrpC,OAClBspC,EAAmBtpC,KAAOqpC,GAAiBlxC,IAAI,EAAG,QAEtDxD,aAAaC,QAAQC,EAAK3B,gCAAiCm2C,EAAgBnpC,OAAO,eAClFvL,aAAaC,QAAQC,EAAK1B,iCAAkCm2C,EAAiBppC,OAAO,eAEpFiF,EAAQsB,SAEZ,eAAC,KAAD,CACEpN,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0qC,EAAelpC,KAAOrL,aAAagS,QAAQ9R,EAAK3B,kCAAkCiF,IAAI,EAAG,QACzFgxC,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAK3B,gCAAiCg2C,EAAahpC,OAAO,eAC/EvL,aAAaC,QAAQC,EAAK1B,iCAAkCg2C,EAAcjpC,OAAO,eAEjFiF,EAAQsB,iBAKlB,gBAAC,KAAKtQ,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACIzD,EAAKowC,qBAAqB5sC,KAAI,gBAAGkH,EAAH,EAAGA,KAAMshB,EAAT,EAASA,aAAT,OAC9B,+BACE,gBAAC,KAAD,WACE,eAAC,KAAK/oB,OAAN,UACE,gBAAC,KAAKwC,MAAN,WACE,6BAAI0B,KAAOuD,GAAMrD,OAAO,UAD1B,IACwC,IACtC,uBAAMhK,UAAU,aAAhB,SACG8J,KAAOuD,GAAMrD,OAAO,aAI3B,eAAC,KAAK3D,KAAN,UACKsoB,EAAa3oB,OACd,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACGsoB,EAAaxoB,KAAI,gBACdktC,EADc,EACdA,eACAzJ,EAFc,EAEdA,cACAv8B,EAHc,EAGdA,KACA+tB,EAJc,EAIdA,yBAEAuL,GANc,EAKdtX,wBALc,EAMdsX,WACA2M,EAPc,EAOdA,QACAt4B,EARc,EAQdA,cARc,OAShB,gBAAC,KAAM/a,IAAP,WACE,gBAAC,KAAMyF,IAAP,WAEGoE,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAO,MAFzC,IAEiD,MAC9CF,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAO,MAHvC,IAGgD,IAC1B,aAAlB4/B,EAAgC,eAAC,KAAD,CAAOplC,MAAM,UAAb,SAAwB3E,EAAE,kBAA2B,QAEzF,gBAAC,KAAM6F,IAAP,WAEG01B,EAAyBlC,qBAAqBx0B,KAFjD,IAEwD,IACtD,wBAAM1E,UAAU,aAAhB,qBAAsCo7B,EAAyB12B,WAEjE,eAAC,KAAMgB,IAAP,IAIA,eAAC,KAAMA,IAAP,UAEE,eAAC,GAAD,CAAczC,MAAO+X,MAEvB,eAAC,KAAMtV,IAAP,UACE,eAAC,KAAD,CAEE1F,UAAU,aACVqE,KAAK,SACL0V,QAAM,EACNvV,MAAM,mBACNwV,eAAgBna,EAAE,mBAClBkD,MAAO,CACL,eAAC,KAASqB,KAAV,2BAAoByF,gBACpB,gBAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,gBAA9D,UACE,eAAC,KAASmxC,YAAV,GAA2B1pC,gBAC3B,eAAC,KAASzF,KAAV,CAEEovC,MAAO3zC,EAAE,oDACT4zC,UAAU,YACVtwC,KAAK,SACLmF,QAAS,kBAAM3E,EAAQX,KAAK,mCAAqCqwC,IALnE,SAMKxzC,EAAE,iBALAgK,kBAHkBA,gBAW3B,gBAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,gBAA9D,UACE,eAAC,KAASmxC,YAAV,GAA2B1pC,gBAC3B,eAAC,WAAD,CAAUilB,SAAU8jB,GAApB,SACG,SAACc,EAAD,KAA8B/wC,KAA9B,OACG,eAAC,KAASyB,KAAV,CAEEovC,MAAO3zC,EAAE,oDACT4zC,UAAU,SACVtwC,KAAK,UACLmF,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,4CACd+R,eAAgB,+BACb9H,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAO,MADzB,IACiC,MAC9CF,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAO,MAFvB,IAE+B,IAF/B,MAEuC,IACpDoxB,EAAyBlC,qBAAqBx0B,KAHjC,IAGwC,IACrD02B,EAAyB12B,OAJJmF,gBAMxBgI,WAAYhS,EAAE,iCACdiS,eAAgB4hC,EAChB3hC,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAIglC,IAELtnC,eAAgB,CACjB,CAAEC,MAAOqiB,GAAwBtlB,UAAWwH,WAtBpD,SA0BC1Q,EAAE,mBAzBIgK,kBAHyCA,kBAF7BA,kBAnBxBA,oBAtBKA,wBArBEhK,EAAE,0CAXxBgK,qBAyHhB,gBAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,gBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,+BADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,kCAG/C,+BACE,eAAC,KAAD,CACEG,UAAU,aACVwE,MAAM,OACND,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAKxB,uCAAwC,IAClEsB,aAAaC,QAAQC,EAAKg1C,mCAAoC,IAC9Dl1C,aAAaC,QAAQC,EAAKvB,sCAAuC,IACjE6R,EAAQsB,OARZ,SAWG1Q,EAAE,qBAGP,qBAAIG,UAAU,YAAd,SAA2BH,EAAE,oBAC7B,eAAC,GAAD,CAA4B8C,KAAMA,EAAMsM,QAASA,IACjD,8BAAKpP,EAAE,kBACP,eAAC,GAAD,CAAcoO,WAAW,0BAvP7B,eAAC,GAAD,CAAajG,UAAWnI,EAAE,+BAA1B,SACE,6BACGA,EAAE,mDEpFNmvB,GAAqB5kB,OAAaC,MAAM,CACjDu/B,cAAex/B,OACZG,SAAS1K,YAAE,uBACdu7B,yBAA0BhxB,OACvBG,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,uBACd8mC,UAAWv8B,OACR4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,uBACdyzC,QAASlpC,OACN4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,yBCKHD,kBAhBM,SAAC,GAAD,IAAEC,EAAF,EAAEA,EAAG+M,EAAL,EAAKA,SAAL,IAAeC,gBAAf,MAAwB,SAAApE,GAAC,OAAEA,GAA3B,MAA8BqE,cAA9B,MAAqC,SAAArE,GAAC,OAAEA,GAAxC,MAA2CzI,iBAA3C,MAAqD,eAArD,MAAqE4zC,iBAArE,aAAqF5mC,uBAArF,MAAqG,GAArG,SACjB,eAAC,KAAD,CACIC,YAAapN,EAAE,iBACf8M,WAAY9M,EAAE,gCACd+M,SAAUA,EACVI,gBAAkBA,GAAqCnN,EAAE,+BACzDkN,YAAa6mC,EACbC,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACf/zC,UAAWA,EACXoN,aAAa,SACbP,SAAU,SAACQ,GAAD,OAAUR,EAASQ,IAC7BP,OAAQ,kBAAMA,UCgKLlN,iBAAkByD,aA/JH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASqQ,EAAf,EAAeA,UAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAiBkO,GAAjG,EAAwF/F,QAAxF,EAAiG+F,YAAjG,OAC5B,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAChB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,qCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,uCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,gBACL1E,UAAY6K,EAAO++B,cAAiB,0BAA4B,eAChE5+B,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,WAAd,SAAqCpD,EAAE,0CAATgK,gBAC9B,yBAAQ5G,MAAM,SAAd,SAAmCpD,EAAE,wCAATgK,mBAE9B,eAAC,KAAD,CAAcnF,KAAK,gBAAgBuG,UAAU,OAAOjL,UAAU,wBAErC,YAAxB0L,EAAOk+B,cAA+B,GACvC,gBAAC,KAAK9+B,MAAN,CAAYC,MAAOlL,EAAE,2CAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAOmpC,kBAAqB,0BAA4B,eACpEhpC,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,oBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,sBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,qBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,qBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,mBAEzB,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,wBAGtE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,2BACL1E,UAAY6K,EAAOuwB,yBAA4B,0BAA4B,eAC3EpwB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU+mB,0BAA0Bz5B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7C,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKy3B,qBAAqBx0B,KAA9D,MAAuEjD,EAAKiD,OAA/CmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,2BAA2BuG,UAAU,OAAOjL,UAAU,4BAgB/E,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAgC,YAAxBW,EAAOk+B,cAA+B/pC,EAAE,gBAAkBA,EAAE,sBAAhF,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAGnC,YAAxB0L,EAAOk+B,cAA+B,GACvC,eAAC,KAAKlkC,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,+CAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAKhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAO87B,UAAa,0BAA4B,eAC5D/5B,SAAUlB,EAAOi7B,UACjB95B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,IAC3C6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAOyoC,QAAW,0BAA4B,eAC1D1mC,SAAUlB,EAAO4nC,QACjBzmC,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGpC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAjD,SACK/Z,EAAE,8BC1ITo0C,GAAqB74C,YAAH,wmBA+BlB84C,G,oDACJ,WAAYvsC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,uCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf8D,EAAUnE,KAAKmI,MAAMhE,QACrBiW,EAAa,yBAEnB,OACE,eAAC,GAAD,UACE,sBAAK5Z,UAAU,eAAf,SAEE,eAAC,QAAD,CAAOgM,MAAOuiB,GAAwBxlB,UAAa,CAACgG,UAAU,GAA9D,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OACX,eAAC,KAAD,UACE,6BAAI5C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,KAAD,UACE,6BAAI7C,EAAE,gCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,gBAAC,KAAD,WACE,eAAC,KAAKiD,OAAN,CAAaC,MAAOhG,EAAE,oBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,uCAEjB,eAAC,WAAD,CAAUivB,SAAUmlB,GAAoBn3B,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAxE,SACL,SAACkkB,EAAD,KAAuBn7B,KAAvB,OACC,eAAC,KAAD,CACE2I,cAAe,CACb0P,eAAe,EACf4uB,cAAe,SACfoK,kBAAmB,EACnB5Y,yBAA0B,GAC1BjX,UAAW,IAAI1gB,KACfkjC,UAAW,IAAIljC,KACf6vC,QAAS,IAAI7vC,MAEf+H,iBAAkBwjB,GAClBvjB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAII0Y,EAJA4vB,EAAoBtoC,EAAOsoC,kBACH,YAAxBtoC,EAAOk+B,gBACToK,EAAoB,GAIlB5vB,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGrB0Z,EAAmB,CAAE/0B,UAAW,CAC9B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB4uB,cAAel+B,EAAOk+B,cACtBoK,kBAAmBA,EACnB5Y,yBAA0B1vB,EAAO0vB,yBACjCjX,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACTuiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,WAEpCvnC,eAAgB,CACf,CAACC,MAAOqiB,GAAwBtlB,UAAWwH,SAE9CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlDxB,SAsDG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAQmI,EAAjE,EAAiEA,QAAjE,OACK,gBAAC,GAAD,CACEG,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACT+F,WAAYA,EARd,UAUGxf,QAAQC,IAAI,oBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GACZzQ,QAAQC,IAAIwZ,iBASrB,gBAAC,KAAKnO,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,sBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IADpC,UAEE,eAAC,KAAD,CAAM9K,OAAO,KAAKpK,KAAK,kBAFzB,IAE6C7E,EAAE,qBAGjD,eAAC,GAAD,CAAcoO,WAAW,qC,GAtIZ1F,aAkJtB3I,iBAAkByD,YAAW6wC,KJ9J7Bt0C,kBApCa,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAYkmC,EAAlB,EAAkBA,cAAlB,OACxB,gBAAC,KAAKrpC,MAAN,CAAYoD,aAAa,EAAzB,UAC+B2kC,GAAV,SAAf5kC,EACuC6kC,GAAxB,uBAAf7kC,EAEF,eAAC,GAAD,CACE7L,SAAS,sBACTD,WAAW,SAFb,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAI,oCAAsCixC,EAC1ChxC,KAAK,SACL5C,OAAQsyC,GALZ,SAOKhzC,EAAE,iBANEgK,kBASX,eAAC,GAAD,CACEzH,SAAS,sBACTD,WAAW,SAFb,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAI,kDAAoDixC,EACxDhxC,KAAK,QACL5C,OAAQuyC,GALZ,SAOKjzC,EAAE,+BANEgK,wBKpBJjK,kBATa,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OAC1B,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,yBACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,0B,ICUnEu0C,G,oDACJ,WAAYzsC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,wCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WAAU,IAAD,OACD9H,EAAIL,KAAKmI,MAAM9H,EAEfs0C,EADQ30C,KAAKmI,MAAMjE,MACGkD,OAAO4pB,eAC7B6jB,EAAkB70C,KAAKmI,MAAM0sC,gBAC7BC,EAAe90C,KAAKmI,MAAM2sC,aAC1BC,EAAiB/0C,KAAKmI,MAAM4sC,eAElC,OACE,eAAC,QAAD,CAAOvoC,MAAOsiB,GAAuBvlB,UAAa,CAACsF,GAAI8lC,EAAeplC,UAAU,GAAhF,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OACX,6BAAI5C,EAAE,+BAGR,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,6BAAI7C,EAAE,8BAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM2I,EAAgB3I,EAAK+jC,aAErB8N,EAAmBx8B,GAAsB1M,EAAcq7B,WACvD8N,ECzDT,YAAgF,IAAxC50C,EAAuC,EAAvCA,EAAGsS,EAAoC,EAApCA,SAAUuiC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,UACxE,OAAO90C,EAAE,uBAAyB,KAAOsS,EAAW,KAAOuiC,EAAe,OAAS5qC,KAAO6qC,GAAW3qC,OAAO,MDwDnF4qC,CAA8B,CAC7C/0C,EAAGA,EACHsS,SAAU7G,EAAc8vB,yBAAyBlC,qBAAqBx0B,KACtEgwC,aAAcppC,EAAc8vB,yBAAyB12B,KACrDiwC,UAAWH,IAGb,OACE,gBAAC,KAAD,WACE,eAAC,KAAK5uC,OAAN,CACEC,MAAOhG,EAAE,kBACTsgB,SAAUs0B,EAFZ,SAIE,eAAC,GAAD,MAEF,gBAAC,KAAKx0C,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACIkuC,EACA,gBAAC,KAAD,WACE,eAAC,KAAK1uC,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAa,EAAKT,MAAMktC,eAE1B,eAAC,KAAKxuC,KAAN,UACG,EAAKsB,MAAM5H,cAND,EAAK4H,MAAM5H,WAW9B,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACGmuC,EACD,8BAAK10C,EAAE,kBACP,eAAC,GAAD,CAAqBoO,WAAYomC,EAAiBF,cAAeA,oB,GAlEjD5rC,aA2ElC6rC,GAAoB5rC,aAAe,CACjC8rC,cAAc,EACdC,eAAgB,GAChBM,WAAYh1C,YAAE,qCAGDD,I,GAAAA,iBAAkByD,YAAW+wC,KE1EtCjlB,GAAqB/zB,YAAH,8hBA2BlB05C,G,oDACJ,WAAYntC,GAAQ,IAAD,8BACjB,cAAMA,GACNvN,QAAQC,IAAI,wCACZD,QAAQC,IAAIsN,GAHK,E,2CAMnB,WACE,IAAM9H,EAAIL,KAAKmI,MAAM9H,EACf6D,EAAQlE,KAAKmI,MAAMjE,MACnBC,EAAUnE,KAAKmI,MAAMhE,QACrB0K,EAAK3K,EAAMkD,OAAO4pB,eAClB5W,EAAa,yBAEnB,OACE,eAAC,GAAD,UACE,sBAAK5Z,UAAU,eAAf,SACE,eAAC,QAAD,CAAOgM,MAAOsiB,GAAuBvlB,UAAa,CAACsF,GAAIA,EAAIU,UAAU,GAArE,SACG,YAAwC,IAArCtM,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAoB,EAAdsM,QAExB,GAAIxM,EAAS,OACX,eAAC,GAAD,CAAqB4xC,gBAAgB,OAArC,SACE,6BAAIx0C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,CAAqB2xC,gBAAgB,OAArC,SACE,6BAAIx0C,EAAE,gCAKZzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ2I,EAAgB3I,EAAK+jC,aAErB8N,EAAmBx8B,GAAsB1M,EAAcq7B,WACvDoO,EAAiB/8B,GAAsB1M,EAAcgoC,SAE3D,OACE,eAAC,GAAD,CACEe,gBAAgB,OADlB,SAGE,eAAC,WAAD,CAAUvlB,SAAUK,GAAoBrS,YAAa,kBAAMnZ,EAAQX,KAAK4W,IAAxE,SACC,SAACo7B,EAAD,KAA8BryC,KAA9B,OACC,eAAC,KAAD,CACE2I,cAAe,CACb0P,cAAe1P,EAAc0P,cAC7B4uB,cAAet+B,EAAcs+B,cAC7BoK,kBAAmB1oC,EAAc0oC,kBACjC5Y,yBAA0B9vB,EAAc8vB,yBAAyB/sB,GACjE8V,UAAW7Y,EAAc6Y,UACzBC,QAAS9Y,EAAc8Y,QACvBuiB,UAAW6N,EACXlB,QAASyB,GAEXvpC,iBAAkBwjB,GAClBvjB,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAII0Y,EAJA4vB,EAAoBtoC,EAAOsoC,kBACH,YAAxBtoC,EAAOk+B,gBACToK,EAAoB,GAIlB5vB,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGrB4wB,EAA0B,CAAEjsC,UAAW,CACrC6C,MAAO,CACLyC,GAAIA,EACJ2M,cAAetP,EAAOsP,cACtB4uB,cAAel+B,EAAOk+B,cACtBoK,kBAAmBA,EACnB5Y,yBAA0B1vB,EAAO0vB,yBACjCjX,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACTuiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,WAEpCvnC,eAAgB,CACf,CAACC,MAAOqiB,GAAwBtlB,UAAWwH,SAE9CtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OApDxB,SAwDG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAQmI,EAAjE,EAAiEA,QAAjE,OACC,gBAAC,GAAD,CACEG,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACT+F,WAAYA,EARd,UAUGxf,QAAQC,IAAI,oBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GACZzQ,QAAQC,IAAIwZ,yB,GAvHEtL,aAsI1B3I,iBAAkByD,YAAWyxC,KClK7Bl1C,sBAxBf,YAAiC,IAC3BI,EAD0B,IAAXwE,MAGnB,YAH8B,MAAL,GAAK,GAI5B,IAAK,UACHxE,EAAU,aACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,IAAK,SACHA,EAAU,YACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,QACEA,EAAU,eAGd,OAAO,uBAAMA,UAAW,eAAiBA,OCpBpC,SAASuQ,KACd,IAAIkiC,EACA1d,EACAiH,EACA9C,EAEA1oB,EAAY,CACdykC,oBAAqB,uBACrBvC,SAAUj0C,aAAagS,QAAQ9R,EAAKtB,4BACpCs1C,UAAWl0C,aAAagS,QAAQ9R,EAAKrB,8BA+BvC,OA5BAm1C,EAAUh0C,aAAagS,QAAQ9R,EAAKpB,8BAElCiT,EAAUiiC,QAAUA,GAGtB1d,EAAwBt2B,aAAagS,QAAQ9R,EAAKnB,mCAEhDgT,EAAUukB,sBADRA,GAGgC,GAGpCiH,EAAoBv9B,aAAagS,QAAQ9R,EAAKlB,+BAE5C+S,EAAUwrB,kBADRA,GAG4B,GAGhC9C,EAAuBz6B,aAAagS,QAAQ9R,EAAKjB,kCAE/C8S,EAAU0oB,qBADRA,GAG+B,GAGnC9+B,QAAQC,IAAImW,GAELA,EAIF,SAAS0kC,GAAkBxwC,EAAMkY,GACtC,IAAIu4B,GAAY,EAEhB,OAAQv4B,GACN,IAAK,MACHu4B,EAAY,YACZ,MACF,IAAK,YACHA,EAAY,aACZ,MACF,IAAK,QACHA,EAAY,cAIhB,OAAIA,EACK,uBAAMn1C,UAAWm1C,EAAjB,SAA6BzwC,IAE7BA,EAKJ,SAAS0wC,GAAuBxsC,GACrC,IAAIpE,EAEJ,OAAQoE,GACN,IAAK,MACHpE,EAAQ,UACR,MACF,IAAK,YACHA,EAAQ,UACR,MACF,IAAK,OACHA,EAAQ,SACR,MACF,QACEA,EAAQ,UAGZ,OAAO,eAAC,GAAD,CAAYA,MAAOA,IAIrB,SAAS6wC,GAAmBx1C,EAAG+I,EAAQ/D,EAAak0B,EAASuc,GAElE,OAAIvc,EACK,kCAAOl5B,EAAE,mBAAT,KAA+By1C,EAA/B,OAGK,YAAV1sC,EACK/D,OADT,ECxFF,SAAS8L,GAAgB1N,GACvB,IAAI2N,EAAenS,aAAagS,QAAQxN,GACxC,OAAI2N,GAGK,GAKX,SAASG,GAA6BD,EAAK7N,EAAOgM,GAChDxQ,aAAaC,QAAQoS,EAAK7N,GAC1BgM,EAAQsB,MAIV,IAAMglC,GAAc,kCA2DL31C,iBAAkByD,aAxDH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY8C,GAAf,EAAMgB,QAAN,EAAehB,MAAMsM,EAArB,EAAqBA,QAArB,OAC5B,iCAEE,0BACEjP,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKjB,kCACnCmP,SAAW,SAACgE,GACVE,GACEpS,EAAKjB,iCACLmT,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,0CAATgK,gBACrBlH,EAAK21B,sBAAsBh3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAIjC,0BACE7J,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKnB,mCACnCqP,SAAW,SAACgE,GACVE,GACEpS,EAAKnB,kCACLqT,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,2CAATgK,gBACrBlH,EAAK8xB,uBAAuBnzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAIjC,0BACE7J,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKlB,+BACnCoP,SAAW,SAACgE,GACVE,GACEpS,EAAKlB,8BACLoT,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,uCAATgK,gBACrBlH,EAAKi5B,mBAAmBt6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,6BCnDhCpL,aAAagS,QAAQ9R,EAAKtB,8BAC7BjD,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKtB,2BAA4ByM,OAASE,OAAO,eACtEvL,aAAaC,QAAQC,EAAKrB,4BAA6BwM,OAAS7H,IAAI,EAAG,QAAQ+H,OAAO,gBA6IzEpK,I,eAAAA,iBAAkByD,aAzIjC,YAAwE,IAAxCxD,EAAuC,EAAvCA,EAAG8D,EAAoC,EAApCA,QAAS5D,EAA2B,EAA3BA,SAAU4C,EAAiB,EAAjBA,KAAMsM,EAAW,EAAXA,QAE1D,OACE,eAAC,GAAD,UACE,sBAAKjP,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAtB,SACE,uBAAKG,UAAU,sBAAf,UACE,uBAAM6F,MAAOhG,EAAE,6CAAf,SACE,eAAC,KAAD,CACEsD,KAAK,OACL4jB,QAAQ,OACR/mB,UAAU,OACVwE,MAC6D,aAAzD/F,aAAagS,QAAQ9R,EAAKpB,4BAAgDkB,aAAagS,QAAQ9R,EAAKpB,2BAC5F,YAAV,QAEF+K,QAAS,WACP7J,aAAaC,QAAQC,EAAKpB,0BAA2B,YACrD0R,EAAQsB,WAId,uBAAM1K,MAAOhG,EAAE,8CAAf,SACE,eAAC,KAAD,CACEsD,KAAK,QACLnD,UAAU,OACVwE,MAC4D,cAAzD/F,aAAagS,QAAQ9R,EAAKpB,2BAC3B,QAAU,YAEZ+K,QAAS,WACP7J,aAAaC,QAAQC,EAAKpB,0BAA2B,aACrD0R,EAAQsB,WAId,eAAC,GAAD,CACEvQ,UAAU,+CACV4M,SAAU,IAAInJ,KAAKhF,aAAagS,QAAQ9R,EAAKtB,6BAC7C0P,aAAa,EACbF,SAAU,SAACQ,GACT,IAAI2lC,EAAelpC,KAAOuD,GACtB4lC,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAKtB,2BAA4B21C,EAAahpC,OAAO,eAC1EvL,aAAaC,QAAQC,EAAKrB,4BAA6B21C,EAAcjpC,OAAO,eAE5E5P,QAAQC,IAAIkW,MAEZtB,EAAQsB,OAEVvD,gBAAiBnN,EAAE,iCAErB,gBAAC,KAAOugB,KAAR,CAAapgB,UAAU,sCAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0qC,EAAelpC,KAAOrL,aAAagS,QAAQ9R,EAAKtB,6BAA6B61C,SAAS,EAAG,QACzFD,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAKtB,2BAA4B21C,EAAahpC,OAAO,eAC1EvL,aAAaC,QAAQC,EAAKrB,4BAA6B21C,EAAcjpC,OAAO,eAE5EiF,EAAQsB,SAEZ,eAAC,KAAD,CACEpN,KAAK,SACLqB,MAAM,YACN8D,QAAU,WACR,IAAI6qC,EAAkBrpC,OAClBspC,EAAmBtpC,KAAOqpC,GAAiBlxC,IAAI,EAAG,QAEtDxD,aAAaC,QAAQC,EAAKtB,2BAA4B81C,EAAgBnpC,OAAO,eAC7EvL,aAAaC,QAAQC,EAAKrB,4BAA6B81C,EAAiBppC,OAAO,eAE/EiF,EAAQsB,SAEZ,eAAC,KAAD,CACEpN,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0qC,EAAelpC,KAAOrL,aAAagS,QAAQ9R,EAAKtB,6BAA6B4E,IAAI,EAAG,QACpFgxC,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAKtB,2BAA4B21C,EAAahpC,OAAO,eAC1EvL,aAAaC,QAAQC,EAAKrB,4BAA6B21C,EAAcjpC,OAAO,eAE5EiF,EAAQsB,iBAKlB,gBAAC,KAAKtQ,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,gBAD/B,SAEE,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,0BADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,6BAG7C8C,EACA,iCACE,+BACE,eAAC,KAAD,CACE3C,UAAU,cACVwE,MAAM,OACND,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAKnB,kCAAmC,IAC7DiB,aAAaC,QAAQC,EAAKlB,8BAA+B,IACzDgB,aAAaC,QAAQC,EAAKjB,iCAAkC,IAC5DuR,EAAQsB,OARZ,SAWG1Q,EAAE,qBAGP,qBAAIG,UAAU,YAAd,SAA2BH,EAAE,oBAC7B,eAAC,GAAD,CAAuB8C,KAAMA,EAAMsM,QAASA,OAE9C,GACF,8BAAKpP,EAAE,kBACP,eAAC,GAAD,CAAcoO,WAAW,6BCnK1BunC,GAAoBp6C,YAAH,2uEAgHjBq6C,GAAkBr6C,YAAH,44DAkGfmzB,GAAyBnzB,YAAH,u5CAqEtBs6C,GAAet6C,YAAH,4pBCtOnBu6C,GAAwBv6C,YAAH,mKA+CtBqD,aAAagS,QAAQ9R,EAAKtB,8BAC7BjD,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKtB,2BAA4ByM,OAASE,OAAO,eACtEvL,aAAaC,QAAQC,EAAKrB,4BAA6BwM,OAAS7H,IAAI,EAAG,QAAQ+H,OAAO,gBA+NzEpK,qBAAkByD,aA3NjC,YAA2C,IAAfxD,EAAc,EAAdA,EACpB4gB,GADkC,EAAX9c,QACTmF,qBAAWrI,KAEzB+lC,GADa/lB,EAAY9T,WACZ8T,EAAYC,kBAE/B,EAAwCle,YAASgzC,GAAmB,CAClEzsC,UAAWwH,OADN9N,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAAMsM,EAA7B,EAA6BA,QAG7B,EAA8B7D,YAAYuqC,IAAnCC,EAAP,oBAEA,OAAInzC,EAEA,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAKR6C,EAEA,eAAC,GAAD,UACE,6BAAI7C,EAAE,gCAKI8C,EAAKkzC,gBAGR7vC,OASX,eAAC,GAAD,CAAqBrD,KAAMA,EAAMsM,QAASA,EAA1C,SACItM,EAAKkzC,gBAAgB1vC,KAAI,gBAAGkH,EAAH,EAAGA,KAAMwkB,EAAT,EAASA,QAAT,OACzB,+BACE,gBAAC,KAAD,WACE,eAAC,KAAKjsB,OAAN,UACE,gBAAC,KAAKwC,MAAN,WACE,6BAAI0B,KAAOuD,GAAMrD,OAAO,UAD1B,IACwC,IACtC,uBAAMhK,UAAU,aAAhB,SACG8J,KAAOuD,GAAMrD,OAAO,aAIxB6nB,EAAQ7rB,OACT,gBAAC,KAAD,CAAOC,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,IACA,eAAC,KAAMA,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,MAPcC,kBAUlB,eAAC,KAAMxD,KAAP,UACGwrB,EAAQ1rB,KAAI,gBACTktC,EADS,EACTA,eACAzJ,EAFS,EAETA,cACAv8B,EAHS,EAGTA,KACAzE,EAJS,EAITA,OACAmwB,EALS,EAKTA,QACAuc,EANS,EAMTA,YACAzwC,EAPS,EAOTA,YACA6N,EARS,EAQTA,QACAkK,EATS,EASTA,KACAk5B,EAVS,EAUTA,SACAC,EAXS,EAWTA,MACA3a,EAZS,EAYTA,yBACArG,EAbS,EAaTA,sBACAiH,EAdS,EAcTA,kBACA2K,EAfS,EAeTA,UACA2M,EAhBS,EAgBTA,QACAt4B,EAjBS,EAiBTA,cAjBS,OAkBX,gBAAC,KAAM/a,IAAP,WACE,eAAC,KAAMyF,IAAP,UACG0vC,GAAuBxsC,KAE1B,gBAAC,KAAMlD,IAAP,WAEGoE,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAOw8B,GAFzC,IAEuD,MACpD18B,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAOw8B,GAHvC,IAGsD,IAChC,aAAlBoD,EAAgC,eAAC,KAAD,CAAOplC,MAAM,UAAb,SAAwB3E,EAAE,kBAA2B,KAJzF,IAIgG,wBAC9F,wBAAOG,UAAU,aAAjB,SAA+Bq1C,GAAmBx1C,EAAG+I,EAAQ/D,EAAak0B,EAASuc,QAErF,gBAAC,KAAM5vC,IAAP,WAEG01B,EAAyBlC,qBAAqBx0B,KAFjD,IAEuD,wBACrD,wBAAO1E,UAAU,aAAjB,SAA+Bo7B,EAAyB12B,UAE1D,gBAAC,KAAMgB,IAAP,WAEGqvB,EAAsBrwB,KAFzB,IAE+B,wBAC7B,wBAAO1E,UAAU,aAAjB,SACIg8B,EAAqBA,EAAkBt3B,KAAM,QAGnD,gBAAC,KAAMgB,IAAP,WAEKgN,EACCwiC,GAAkBxiC,EAAQgK,SAAUE,GACpC,uBAAM5c,UAAU,WAAhB,SAA4BH,EAAE,iCAJpC,IAKI,wBACF,wBAAOG,UAAU,aAAjB,SACI81C,EAAYZ,GAAkBY,EAASp5B,SAAUq5B,GAAS,QAGhE,eAAC,KAAMrwC,IAAP,UAEE,eAAC,GAAD,CAAczC,MAAO+X,MAEvB,eAAC,KAAMtV,IAAP,UACE,eAAC,KAAD,CAEE1F,UAAU,aACVqE,KAAK,SACL0V,QAAM,EACNvV,MAAM,mBACNwV,eAAgBna,EAAE,mBAClBkD,MAAO,CACL,eAAC,GAAD,CAAiCZ,WAAW,OAAOC,SAAS,yBAA5D,SACE,eAAC,IAAD,CAAMc,GAAI,sCAAwCmwC,EAAiB,IAAMhmC,EAAzE,SACE,eAAC,KAASjJ,KAAV,CAEEjB,KAAK,eAFP,SAIKtD,EAAE,uBAHAgK,mBAHgBA,gBAU3B,eAAC,GAAD,CAAiC1H,WAAW,OAAOC,SAAS,yBAA5D,SACE,eAAC,IAAD,CAAMc,GAAI,4CAA8CmwC,EAAiB,IAAMhmC,EAA/E,SACE,eAAC,KAASjJ,KAAV,CAEEjB,KAAK,cAFP,SAGKtD,EAAE,kDAFAgK,mBAHgBA,gBAS3B,eAAC,GAAD,CAAiC1H,WAAW,OAAOC,SAAS,yBAA5D,SACE,eAAC,IAAD,CAAMc,GAAI,gCAAkCmwC,EAAiB,IAAMhmC,EAAnE,SACE,eAAC,KAASjJ,KAAV,CAEEjB,KAAK,SAFP,SAIGtD,EAAE,iBAHEgK,mBAHgBA,gBAU3B,gBAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,gBAA9D,UACE,eAAC,KAASmxC,YAAV,GAA2B1pC,gBAC3B,eAAC,IAAD,CAAM3G,GAAI,8BAAgCmwC,EAA1C,SACE,eAAC,KAASjvC,KAAV,CAEEovC,MAAO3zC,EAAE,0CACT4zC,UAAU,YACVtwC,KAAK,SAJP,SAMKtD,EAAE,iBALAgK,oBAJgBA,gBAa3B,gBAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,gBAA9D,UACE,eAAC,KAASmxC,YAAV,GAA2B1pC,gBAC3B,uBAAM7J,UAAU,WAAhB,SACA,eAAC,KAASoE,KAAV,CAEEovC,MAAO3zC,EAAE,0CACT4zC,UAAU,SACVtwC,KAAK,UACLmF,QAAS,YA/NlB,SAAC,GAAoF,IAAnFzI,EAAkF,EAAlFA,EAAG8R,EAA+E,EAA/EA,WAAYC,EAAmE,EAAnEA,eAAgBC,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,eAAgBC,EAAuB,EAAvBA,kBAClFC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAgBlS,UAAU,YAA1B,UACE,8BAAKH,EAAE,4BACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,+BACjE,0BACEG,UAAU,iBACVsI,QAAS,WACPwJ,EAAeC,GACZ9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,UAmBE,eAAC,KAAD,CAAMxN,KAAK,YAnBb,IAmB2B7E,EAAE,mCAxBrBgK,mBA4NgB6H,CAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,uCACd+R,eAAgB,+BACb9H,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAO,MADzB,IACiC,MAC9CF,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAO,MAFvB,IAE+B,IAF/B,MAEuC,IACpDoxB,EAAyBlC,qBAAqBx0B,KAHjC,IAGwC,IACrD02B,EAAyB12B,KACzBqwB,EAAsB+O,OALDj6B,gBAOxBgI,WAAYhS,EAAE,4BACdiS,eAAgB8jC,EAChB7jC,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAIglC,IAELtnC,eAAgB,CACjB,CAAEC,MAAOwpC,GAAmBzsC,UAAWwH,WAvB/C,SA2BC1Q,EAAE,mBA1BIgK,oBAJkBA,kBAjDxBA,oBAvCKA,wBAhCH,eAAC,KAAKxD,KAAN,UAAYxG,EAAE,qCAV7BgK,qBAVd,eAAC,GAAD,UACE,6BACGhK,EAAE,uCCtIEm2C,GAAe5rC,OAAaC,MAAM,CAC3Cu/B,cAAex/B,OACZG,SAAS1K,YAAE,uBACdu7B,yBAA0BhxB,OACvBG,SAAS1K,YAAE,uBACdk1B,sBAAuB3qB,OACpBG,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,uBACd8mC,UAAWv8B,OACR4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,uBACdyzC,QAASlpC,OACN4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,uBACdo2C,OAAQ7rC,OACR8rC,aAAc9rC,SCgNDxK,iBAAkByD,aAhNT,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYmU,GAAf,EAAMrQ,QAAN,EAAeqQ,WAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAiB/C,GAAjG,EAAwFkL,QAAxF,EAAiGlL,WAAjG,OACtB,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAChB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,gCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,CAAYC,MAAOlL,EAAE,kCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,gBACL1E,UAAY6K,EAAO++B,cAAiB,0BAA4B,eAChE5+B,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,WAAd,SAAqCpD,EAAE,qCAATgK,gBAC9B,yBAAQ5G,MAAM,SAAd,SAAmCpD,EAAE,mCAATgK,mBAE9B,eAAC,KAAD,CAAcnF,KAAK,gBAAgBuG,UAAU,OAAOjL,UAAU,wBAErC,YAAxB0L,EAAOk+B,cAA+B,GACvC,gBAAC,KAAK9+B,MAAN,CAAYC,MAAOlL,EAAE,sCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAOmpC,kBAAqB,0BAA4B,eACpEhpC,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,oBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,sBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,qBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,qBAATgK,gBACvB,yBAAQ5G,MAAM,IAAd,SAA8BpD,EAAE,mBAATgK,mBAEzB,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,wBAGtE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,2BACL1E,UAAY6K,EAAOuwB,yBAA4B,0BAA4B,eAC3EpwB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU+mB,0BAA0Bz5B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7C,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKy3B,qBAAqBx0B,KAA9D,MAAuEjD,EAAKiD,OAA/CmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,2BAA2BuG,UAAU,OAAOjL,UAAU,0BAG7E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAO+wB,mBAAsB,0BAA4B,eACrE5wB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,KAATgK,gBACrBmK,EAAU4nB,mBAAmBt6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,6BAIzE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,wBACL1E,UAAY6K,EAAOkqB,sBAAyB,0BAA4B,eACxE/pB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUygB,uBAAuBnzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC1C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,wBAAwBuG,UAAU,OAAOjL,UAAU,wBAExE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAgC,YAAxBW,EAAOk+B,cAA+B/pC,EAAE,gBAAkBA,EAAE,sBAAhF,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,aAAa,IAE/BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAGnC,YAAxB0L,EAAOk+B,cAA+B,GACvC,eAAC,KAAKlkC,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC/G,gBAAiBnN,EAAE,0CAErB,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAKhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAO87B,UAAa,0BAA4B,eAC5D/5B,SAAUlB,EAAOi7B,UACjB95B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,IAC3C6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAOyoC,QAAW,0BAA4B,eAC1D1mC,SAAUlB,EAAO4nC,QACjBzmC,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,2BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,SACL1E,UAAY6K,EAAOorC,OAAU,0BAA4B,eACzDjrC,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,eACL1E,UAAY6K,EAAOqrC,aAAgB,0BAA4B,eAC/DlrC,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,OACbC,aAActL,EAAO2L,KACrB3c,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,OAAQ5C,EAAE1O,OAAO2R,cAC/BnD,EAAgB,QAAQ,GAAM,MAGpC,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,wBAEvD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CACIiX,iBAAiB,mCACjBC,aAAa,kBACbC,aAActL,EAAOyqC,gBACrBz7C,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,kBAAmB5C,EAAE1O,OAAO2R,cAC1CnD,EAAgB,mBAAmB,GAAM,MAG/C,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,oBAEH,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,gCCzKFD,qBAAkByD,aA9BjC,YAA8C,IAAfxD,EAAc,EAAdA,EAAGE,EAAW,EAAXA,SAGhC,OACE,eAAC,GAAD,UACE,sBAAKC,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,GAAD,CAAsBjE,WAAW,MACXC,SAAS,gBAD/B,SAEE,eAAC,IAAD,CAAMc,GAdF,oBAcJ,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,uBAInD,eAAC,GAAD,CAAcoO,WAAW,6BCgGxBrO,I,GC7HXizC,GACAppB,GACAQ,GACAmsB,GACAC,GDyHWz2C,iBAAkByD,aAlHjC,YAAyC,IAAdxD,EAAa,EAAbA,EACnBmI,GADgC,EAAVrE,QACV9D,EAAE,+BAEpB,EAAiC2C,YAAS+rB,IAAlC9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAAgCyI,YAAYsqC,IAApCY,EAAR,oBAGA,GAAI7zC,EAAS,OACX,eAAC,GAAD,UACE,eAAC,KAAD,CAAMoD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,qCAMd,GAAI6C,EAAO,OACT,eAAC,GAAD,UACE,eAAC,KAAD,CAAMmD,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,6BAAIxG,EAAE,oCAMd,IAAMmU,EAAYrR,EAElB,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CAAMkD,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb0P,eAAe,EACf4uB,cAAe,SACfoK,kBAAmB,EACnB5Y,yBAA0B,GAC1BrG,sBAAuB,GACvBiH,kBAAmB,GACnB7X,UAAW,IAAI1gB,KACfkjC,UAAW,IAAIljC,KACf6vC,QAAS,IAAI7vC,KACbwyC,OAAQ,GACRC,aAAc,IAEhB1qC,iBAAkBwqC,GAClBvqC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAII0Y,EAJA4vB,EAAoBtoC,EAAOsoC,kBACH,YAAxBtoC,EAAOk+B,gBACToK,EAAoB,GAIlB5vB,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGrBkyB,EAAoB,CAAEvtC,UAAW,CAC/B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB4uB,cAAel+B,EAAOk+B,cACtBoK,kBAAmBA,EACnB5Y,yBAA0B1vB,EAAO0vB,yBACjCrG,sBAAuBrpB,EAAOqpB,sBAC9BiH,kBAAmBtwB,EAAOswB,kBAC1B7X,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACTuiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,SACnC2C,OAAQvqC,EAAOuqC,OACfC,aAAcxqC,EAAOwqC,eAEtBnqC,eAAgB,CACf,CAACC,MAAOwpC,GAAmBzsC,UAAWwH,SAEzCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sCAAwC,CACrDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1DxB,SA8DG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAQmI,EAAjE,EAAiEA,QAAjE,OACK,eAAC,GAAD,CACEG,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTlL,UArGE,iCEvBP4tC,GAAen7C,YAAH,8lBDwEVwE,kBAxDO,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGoO,EAAN,EAAMA,WAAYuoC,EAAlB,EAAkBA,QAAlB,OAClB,gBAAC,KAAK1rC,MAAN,CAAYoD,aAAa,EAAzB,UAC+B2kC,GAAV,SAAf5kC,EACgCwb,GAAjB,gBAAfxb,EACkCgc,GAAnB,kBAAfhc,EAC6BmoC,GAAd,aAAfnoC,EAC2BooC,GAAZ,WAAfpoC,EAEF,eAAC,KAAKE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,+BAAiCszC,EACrCrzC,KAAK,SACL5C,OAAQsyC,GALZ,SAOKhzC,EAAE,iBANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,mCAAqCszC,EACzCrzC,KAAK,QACL5C,OAAQ61C,GALZ,SAOKv2C,EAAE,qBANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,iCAAmCszC,EACvCrzC,KAAK,cACL5C,OAAQ81C,GALZ,SAOKx2C,EAAE,mBANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,wCAA0CszC,EAC9CrzC,KAAK,OACL5C,OAAQ0pB,GALZ,SAOKpqB,EAAE,0BANEgK,gBAQT,eAAC,KAAKsE,UAAN,CAEInO,UAAU,4BACVkD,GAAI,sCAAwCszC,EAC5CrzC,KAAK,OACL5C,OAAQkpB,GALZ,SAOK5pB,EAAE,wBANEgK,sBE5CFjK,kBATO,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OACpB,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,oBACHlD,UAAU,mCADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAF9C,IAEmEA,EAAE,0BCwC1DD,qBAAkByD,aAlCjC,YAAoI,IAAxGxD,EAAuG,EAAvGA,EAAG6D,EAAoG,EAApGA,MAAO3D,EAA6F,EAA7FA,SAA6F,IAAnFogB,gBAAmF,MAA1E,GAA0E,MAAtEnY,iBAAsE,MAA5D,GAA4D,MAAxDyuC,mBAAwD,aAAtCC,sBAAsC,MAAvB,GAAuB,MAAnBngB,qBAAmB,MAAL,GAAK,EAC3HigB,EAAU9yC,EAAMkD,OAAO+vC,SAE7B,OACE,eAAC,GAAD,UACE,gBAAC,KAAD,WACE,eAAC,KAAK/wC,OAAN,CACEC,MAAOhG,EAAE,kBACTsgB,SAAUA,EAFZ,SAIE,eAAC,GAAD,MAEF,gBAAC,KAAKlgB,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACKqwC,EACD,eAAC,KAAD,CAAM5wC,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGtG,MAHWA,IAQpB,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACGmwB,EACD,8BAAK12B,EAAE,kBACP,eAAC,GAAD,CAAeoO,WAAYyoC,EAAgBF,QAASA,mBC3CzD,SAASI,GAAT,GAAqF,IAAnD/2C,EAAkD,EAAlDA,EAAGsS,EAA+C,EAA/CA,SAAUuiC,EAAqC,EAArCA,aAAcmC,EAAuB,EAAvBA,UAAWlC,EAAY,EAAZA,UAC7E,OAAO90C,EAAE,iBAAmB,KAAOsS,EAAW,KAAOuiC,EAAe,OAASmC,EAAY,MAAQ/sC,KAAO6qC,GAAW3qC,OAAO,MAIrH,SAAS8sC,GAAuBj3C,EAAG+c,GAExC,OADAxiB,QAAQC,IAAIuiB,GACJA,GACN,IAAK,MACH,OAAO/c,EAAE,sCAEX,IAAK,YACH,OAAOA,EAAE,4CAEX,IAAK,QACH,OAAOA,EAAE,wCAEX,QACE,MAAO,ICiEED,qBAAkByD,aA5DjC,YAAmH,IAA3FxD,EAA0F,EAA1FA,EAAG6D,EAAuF,EAAvFA,MAAO3D,EAAgF,EAAhFA,SAAgF,IAAtE22C,sBAAsE,MAAvD,GAAuD,MAAnDD,mBAAmD,aAAjClgB,qBAAiC,MAAnB,GAAmB,MAAfvuB,iBAAe,MAAL,GAAK,EAC1GwuC,EAAU9yC,EAAMkD,OAAO+vC,SAC7B,EAAiCn0C,YAASizC,GAAiB,CAAE1sC,UAAW,CACtEsF,GAAImoC,KADE/zC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAQxB,GAJKqF,IACHA,EAAYnI,EAAE,gCAGZ4C,EAAS,OACX,eAAC,GAAD,CACEuF,UAAWA,EACXyuC,aAAa,EACblgB,cAAeA,EACfmgB,eAAgBA,EAJlB,SAME,6BAAI72C,EAAE,iCAIV,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACEsF,UAAWA,EACXyuC,aAAa,EACblgB,cAAeA,EACfmgB,eAAgBA,EAJlB,UAMGt8C,QAAQC,IAAIqI,GACb,6BAAI7C,EAAE,iCAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAM2I,EAAgB3I,EAAK+jC,aAErB8N,EAAmBx8B,GAAsB1M,EAAcq7B,WACvDxmB,EAAWy2B,GAAwB,CACvC/2C,EAAGA,EACHsS,SAAU7G,EAAc8vB,yBAAyBlC,qBAAqBx0B,KACtEgwC,aAAcppC,EAAc8vB,yBAAyB12B,KACrDmyC,UAAWvrC,EAAcypB,sBAAsBrwB,KAC/CiwC,UAAWH,IAGb,OACE,eAAC,GAAD,CACEr0B,SAAUA,EACVnY,UAAWA,EACXuuB,cAAeA,EACfkgB,YAAaA,EACbC,eAAgBA,EALlB,SAOG32C,QCgFQH,I,MAAAA,iBAAkByD,aAzIjC,YAA2C,IAAZxD,EAAW,EAAXA,EACvBwO,EADkC,EAAR3K,MACfkD,OAAO+vC,SAClBD,EAAiB,OAEjB1uC,EAAYnI,EAAE,+BACpB,EAAiC2C,YAASizC,GAAiB,CACzD1sC,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAgCyI,YAAYmrC,IAApCQ,EAAR,oBAEA,GAAIt0C,EAAS,OACX,eAAC,GAAD,CAAe4xC,gBAAiBqC,EAAhC,SACE,6BAAI72C,EAAE,iCAIV,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAe2xC,gBAAiBqC,EAAhC,SACE,6BAAI72C,EAAE,gCAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ2I,EAAgB3I,EAAK+jC,aAEvBsQ,EAAiB,GACjB1rC,EAAc0wB,oBAChBgb,EAAiB1rC,EAAc0wB,kBAAkB3tB,IAGnD,IAAMmmC,EAAmBx8B,GAAsB1M,EAAcq7B,WACvDoO,EAAiB/8B,GAAsB1M,EAAcgoC,SAGvDnvB,EAAY,KACZC,EAAU,KASd,OARI9Y,EAAc6Y,YAChBA,EAAY,IAAI1gB,KAAK6H,EAAc6Y,YAEjC7Y,EAAc8Y,UAChBA,EAAU,IAAI3gB,KAAK6H,EAAc8Y,UAKjC,eAAC,GAAD,CACEsyB,eAAgBA,EAChBD,aAAa,EAFf,SAIE,eAAC,KAAD,CAAM5wC,MAAOmC,EAAb,SACE,eAAC,KAAD,CACEsD,cAAe,CACb0P,cAAe1P,EAAc0P,cAC7B4uB,cAAet+B,EAAcs+B,cAC7BoK,kBAAmB1oC,EAAc0oC,kBACjC5Y,yBAA0B9vB,EAAc8vB,yBAAyB/sB,GACjE0mB,sBAAuBzpB,EAAcypB,sBAAsB1mB,GAC3D2tB,kBAAmBgb,EACnB7yB,UAAWA,EACXC,QAASA,EACTuiB,UAAW6N,EACXlB,QAASyB,EACTkB,OAAQ3qC,EAAc2qC,OACtBC,aAAc5qC,EAAc4qC,aAC5BC,gBAAiB7qC,EAAc6qC,iBAEjC3qC,iBAAkBwqC,GAClBvqC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAII0Y,EAJA4vB,EAAoBtoC,EAAOsoC,kBACH,YAAxBtoC,EAAOk+B,gBACToK,EAAoB,GAIlB5vB,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGrB2yB,EAAoB,CAAEhuC,UAAW,CAC/B6C,MAAO,CACLyC,GAAIA,EACJ2M,cAAetP,EAAOsP,cACtB4uB,cAAel+B,EAAOk+B,cACtBoK,kBAAmBA,EACnB5Y,yBAA0B1vB,EAAO0vB,yBACjCrG,sBAAuBrpB,EAAOqpB,sBAC9BiH,kBAAmBtwB,EAAOswB,kBAC1B7X,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACTuiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,SACnC2C,OAAQvqC,EAAOuqC,OACfC,aAAcxqC,EAAOwqC,aACrBC,gBAAiBzqC,EAAOyqC,kBAEzBpqC,eAAgB,CACf,CAACC,MAAOwpC,GAAmBzsC,UAAWwH,SAEzCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/DxB,SAmEG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAQmI,EAAjE,EAAiEA,QAAjE,OACC,eAAC,GAAD,CACEG,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACRmI,QAASA,EACTlL,UA7HM,iCCLL/I,kBAZE,SAAC,GAAD,EAAGC,EAAH,IAAM+iB,EAAN,EAAMA,QAAN,OACb,uBAAM5iB,UAAU,YACV,cAAY,UACZ,iBAAe,MACf,eAAc4iB,EACd,sBAAoB,GACpB/c,MAAO+c,EACP,mBAAkB,eANxB,kBCsEWhjB,iBAAkByD,aAzDE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmB+K,GAAtB,EAAMjH,QAAN,EAAeD,MAAf,EAAsBkH,cAAcwM,EAApC,EAAoCA,WAAoB1L,GAAxD,EAAgDb,OAAhD,EAAwDa,QAAQqI,EAAhE,EAAgEA,gBAAiB8C,EAAjF,EAAiFA,cAAjF,OACjC,eAAC,KAAD,UACE,eAAC,KAAD,CAAQtW,OAAQqK,EAAcpK,OAAQoK,EAAtC,SACE,gBAAC,KAAK3K,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,WACLmI,SAAU,WACRgK,EAAc,YAAanL,EAAOurC,UAClCljC,EAAgB,YAAY,GACvBrI,EAAOurC,WACVpgC,EAAc,UAAU,GACxB9C,EAAgB,UAAU,IAE5B6B,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAOurC,WAClB,uBAAMj3C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,+CAEjD,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,aAG5C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACLwG,SAAWQ,EAAOurC,SAClBpqC,SAAU,WACRgK,EAAc,UAAWnL,EAAOwrC,QAChCnjC,EAAgB,UAAU,GAC1B6B,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAOwrC,SAClB,uBAAMl3C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uBAG9C6L,EAAOurC,SAAY,iCAClB,eAAC,KAAKpkC,MAAN,UAAahT,EAAE,kDADG,IAC6D,IAC/E,eAAC,GAAD,CAAU+iB,QAAS/iB,EAAE,0DACd,GACX,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,wBCpErCksC,GAAkC/sC,OAAaC,MAAM,CAChE4sC,SAAU7sC,OACV8sC,OAAQ9sC,SCHGgtC,GAAuCh8C,YAAH,4iCAqDpCi8C,GAAkCj8C,YAAH,ySC4T7BwE,I,MAAAA,iBAAkByD,aAvVjC,YAAiD,IAAbxD,EAAY,EAAZA,EAC5B22C,EADwC,EAAT9yC,MACfkD,OAAO+vC,SACvBD,EAAiB,cACjB1uC,EAAYnI,EAAE,sCACpB,EAA4C2C,YAAS40C,GAAsC,CACzFruC,UAAW,CAAE29B,aAAc8P,KADrB/zC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAAyCwH,YAAYisC,IAA7CC,EAAR,oBAEM/gB,EAAgB,eAAC,GAAD,CAAsBp0B,WAAW,MAAMC,SAAS,wBAAhD,SACpB,eAAC,IAAD,CAAMc,GAAI,qCAAuCszC,EAAU,OAA3D,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACA,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADvB,IACyC7E,EAAE,2CAM/C,OAAI4C,EACF,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CAAQh2B,QAAQ,EAAMC,QAAQ,MAI9BkC,EACF,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,kDAKL8C,EAAK40C,wCAAwCj2C,MAAM0E,OAWtD,eAAC,GAAD,CACEywC,aAAa,EACbC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKA,eAAC,GAAD,CACEvuB,UAAWA,EAEXN,SAAU/E,EAAK40C,wCAAwC7vC,SACvDG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAK40C,wCAAwC7vC,SAAS4B,WAE/DC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB8tC,wCAAwCj2C,MACnEoG,EAAW+B,EAAgB8tC,wCAAwC7vC,SAEzE,OAAOgC,EAAS1D,OACZ,CAGErD,KAAM,CACJ40C,wCAAyC,CACvC5tC,WAAYH,EAAe+tC,wCAAwC5tC,WACnErI,MAAM,GAAD,oBAAOkI,EAAe+tC,wCAAwCj2C,OAA9D,aAAwEoI,IAC7EhC,cAIN8B,MAzBV,SA6BE,+BACE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,uBACpB,eAAC,KAAM+J,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACG1D,EAAK40C,wCAAwCj2C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtD,gBAAC,KAAMxB,IAAP,WACG7F,QAAQC,IAAIoH,GACb,eAAC,KAAMiE,IAAP,UACGjE,EAAKgyB,2BAA2B/uB,MADnBmF,gBAGhB,eAAC,KAAMnE,IAAP,UACA,eAAC,KAAD,CACI4F,cAAe,CACb2rC,SAAUx1C,EAAKw1C,SACfC,OAAQz1C,EAAKy1C,QAEf1rC,iBAAkB2rC,GAClB1rC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAIqR,GAEZ4rC,EAA6B,CAAEvuC,UAAW,CACtC6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACT4oC,SAAUvrC,EAAOurC,SACjBC,OAAQxrC,EAAOwrC,SAEhBnrC,eAAgB,CACjB,CAAEC,MAAOorC,GACPruC,UAAW,CAAE29B,aAAc8P,OAGhCvqC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,mDAAqD,CAClEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/B1B,SAmCK,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAeO,EAAjE,EAAiEA,WAAjE,OACC,gBAAC,GAAD,CACExM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR0L,WAAYA,EANd,UAQGhd,QAAQC,IAAIwQ,GACZzQ,QAAQC,IAAIqR,GATf,iBA1CQ7B,8BAtD1B,eAAC,GAAD,CACE6sC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,mDC6BGD,iBAAkByD,aAhFK,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmB+K,GAAtB,EAAMjH,QAAN,EAAeD,MAAf,EAAsBkH,cAAcwM,EAApC,EAAoCA,WAAoB1L,GAAxD,EAAgDb,OAAhD,EAAwDa,QAAQqI,EAAhE,EAAgEA,gBAAiB8C,EAAjF,EAAiFA,cAAjF,OACpC,eAAC,KAAD,UACE,eAAC,KAAD,CAAQtW,OAAQqK,EAAcpK,OAAQoK,EAAtC,SACE,gBAAC,KAAK3K,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACLmI,SAAU,WACRgK,EAAc,UAAWnL,EAAO8rC,QAChCzjC,EAAgB,UAAU,GACrBrI,EAAO8rC,SACV3gC,EAAc,UAAU,GACxB9C,EAAgB,UAAU,IAE5B6B,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAO8rC,SAClB,uBAAMx3C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uBAEjD,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,aAG1C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,WACLmI,SAAU,WACRgK,EAAc,YAAanL,EAAOurC,UAClCljC,EAAgB,YAAY,GACvBrI,EAAOurC,WACVpgC,EAAc,UAAU,GACxB9C,EAAgB,UAAU,IAE5B6B,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAOurC,WAClB,uBAAMj3C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,iDAEjD,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,aAG5C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACLwG,SAAYQ,EAAOurC,UAAcvrC,EAAO8rC,OACxC3qC,SAAU,WACRgK,EAAc,UAAWnL,EAAOwrC,QAChCnjC,EAAgB,UAAU,GAC1B6B,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAOwrC,SAClB,uBAAMl3C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uBAG7C6L,EAAOurC,UAAcvrC,EAAO8rC,OAAW,iCACvC,eAAC,KAAK3kC,MAAN,UAAahT,EAAE,oDADwB,IAC0C,IACjF,eAAC,GAAD,CAAU+iB,QAAS/iB,EAAE,4DACd,GACX,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,wBC3FrCwsC,GAAqCrtC,OAAaC,MAAM,CACnEmtC,OAAQptC,OACR6sC,SAAU7sC,OACV8sC,OAAQ9sC,SCJGstC,GAAyCt8C,YAAH,klCAsDtCu8C,GAAqCv8C,YAAH,uSCgJhCwE,I,kBAAAA,iBAAkByD,aAnKjC,YAA0D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAChC8yC,GADiD,EAAV7yC,QAC7BD,EAAMkD,OAAO+vC,UACvBD,EAAiB,gBACjB1uC,EAAYnI,EAAE,wCACpB,EAA4C2C,YAASk1C,GAAwC,CAC3F3uC,UAAW,CAAE29B,aAAc8P,KADrB/zC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAA4CwH,YAAYusC,IAAhDC,EAAR,oBAEMrhB,EAAgB,eAAC,GAAD,CAAsBp0B,WAAW,MAAMC,SAAS,2BAAhD,SACpB,eAAC,IAAD,CAAMc,GAAI,uCAAyCszC,EAAU,OAA7D,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACA,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADvB,IACyC7E,EAAE,6CAM/C,OAAI4C,EACF,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CAAQh2B,QAAQ,EAAMC,QAAQ,MAI9BkC,EACF,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,oDAKL8C,EAAKk1C,2CAA2Cv2C,MAAM0E,OAWzD,eAAC,GAAD,CACE0wC,eAAgBA,EAChBD,aAAa,EACblgB,cAAeA,EAHjB,SAKE,eAAC,GAAD,CACEvuB,UAAWA,EAEXN,SAAU/E,EAAKk1C,2CAA2CnwC,SAC1DG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAKk1C,2CAA2CnwC,SAAS4B,WAElEC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBouC,2CAA2Cv2C,MACtEoG,EAAW+B,EAAgBouC,2CAA2CnwC,SAE5E,OAAOgC,EAAS1D,OACZ,CAGErD,KAAM,CACJk1C,2CAA4C,CAC1CluC,WAAYH,EAAequC,2CAA2CluC,WACtErI,MAAM,GAAD,oBAAOkI,EAAequC,2CAA2Cv2C,OAAjE,aAA2EoI,IAChFhC,cAIN8B,MAzBV,SA6BE,+BACE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,0BACpB,eAAC,KAAM+J,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACG1D,EAAKk1C,2CAA2Cv2C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzD,gBAAC,KAAMxB,IAAP,WACG7F,QAAQC,IAAIoH,GACb,eAAC,KAAMiE,IAAP,UACGjE,EAAKo9B,8BAA8Bn6B,MADtBmF,gBAGhB,eAAC,KAAMnE,IAAP,UACE,eAAC,KAAD,CACE4F,cAAe,CACbksC,OAAQ/1C,EAAK+1C,OACbP,SAAUx1C,EAAKw1C,SACfC,OAAQz1C,EAAKy1C,QAEf1rC,iBAAkBisC,GAClBhsC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAIqR,GACZksC,EAAgC,CAC9B7uC,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTmpC,OAAQ9rC,EAAO8rC,OACfP,SAAUvrC,EAAOurC,SACjBC,OAAQxrC,EAAOwrC,SAGnBnrC,eAAgB,CACd,CAAEC,MAAO0rC,GACP3uC,UAAW,CAAE29B,aAAc8P,OAGhCvqC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,qDAAuD,CACpEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlCxB,SAsCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAeO,EAAjE,EAAiEA,WAAjE,OACC,gBAAC,GAAD,CACExM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR0L,WAAYA,EANd,UAQGhd,QAAQC,IAAIwQ,GACZzQ,QAAQC,IAAIqR,aAtDP7B,8BAtD5B,eAAC,GAAD,CACE6sC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,qDChFCi4C,GAAoC18C,YAAH,8jCAwDjC28C,GAA2C38C,YAAH,2nBAmCxCmzB,GAAyBnzB,YAAH,kYAoBtB48C,GAA6B58C,YAAH,8MAW1B68C,GAAgC78C,YAAH,+MAW7B88C,GAAgC98C,YAAH,4KCyD3BwE,qBAAkByD,aAtKjC,YAAsD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC5B8yC,GAD6C,EAAV7yC,QACzBD,EAAMkD,OAAO+vC,UACvBD,EAAiB,WACjB1uC,EAAYnI,EAAE,mCACpB,EAA4C2C,YAASs1C,GAAmC,CACtF/uC,UAAW,CAAC29B,aAAc8P,KADpB/zC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAG9B,EAAsCwH,YAAY8sC,IAA1CC,EAAR,oBAEMC,EAAY,eAAC,GAAD,CAAsBj2C,WAAW,MAAMC,SAAS,sBAAhD,SAChB,eAAC,IAAD,CAAMc,GAAE,yCAAoCszC,EAApC,QAAR,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACA,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADvB,IACyC7E,EAAE,wCAM/C,OAAI4C,EACF,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAe6hB,EAHjB,SAKE,eAAC,KAAD,CAAQ73C,QAAQ,EAAMC,QAAQ,MAI9BkC,EACF,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAe6hB,EAHjB,SAKE,6BAAIv4C,EAAE,+CAKL8C,EAAK01C,qBAAqB/2C,MAAM0E,OAWnC,eAAC,GAAD,CACA0wC,eAAgBA,EAChBD,aAAa,EACblgB,cAAe6hB,EAHf,SAKE,eAAC,GAAD,CACEpwC,UAAWA,EACXN,SAAU/E,EAAK01C,qBAAqB3wC,SACpCG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAK01C,qBAAqB3wC,SAAS4B,WAE5CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4uC,qBAAqB/2C,MAChDoG,EAAW+B,EAAgB4uC,qBAAqB3wC,SAEtD,OAAOgC,EAAS1D,OACZ,CAGErD,KAAM,CACJ01C,qBAAsB,CACpB1uC,WAAYH,EAAe6uC,qBAAqB1uC,WAChDrI,MAAM,GAAD,oBAAOkI,EAAe6uC,qBAAqB/2C,OAA3C,aAAqDoI,IAC1DhC,cAIN8B,MAxBV,SA4BE,+BACE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACG1D,EAAK01C,qBAAqB/2C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,gBAAC,KAAMxB,IAAP,WACG7F,QAAQC,IAAIoH,GACb,eAAC,KAAMiE,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO,OADjBH,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAK2iB,QAAWta,KAAOrI,EAAK2iB,SAASpa,OAAO,MAAQ,IADxCH,gBAGhB,gBAAC,KAAMnE,IAAP,WACGjE,EAAKiR,QAAQgK,SADhB,IAC0B,wBACxB,uBAAM1c,UAAU,aAAhB,SACG82C,GAAuBj3C,EAAG4B,EAAKmb,WAGpC,eAAC,KAAMlX,IAAP,UACGjE,EAAKq0C,SACJ,kCACGr0C,EAAKq0C,SAASp5B,SADjB,IAC2B,wBACzB,uBAAM1c,UAAU,aAAhB,SACG82C,GAAuBj3C,EAAG4B,EAAKs0C,YAE1B,KAGd,eAAC,KAAMrwC,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,yCAAoCszC,EAApC,iBAAoD/0C,EAAK4M,IAAjE,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAGG3E,EAAE,qBAL8BgK,gBASvC,eAAC,KAAMnE,IAAP,CAAW1F,UAAU,aAArB,SACE,yBAAQA,UAAU,2BACd6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,gDACd+R,eAAgB,6BAAI/R,EAAE,0DACtBgS,WAAYhS,EAAE,qCACdiS,eAAgBqmC,EAChBpmC,kBAAmB,CAAEhJ,UAAW,CAC9B6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAEVtC,eAAgB,CACjB,CAACC,MAAO8rC,GAAmC/uC,UAAW,CAAE29B,aAAchjC,EAAMkD,OAAO+vC,gBAf7F,SAmBE,uBAAM32C,UAAU,WAAhB,SACE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,iBArBUmF,kBAjCzBA,8BAzD5B,eAAC,GAAD,CACE6sC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAe6hB,EAHjB,SAKE,6BAAIv4C,EAAE,gDCpECy4C,GAAgCluC,OAAaC,MAAM,CAC9DqI,QAAStI,OACNG,SAAS1K,YAAE,uBACd+c,KAAMxS,OACN0rC,SAAU1rC,OACV2rC,MAAO3rC,OACP+Z,UAAW/Z,OACRG,SAAS1K,YAAE,yBCgHDD,iBAAkByD,aAxGA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAgBiH,GAAtB,EAAelH,MAAf,EAAsBkH,cAAcC,EAApC,EAAoCA,OAAQa,EAA5C,EAA4CA,OAAQsI,EAApD,EAAoDA,UAAWrL,EAA/D,EAA+DA,UAAWoL,EAA1E,EAA0EA,gBAAiB8C,EAA3F,EAA2FA,cAA3F,OAC/B,gBAAC,KAAD,WACI,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,UACL1E,UAAY6K,EAAO6H,QAAW,0BAA4B,eAC1D1H,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,6CACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,wBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,OACL1E,UAAY6K,EAAO+R,KAAQ,0BAA4B,eACvD5R,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACtB,yBAAQ5G,MAAM,MAAd,SAAgCpD,EAAE,uCAATgK,gBACzB,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,6CAATgK,gBAC/B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,yCAATgK,mBAE7B,eAAC,KAAD,CAAcnF,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,6BAI3D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,WACL1E,UAAY6K,EAAOirC,SAAY,0BAA4B,eAC3D9qC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,0BAG7D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,QACL1E,UAAY6K,EAAOkrC,MAAS,0BAA4B,eACxD/qC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACtB,yBAAQ5G,MAAM,MAAd,SAAgCpD,EAAE,uCAATgK,gBACzB,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,6CAATgK,gBAC/B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,yCAATgK,mBAE7B,eAAC,KAAD,CAAcnF,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,gCAK9D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC9FFD,iBAAkByD,aARA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG22C,EAAN,EAAMA,QAAN,OAC/B,eAAC,IAAD,CAAMtzC,GAAI,kCAAoCszC,EAA9C,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBC0GpCD,qBAAkByD,aAxGjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACvC8yC,EAAU9yC,EAAMkD,OAAO+vC,SACvBhuC,EAAS,yCAAqC6tC,GAC9CxuC,EAAYnI,EAAE,uCACd62C,EAAiB,WACjBngB,EAAgB,eAAC,GAAD,CAA0BigB,QAASA,IAEzD,EAA+Bh0C,YAAS+rB,IAAjC9rB,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KACvB,EAAkCyI,YAAY4sC,IAAvCO,EAAP,oBAEA,GAAI91C,EAAS,OACX,eAAC,GAAD,CACEuF,UAAWA,EACX0uC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,iCAIV,GAAI6C,EAAO,OACT,eAAC,GAAD,CACEsF,UAAWA,EACX0uC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,gCAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,GAAD,CACEqF,UAAWA,EACX0uC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CACEjrB,cAAe,CACb6I,MAAO,GACPgQ,UAAW,IAAI1gB,KACfiP,QAAS,GACTkK,KAAM,GACNk5B,SAAU,GACVC,MAAO,IAETvqC,iBAAkB8sC,GAClB7sC,SAAU,SAACC,EAAD,GAAgC,IAElC0Y,EAFazY,EAAoB,EAApBA,cAIfyY,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBm0B,EAAwB,CAAExvC,UAAW,CACnC6C,MAAO,CACL86B,aAAchjC,EAAMkD,OAAO+vC,SAC3BjkC,QAAShH,EAAOgH,QAChBkK,KAAMlR,EAAOkR,KACbk5B,SAAUpqC,EAAOoqC,SACjBC,MAAOrqC,EAAOqqC,MACd5xB,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,IAEVrY,eAAgB,CACf,CAACC,MAAO8rC,GAAmC/uC,UAAW,CAAE29B,aAAchjC,EAAMkD,OAAO+vC,cAGtF1qC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA5CxB,SAgDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,aC8BR/I,qBAAkByD,aA/HjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC/B2K,GADiD,EAAX1K,QACjCD,EAAMkD,OAAOyH,IAClBmoC,EAAU9yC,EAAMkD,OAAO+vC,SACvBhuC,EAAS,yCAAqC6tC,GAC9CxuC,EAAYnI,EAAE,wCACd62C,EAAiB,WACjBngB,EAAgB,eAAC,GAAD,CAA0BigB,QAASA,IAEzD,EAA+Bh0C,YAASu1C,GAA0C,CAChFhvC,UAAW,CAAEsF,GAAIA,KADZ5L,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KAGvB,EAAqCyI,YAAY6sC,IAA1CO,EAAP,oBAEA,GAAI/1C,EAAS,OACX,eAAC,GAAD,CACEuF,UAAWA,EACX0uC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,iCAIV,GAAI6C,EAAO,OACT,eAAC,GAAD,CACEsF,UAAWA,EACX0uC,eAAgBA,EAChBngB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,gCAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ8M,EAAc9M,EAAK81C,oBAErBC,EAAkB,GAClBjpC,EAAYqmC,WACd4C,EAAmBjpC,EAAYqmC,SAASznC,IAK1C,IAAI8V,EAAY,KACZ1U,EAAY0U,YACdA,EAAY,IAAI1gB,KAAKgM,EAAY0U,YAGnC,IAAIC,EAAU,KAKd,OAJI3U,EAAY2U,UACdA,EAAU,IAAI3gB,KAAKgM,EAAY2U,UAI/B,eAAC,GAAD,CACEpc,UAAWA,EACX0uC,eAAe,WACfngB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CACEjrB,cAAe,CACb6Y,UAAWA,EACXC,QAASA,EACT1R,QAASjD,EAAYiD,QAAQrE,GAC7BuO,KAAMnN,EAAYmN,KAClBk5B,SAAU4C,EACV3C,MAAOtmC,EAAYsmC,OAErBvqC,iBAAkB8sC,GAClB7sC,SAAU,SAACC,EAAD,GAAgC,IAElC0Y,EAFazY,EAAoB,EAApBA,cAIfyY,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBo0B,EAA2B,CAAEzvC,UAAW,CACtC6C,MAAO,CACLyC,GAAI3K,EAAMkD,OAAOyH,GACjBqE,QAAShH,EAAOgH,QAChBkK,KAAMlR,EAAOkR,KACbk5B,SAAUpqC,EAAOoqC,SACjBC,MAAOrqC,EAAOqqC,MACd5xB,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,IAEVrY,eAAgB,CACf,CAACC,MAAO8rC,GAAmC/uC,UAAW,CAAE29B,aAAchjC,EAAMkD,OAAO+vC,cAGtF1qC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3CxB,SA+CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EAPb,SASGvO,QAAQC,IAAIwQ,c,UCrIlB,SAAS8tC,KACd,IAAInoC,EAAY,CACd4wB,aAAS1wB,EACT2wB,cAAU3wB,EACV6wB,gBAAY7wB,GAGV4wB,EAAS7iC,aAAagS,QAAQ9R,EAAKhB,0CAKvC,OAJA6S,EAAU+wB,WAAaD,EAEvBlnC,QAAQC,IAAImW,GAELA,EAGF,SAASooC,GAAoCC,EAAkBxrC,GACpE,MAAO,CACLq5B,aAAcmS,EACdxrC,KAAMA,GCnBH,SAASyrC,GAAT,GAAkF,IAAzDj5C,EAAwD,EAAxDA,EAAGsS,EAAqD,EAArDA,SAAUuiC,EAA2C,EAA3CA,aAAcmC,EAA6B,EAA7BA,UAAWlQ,EAAkB,EAAlBA,UAAWt5B,EAAO,EAAPA,KAC/E,OAAOxN,EAAE,iBAAmB,KACrBsS,EAAW,KAAOuiC,EAAe,OACjCmC,EAAY,MACZ/sC,KAAOuD,GAAMrD,OAAO,MAAQ,IAAMF,KAAO68B,GAAW38B,OAAO,MCQpE,IAQepK,iBAAkByD,aARP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAH,EAAM22C,QAAN,OACxB,eAAC,IAAD,CAAMtzC,GAAI,qBAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,YAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCiEpCD,sBArEf,YAAoE,IAA9CC,EAA6C,EAA7CA,EAAGwzC,EAA0C,EAA1CA,eAAgB0F,EAA0B,EAA1BA,WACnCC,GAAoB,EACpBC,GAAyB,EACzBpG,GAAc,EAElB,OALiE,EAAd5kC,YAMjD,IAAK,aACH+qC,GAAoB,EACpB,MACF,IAAK,kBACHC,GAAyB,EACzB,MACF,IAAK,OACHpG,GAAc,EAIlB,OACE,iCACE,8BAAKhzC,EAAE,kBACP,gBAAC,KAAKiL,MAAN,CAAYoD,aAAa,EAAzB,UACE,eAAC,GAAD,CACI9L,SAAS,yBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAI,uCAAyCmwC,EAAiB,IAAM0F,EACpE51C,KAAK,eACL5C,OAAQy4C,EALZ,SAOKn5C,EAAE,uBANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,yBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAI,6CAA+CmwC,EAAiB,IAAM0F,EAC1E51C,KAAK,cACL5C,OAAQ04C,EALZ,SAOKp5C,EAAE,kDANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,yBACTD,WAAW,SAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAI,iCAAmCmwC,EAAiB,IAAM0F,EAC9D51C,KAAK,SACL5C,OAAQsyC,EALZ,SAOKhzC,EAAE,iBANEgK,2BCjBJjK,I,GAAAA,iBAAkByD,aAnCjC,YAA0D,IAAlBxD,EAAiB,EAAjBA,EAAG6D,EAAc,EAAdA,MAAOjC,EAAO,EAAPA,KAC1Co3C,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAiDjC,YAAYk7B,IAA7D,mBAAOG,EAAP,KAEE,OAFF,KAAuC9jC,KAGnC,yBAAQ3C,UAAU,sCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,wDACd+R,eAAgB,6BAAInQ,EAAKiR,QAAQgK,WACjC7K,WAAYhS,EAAE,oDACdiS,eAAgB20B,EAChB10B,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,KAGbtC,eAAgB,CACd,CAAEC,MAAOq6B,GACPt9B,UAAW6vC,GAAoCC,EAAkBE,SAlB7E,SAuBE,uBAAM/4C,UAAU,WAAhB,SAA2B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,oBC1C7C+8B,GAAqBrmC,YAAH,6oBC6C/B,SAAS89C,GAAT,GAA0E,IAA5Cr5C,EAA2C,EAA3CA,EAAG6D,EAAwC,EAAxCA,MAAOy1C,EAAiC,EAAjCA,iBAAkB13C,EAAe,EAAfA,KAAMmH,EAAS,EAATA,OACxDiwC,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAEhC8rC,EAAiB,CACfpwC,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTw4B,cAAej+B,IAGnBmD,eAAgB,CACd,CAACC,MAAOq6B,GACNt9B,UAAW6vC,GAAoCC,EAAkBE,OAEpE9sC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACTvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJtM,EAAE,kDAAmD,CACnDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MA8SzC9C,qBAAkByD,aAzSjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACpC,GADsD,EAAXC,QACP6I,oBAAS,IAA7C,mBAAO4sC,EAAP,KAAmBC,EAAnB,KAEMR,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAgI7K,YAC9H6jC,GAAqC,CACnCt9B,UAAW6vC,GAAoCC,EAAkBE,KAFxBO,GAA7C,EAAQrqC,QAAR,EAAoCxM,SAAwC82C,EAA5E,EAAqE72C,MAAmC82C,EAAxG,EAAkG72C,KAKlG,EAEIyI,YAAYm7B,IAFhB,mBAAQ4S,EAAR,YAIA,GAJA,EACI12C,QADJ,EACwCC,MAS5B+2C,aAAchY,KAN1B,mBAAQiY,EAAR,YAEoBC,GAFpB,EACS1qC,QADT,EAESrL,WACSg2C,EAHlB,EAGSn3C,QACOo3C,EAJhB,EAISn3C,MACMo3C,EALf,EAKSn3C,KAYT,GATAvI,QAAQC,IAAI,qBACZD,QAAQC,IAAIy/C,GAQRR,EAAwB,OAAO,6BAAIz5C,EAAE,+BAEzC,GAAI05C,EAEF,OADAn/C,QAAQC,IAAIk/C,GACL,6BAAI15C,EAAE,8BAGfzF,QAAQC,IAAIm/C,GACZ,IAAIO,EAAe,GACnBP,EAAoB5S,wBAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpDs4C,EAAa/2C,KAAKvB,EAAKiR,QAAQrE,OAEjCjU,QAAQC,IAAI0/C,GAEZ,IAAMrT,EAAe8S,EAAoB9S,aACnC+N,EAAWqE,GAAe,CAC9Bj5C,EAAGA,EACHsS,SAAUu0B,EAAatL,yBAAyBlC,qBAAqBx0B,KACrEgwC,aAAchO,EAAatL,yBAAyB12B,KACpDmyC,UAAWnQ,EAAa3R,sBAAsBrwB,KAC9CiiC,UAAW3uB,GAAsB0uB,EAAaC,WAC9Ct5B,KAAM0rC,IAIR,OACE,eAAC,GAAD,UACE,sBAAK/4C,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAmBsgB,SAAUs0B,EAAnD,SACE,uBAAKz0C,UAAU,sBAAf,UACE,eAAC,GAAD,IACA,eAAC,GAAD,CACEqgC,gBAAiB1hC,EAAKhB,yCACtB2Y,YAAY,YACZzJ,SAAU,SAAC5J,GACT7I,QAAQC,IAAI4I,GACZxE,aAAaC,QAAQC,EAAKhB,yCAA0CsF,GAChEA,GAGFo2C,GAAc,GACdK,EAAY,CAAE3wC,UAAW4vC,QAEzBU,GAAc,WAMxB,gBAAC,KAAKp5C,IAAN,WACI,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,UAEIgzC,GAAeU,IAAwBF,IAA2BC,EAClE,eAAC,GAAD,CAAa7xC,UAAWnI,EAAE,0BACd6H,SAAUoyC,EAAkB7X,SAASv6B,SACrCG,WAAY,WACV8xC,EAAkB,CAChB5wC,UAAW,CACXM,MAAOywC,EAAkB7X,SAASv6B,SAAS4B,WAE7CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBw4B,SAAS3gC,MACpCoG,EAAW+B,EAAgBw4B,SAASv6B,SAE1C,OAAOgC,EAAS1D,OACZ,CAGE8zC,kBAAmB,CACjB7X,SAAU,CACRt4B,WAAYH,EAAey4B,SAASt4B,WACpCrI,MAAM,GAAD,oBAAOkI,EAAey4B,SAAS3gC,OAA/B,aAAyCoI,IAC9ChC,cAIN8B,MAvBpB,SA2BMswC,EAAkB7X,SAAS3gC,MAAM0E,OAEnC,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGyzC,EAAkB7X,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKib,UADQ7S,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKmX,OADQ/O,gBAGhB,eAAC,KAAMnE,IAAP,UACIq0C,EAAaC,SAASv4C,EAAK4M,IAC5B,uBAAMrO,UAAU,aAAhB,SAA8BH,EAAE,yEAC/B,eAAC,IAAD,CAAMqD,GAAI,gCAAkC21C,EAAmB,IAAME,EAAa,IAAMt3C,EAAK4M,GAA7F,SACE,gBAAC,KAAD,CAAQ7J,MAAM,uBAAd,UACG3E,EAAE,mBADL,IACyB,eAAC,KAAD,CAAM6E,KAAK,wBAL1BmF,kBAPFA,wBAXtBhK,EAAE,2DAkCJ,GAGJ,eAAC,GAAD,CAAamI,UAAWnI,EAAE,sBACb6H,SAAU8xC,EAAoB5S,wBAAwBl/B,SACtDG,WAAY,WACT8xC,EAAkB,CAClB5wC,UAAW,CACTM,MAAOmwC,EAAoB5S,wBAAwBl/B,SAAS4B,WAE9DC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBm9B,wBAAwBtlC,MACnDoG,EAAW+B,EAAgBm9B,wBAAwBl/B,SAEzD,OAAOgC,EAAS1D,OACZ,CAGEwzC,oBAAqB,CACnB5S,wBAAyB,CACvBj9B,WAAYH,EAAeo9B,wBAAwBj9B,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeo9B,wBAAwBtlC,OAA9C,aAAwDoI,IAC7DhC,cAIN8B,MAvBtB,SA2BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGmzC,EAAoB5S,wBAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnD,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiR,QAAQgK,WAEhB,eAAC,KAAMhX,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKolC,kBAEnC,gBAAC,KAAMnhC,IAAP,WAEE,eAAC,GAAD,CAA+BjE,KAAMA,IAErC,eAAC,KAAD,CAEEzB,UAAU,aACVqE,KAAK,SACL0V,QAAM,EACNvV,MAAM,mBACNwV,eAAgBna,EAAE,kBAClBkD,MAAO,CAiBL,eAAC,GAAD,CAAiCZ,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,WACLmF,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACH6D,MAAOA,EACPy1C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,YATd,SAYK/I,EAAE,4DAXAgK,iBAFkBA,gBAgB3B,eAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,IACLmF,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACH6D,MAAOA,EACPy1C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,eATd,SAYK/I,EAAE,+DAXAgK,iBAFkBA,kBAvCxBA,gBAyDiB,UAAtBpI,EAAKolC,cACL,eAAC,GAAD,CAAiC1kC,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAAD,CAEEpC,UAAU,aACVwE,MAAM,UACND,KAAK,KACL+D,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACH6D,MAAOA,EACPy1C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,eAXd,SAcK/I,EAAE,oBAbAgK,iBAFkBA,gBAiBA,QAvFjBA,6BA+F5B,eAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CACEitC,eAAgBwF,EAChBE,WAAYA,EACZ9qC,WAAW,+BC1TdrO,I,GAAAA,iBAAkByD,aAhCjC,YAAiG,IAAhExD,EAA+D,EAA/DA,EAAG6D,EAA4D,EAA5DA,MAAgB3D,GAA4C,EAArD4D,QAAqD,EAA5C5D,UAA4C,IAAlCogB,gBAAkC,MAAzB,GAAyB,MAArBu2B,sBAAqB,MAAN,GAAM,EACxFrD,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BsD,EAAYv2C,EAAMkD,OAAOyG,KAE/B,OACE,eAAC,GAAD,UACE,sBAAKrN,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAmBsgB,SAAUA,EAAnD,SACE,sBAAKngB,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJ,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,eAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CACEitC,eAAgBA,EAChB0F,WAAYkB,EACZhsC,WAAYyoC,oBCnCfwD,GAAkC9+C,YAAH,itBC8I7BwE,I,MAAAA,iBAAkByD,aA9HjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAY6D,GAAQ,EAAjBC,QAAiB,EAARD,OAC3Cu2C,EAAYv2C,EAAMkD,OAAOyG,KACzBgmC,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BD,EAAiB,kBAEjB5qC,EAAOiZ,SAASk1B,EAAU7mB,UAAU,EAAG,IAC7Ch5B,QAAQC,IAAIyR,GAEZ,MAAiCtJ,YAAS03C,GAAiC,CACzEnxC,UAAW,CACT+C,KAAMA,EACN46B,aAAc2M,KAHV5wC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAAIF,EACF,OACE,eAAC,GAAD,CAAuBi0C,eAAgBA,EAAvC,SACK72C,EAAE,+BAKX,GAAI6C,EACF,OACE,eAAC,GAAD,CAAuBg0C,eAAgBA,EAAvC,SACK72C,EAAE,8BAKX,IAAMs6C,EAAuBruC,EACvBsuC,EAAuBz3C,EAAK03C,gCAAgCC,YAC5DC,EAAwBzuC,EAAO,EAC/B0uC,EAAwB73C,EAAK03C,gCAAgCI,aAC7D/T,EAAe/jC,EAAK+jC,aAEpBvmB,EAAW24B,GAAe,CAC9Bj5C,EAAGA,EACHsS,SAAUu0B,EAAatL,yBAAyBlC,qBAAqBx0B,KACrEgwC,aAAchO,EAAatL,yBAAyB12B,KACpDmyC,UAAWnQ,EAAa3R,sBAAsBrwB,KAC9CiiC,UAAW3uB,GAAsB0uB,EAAaC,WAC9Ct5B,KAAM4sC,IAOR,OACE,eAAC,GAAD,CAAuBvD,eAAgBA,EAAgBv2B,SAAUA,EAAjE,SACE,gBAAC,KAAD,CAAMta,MAAOhG,EAAE,iDAAf,UACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACE6f,MAAO,CAAEC,OAAQ,SACjBxjB,KAAM,CACJyjB,EAAG,IACHC,QAAS,EAEL,KAFK,oBAZrB,SAAe9hB,GAAoB,IAAdm2C,EAAa,uDAAH,EAC7B,OAAO,aAAIC,MAAMp2C,GAAMkQ,QAAQtO,KAAI,SAAAy0C,GAAC,OAAIA,EAAIF,KAc3BG,CAAM,GAAI,KAHR,CAKL,WALK,oBAKST,IALT,CAML,YANK,oBAMUI,KAEnBn2C,KAAM,MACNhD,OAAQ,CAAC,CAAC,WAAY,CAAC,aACvBilB,OAAQ,CACN8G,QAAS9G,KAAM,MACfw0B,SAAUx0B,KAAO,kBAEnBE,MAAO,CAEL4G,QAAS+sB,EACTW,SAAUP,IAId9zB,KAAM,CACJC,EAAG,CACDjK,QAAS,CACPkK,OAAQ,GAEVC,MAAM,EAENm0B,KAAM,CACJ/wC,OAAQ,SAAUgxC,GACd,OAAQj2B,SAASi2B,IAAMA,EAAKA,EAAI,QAIxC50B,EAAG,CACD3J,QAAS,CACPoK,KAAM,EACNC,MAAO,GAETziB,KAAM,WACNuiB,MAAM,IAGVG,QAAS,CACP/c,OAAQ,CACNnE,MAAO,SAASugB,GACd,MAAO,MAIb3J,QAAS,CACPkK,OAAQ,EAERG,OAAQ,GAEVE,MAAO,CACLJ,MAAM,OAIZ,eAAC,KAAKve,OAAN,aCnHOzI,iBAAkByD,aARH,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG22C,EAAN,EAAMA,QAASnpC,EAAf,EAAeA,KAAf,OAC5B,eAAC,IAAD,CAAMnK,GAAI,sCAAwCszC,EAAU,IAAMnpC,EAAlE,SACE,gBAAC,KAAD,CAAQ7I,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCdtCo7C,GAA4B7/C,YAAH,koDAiFzB8/C,GAAkC9/C,YAAH,wOCpFrC,SAAS+/C,GAAT,GAAmF,IACpFvhC,EAD8BwhC,EAAqD,EAArDA,SAAUvC,EAA2C,EAA3CA,iBAAkBE,EAAyB,EAAzBA,WAAY9f,EAAa,EAAbA,WAS1E,MANgB,oBAAZmiB,EACFxhC,EAAa,sCAAwCi/B,EAAmB,IAAME,EACzD,eAAZqC,IACTxhC,EAAa,wBAA0Bqf,EAAa,IAAM4f,EAAmB,IAAME,GAG9En/B,EC2EMha,qBAAkByD,aAhEjC,YAA4F,IAA3DxD,EAA0D,EAA1DA,EAAG6D,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,QAASw+B,EAAuC,EAAvCA,UAAWiZ,EAA4B,EAA5BA,SAA4B,IAAlBniB,kBAAkB,MAAP,KAAO,EACzF7+B,QAAQC,IAAI8nC,GACZ,IAAM6B,EAAatgC,EAAMkD,OAAOo9B,WAC1B6U,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAE1BguC,EAAc,CAClB,QAAWrX,EACX,aAAgB6U,EAChB,iBAAoB1W,EAAUoF,iBAAiBl5B,GAC/C,KAAQ0qC,EACR,eAAkB,YAClB,cAAiB,aAGnB,EAA8D3tC,YAAY8vC,IAA1E,mBAAOI,EAAP,YAA6B74C,GAA7B,EAAuBE,KAAvB,EAA6BF,SAASC,EAAtC,EAAsCA,MAEtC,GAFA,EAA6Coa,YAEzCra,EACF,MAAO,iBAGT,GAAIC,EACF,MAAO,uBAGT,IAAMkX,EAAauhC,GAAmB,CACpCC,SAAUA,EACVvC,iBAAkBA,EAClBE,WAAYA,EACZ9f,WAAYA,IAGd,OACE,eAAC,KAAD,CACEtyB,OAAK,EACLrC,SAAO,EACPE,MAAM,UACNrB,KAAK,QACLmF,QAAS,kBAAMgzC,EAAa,CAC1BvyC,UAAW,CAAE,MAASsyC,GACtBtvC,eAAgB,CACd,CAACC,MAAOq6B,GAAqCt9B,UAAW6vC,GAAoCC,EAAkBE,OAE/G9sC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExBgB,EAAQX,KAAK4W,GAEb1N,IAAMC,QAAStM,EAAE,6CAA+C,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAtB5D,SAyBG7C,EAAE,yBCGMD,qBAAkByD,aAnCjC,YAQI,IAPFxD,EAOC,EAPDA,EAGA0qB,GAIC,EAND7mB,MAMC,EALDC,QAKC,EAJD4mB,aACA0O,EAGC,EAHDA,WAGC,KAFDsiB,eAEC,EADDH,iBACC,MADQ,mBACR,EAED,OACE7wB,EAAYpkB,KAAI,SAACg8B,GAAD,OACd,eAAC,KAAKz8B,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,qBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAI87B,EAAUoF,iBAAiBjd,sBAAsB5lB,OAAS,wBAC9D,wBAAM1E,UAAU,aAAhB,UACGH,EAAE,6BADL,KACqCsiC,EAAUoF,iBAAiBnF,wBADhE,IACyF,wBACtFviC,EAAE,uBAFL,KAE+BiK,KAAOq4B,EAAUoF,iBAAiBnjB,SAASpa,OAAO,MAFjF,IAEwF,8BAG1F,eAAC,KAAK3B,OAAN,UACK85B,EAAUqZ,QACX,eAAC,GAAD,CAAwBrZ,UAAWA,EAAWiZ,SAAUA,EAAUniB,WAAYA,IADxDp5B,EAAE,mECkCrBD,qBAAkByD,aAlFjC,YAAkG,IAA9DxD,EAA6D,EAA7DA,EAAG6D,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,QAAS47B,EAA0C,EAA1CA,aAAc6b,EAA4B,EAA5BA,SAA4B,IAAlBniB,kBAAkB,MAAP,KAAO,EAC/F7+B,QAAQC,IAAIklC,GACZ,IAAMyE,EAAatgC,EAAMkD,OAAOo9B,WAC1B6U,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAE1BguC,EAAc,CAClB,QAAWrX,EACX,aAAgB6U,EAChB,oBAAuBtZ,EAAamN,oBAAoBr+B,GACxD,KAAQ0qC,EACR,eAAkB,eAClB,cAAiB,aAGnB,EAA8D3tC,YAAY8vC,IAA1E,mBAAOI,EAAP,YAA6B74C,GAA7B,EAAuBE,KAAvB,EAA6BF,SAASC,EAAtC,EAAsCA,MAEtC,GAFA,EAA6Coa,YAEzCra,EACF,MAAO,iBAGT,GAAIC,EACF,MAAO,uBAGT,IAAMkX,EAAauhC,GAAmB,CACpCC,SAAUA,EACVvC,iBAAkBA,EAClBE,WAAYA,EACZ9f,WAAYA,IAGd,OAAIsG,EAAakc,QAEb,qBAAGz7C,UAAU,aAAb,UACE,eAAC,KAAD,CAAM0E,KAAK,mBACV7E,EAAE,uDAKL0/B,EAAamc,OAEb,qBAAG17C,UAAU,aAAb,UACE,eAAC,KAAD,CAAM0E,KAAK,UACV7E,EAAE,sDAMP,eAAC,KAAD,CACE8G,OAAK,EACLrC,SAAO,EACPE,MAAM,UACNrB,KAAK,QACLmF,QAAS,kBAAMgzC,EAAa,CAC1BvyC,UAAW,CAAE,MAASsyC,GACtBtvC,eAAgB,CACd,CAACC,MAAOq6B,GAAqCt9B,UAAW6vC,GAAoCC,EAAkBE,OAE/G9sC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExBgB,EAAQX,KAAK4W,GAEb1N,IAAMC,QAAStM,EAAE,6CAA+C,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAtB5D,SAyBG7C,EAAE,yBCpBMD,qBAAkByD,aAjCjC,YAOI,IANFxD,EAMC,EANDA,EAGA2qB,GAGC,EALD9mB,MAKC,EAJDC,QAIC,EAHD6mB,eACAyO,EAEC,EAFDA,WAEC,IADDmiB,gBACC,MADQ,mBACR,EAED,OACE5wB,EAAcrkB,KAAI,SAACo5B,GAAD,OAChB,eAAC,KAAK75B,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,wBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIk5B,EAAamN,oBAAoBjiB,yBAAyB/lB,OAAS,wBACvE,wBAAM1E,UAAU,aAAhB,UACGH,EAAE,6BADL,KACqC0/B,EAAamN,oBAAoBH,kBAGxE,eAAC,KAAKlkC,OAAN,UACKk3B,EAAaic,QACd,eAAC,GAAD,CAA2Bjc,aAAcA,EAAc6b,SAAUA,EAAUniB,WAAYA,IAD9Dp5B,EAAE,sECgBxBD,qBAAkByD,aAhEjC,YAA2F,IAAvDxD,EAAsD,EAAtDA,EAAG6D,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,QAASwQ,EAAmC,EAAnCA,MAAOinC,EAA4B,EAA5BA,SAA4B,IAAlBniB,kBAAkB,MAAP,KAAO,EACxF7+B,QAAQC,IAAI8Z,GACZ,IAAM6vB,EAAatgC,EAAMkD,OAAOo9B,WAC1B6U,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAE1BguC,EAAc,CAClB,QAAWrX,EACX,aAAgB6U,EAChB,sBAAyB1kC,EAAM9F,GAC/B,KAAQ0qC,EACR,eAAkB,yBAClB,cAAiB,aAGnB,EAA8D3tC,YAAY8vC,IAA1E,mBAAOI,EAAP,YAA6B74C,GAA7B,EAAuBE,KAAvB,EAA6BF,SAASC,EAAtC,EAAsCA,MAEtC,GAFA,EAA6Coa,YAEzCra,EACF,MAAO,iBAGT,GAAIC,EACF,MAAO,uBAGT,IAAMkX,EAAauhC,GAAmB,CACpCC,SAAUA,EACVvC,iBAAkBA,EAClBE,WAAYA,EACZ9f,WAAYA,IAGd,OACE,eAAC,KAAD,CACEtyB,OAAK,EACLrC,SAAO,EACPE,MAAM,UACNrB,KAAK,QACLmF,QAAS,kBAAMgzC,EAAa,CAC1BvyC,UAAW,CAAE,MAASsyC,GACtBtvC,eAAgB,CACd,CAACC,MAAOq6B,GAAqCt9B,UAAW6vC,GAAoCC,EAAkBE,OAE/G9sC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExBgB,EAAQX,KAAK4W,GAEb1N,IAAMC,QAAStM,EAAE,6CAA+C,CAC9DuM,SAAUF,IAAMG,SAASC,kBAE1BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAtB5D,SAyBG7C,EAAE,yBCDMD,qBAAkByD,aA9BjC,YAQI,IAPFxD,EAOC,EAPDA,EAGA87C,GAIC,EANDj4C,MAMC,EALDC,QAKC,EAJDg4C,aACA1iB,EAGC,EAHDA,WAGC,KAFDsiB,eAEC,EADDH,iBACC,MADQ,mBACR,EAID,OAHAhhD,QAAQC,IAAI,eACZD,QAAQC,IAAIshD,GAGV,eAAC,KAAKj2C,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,kBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIs1C,EAAYh5B,eAAiB,wBAChC9iB,EAAE,mDAFL,IAEyD,2BAEzD,eAAC,KAAKwI,OAAN,UACE,eAAC,GAAD,CAA2B8L,MAAOwnC,EAAaP,SAAUA,EAAUQ,WAAY3iB,eCQxEr5B,qBAAkByD,aA9BjC,YAQI,IAPFxD,EAOC,EAPDA,EAGAg8C,GAIC,EANDn4C,MAMC,EALDC,QAKC,EAJDk4C,YACA5iB,EAGC,EAHDA,WAGC,KAFDsiB,eAEC,EADDH,iBACC,MADQ,mBACR,EAID,OAHAhhD,QAAQC,IAAI,cACZD,QAAQC,IAAIwhD,GAGV,eAAC,KAAKn2C,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,iBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIw1C,EAAWl5B,eAAiB,wBAC/B9iB,EAAE,kDAFL,IAEwD,2BAExD,eAAC,KAAKwI,OAAN,UACE,eAAC,GAAD,CAA2B8L,MAAO0nC,EAAYT,SAAUA,EAAUniB,WAAYA,eC0DvEr5B,I,SAAAA,iBAAkByD,aA/EjC,YAAmD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC9B,GADgD,EAAXC,QACD6I,oBAAS,IAA7C,mBAEMw3B,GAFN,UAEmBtgC,EAAMkD,OAAOo9B,YAC1B6U,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAsE7K,YACpEy4C,GAA2B,CACzBlyC,UAAW,CACT2J,QAASsxB,EACT0C,aAAcmS,EACdxrC,KAAM0rC,EACN+C,SAAU,YANCx/B,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAyBitC,EAAxD,EAAkDhtC,KAalD,GAAI2Z,EAAc,OAAO,6BAAIzc,EAAE,+BAE/B,GAAI0c,EAEF,OADAniB,QAAQC,IAAIkiB,GACL,6BAAI1c,EAAE,8BAGfzF,QAAQC,IAAIs1C,GACZ,IAAMj9B,EAAUi9B,EAAUoM,4BAA4BrpC,QAChD6X,EAAcolB,EAAUoM,4BAA4BxxB,YACpDC,EAAgBmlB,EAAUoM,4BAA4BvxB,cACtDiG,EAASkf,EAAUoM,4BAA4BC,mBAC/CtV,EAAeiJ,EAAUoM,4BAA4BrV,aACrD+N,EAAWqE,GAAe,CAC9Bj5C,EAAGA,EACHsS,SAAUu0B,EAAatL,yBAAyBlC,qBAAqBx0B,KACrEgwC,aAAchO,EAAatL,yBAAyB12B,KACpDmyC,UAAWnQ,EAAa3R,sBAAsBrwB,KAC9CiiC,UAAW3uB,GAAsB0uB,EAAaC,WAC9Ct5B,KAAM0rC,IAMR,OAHA3+C,QAAQC,IAAIo2B,GAIV,eAAC,GAAD,UACE,sBAAKzwB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAmBsgB,SAAUs0B,EAAnD,SACE,sBAAKz0C,UAAU,sBAAf,SACE,eAAC,GAAD,CAAuBw2C,QAASqC,EAAkBxrC,KAAM0rC,QAG5D,eAAC,KAAK94C,IAAN,UACI,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACE,gCAAKvG,EAAE,2BAAP,IAAoC6S,EAAQgK,YAC5C,sBAAK1c,UAAU,OAAf,SACA,gBAAC,KAAKC,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,UACE,eAAC,GAAD,CAAgCskB,cAAeA,IAC/C,eAAC,GAAD,CAA8BD,YAAaA,IACzCkG,GACCA,EAAOwrB,4BACN,eAAC,GAAD,CAA8BN,YAAalrB,EAAOwrB,8BAClD,GACFxrB,GACEA,EAAOyrB,6BAAiCxpC,EAAQypC,qBAChD,eAAC,GAAD,CAA6BN,WAAYprB,EAAOyrB,6BAChD,wBC/GTE,GAAuChhD,YAAH,u7EAmIpCihD,GAAmCjhD,YAAH,8LAShCkhD,GAAmClhD,YAAH,wOC5IhCmhD,GAAiCnyC,OAAaC,MAAM,CAC/D4rC,OAAQ7rC,OAAag9B,WAAWoV,cAChCtG,aAAc9rC,OAAag9B,WAAWoV,gBC6NvB58C,iBAAkByD,aAhNL,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAASqQ,EAAf,EAAeA,UAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBlJ,EAAxE,EAAwEA,OAAQa,EAAhF,EAAgFA,OAAiBkO,GAAjG,EAAwF/F,QAAxF,EAAiG+F,YAAjG,OAC1B,gBAAC,KAAD,WACE,gBAAC,KAAKvT,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,SACL1E,UAAY6K,EAAOjC,OAAU,0BAA4B,eACzDoC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,KAATgK,gBACtB,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,sBAATgK,gBAC/B,yBAAQ5G,MAAM,OAAd,SAAiCpD,EAAE,gCAATgK,mBAE5B,eAAC,KAAD,CAAcnF,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,6BAIlE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,UACL1E,UAAY6K,EAAO6H,QAAW,0BAA4B,eAC1D1H,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,6CACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,wBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,OACL1E,UAAY6K,EAAO+R,KAAQ,0BAA4B,eACvD5R,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACtB,yBAAQ5G,MAAM,MAAd,SAAgCpD,EAAE,uCAATgK,gBACzB,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,6CAATgK,gBAC/B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,yCAATgK,mBAE7B,eAAC,KAAD,CAAcnF,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,6BAI3D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,WACL1E,UAAY6K,EAAOirC,SAAY,0BAA4B,eAC3D9qC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,0BAG7D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,QACL1E,UAAY6K,EAAOkrC,MAAS,0BAA4B,eACxD/qC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACtB,yBAAQ5G,MAAM,MAAd,SAAgCpD,EAAE,uCAATgK,gBACzB,yBAAQ5G,MAAM,YAAd,SAAsCpD,EAAE,6CAATgK,gBAC/B,yBAAQ5G,MAAM,QAAd,SAAkCpD,EAAE,yCAATgK,mBAE7B,eAAC,KAAD,CAAcnF,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,6BAI5D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,2BACL1E,UAAY6K,EAAOuwB,yBAA4B,0BAA4B,eAC3EpwB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,sBAATgK,gBACrBmK,EAAU+mB,0BAA0Bz5B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7C,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKy3B,qBAAqBx0B,KAA9D,MAAuEjD,EAAKiD,OAA/CmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,2BAA2BuG,UAAU,OAAOjL,UAAU,0BAG7E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAO+wB,mBAAsB,0BAA4B,eACrE5wB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,sBAATgK,gBACrBmK,EAAU4nB,mBAAmBt6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,6BAIzE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,wBACL1E,UAAY6K,EAAOkqB,sBAAyB,0BAA4B,eACxE/pB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,sBAATgK,gBACrBmK,EAAUygB,uBAAuBnzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC1C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,wBAAwBuG,UAAU,OAAOjL,UAAU,wBAExE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAO87B,UAAa,0BAA4B,eAC5D/5B,SAAUlB,EAAOi7B,UACjB95B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,IAC3C6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAOyoC,QAAW,0BAA4B,eAC1D1mC,SAAUlB,EAAO4nC,QACjBzmC,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,2BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,SACL1E,UAAY6K,EAAOorC,OAAU,0BAA4B,eACzDjrC,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,eACL1E,UAAY6K,EAAOqrC,aAAgB,0BAA4B,eAC/DlrC,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,6BAInE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,kBACbC,aAActL,EAAOyqC,gBACrBz7C,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,kBAAmB5C,EAAE1O,OAAO2R,cAC1CnD,EAAgB,mBAAmB,GAAM,MAG7C,eAAC,KAAD,CAAcrP,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,2BAGzD,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACA7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJV,SAMC/K,EAAE,oBAEH,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK4W,IAAjD,SACK/Z,EAAE,8BClKAD,qBAAkByD,aA1CjC,YAA4D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACzCk1C,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAmCjC,YAAYixC,GAAkC,CAC/Ev/B,YAAa,WAAQnZ,EAAQX,KAAK,yBADpC,mBAAOy5C,EAAP,KAGMnP,GAHN,KAAyB3qC,KAGN,CACjB+jC,aAAcmS,EACdxrC,KAAM0rC,IAGR,OACE,yBAAQ/4C,UAAU,qCAChB6F,MAAOhG,EAAE,kBACToE,KAAK,GACLqE,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,kDACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,8CACdiS,eAAgB2qC,EAChB1qC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACL86B,aAAcmS,EACdxrC,KAAM0rC,IAGVhtC,eAAgB,CACd,CAAEC,MAAOowC,GAAsCrzC,UAAWukC,GAC1D,CAAEthC,MAAOwpC,GAAmBzsC,UAAWwH,WAnBjD,SAwBE,wBAAMvQ,UAAU,aAAhB,UAA6B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,YAApD,IAAkE,IAAlE,IAAwE7E,EAAE,2DCkMjED,qBAAkByD,aA5MjC,YAAmD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC1Bg5C,GAD4C,EAAX/4C,SACpB,GACXk1C,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChCjT,QAAQC,IAAIw+C,GACZz+C,QAAQC,IAAI0+C,GAEZ,IAAMzL,EAAa,CACjB5G,aAAcmS,EACdxrC,KAAM0rC,GAGR,EAAsEv2C,YAAS45C,GAAsC,CACnHrzC,UAAWukC,IADIhxB,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAyBitC,EAAxD,EAAkDhtC,KAGlD,EAAmDyI,YAAYkxC,IAA/D,mBAAQK,EAAR,KAEA,GAFA,KAAwCh6C,KAEpC2Z,EAAc,OAAO,6BAAIzc,EAAE,+BAE/B,GAAI0c,EAEF,OADAniB,QAAQC,IAAIkiB,GACL,6BAAI1c,EAAE,8BAGfzF,QAAQC,IAAI,aACZD,QAAQC,IAAIs1C,GAEZ,IAUIlgC,EAVEi3B,EAAeiJ,EAAUjJ,aACzB+N,EAAWqE,GAAe,CAC9Bj5C,EAAGA,EACHsS,SAAUu0B,EAAatL,yBAAyBlC,qBAAqBx0B,KACrEgwC,aAAchO,EAAatL,yBAAyB12B,KACpDmyC,UAAWnQ,EAAa3R,sBAAsBrwB,KAC9CiiC,UAAW3uB,GAAsB0uB,EAAaC,WAC9Ct5B,KAAM0rC,IAIJztC,EAAgB,GAyDpB,OAxDIqkC,EAAUiN,wBAAwBt7C,MAAM0E,QAC1C02C,GAAa,EAEbjtC,EAAckgC,EAAUiN,wBAAwBt7C,MAAM,GAAGG,KAEzD6J,EAAc1C,OAAS6G,EAAY7G,OACnC0C,EAAczG,YAAc4K,EAAY5K,YACpC4K,EAAYiD,UACdpH,EAAcoH,QAAUjD,EAAYiD,QAAQrE,IAE1CoB,EAAYqmC,WACdxqC,EAAcwqC,SAAWrmC,EAAYqmC,SAASznC,IAEhD/C,EAAcsR,KAAOnN,EAAYmN,MAAQ,GACzCtR,EAAcyqC,MAAQtmC,EAAYsmC,OAAS,GACvCtmC,EAAY2rB,2BACd9vB,EAAc8vB,yBAA2B3rB,EAAY2rB,yBAAyB/sB,IAE5EoB,EAAYslB,wBACdzpB,EAAcypB,sBAAwBtlB,EAAYslB,sBAAsB1mB,IAEtEoB,EAAYusB,oBACd1wB,EAAc0wB,kBAAoBvsB,EAAYusB,kBAAkB3tB,IAE9DoB,EAAYk3B,YACdr7B,EAAcq7B,UAAY3uB,GAAsBvI,EAAYk3B,YAE1Dl3B,EAAY6jC,UACdhoC,EAAcgoC,QAAUt7B,GAAsBvI,EAAY6jC,UAExD7jC,EAAYwmC,SACd3qC,EAAc2qC,OAASxmC,EAAYwmC,QAEjCxmC,EAAYymC,eACd5qC,EAAc4qC,aAAezmC,EAAYymC,cAEvCzmC,EAAY0mC,kBACd7qC,EAAc6qC,gBAAkB1mC,EAAY0mC,mBAI9C/7C,QAAQC,IAAI,0BACZiR,EAAc1C,OAAS,GACvB0C,EAAczG,YAAc,GAC5ByG,EAAcoH,QAAU,GACxBpH,EAAcsR,KAAO,GACrBtR,EAAcwqC,SAAW,GACzBxqC,EAAcyqC,MAAQ,GACtBzqC,EAAc8vB,yBAA2B,GACzC9vB,EAAcypB,sBAAwB,GACtCzpB,EAAc0wB,kBAAoB,GAClC1wB,EAAcq7B,UAAY,GAC1Br7B,EAAcgoC,QAAU,GACxBhoC,EAAc6qC,gBAAkB,IAIhC,eAAC,GAAD,UACE,sBAAKn2C,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAmBsgB,SAAUs0B,EAAnD,SACE,sBAAKz0C,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJ,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,oBAEjB,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACEiF,cAAeA,EACfE,iBAAkB+wC,GAClB9wC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cAEjBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ,IAAIi7B,OAAYj2B,EACZ4iC,OAAU5iC,EACVhF,EAAOi7B,YACTA,EAAY/uB,GAAmBlM,EAAOi7B,YAGpCj7B,EAAO4nC,UACTA,EAAU17B,GAAmBlM,EAAO4nC,UAItCqJ,EAA6B,CAAE5zC,UAAW,CACxC6C,MAAO,CACL86B,aAAcmS,EACdxrC,KAAM0rC,EACNnwC,OAAQ8C,EAAO9C,OACf/D,YAAa6G,EAAO7G,YACpB6N,QAAShH,EAAOgH,QAChBkK,KAAMlR,EAAOkR,KACbk5B,SAAUpqC,EAAOoqC,SACjBC,MAAOrqC,EAAOqqC,MACd3a,yBAA0B1vB,EAAO0vB,yBACjCrG,sBAAuBrpB,EAAOqpB,sBAC9BiH,kBAAmBtwB,EAAOswB,kBAC1B2K,UAAWA,EACX2M,QAASA,EACT2C,OAAQvqC,EAAOuqC,OACfC,aAAcxqC,EAAOwqC,aACrBC,gBAAiBzqC,EAAOyqC,kBAEzBpqC,eAAgB,CACf,CAACC,MAAOowC,GAAsCrzC,UAAWukC,GACzD,CAACthC,MAAOwpC,GAAmBzsC,UAAWwH,SAEzCtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,kDAAoD,CACjEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDtI,QAAQC,IAAI,uCAAwCqI,EAAMm6C,eAC1DlxC,GAAc,OAtDtB,SA2DG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAW27B,EACX/kC,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EANV,SAQGtR,QAAQC,IAAIwQ,eAOzB,gBAAC,KAAKnF,IAAN,CAAUU,GAAI,EAAd,UACIs2C,EACA,eAAC,GAAD,IAAmC,GAErC,eAAC,GAAD,CACErJ,eAAgBwF,EAChBE,WAAYA,EACZ9qC,WAAW,0BCnNZrO,I,kBAAAA,kBAZf,YAAkC,IAAdC,EAAa,EAAbA,EAAG22C,EAAU,EAAVA,QACrB,OACE,eAAC,GAAD,CAAsBr0C,WAAW,MAAMC,SAAS,oBAAhD,SACE,eAAC,IAAD,CAAMc,GAAI,gCAAkCszC,EAAU,OAAtD,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,yCCdxCi9C,GAAiC1hD,YAAH,ujCAsD9B2hD,GAAuC3hD,YAAH,+jBAgCpCmzB,GAAyBnzB,YAAH,gYAmBtB4hD,GAA0B5hD,YAAH,oNAUvB6hD,GAA6B7hD,YAAH,uMAU1B8hD,GAA6B9hD,YAAH,+KC/ExBwE,qBAAkByD,aAnCjC,YAA4D,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAC9CmoC,EAAU9yC,EAAMkD,OAAO+vC,SAC7B,EAAqCvrC,YAAY8xC,IAAjD,mBAAOC,EAAP,KACM7P,GADN,KAA2B3qC,KACR,CACjB+jC,aAAc8P,IAGhB,OACE,yBAAQx2C,UAAU,6CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,8CACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,0CACdiS,eAAgBqrC,EAChBprC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAO8wC,GAAgC/zC,UAAWukC,QAhB9D,SAqBE,wBAAMttC,UAAU,aAAhB,UAA6B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,YAApD,IAAkE,IAAlE,IAAwE7E,EAAE,aC2HjED,qBAAkByD,aA1IjC,YAAmD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAGhC6yC,GAFc1tC,qBAAWrI,IACAkM,WACfjJ,EAAMkD,OAAO+vC,UACvBD,EAAiB,SACjB1uC,EAAYnI,EAAE,iCACd02B,EAAgB,eAAC,GAAD,CAAWigB,QAASA,IAE1C,EAA4Ch0C,YAASs6C,GAAgC,CACnF/zC,UAAW,CAAE29B,aAAc8P,KADrB/zC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAI9B,GAAInB,EAAS,OACX,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CAAQh2B,QAAQ,EAAMC,QAAQ,MAIlC,GAAIkC,EAAO,OACT,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,6CAKV,IAAM20C,EAAmBx8B,GAAsBrV,EAAK+jC,aAAaC,WAUjE,OATiBiQ,GAAwB,CACvC/2C,EAAGA,EACHsS,SAAUxP,EAAK+jC,aAAatL,yBAAyBlC,qBAAqBx0B,KAC1EgwC,aAAc/xC,EAAK+jC,aAAatL,yBAAyB12B,KACzDmyC,UAAWl0C,EAAK+jC,aAAa3R,sBAAsBrwB,KACnDiwC,UAAWH,IAIR7xC,EAAKq5C,mBAAmB16C,MAAM0E,OAWjC,eAAC,GAAD,CACE0wC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EACfkgB,aAAa,EAJf,SAMA,eAAC,GAAD,CACEzuC,UAAWnI,EAAE,+BAEb6H,SAAU/E,EAAKq5C,mBAAmBt0C,SAClCG,WAAY,WACZjE,EAAU,CACRmF,UAAW,CACTM,MAAO1G,EAAKq5C,mBAAmBt0C,SAAS4B,WAE1CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBuyC,mBAAmB16C,MAC9CoG,EAAW+B,EAAgBuyC,mBAAmBt0C,SAEpD,OAAOgC,EAAS1D,OACZ,CAGErD,KAAM,CACJq5C,mBAAoB,CAClBryC,WAAYH,EAAewyC,mBAAmBryC,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAewyC,mBAAmB16C,OAAzC,aAAmDoI,IACxDhC,cAIN8B,MAzBV,SA6BE,+BACE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACG1D,EAAKq5C,mBAAmB16C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,gBAAC,KAAMxB,IAAP,WACG7F,QAAQC,IAAIoH,GACb,eAAC,KAAMiE,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO,OADjBH,gBAGhB,eAAC,KAAMnE,IAAP,UACIjE,EAAK2iB,QAAWta,KAAOrI,EAAK2iB,SAASpa,OAAO,MAAQ,IADxCH,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKw6C,4BAA4Bv3C,OAEpC,eAAC,KAAMgB,IAAP,UACIjE,EAAKy6C,2BAA8Bz6C,EAAKy6C,2BAA2Bx3C,KAAO,KAE9E,eAAC,KAAMgB,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,KAAD,CAAQA,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,gCAAkCU,EAAMkD,OAAO+vC,SAAW,SAAWl1C,EAAK4M,KACtG7J,MAAM,YAFd,SAGG3E,EAAE,mBAJgCgK,gBAOvC,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAA0B2I,GAAI5M,EAAK4M,SAtBvBxE,8BA3D1B,eAAC,GAAD,CACE6sC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,8CCgBGD,ICzF8BwK,OAAaC,MAAM,CAC9DqI,QAAStI,OACNG,SAAS1K,YAAE,uBACd+c,KAAMxS,OACN0rC,SAAU1rC,OACV2rC,MAAO3rC,OACP+Z,UAAW/Z,OACRG,SAAS1K,YAAE,yBDkFDD,cAAkByD,aA1EF,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG8D,EAAN,EAAMA,QAAgBiH,GAAtB,EAAelH,MAAf,EAAsBkH,cAAcC,EAApC,EAAoCA,OAAQa,EAA5C,EAA4CA,OAAQsI,EAApD,EAAoDA,UAAWrL,EAA/D,EAA+DA,UAAWoL,EAA1E,EAA0EA,gBAAiB8C,EAA3F,EAA2FA,cAA3F,OAC7B,gBAAC,KAAD,WACI,gBAAC,KAAKxQ,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,8BACL1E,UAAY6K,EAAOoxC,4BAA+B,0BAA4B,eAC9EjxC,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,4CACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU0d,wBAAwBpwB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,8BAA8BuG,UAAU,OAAOjL,UAAU,0BAGhF,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,6BACL1E,UAAY6K,EAAOqxC,2BAA8B,0BAA4B,eAC7ElxC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,KAATgK,gBACrBmK,EAAU0d,wBAAwBpwB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC3C,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,6BAA6BuG,UAAU,OAAOjL,UAAU,gCAKnF,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,+BEhEFD,iBAAkByD,aARF,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG22C,EAAN,EAAMA,QAAN,OAC7B,eAAC,IAAD,CAAMtzC,GAAI,gCAAkCszC,EAA5C,SACE,gBAAC,KAAD,CAAQhyC,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBC0GpCD,qBAAkByD,aApGjC,YAAuD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACrC8yC,EAAU9yC,EAAMkD,OAAO+vC,SACvBhuC,EAAS,uCAAmC6tC,GAC5CxuC,EAAYnI,EAAE,qCACd62C,EAAiB,SACjBngB,EAAgB,eAAC,GAAD,CAAwBigB,QAASA,IACvD,EAAkCh0C,YAAS+rB,IAAnC9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAAgCyI,YAAY4xC,GAAyB,CACnElgC,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3By0C,EAAP,oBAIA,GAAI36C,EAAS,OACX,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CAAQh2B,QAAQ,EAAMC,QAAQ,MAIlC,GAAIkC,EAAO,OACT,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,gCAIVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAGlB,OACE,eAAC,GAAD,CACE+zC,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CACEjrB,cAAe,CACb6Y,UAAW,IAAI1gB,KACfw4C,4BAA6B,GAC7BC,2BAA4B,IAG9BzwC,SAAU,SAACC,EAAD,GAAgC,IAElC0Y,EAFazY,EAAoB,EAApBA,cAIfyY,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBg5B,EAAsB,CAAEr0C,UAAW,CACjC6C,MAAO,CACL86B,aAAchjC,EAAMkD,OAAO+vC,SAC3BxyB,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT63B,4BAA6BvwC,EAAOuwC,4BACpCC,2BAA4BxwC,EAAOwwC,6BAEpCnwC,eAAgB,CACf,CAACC,MAAO8wC,GAAgC/zC,UAAW,CAAE29B,aAAchjC,EAAMkD,OAAO+vC,cAGnF1qC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAtCxB,SA0CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,aC8JR/I,qBAAkByD,aA3PjC,YAAwD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MACtC2K,EAAK3K,EAAMkD,OAAOyH,GAClBmoC,EAAU9yC,EAAMkD,OAAO+vC,SACvBhuC,EAAS,uCAAmC6tC,GAC5CE,EAAiB,SACjB1uC,EAAYnI,EAAE,sCACd02B,EAAgB,eAAC,GAAD,CAAwBigB,QAAS9yC,EAAMkD,OAAO+vC,WACpE,EAAkCn0C,YAASu6C,GAAsC,CAC/Eh0C,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,EAAiCyI,YAAY6xC,GAA4B,CACvEngC,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3B00C,EAAP,oBAKA,GAAI56C,EAAS,OACX,eAAC,GAAD,CACEi0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CAAQh2B,QAAQ,EAAMC,QAAQ,MAIlC,GAAIkC,EAAO,OACT,eAAC,GAAD,CACEg0C,eAAgBA,EAChB1uC,UAAWA,EACXuuB,cAAeA,EAHjB,SAKE,6BAAI12B,EAAE,gCAKVzF,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAEI26C,EACAC,EAHEvpC,EAAYrR,EAKdqR,EAAUwpC,kBAAkBvB,8BAC9BqB,EAAqCtpC,EAAUwpC,kBAAkBvB,4BAA4B5tC,IAG3F2F,EAAUwpC,kBAAkBtB,6BAC9BqB,EAAoCvpC,EAAUwpC,kBAAkBtB,2BAA2B7tC,IAK7F,IAAI8V,EAAY,KACZC,EAAU,KASd,OARIpQ,EAAUwpC,kBAAkBr5B,YAC9BA,EAAY,IAAI1gB,KAAKuQ,EAAUwpC,kBAAkBr5B,YAE/CnQ,EAAUwpC,kBAAkBp5B,UAC9BA,EAAU,IAAI3gB,KAAKuQ,EAAUwpC,kBAAkBp5B,UAKjD,eAAC,GAAD,CACEpc,UAAWA,EACXqsC,gBAAiBqC,EACjBngB,cAAeA,EAHjB,SAKE,eAAC,KAAD,CACEjrB,cAAe,CACb6Y,UAAWA,EACXC,QAASA,EACT63B,4BAA6BqB,EAC7BpB,2BAA4BqB,GAG9B9xC,SAAU,SAACC,EAAD,GAAgC,IAElC0Y,EAFazY,EAAoB,EAApBA,cAIfyY,EADE1Y,EAAO0Y,QACCzM,GAAejM,EAAO0Y,SAEtB1Y,EAAO0Y,QAGnBi5B,EAAuB,CAAEt0C,UAAW,CAClC6C,MAAO,CACLyC,GAAIA,EACJ8V,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASA,EACT63B,4BAA6BvwC,EAAOuwC,4BACpCC,2BAA4BxwC,EAAOwwC,6BAEpCnwC,eAAgB,CACf,CAACC,MAAO8wC,GAAgC/zC,UAAW,CAAE29B,aAAchjC,EAAMkD,OAAO+vC,cAGnF1qC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAvCxB,SA2CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACE7C,UAAWA,EACXpJ,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EAAYjF,EAAMkD,OAAO+vC,oBCjF/B/2C,I,YAAAA,iBAAkByD,aA/CjC,YAAmG,IAArExD,EAAoE,EAApEA,EAAmBE,GAAiD,EAAjE2D,MAAiE,EAA1DC,QAA0D,EAAjD5D,UAAiD,IAAvC09C,sBAAuC,MAAxB,GAAwB,MAApBC,mBAAoB,SAChG,OACI,eAAC,GAAD,UACE,sBAAK19C,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,yBAAtB,SACE,sBAAKG,UAAU,0BAIjB,gBAAC,KAAKC,IAAN,WACA,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACIrG,IAEJ,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIq3C,EAkBAC,EACA,kCACE,8BAAK79C,EAAE,kBACP,eAAC,GAAD,CAAcoO,WAAW,cAEzB,oBCpDL0vC,GAA4BviD,YAAH,wnCAwDzBwiD,GAA2BxiD,YAAH,2oDA2FxBmzB,GAAyBnzB,YAAH,2/BAiDtByiD,GAAyBziD,YAAH,wMCpM5B,SAASmV,KACd,IAAIxB,EAAWtQ,aAAagS,QAAQ9R,EAAKf,0BACxB,OAAbmR,IACFA,GAAW,GAGb,IAAIyB,EAAY,CACdzB,SAAwB,SAAbA,GAKb,OAFA3U,QAAQC,IAAImW,GAELA,EC6DM5Q,qBAAkByD,aA5DjC,YAA0D,IAA3BxD,EAA0B,EAA1BA,EAAmB4B,GAAO,EAAvBiC,MAAuB,EAAhBC,QAAgB,EAAPlC,MAChD,EAA+B2J,YAAYyyC,IAApCC,EAAP,oBACM/xC,EAAiB,CACrB,CAAEC,MAAO2xC,GAA2B50C,UAAWwH,OAGjD,OAAK9O,EAAKsN,SA4BN,yBAAQ/O,UAAU,8CAChB6F,MAAOhG,EAAE,mBACTyI,QAAS,WACPipC,GAAkB,CAChB1xC,EAAGA,EACH8R,WAAY9R,EAAE,yCACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,sBACdyxC,gBAAiBwM,EACjB/rC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTU,UAAU,IAGdhD,eAAgBA,MAhBxB,SAoBE,wBAAM/L,UAAU,aAAhB,UAA6B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,UAApD,IAAgE,IAAhE,IAAsE7E,EAAE,SA9C1E,yBAAQG,UAAU,8CACd6F,MAAOhG,EAAE,qBACTyI,QAAS,WACP+oC,GAAgB,CACdxxC,EAAGA,EACH8R,WAAY9R,EAAE,uCACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,oBACdyxC,gBAAiBwM,EACjB/rC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTU,UAAU,IAGdhD,eAAgBA,MAhB1B,SAoBE,wBAAM/L,UAAU,aAAhB,UAA6B,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,UAApD,IAAgE,IAAhE,IAAsE7E,EAAE,aCF3EpB,aAAagS,QAAQ9R,EAAKf,2BAC7Ba,aAAaC,QAAQC,EAAKf,0BAA0B,GAgKvCgC,I,GAAAA,iBAAkByD,aA5JjC,YAAuC,IAAdxD,EAAa,EAAbA,EAAG8D,EAAU,EAAVA,QAEpBgJ,EADc7D,qBAAWrI,IACAkM,WAC/B,EAAqDnK,YAASm7C,GAA2B,CACvF50C,UAAWwH,OADL9N,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAASrL,EAAvC,EAAuCA,UAIjC65C,EAAiB,eAAC,GAAD,CAAsBt7C,WAAW,MAAMC,SAAS,gBAAhD,SACrB,gBAAC,KAAD,CAAQoC,MAAM,yBACN8D,QAAS,kBAAM3E,EAAQX,KAAK,yBADpC,UAEE,eAAC,KAAD,CAAM8L,OAAO,KAAKpK,KAAK,gBAFzB,IAE2C7E,EAAE,4BAIzCk+C,EAAoB,gBAAC,KAAK70C,QAAN,WACxB,eAAC,KAAD,CAAQ1E,MAAgE,UAAxD/F,aAAagS,QAAQ9R,EAAKf,0BAAyC,UAAW,YACtF2G,KAAK,KACL+D,QAAS,WACP7J,aAAaC,QAAQC,EAAKf,0BAA0B,GACpDqR,EAAQsB,OAJlB,SAOG1Q,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAgE,SAAxD/F,aAAagS,QAAQ9R,EAAKf,0BAAwC,UAAW,YACrF2G,KAAK,KACLvE,UAAU,OACVsI,QAAS,WACP7J,aAAaC,QAAQC,EAAKf,0BAA0B,GACpDqR,EAAQsB,OALlB,SAQG1Q,EAAE,wBAIP,GAAI4C,EACF,OACE,eAAC,GAAD,CAAoBg7C,eAAgBA,EAApC,SACE,eAAC,GAAD,CACEz1C,UAAWnI,EAAE,yBACboI,cAAe81C,EAFjB,SAIE,eAAC,KAAD,CAAQx9C,QAAQ,EACRC,QAAQ,QAOxB,GAAIkC,EACF,OACE,eAAC,GAAD,CAAoB+6C,eAAgBA,EAApC,SACE,eAAC,GAAD,CACEz1C,UAAWnI,EAAE,yBACboI,cAAe81C,EAFjB,SAIGl+C,EAAE,0CAMXzF,QAAQC,IAAIsI,GAEZ,IAAMq7C,EAAiBr7C,EAAKq7C,eAE5B,OACE,eAAC,GAAD,CAAoBP,eAAgBA,EAApC,SACE,eAAC,GAAD,CACEz1C,UAAWnI,EAAE,yBACboI,cAAe81C,EACfr2C,SAAUs2C,EAAet2C,SACrBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO20C,EAAet2C,SAAS4B,WAEjCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBu0C,eAAe18C,MAC1CoG,EAAW+B,EAAgBu0C,eAAet2C,SAEhD,OAAOgC,EAAS1D,OACZ,CAGEg4C,eAAgB,CACdr0C,WAAYH,EAAew0C,eAAer0C,WAC1CrI,MAAM,GAAD,oBAAOkI,EAAew0C,eAAe18C,OAArC,aAA+CoI,IACpDhC,aAGJ8B,MAvBhB,SA4BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACI23C,EAAe18C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzB,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACIoE,KAAOrI,EAAK4L,MAAMrD,OAAO2C,GAD7B,IAC2C,2BAE3C,gBAAC,KAAMjH,IAAP,WACE,uBAAMG,MAAQpE,EAAKiD,KAAnB,SAA4BjD,EAAKiD,KAAKqO,MAAM,MAD9C,IAC2D,wBACzD,wBAAO/S,UAAU,aAAjB,SACIyB,EAAKy3B,qBAAqBx0B,UAGhC,eAAC,KAAMgB,IAAP,UAEKjE,EAAK2/B,QAAW3/B,EAAK2/B,QAAQ1kB,SAAS3J,MAAM,IAAM,KAGvD,eAAC,KAAMrN,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKosB,gBAQ5B,eAAC,KAAMnoB,IAAP,CAAW1F,UAAU,aAArB,SACIyB,EAAKsN,SACL,uBAAM/O,UAAU,aAAhB,SAA8BH,EAAE,+BAChC,eAAC,KAAD,CAAQG,UAAU,SACVsI,QAAS,kBAAM3E,EAAQX,KAAK,yBAA2BvB,EAAK4M,KAC5D7J,MAAM,YAFd,SAGG3E,EAAE,mBAN8BgK,gBAUvC,eAAC,KAAMnE,IAAP,UACE,eAAC,GAAD,CAAsBjE,KAAMA,QAnChBoI,gCCzJjBo0C,GAA6B7zC,OAAaC,MAAM,CAC3D2Q,cAAe5Q,OACfyjB,YAAazjB,OACb8zC,iBAAkB9zC,OAClB8uB,qBAAsB9uB,OACnBG,SAAS1K,YAAE,uBACdm8B,kBAAmB5xB,OACnBg3B,QAASh3B,OACT+zC,SAAU/zC,OACV1F,KAAM0F,OACDK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBAChBu+C,QAASh0C,OACTi0C,QAASj0C,OACTvF,YAAauF,OACb+rC,gBAAiB/rC,SCuMJxK,iBAAkByD,aAxMP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAYmU,GAAf,EAAMrQ,QAAN,EAAeqQ,WAAWpJ,EAA1B,EAA0BA,aAAciM,EAAxC,EAAwCA,cAAe9C,EAAvD,EAAuDA,gBAAiBrI,EAAxE,EAAwEA,OAAQb,EAAhF,EAAgFA,OAAQlC,EAAxF,EAAwFA,UAAxF,OACxB,gBAAC,KAAD,WACE,gBAAC,KAAKtC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,+BAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,aAGjD,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAOmiB,cAChB,uBAAM7tB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,6BAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,aAG/C,eAAC,KAAKvF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,mBACL2W,QAAS3P,EAAOwyC,mBAChB,uBAAMl+C,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,4CAEnD,eAAC,KAAD,CAAc6E,KAAK,mBAAmBuG,UAAU,gBAItD,gBAAC,KAAKhL,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,uBACL1E,UAAY6K,EAAOquB,qBAAwB,0BAA4B,eACvEluB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0CAATgK,gBACrBmK,EAAUskB,sBAAsBh3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACzC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,uBAAuBuG,UAAU,OAAOjL,UAAU,0BAGzE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAOmxB,kBAAqB,0BAA4B,eACpEhxB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU4nB,mBAAmBt6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,6BAIxE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,UACL1E,UAAY6K,EAAOu2B,QAAW,0BAA4B,eAC1Dp2B,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,yCAATgK,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,WACL1E,UAAY6K,EAAOszC,SAAY,0BAA4B,eAC3DnzC,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAI3D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAOuzC,QAAW,0BAA4B,eAC1DpzC,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,4BAI9D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,UACbC,aAActL,EAAO2yC,QACrB3jD,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,UAAW5C,EAAE1O,OAAO2R,cAClCnD,EAAgB,WAAW,GAAM,MAGrC,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,4BAI9D,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAGzC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,4BAIlE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,2BAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,kBACbC,aAActL,EAAOyqC,gBACrBz7C,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,kBAAmB5C,EAAE1O,OAAO2R,cAC1CnD,EAAgB,mBAAmB,GAAM,MAG7C,eAAC,KAAD,CAAcrP,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,+BAKxE,gBAAC,KAAKqI,OAAN,WACE,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACG3E,EAAE,gCC/KPy+C,GAAwBljD,YAAH,mMAoHZwE,IC1IX2+C,GACA1b,GACA2b,GACAC,GACAC,GDsIW9+C,iBAAkByD,aAxGjC,YAA2C,IAAfxD,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QACvBgF,EAAY,mBACZ80C,EAAiB,eAAC,IAAD,CAAMv6C,GAAIyF,EAAV,SACnB,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAInD,EAAiC2C,YAAS+rB,IAAlC9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAAgCyI,YAAYkzC,IAApCK,EAAR,oBAEA,GAAIl8C,EACF,OACE,eAAC,GAAD,CAAoBg7C,eAAgBA,EAApC,SACE,eAAC,KAAD,CAAM53C,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,UAOzC,GAAImC,EACF,OACE,eAAC,GAAD,CAAoB+6C,eAAgBA,EAApC,SACE,eAAC,KAAD,CAAM53C,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,uCAObzF,QAAQC,IAAI,oCACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EAElB,OACE,eAAC,GAAD,CAAoB86C,eAAgBA,EAApC,SACE,eAAC,KAAD,CAAM53C,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAD,CACEyL,cAAe,CACb0P,eAAe,EACf6S,aAAa,EACbnpB,KAAM,GACNG,YAAa,IAEf2G,iBAAkByyC,GAClBxyC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZizC,EAAoB,CAAE51C,UAAW,CAC/B6C,MAAO,CACLoP,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpB+wB,iBAAkBlzC,EAAOkzC,iBACzB1lB,qBAAsBxtB,EAAOwtB,qBAC7B8C,kBAAmBtwB,EAAOswB,kBAC1Bt3B,KAAMgH,EAAOhH,KACb05C,QAAS1yC,EAAO0yC,QAChBC,QAAS3yC,EAAO2yC,QAChBx5C,YAAa6G,EAAO7G,YACpBu8B,QAAS11B,EAAO01B,QAChB+c,SAAUzyC,EAAOyyC,SACjBhI,gBAAiBzqC,EAAOyqC,kBAEzBpqC,eAAgB,CACf,CAAEC,MAAO2xC,GAA2B50C,UAAWwH,SAElDtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,qCAAuC,CACpDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzCxB,SA6CG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,eCzCV/I,kBAlFW,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAGg/C,EAAN,EAAMA,QAAS5wC,EAAf,EAAeA,WAAf,OACxB,gBAAC,KAAKnD,MAAN,CAAYoD,aAAa,EAAzB,UACgCqwC,GAAb,YAAftwC,EAC4B40B,GAAb,YAAf50B,EAC+BuwC,GAAhB,eAAfvwC,EAC+BwwC,GAAhB,eAAfxwC,EAC0BywC,GAAX,UAAfzwC,EAGF,eAAC,GAAD,CACI7L,SAAS,gBACTD,WAAW,SAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAE,iCAA4B27C,GAC9B17C,KAAK,SACL5C,OAAQg+C,GALZ,SAOK1+C,EAAE,+BANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,sBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAE,iCAA4B27C,EAA5B,YACF17C,KAAK,YACL5C,OAAQsiC,GALZ,SAOKhjC,EAAE,kCANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,yBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAE,iCAA4B27C,EAA5B,eACF17C,KAAK,QACL5C,OAAQi+C,GALZ,SAOK3+C,EAAE,qCANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,gBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAE,iCAA4B27C,EAA5B,eACF17C,KAAK,WACL5C,OAAQk+C,GALZ,SAOK5+C,EAAE,qCANEgK,kBASX,eAAC,GAAD,CACIzH,SAAS,qBACTD,WAAW,OAFf,SAIE,eAAC,KAAKgM,UAAN,CAEInO,UAAU,4BACVkD,GAAE,iCAA4B27C,EAA5B,UACF17C,KAAK,QACL5C,OAAQm+C,GALZ,SAOK7+C,EAAE,gCANEgK,wBCrEAjK,kBATe,SAAC,GAAD,IAAGC,EAAH,EAAGA,EAAH,OAC5B,sBAAKG,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAG,mBACHlD,UAAU,2BADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,kBAF3B,IAE+C7E,EAAE,mBAFjD,IAEsEA,EAAE,iCCgC7DD,qBAAkByD,aA9BjC,YAAuH,IAAlFxD,EAAiF,EAAjFA,EAAG6D,EAA8E,EAA9EA,MAAgB3D,GAA8D,EAAvE4D,QAAuE,EAA9D5D,UAAU++C,EAAoD,EAApDA,kBAAoD,IAAjCrB,sBAAiC,MAAlB,GAAkB,EAAdxvC,EAAc,EAAdA,WAChG4wC,EAAUn7C,EAAMkD,OAAOm4C,SAE7B,OACI,eAAC,GAAD,UACE,sBAAK/+C,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,yBAAtB,SACE,uBAAKG,UAAU,sBAAf,UAEE,eAAC,GAAD,IACE8+C,OAGN,gBAAC,KAAK7+C,IAAN,WACA,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACIrG,IAEJ,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACIq3C,EACF,8BAAK59C,EAAE,uBACP,eAACm/C,GAAD,CAAuB/wC,WAAYA,EAAY4wC,QAASA,qBCgEvDj/C,I,GAAAA,iBAAkByD,aApEjC,YAWG,IAVCxD,EAUF,EAVEA,EACA6D,EASF,EATEA,MAGA3D,GAMF,EARE4D,QAQF,EAPEmpC,UAOF,EANE/sC,UACAkO,EAKF,EALEA,WACAjG,EAIF,EAJEA,UACA82C,EAGF,EAHEA,kBACArB,EAEF,EAFEA,eAII9wC,GAFN,EADEhE,UAEkBG,qBAAWrI,IACAkM,YACzBkyC,EAAUn7C,EAAMkD,OAAOm4C,SAGxB/2C,IACHA,EAAYnI,EAAE,+BAGhB,MAAiC2C,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EACF,OACE,eAAC,GAAD,CAA2Bq8C,kBAAmBA,EAAmBrB,eAAgBA,EAAgBxvC,WAAYA,EAA7G,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,UAOzC,GAAImC,EACF,OACE,eAAC,GAAD,CAA2Bo8C,kBAAmBA,EAAmBrB,eAAgBA,EAAgBxvC,WAAYA,EAA7G,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,uCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbxnB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBpuC,EACtB,wBAAM7Q,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEV,OACE,eAAC,GAAD,CAA2Bnc,UAAWA,EAAW82C,kBAAmBA,EAAmBrB,eAAgBA,EAAgBxvC,WAAYA,EAAnI,SACE,gBAAC,KAAD,WACE,eAAC,KAAKrI,OAAN,UACE,gBAAC,KAAKwC,MAAN,WAAaJ,EAAb,IAAyBi3C,OAE1Bl/C,WC/DHm/C,GAAwB9jD,YAAH,mNA4IZwE,I,YAAAA,iBAAkByD,aAjIjC,YAAiD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACvB2K,GADwC,EAAV1K,QACzBD,EAAMkD,OAAOm4C,UAElB9wC,EAAa,UAEnB,EAAiCzL,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAgCyI,YAAY8zC,IAApCC,EAAR,oBAGA,GAAI18C,EACF,OACE,eAAC,GAAD,CAAuBwL,WAAYA,EAAnC,SACE,eAAC,KAAK5H,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,QAMvC,GAAImC,EACF,OACE,eAAC,GAAD,CAAuBuL,WAAYA,EAAnC,SACE,eAAC,KAAK5H,KAAN,UACGxG,EAAE,qCAMX,IAAM4P,EAAc9M,EAAKgpC,cACnB33B,EAAYrR,EAEdy8C,EAA4B,GAC5B3vC,EAAYusB,oBACdojB,EAA4B3vC,EAAYusB,kBAAkB3tB,IAG5D,IAAIgxC,EAAiB,GACjB5vC,EAAY2xB,UACdie,EAAiB5vC,EAAY2xB,QAAQ/yB,IAGvC,IAAIixC,EAAkB,GAKtB,OAJI7vC,EAAY0uC,WACdmB,EAAkB7vC,EAAY0uC,SAAS9vC,IAIvC,eAAC,GAAD,CAAuBJ,WAAYA,EAAnC,SACI,eAAC,KAAD,CACE3C,cAAe,CACb0P,cAAevL,EAAYuL,cAC3B6S,YAAape,EAAYoe,YACzBqwB,iBAAkBzuC,EAAYyuC,iBAC9BhlB,qBAAsBzpB,EAAYypB,qBAAqB7qB,GACvD2tB,kBAAmBojB,EACnB16C,KAAM+K,EAAY/K,KAClB05C,QAAS3uC,EAAY2uC,QACrBC,QAAS5uC,EAAY4uC,QACrBx5C,YAAa4K,EAAY5K,YACzBu8B,QAASie,EACTlB,SAAUmB,EACVnJ,gBAAiB1mC,EAAY0mC,iBAE/B3qC,iBAAkByyC,GAClBxyC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAIgW,EAAc,CAChBrT,GAAIA,EACJ2M,cAAetP,EAAOsP,cACtB6S,YAAaniB,EAAOmiB,YACpBqwB,iBAAkBxyC,EAAOwyC,iBACzBhlB,qBAAsBxtB,EAAOwtB,qBAC7B8C,kBAAmBtwB,EAAOswB,kBAC1Bt3B,KAAMgH,EAAOhH,KACb05C,QAAS1yC,EAAO0yC,QAChBC,QAAS3yC,EAAO2yC,QAChBx5C,YAAa6G,EAAO7G,YACpBsxC,gBAAiBzqC,EAAOyqC,iBAGtBzqC,EAAO01B,UACT1f,EAAW,QAAchW,EAAO01B,SAG9B11B,EAAOyyC,WACTz8B,EAAW,SAAehW,EAAOyyC,UAGnCgB,EAAoB,CAAEp2C,UAAW,CAC/B6C,MAAO8V,GACN3V,eAAgB,CACf,CAAEC,MAAO2xC,GAA2B50C,UAAWwH,SAElDtE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,sCAAwC,CACrDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1DxB,SA8DG,gBAAGf,EAAH,EAAGA,aAAciM,EAAjB,EAAiBA,cAAe9C,EAAhC,EAAgCA,gBAAiBlJ,EAAjD,EAAiDA,OAAQa,EAAzD,EAAyDA,OAAzD,OACC,eAAC,GAAD,CACEsI,UAAWA,EACXpJ,aAAcA,EACdiM,cAAeA,EACf9C,gBAAiBA,EACjBlJ,OAAQA,EACRa,OAAQA,EACR/C,UAvHM,8BC3CP42C,GAAsCnkD,YAAH,20BA8CnCokD,GAAoCpkD,YAAH,miCA+DjCqkD,GAAiCrkD,YAAH,gKAS9BmzB,GAAyBnzB,YAAH,gxBC/BpBwE,qBAAkByD,aAzDjC,YAAmI,IAA/FxD,EAA8F,EAA9FA,EAAG6D,EAA2F,EAA3FA,MAA2BgE,GAAgE,EAApF/D,QAAoF,EAA3EmpC,UAA2E,EAAhEplC,UAAUG,EAAsD,EAAtDA,WAAYoG,EAA0C,EAA1CA,WAAYlO,EAA8B,EAA9BA,SAA8B,IAApB09C,sBAAoB,MAAL,GAAK,EAE1H9wC,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,8BAEdg/C,EAAUn7C,EAAMkD,OAAOm4C,SAG7B,EAAiCv8C,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAK1B,GAAIF,EACF,OACE,eAAC,GAAD,CAA2Bg7C,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,UAOzC,GAAImC,EACF,OACE,eAAC,GAAD,CAA2B+6C,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,uCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbxnB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBpuC,EACtB,wBAAM7Q,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEV,OACE,eAAC,GAAD,CAA2Bs5B,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,GAAD,CACEjG,UAAW,kCAAOA,EAAP,IAAmBi3C,KAC9Bv3C,SAAUA,EACVG,WAAYA,EAHd,SAKG9H,UCnCQH,qBAAkByD,aAnCjC,YAA+D,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IACjDwwC,EAAUn7C,EAAMkD,OAAOm4C,SAC7B,EAAgD3zC,YAAYq0C,IAA5D,mBAAOC,EAAP,KACMpS,GADN,KAAsC3qC,KACnB,CACjBgpC,cAAekT,IAGjB,OACE,yBAAQ7+C,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,iDACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,6CACdiS,eAAgB4tC,EAChB3tC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOuzC,GAAqCx2C,UAAWukC,QAhBnE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBC0Hd9E,qBAAkByD,aArIjC,YAA6C,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACnB+c,GADoC,EAAV9c,QACZmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAC/BtmB,QAAQC,IAAIomB,GAEZ,IAAMo+B,EAAUn7C,EAAMkD,OAAOm4C,SACvB9wC,EAAa,aAEbwvC,EAAiB,eAAC,IAAD,CAAMv6C,GAAE,gCAA2B27C,EAA3B,mBAAR,SACrB,gBAAC,KAAD,CAAQr6C,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,uCAI/C,EAA4C2C,YAAS+8C,GAAqC,CACxFx2C,UAAW,CACT4iC,cAAekT,KAFXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA2BwL,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACG59C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA2BuL,WAAYA,EAAYwvC,eAAgBA,EAAnE,UACE,6BAAI59C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMg9C,EAAgBh9C,EAAKg9C,cACrBj4C,EAAW/E,EAAKg9C,cAAcj4C,SAGpC,OAAKi4C,EAAcr+C,MAAM0E,OA+BvB,eAAC,GAAD,CAA2BiI,WAAYA,EAAYvG,SAAUA,EAAUG,WAzBtD,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOs2C,EAAcj4C,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBk2C,cAAcr+C,MACzCoG,EAAW+B,EAAgBk2C,cAAcj4C,SAE/C,OAAOgC,EAAS1D,OACZ,CAGE25C,cAAe,CACbh2C,WAAYH,EAAem2C,cAAch2C,WACzCrI,MAAM,GAAD,oBAAOkI,EAAem2C,cAAcr+C,OAApC,aAA8CoI,IACnDhC,aAGJ8B,MAMuFi0C,eAAgBA,EAA/G,SACE,gBAAC,KAAD,WACE,eAAC,KAAM73C,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MARcC,kBAWlB,eAAC,KAAMxD,KAAP,UACKs5C,EAAcr+C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,GADjC,IAC8C,wBAE5C,yBAAO3M,UAAU,aAAjB,UACG8J,KAAOrI,EAAK0iB,UAAY,IAAM1iB,EAAKklC,WAAW38B,OAAOw8B,GADxD,IACsE,MACnE18B,KAAOrI,EAAK0iB,UAAY,IAAM1iB,EAAK6xC,SAAStpC,OAAOw8B,GAFtD,IAEqE,UAGvE,gBAAC,KAAM9gC,IAAP,WACGjE,EAAKiD,KADR,IACc,wBACZ,sBAAK4B,wBAAyB,CAACC,OAAQ9E,EAAKoD,aAAc7E,UAAU,kBAEtE,gBAAC,KAAM0F,IAAP,WACGjE,EAAK25B,yBAAyBlC,qBAAqBx0B,KADtD,IAC4D,wBAC1D,wBAAO1E,UAAU,aAAjB,SAA+ByB,EAAK25B,yBAAyB12B,UAE/D,gBAAC,KAAMgB,IAAP,WACGjE,EAAKiR,SAAWjR,EAAKiR,QAAQgK,SAC5Bjb,EAAKq0C,SAAY,wBAAM91C,UAAU,aAAhB,UAA6B,wBAAOyB,EAAKq0C,SAASp5B,YAAmB,MAE1F,gBAAC,KAAMhX,IAAP,WACGjE,EAAKm+C,gBADR,IAC0Bn+C,EAAKw0C,UAE/B,eAAC,KAAMvwC,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,kBAE5B,eAAC,KAAMtV,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,gCAA2B27C,EAA3B,4BAAsDp9C,EAAK4M,IAAnE,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAA6BqO,GAAI5M,EAAK4M,SApC1BxE,0BA9C1B,eAAC,GAAD,CAA2BoE,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,6BAAI59C,EAAE,8CCtECggD,GAAiCz1C,OAAaC,MAAM,CAC/D2Q,cAAe5Q,OACf1F,KAAM0F,OACDK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBAChBo2C,OAAQ7rC,OACLG,SAAS1K,YAAE,uBACdu7B,yBAA0BhxB,OACvBG,SAAS1K,YAAE,uBACdskB,UAAW/Z,OACRG,SAAS1K,YAAE,uBACd8mC,UAAWv8B,OACR4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,uBACdyzC,QAASlpC,OACN4Z,UAAUnkB,YAAE,sBACZ0K,SAAS1K,YAAE,uBACd6S,QAAStI,OACT0rC,SAAU1rC,SCOGxK,qBAAkByD,aAdjC,YAAkD,IAAbxD,EAAY,EAAZA,EAC7Bg/C,EADyC,EAATn7C,MAChBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,eAEf,OACE,eAAC,IAAD,CAAM37C,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCkKtCD,I,GAAAA,iBAAkByD,aAnKjC,YAYC,IAXCxD,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OACAsI,EAKF,EALEA,UACArL,EAIF,EAJEA,UACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAIA,OAFF,EADE4U,UAIE,gBAAC,KAAD,WACE,gBAAC,KAAKplB,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,0CAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,eAInD,eAAC,KAAKhL,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAI3D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,2BACL1E,UAAY6K,EAAOuwB,yBAA4B,0BAA4B,eAC3EpwB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAU+mB,0BAA0Bz5B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7C,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKy3B,qBAAqBx0B,KAA9D,MAAuEjD,EAAKiD,OAA/CmF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,2BAA2BuG,UAAU,OAAOjL,UAAU,0BAG7E,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,SACL1E,UAAY6K,EAAOorC,OAAU,0BAA4B,eACzDjrC,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,aAAa,IAE/BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAO87B,UAAa,0BAA4B,eAC5D/5B,SAAUlB,EAAOi7B,UACjB95B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,IAC3C6/B,WAAW,IAMb,eAAC,KAAD,CAAclvC,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACC,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACG,eAAC,GAAD,CACEG,UAAY6K,EAAOyoC,QAAW,0BAA4B,eAC1D1mC,SAAUlB,EAAO4nC,QACjBzmC,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,UAAWxJ,IAC7CP,OAAQ,kBAAMiH,EAAgB,WAAW,IACzC6/B,WAAW,IAEb,eAAC,KAAD,CAAclvC,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,6BAI9D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,UACL1E,UAAY6K,EAAO6H,QAAW,0BAA4B,eAC1D1H,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,6CACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,WACL1E,UAAY6K,EAAOirC,SAAY,0BAA4B,eAC3D9qC,aAAa,MAHrB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAUiuB,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC5B,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKib,UAAZ7S,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,gCAKjE,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BCrJXigD,GAA8B1kD,YAAH,gMA6HlBwE,qBAAkByD,aAlHjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAC/Bk7C,EADiD,EAATn7C,MACxBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,gBACT5wC,EAAa,aACbjG,EAAYnI,EAAE,kCAEpB,EAAiCuL,YAAY00C,GAA6B,CACxEhjC,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3Bo3C,EAAP,oBAGA,EAA4Cv9C,YAAS+rB,IAA7C9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAElB86C,GAFN,EAA8B75C,UAEP,eAAC,GAAD,KAEvB,GAAInB,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAM5O,EAAYrR,EAGlB,OAFAvI,QAAQC,IAAI2Z,GAGV,eAAC,GAAD,CACEypC,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb0P,eAAe,EACftW,KAAM,GACNuxC,OAAQ,GACR7a,yBAA0B,GAC1BjX,UAAW,IAAI1gB,KACfkjC,UAAW,GACX2M,QAAS,GACT5gC,QAAS,GACTojC,SAAU,IAEZtqC,iBAAkBq0C,GAClBp0C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZq0C,EAAuB,CAAEh3C,UAAW,CAClC6C,MAAO,CACL+/B,cAAekT,EACfjV,cAAe,WACfoK,kBAAmB,EACnBgM,iBAAkB,iBAClBhlC,cAAetP,EAAOsP,cACtBtW,KAAMgH,EAAOhH,KACbuxC,OAAQvqC,EAAOuqC,OACf7a,yBAA0B1vB,EAAO0vB,yBACjC1oB,QAAShH,EAAOgH,QAChBojC,SAAUpqC,EAAOoqC,SACjB3xB,UAAWxM,GAAejM,EAAOyY,WACjCwiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,WAEpCvnC,eAAgB,CACf,CAACC,MAAOuzC,GAAqCx2C,UAAW,CACtD4iC,cAAekT,OAGpB5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhDtB,SAoDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRsI,UAAWA,EACXrL,UAAWA,aClHR/I,sBArBf,YAA2E,IAAtCC,EAAqC,EAArCA,EAAGU,EAAkC,EAAlCA,OAAQs+C,EAA0B,EAA1BA,QAASxL,EAAiB,EAAjBA,eACvD,OACE,eAAC,GAAD,CACEjnC,SAAS,MACTugC,KAAM,CACF,CACEjoC,KAAM,UACNmB,MAAOhG,EAAE,6CACT4G,KAAK,yBAAD,OAA2Bo4C,EAA3B,4BAAsDxL,IAE5D,CACE3uC,KAAM,aACNmB,MAAOhG,EAAE,gDACT4G,KAAK,yBAAD,OAA2Bo4C,EAA3B,4BAAsDxL,EAAtD,iBAGV9yC,OAAQA,OCoFCX,I,GAAAA,iBAAkByD,aAzEjC,YAAkF,IAA1CxD,EAAyC,EAAzCA,EAAG6D,EAAsC,EAAtCA,MAAgBopC,GAAsB,EAA/BnpC,QAA+B,EAAtBmpC,WAAW/sC,EAAW,EAAXA,SAE9D4M,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,mCAGdg/C,EAAUn7C,EAAMkD,OAAOm4C,SACvB1L,EAAiB3vC,EAAMkD,OAAOyH,GAEpC,EAAiC7L,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAA+EH,YAASg9C,GAAmC,CACzHz2C,UAAW,CACTsF,GAAIglC,KAFS4M,EAAjB,EAAQx9C,QAAiCy9C,EAAzC,EAAkCx9C,MAA4By9C,EAA9D,EAAwDx9C,KAMlD86C,EAAiB,eAAC,GAAD,IAEvB,GAAIh7C,GAAWw9C,EACb,OACE,eAAC,GAAD,CAA2BxC,eAAgBA,EAA3C,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAA2BzH,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAChF,eAAC,KAAKhtC,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,WAOzC,GAAImC,GAASw9C,EACX,OACE,eAAC,GAAD,CAA2BzC,eAAgBA,EAA3C,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAA2BzH,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAChF,eAAC,KAAKhtC,KAAN,UACGxG,EAAE,wCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbjF,EAAeyZ,EAAazZ,aAC5BviB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBvY,EACtB,wBAAM1mC,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEJi8B,EAAwB1Z,EAC9B,wBAAM1mC,UAAU,aAAhB,eACK0mC,EAAahiC,QACR,GAEV,OACE,eAAC,GAAD,CAA2BuJ,WAzDV,aAyDkCwvC,eAAgBA,EAAnE,SACE,gBAAC,KAAD,WACE,eAAC,KAAK73C,OAAN,UACE,gBAAC,KAAKwC,MAAN,WAAaJ,EAAb,IAAyBi3C,EAAzB,IAAwCmB,OAE1C,eAAC,GAAD,CAA2B7/C,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAC/EtzC,WC1EHsgD,GAAiCjlD,YAAH,gMAwIrBwE,I,GAAAA,iBAAkByD,aA7HjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACzCm7C,EAAUn7C,EAAMkD,OAAOm4C,SACvB1L,EAAiB3vC,EAAMkD,OAAOyH,GAC9B1F,EAAS,gCAA4Bk2C,EAA5B,gBACT/R,EAAY,UACZ9kC,EAAYnI,EAAE,mCAEpB,EAAoCuL,YAAYi1C,IAAzCC,EAAP,oBACA,EAA4C99C,YAASg9C,GAAmC,CACtFz2C,UAAW,CACTsF,GAAIglC,KAFA5wC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKlB86C,GALN,EAA8B75C,UAKP,eAAC,GAAD,KAEvB,GAAInB,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAM5O,EAAYrR,EACZ+jC,EAAe/jC,EAAK+jC,aAC1BtsC,QAAQC,IAAI2Z,GAEZ,IAAIwgC,EAAmB,KACnB9N,EAAaC,YACf6N,EAAmBx8B,GAAsB0uB,EAAaC,YAExD,IAAIoO,EAAiB,KAMrB,OALIrO,EAAa4M,UACfyB,EAAiB/8B,GAAsB0uB,EAAa4M,UAKpD,eAAC,GAAD,CACEmK,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb0P,cAAe0rB,EAAa1rB,cAC5BtW,KAAMgiC,EAAahiC,KACnBuxC,OAAQvP,EAAauP,OACrB7a,yBAA0BsL,EAAatL,yBAAyB/sB,GAChE8V,UAAWuiB,EAAaviB,UACxBwiB,UAAW6N,EACXlB,QAASyB,EACTriC,QAAUg0B,EAAah0B,QAAWg0B,EAAah0B,QAAQrE,GAAK,GAC5DynC,SAAWpP,EAAaoP,SAAYpP,EAAaoP,SAASznC,GAAK,IAEjE7C,iBAAkBq0C,GAClBp0C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ40C,EAA0B,CAAEv3C,UAAW,CACrC6C,MAAO,CACLyC,GAAIglC,EACJr4B,cAAetP,EAAOsP,cACtBtW,KAAMgH,EAAOhH,KACbuxC,OAAQvqC,EAAOuqC,OACf7a,yBAA0B1vB,EAAO0vB,yBACjC1oB,QAAShH,EAAOgH,QAChBojC,SAAUpqC,EAAOoqC,SACjB3xB,UAAWxM,GAAejM,EAAOyY,WACjCwiB,UAAW/uB,GAAmBlM,EAAOi7B,WACrC2M,QAAS17B,GAAmBlM,EAAO4nC,WAEpCvnC,eAAgB,CACf,CAACC,MAAOuzC,GAAqCx2C,UAAW,CACtD4iC,cAAekT,OAGpB5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA9CtB,SAkDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRsI,UAAWA,EACXrL,UAAWA,aCzJV43C,GAAsCnlD,YAAH,umBCoHjCwE,qBAAkByD,aAlFjC,YAA8G,IAAhExD,EAA+D,EAA/DA,EAAG6D,EAA4D,EAA5DA,MAAgBopC,GAA4C,EAArDnpC,QAAqD,EAA5CmpC,WAAWjlC,EAAiC,EAAjCA,WAAYH,EAAqB,EAArBA,SAAU3H,EAAW,EAAXA,SAE1F4M,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,mCACdoO,EAAa,aAEb4wC,EAAUn7C,EAAMkD,OAAOm4C,SACvB1L,EAAiB3vC,EAAMkD,OAAOyH,GAEpC,EAAiC7L,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAA+EH,YAASg9C,GAAmC,CACzHz2C,UAAW,CACTsF,GAAIglC,KAFS4M,EAAjB,EAAQx9C,QAAiCy9C,EAAzC,EAAkCx9C,MAA4By9C,EAA9D,EAAwDx9C,KAMlD86C,EAAiB,eAAC,GAAD,IAEvB,GAAIh7C,GAAWw9C,EACb,OACE,eAAC,GAAD,CAA4BhyC,WAAYA,EAAYwvC,eAAgBA,EAApE,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAA2BzH,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAChF,eAAC,KAAKhtC,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,WAOzC,GAAImC,GAASw9C,EACX,OACE,eAAC,GAAD,CAA2BjyC,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAA2BzH,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAChF,eAAC,KAAKhtC,KAAN,UACGxG,EAAE,uCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbjF,EAAeyZ,EAAazZ,aAC5BviB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBvY,EACtB,wBAAM1mC,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEJi8B,EAAwB1Z,EAC9B,wBAAM1mC,UAAU,aAAhB,eACK0mC,EAAahiC,QACR,GAEV,OACE,eAAC,GAAD,CAA2BuJ,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,eAAC,GAAD,CACEz1C,UAAW,kCAAOA,EAAP,IAAmBi3C,EAAnB,IAAkCmB,KAC7Cl4C,SAAU,eAAC,GAAD,CAA2B3H,OAAQusC,EAAW+R,QAASA,EAASxL,eAAgBA,IAC1F3rC,SAAUA,EACVG,WAAYA,EAJd,SAOG9H,UCgCMH,I,eAAAA,iBAAkByD,aA5GjC,YAAiE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OAC/Cm7C,EAAUn7C,EAAMkD,OAAOm4C,SACvB1L,EAAiB3vC,EAAMkD,OAAOyH,GAC9B1F,EAAS,gCAA4Bk2C,EAA5B,gBACT/R,EAAY,aACZ9kC,EAAYnI,EAAE,mCAGpB,EAA4C2C,YAAS+9C,GAAqC,CACxFx3C,UAAW,CACTy3C,cAAenN,GAEjBhhC,YAAa,iBAJP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAOxB65C,EAAiB,eAAC,GAAD,IAEvB,GAAIh7C,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAMgkB,EAA0BjkC,EAAKikC,wBACrCxsC,QAAQC,IAAIsI,GACZ,IAAM+E,EAAWk/B,EAAwBl/B,SAGzC,OAAKk/B,EAAwBtlC,MAAM0E,OA+BjC,eAAC,GAAD,CAGE8mC,UAAWA,EACXplC,SAAUA,EACVG,WA9Be,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOu9B,EAAwBl/B,SAAS4B,WAE1CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBm9B,wBAAwBtlC,MACnDoG,EAAW+B,EAAgBm9B,wBAAwBl/B,SAEzD,OAAOgC,EAAS1D,OACZ,CAGE4gC,wBAAyB,CACvBj9B,WAAYH,EAAeo9B,wBAAwBj9B,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeo9B,wBAAwBtlC,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAMR,SAOE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGugC,EAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiR,QAAQgK,WAEhB,eAAC,KAAMhX,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKolC,oBALrBh9B,0BA/CxB,eAAC,GAAD,CAAqCoE,WAvCpB,aAuC4CwvC,eAAgBA,EAA7E,SACE,6BAAI59C,EAAE,4DCxEC4gD,GAAsCrlD,YAAH,uhBAyBnCslD,GAAqCtlD,YAAH,gMAYlCulD,GAA+BvlD,YAAH,wOAW5BwlD,GAAkCxlD,YAAH,wOAW/BylD,GAAoCzlD,YAAL,8LCd7BwE,qBAAkByD,aAnCjC,YAAgE,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAClDwwC,EAAUn7C,EAAMkD,OAAOm4C,SAC7B,EAAiD3zC,YAAYy1C,IAA7D,mBAAOC,EAAP,KACMxT,GADN,KAAuC3qC,KACpB,CACjBgpC,cAAekT,IAGjB,OACE,yBAAQ7+C,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,iDACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,6CACdiS,eAAgBgvC,EAChB/uC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOy0C,GAAqC13C,UAAWukC,QAhBnE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBCuGd9E,qBAAkByD,aAjHjC,YAAuD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC7B+c,GAD8C,EAAV9c,QACtBmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACZ8T,EAAYC,iBAC/BtmB,QAAQC,IAAIomB,GAEZ,IAAMo+B,EAAUn7C,EAAMkD,OAAOm4C,SACvB9wC,EAAa,aAEbwvC,EAAiB,eAAC,IAAD,CAAMv6C,GAAE,gCAA2B27C,EAA3B,mBAAR,SACrB,gBAAC,KAAD,CAAQr6C,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,uCAI/C,EAA4C2C,YAASi+C,GAAqC,CACxF13C,UAAW,CACT4iC,cAAekT,KAFXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA2BwL,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACG59C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA2BuL,WAAYA,EAAYwvC,eAAgBA,EAAnE,UACE,6BAAI59C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMo+C,EAA0Bp+C,EAAKo+C,wBAC/Br5C,EAAW/E,EAAKo+C,wBAAwBr5C,SAG9C,OAAKq5C,EAAwBz/C,MAAM0E,OA+BjC,eAAC,GAAD,CAA2BiI,WAAYA,EAAYvG,SAAUA,EAAUG,WAzBtD,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAO03C,EAAwBr5C,SAAS4B,WAE1CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBs3C,wBAAwBz/C,MACnDoG,EAAW+B,EAAgBs3C,wBAAwBr5C,SAEzD,OAAOgC,EAAS1D,OACZ,CAGE+6C,wBAAyB,CACvBp3C,WAAYH,EAAeu3C,wBAAwBp3C,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeu3C,wBAAwBz/C,OAA9C,aAAwDoI,IAC7DhC,aAGJ8B,MAMuFi0C,eAAgBA,EAA/G,SACE,gBAAC,KAAD,WACE,eAAC,KAAM73C,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mDACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACK06C,EAAwBz/C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,KAE/B,gBAAC,KAAMjH,IAAP,WACGjE,EAAKu/C,mBADR,QAGA,eAAC,KAAMt7C,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,gCAA2B27C,EAA3B,4BAAsDp9C,EAAK4M,IAAnE,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAA8BqO,GAAI5M,EAAK4M,SAnB3BxE,0BA3C1B,eAAC,GAAD,CAA2BoE,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,6BAAI59C,EAAE,iDCvECohD,GAAmC72C,OAAaC,MAAM,CACjE8Z,UAAW/Z,OACRG,SAAS1K,YAAE,uBACdukB,QAASha,OACNG,SAAS1K,YAAE,uBACdmhD,mBAAoB52C,OACnBG,SAAS1K,YAAE,yBCmBCD,qBAAkByD,aAdjC,YAAoD,IAAbxD,EAAY,EAAZA,EAC/Bg/C,EAD2C,EAATn7C,MAClBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,eAEf,OACE,eAAC,IAAD,CAAM37C,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCsEtCD,qBAAkByD,aA1EjC,YAWC,IAVCxD,EAUF,EAVEA,EAGA+K,GAOF,EATEjH,QASF,EARED,MAQF,EAPEkH,cACAC,EAMF,EANEA,OACAa,EAKF,EALEA,OACA/C,EAIF,EAJEA,UACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAGA,OACE,gBAAC,KAAD,WACE,eAAC,KAAKxQ,KAAN,UACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOsZ,UAAa,0BAA4B,eAC5DvX,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GACTwJ,EAAc,YAAaxJ,GAC3B0G,EAAgB,aAAa,IAE/BjH,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,GAAD,CACEG,UAAY6K,EAAOuZ,QAAW,0BAA4B,eAC1DxX,SAAUlB,EAAO0Y,QACjBvX,SAAU,SAACQ,GACTwJ,EAAc,UAAWxJ,GACzB0G,EAAgB,WAAW,IAE7BjH,OAAQ,kBAAMiH,EAAgB,WAAW,MAE3C,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,qBACL1E,UAAY6K,EAAOm2C,mBAAsB,0BAA4B,eACrEh2C,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,qBAAqBuG,UAAU,OAAOjL,UAAU,+BAK3E,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAOoY,KAAK,SAA1B,SACK/c,EAAE,gCCaJD,qBAAkByD,aArEjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAChCk7C,EADkD,EAATn7C,MACzBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,gBAET72C,EAAYnI,EAAE,kCAEpB,EAAoCuL,YAAYu1C,IAAzCO,EAAP,oBAEMzD,EAAiB,eAAC,GAAD,IAEvB,OACE,eAAC,GAAD,CACEA,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAXe,aAYftF,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb6Y,UAAW,IAAI1gB,KACf2gB,QAAS,GACT48B,mBAAoB,GAEtBx1C,iBAAkBy1C,GAClBx1C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZw1C,EAA0B,CAAEn4C,UAAW,CACrC6C,MAAO,CACL+/B,cAAekT,EACf16B,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/B48B,mBAAoBt1C,EAAOs1C,qBAE5Bj1C,eAAgB,CACf,CAACC,MAAOy0C,GAAqC13C,UAAW,CAAC4iC,cAAekT,OAE3E5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAACsqC,GAAD,CACEv2C,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,aC2CR/I,I,YAAAA,iBAAkByD,aArGjC,YAA4D,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAASD,EAAS,EAATA,MAC1Cm7C,EAAUn7C,EAAMkD,OAAOm4C,SACvBqC,EAA2B19C,EAAMkD,OAAOyH,GACxC1F,EAAS,gCAA4Bk2C,EAA5B,gBACT/R,EAAY,UACZ9kC,EAAYnI,EAAE,mCAEpB,EAAuCuL,YAAYw1C,IAA5CS,EAAP,oBACA,EAA4C7+C,YAASk+C,GAAoC,CACvF33C,UAAW,CACTsF,GAAI+yC,KAFA3+C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKlB86C,GALN,EAA8B75C,UAKP,eAAC,GAAD,KAEvB,GAAInB,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAM5O,EAAYrR,EACZ2+C,EAAyB3+C,EAAK2+C,uBAGpC,OAFAlnD,QAAQC,IAAI2Z,GAGV,eAAC,GAAD,CACEypC,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb6Y,UAAWm9B,EAAuBn9B,UAClCC,QAASk9B,EAAuBl9B,QAChC48B,mBAAoBM,EAAuBN,oBAE7Cx1C,iBAAkBy1C,GAClBx1C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ21C,EAA6B,CAAEt4C,UAAW,CACxC6C,MAAO,CACLyC,GAAI+yC,EACJj9B,UAAWxM,GAAejM,EAAOyY,WACjCC,QAASzM,GAAejM,EAAO0Y,SAC/B48B,mBAAoBt1C,EAAOs1C,qBAE5Bj1C,eAAgB,CACf,CAACC,MAAOy0C,GAAqC13C,UAAW,CAAC4iC,cAAekT,OAE3E5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK2F,GACbuD,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAjCtB,SAqCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAACsqC,GAAD,CACEv2C,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACflO,UAAWA,aCvHV44C,GAAkCnmD,YAAH,4jBA2B/BomD,GAAiCpmD,YAAH,+KAY9BqmD,GAAgCrmD,YAAL,kLASFA,YAAH,gxBCHpBwE,qBAAkByD,aAnCjC,YAA4D,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAC9CwwC,EAAUn7C,EAAMkD,OAAOm4C,SAC7B,EAA6C3zC,YAAYq2C,IAAzD,mBAAOC,EAAP,KACMpU,GADN,KAAmC3qC,KAChB,CACjBgpC,cAAekT,IAGjB,OACE,yBAAQ7+C,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,4CACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,wCACdiS,eAAgB4vC,EAChB3vC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOu1C,GAAiCx4C,UAAWukC,QAhB/D,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBCuGd9E,qBAAkByD,aAjHjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACxB+c,GADyC,EAAV9c,QACjBmF,qBAAWrI,KACZggB,EAAY9T,WACZ8T,EAAYC,iBAC/BtmB,QAAQC,IAAIomB,GAEZ,IAAMo+B,EAAUn7C,EAAMkD,OAAOm4C,SACvB9wC,EAAa,QAEbwvC,EAAiB,eAAC,IAAD,CAAMv6C,GAAE,gCAA2B27C,EAA3B,cAAR,SACrB,gBAAC,KAAD,CAAQr6C,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,kCAI/C,EAA4C2C,YAAS++C,GAAiC,CACpFx4C,UAAW,CACT4iC,cAAekT,KAFXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA2BwL,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACG59C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA2BuL,WAAYA,EAAYwvC,eAAgBA,EAAnE,UACE,6BAAI59C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMg/C,EAAsBh/C,EAAKg/C,oBAC3Bj6C,EAAW/E,EAAKg/C,oBAAoBj6C,SAG1C,OAAKi6C,EAAoBrgD,MAAM0E,OA+B7B,eAAC,GAAD,CAA2BiI,WAAYA,EAAYvG,SAAUA,EAAUG,WAzBtD,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOs4C,EAAoBj6C,SAAS4B,WAEtCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBk4C,oBAAoBrgD,MAC/CoG,EAAW+B,EAAgBk4C,oBAAoBj6C,SAErD,OAAOgC,EAAS1D,OACZ,CAGE27C,oBAAqB,CACnBh4C,WAAYH,EAAem4C,oBAAoBh4C,WAC/CrI,MAAM,GAAD,oBAAOkI,EAAem4C,oBAAoBrgD,OAA1C,aAAoDoI,IACzDhC,aAGJ8B,MAMuFi0C,eAAgBA,EAA/G,SACE,gBAAC,KAAD,WACE,eAAC,KAAM73C,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,IACA,eAAC,KAAMA,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACKs7C,EAAoBrgD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7B,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACE,eAAC,KAAD,CAAQnB,KAAK,KAAKL,SAAUzC,EAAKqC,2BAEnC,eAAC,KAAM4B,IAAP,UACGjE,EAAKoD,cAER,eAAC,KAAMa,IAAP,UACGjE,EAAKg8B,YAER,eAAC,KAAM/3B,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,gCAA2B27C,EAA3B,uBAAiDp9C,EAAK4M,IAA9D,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,GAAD,CAA0BqO,GAAI5M,EAAK4M,SAnBvBxE,0BA3C1B,eAAC,GAAD,CAA2BoE,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,6BAAI59C,EAAE,4CCvEC+hD,GAA8Bx3C,OAAaC,MAAM,CAC5DxF,YAAauF,OACRK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBAChB49B,UAAWrzB,SCqBExK,qBAAkByD,aAdjC,YAA+C,IAAbxD,EAAY,EAAZA,EAC1Bg/C,EADsC,EAATn7C,MACbkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,UAEf,OACE,eAAC,IAAD,CAAM37C,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCiEtCD,I,GAAAA,iBAAkByD,aApEjC,YAYC,IAXCxD,EAWF,EAXEA,EAGA+K,GAQF,EAVEjH,QAUF,EATED,MASF,EAREkH,cACAC,EAOF,EAPEA,OAEAlC,GAKF,EANE+C,OAMF,EALE/C,WACA+iB,EAIF,EAJEA,cACAC,EAGF,EAHEA,eAGF,IAFEC,6BAEF,MAFwB,SAAAnjB,GAAC,OAAEA,GAE3B,EACE,OACE,gBAAC,KAAD,WACE,gBAAC,KAAKpC,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,cACL1E,UAAY6K,EAAOhG,YAAe,0BAA4B,eAC9DmG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,YACL1E,UAAY6K,EAAO4yB,UAAa,0BAA4B,eAC5DzyB,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,6BAIhE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,eAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mCAArB,SACE,uBAAKG,UAAU,cAAf,UACE,wBAAOqE,KAAK,OAAO2R,IAAK0V,EAAe1rB,UAAU,oBAAoB6M,SAAU+e,IAC/E,wBAAO5rB,UAAU,oBAAoBkmB,MAAO0E,GAA5C,SACGe,gBAOb,gBAAC,KAAKtjB,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAOoY,KAAK,SAA1B,SACK/c,EAAE,gCCrDbgiD,GAA2BzmD,YAAH,wNAsHfwE,qBAAkByD,aA3GjC,YAAuD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAC5Bk7C,EAD8C,EAATn7C,MACrBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,WAET72C,EAAYnI,EAAE,6BAEpB,EAAgCuL,YAAYy2C,GAA0B,CACpE/kC,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3Bm5C,EAAP,oBAKA,EAAgCt1C,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAG9B+4C,EAAiB,eAAC,GAAD,IAEvB,OACE,eAAC,GAAD,CACEA,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAvBe,QAwBftF,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACbzG,YAAa,GACb44B,UAAW,GAEbjyB,iBAAkBo2C,GAClBn2C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACdwf,cAAekT,EACfh6C,YAAa6G,EAAO7G,YACpB44B,UAAW/xB,EAAO+xB,UAClBvI,cAAenJ,GAGbK,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAU0I,MAAQrI,EAElBs1B,EAAsB,CAAE/4C,UAAW,CACjC6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOu1C,GAAiCx4C,UAAW,CAAC4iC,cAAekT,OAEvE5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAIpB,IAAIwhB,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxJ,MAAM7C,EAAE,gCAAiC,CAC7CuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KA1DpB,SA8DG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRggB,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBjjB,UAAWA,aC/BR/I,I,GAAAA,iBAAkByD,aAtEjC,YAA+E,IAA1CxD,EAAyC,EAAzCA,EAAG6D,EAAsC,EAAtCA,MAA2B3D,GAAW,EAA/B4D,QAA+B,EAAtBmpC,UAAsB,EAAX/sC,UAE3D4M,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,8BAGdg/C,EAAUn7C,EAAMkD,OAAOm4C,SACvBgD,EAAuBr+C,EAAMkD,OAAOyH,GAE1C,EAAiC7L,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAAsEH,YAASg/C,GAAgC,CAC7Gz4C,UAAW,CACTsF,GAAI0zC,KAFSC,EAAjB,EAAQv/C,QAA8Bw/C,EAAtC,EAA+Bv/C,MAAyBw/C,EAAxD,EAAkDv/C,KAM5C86C,EAAiB,eAAC,GAAD,IAEvB,GAAIh7C,GAAWu/C,EACb,OACE,eAAC,GAAD,CAA2BvE,eAAgBA,EAA3C,SACE,eAAC,KAAD,CAAM53C,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,UAOzC,GAAImC,GAASu/C,EACX,OACE,eAAC,GAAD,CAA2BxE,eAAgBA,EAA3C,SACE,eAAC,KAAD,CAAM53C,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,uCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbwW,EAAqBD,EAAUC,mBAC/Bh+B,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBkD,EACtB,wBAAMniD,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEJi8B,EAAwB+B,EAC9B,wBAAMniD,UAAU,aAAhB,eACKmiD,EAAmBt9C,eACd,GAEV,OACE,eAAC,GAAD,CAA2BoJ,WAvDV,QAuDkCwvC,eAAgBA,EAAnE,SACE,gBAAC,KAAD,WACE,eAAC,KAAK73C,OAAN,UACE,gBAAC,KAAKwC,MAAN,WAAaJ,EAAb,IAAyBi3C,EAAzB,IAAwCmB,OAEzCrgD,WC1EHqiD,GAA8BhnD,YAAH,wNAqJlBwE,I,YAAAA,iBAAkByD,aA1IjC,YAAwD,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACtCm7C,EAAUn7C,EAAMkD,OAAOm4C,SACvBgD,EAAuBr+C,EAAMkD,OAAOyH,GACpC1F,EAAS,gCAA4Bk2C,EAA5B,WACT/R,EAAY,UACZ9kC,EAAYnI,EAAE,8BAEpB,EAAmCuL,YAAYg3C,IAAxCC,EAAP,oBACA,EAA4C7/C,YAASg/C,GAAgC,CACnFz4C,UAAW,CACTsF,GAAI0zC,KAFAt/C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKlB86C,GALN,EAA8B75C,UAKP,eAAC,GAAD,KAGvB,EAAgC4I,mBAAS,IAAzC,mBAAOuf,EAAP,KAAiBC,EAAjB,KACMN,EAAgBO,iBAAO,MACvBN,EAAiBI,GAAYlsB,EAAE,yCAE/B+rB,EAAwB,SAAC/a,GAC7BzW,QAAQC,IAAI,uBACZ2xB,EAAYnb,EAAMtL,OAAO2mB,MAAM,GAAGxnB,OAGpC,GAAIjC,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAM5O,EAAYrR,EACZw/C,EAAqBx/C,EAAKw/C,mBAGhC,OAFA/nD,QAAQC,IAAI2Z,GAGV,eAAC,GAAD,CACEypC,eAAgBA,EAChBz1C,UAAWA,EACX8kC,UAAWA,EACXnkC,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACbzG,YAAas9C,EAAmBt9C,YAChC44B,UAAW0kB,EAAmB1kB,WAEhCjyB,iBAAkBo2C,GAClBn2C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAI0xB,GAEZ,IAAII,EAAY,CACd9d,GAAI0zC,EACJl9C,YAAa6G,EAAO7G,YACpB44B,UAAW/xB,EAAO+xB,WAGpB,SAAS6kB,IACPD,EAAyB,CAAEt5C,UAAW,CACpC6C,MAAOugB,GACNpgB,eAAgB,CACf,CAACC,MAAOu1C,GAAiCx4C,UAAW,CAAC4iC,cAAekT,OAEvE5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,4CAA8C,CAC3DuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,MACfY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,MAIpB,IAAIygB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvBnyB,QAAQC,IAAIkyB,EAAahnB,OAAO2E,QAChC,IAAIsiB,EAAeD,EAAahnB,OAAO2E,OACvC9P,QAAQC,IAAImyB,GAEZL,EAAU0I,MAAQrI,EAClBL,EAAU+I,cAAgBnJ,EAE1Bu2B,KAGF,IAAIn1B,EAAOzB,EAAc0B,QAAQlB,MAAM,GACnCiB,GAAQA,EAAK5oB,KAAO,QACtB6nB,EAAOiB,cAAcF,GACZA,GAAQA,EAAK5oB,KAAO,SAC7B2H,IAAMxJ,MAAM7C,EAAE,qDAAsD,CAClEuM,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAEd22C,KA3DN,SA+DG,gBAAG13C,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRggB,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBjjB,UAAWA,aClKV45C,GAAmCnnD,YAAH,y1BAyChConD,GAAkCpnD,YAAH,kvCAkE/BqnD,GAA+BrnD,YAAH,qLAS5BmzB,GAAyBnzB,YAAH,08BCtBpBwE,cAAkByD,aA/DjC,YAAsG,IAAhExD,EAA+D,EAA/DA,EAAG6D,EAA4D,EAA5DA,MAA2BgE,GAAiC,EAArD/D,QAAqD,EAA5CmpC,UAA4C,EAAjCplC,UAAUG,EAAuB,EAAvBA,WAAY9H,EAAW,EAAXA,SAElF4M,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,8BACdoO,EAAa,UAEb4wC,EAAUn7C,EAAMkD,OAAOm4C,SAG7B,EAAiCv8C,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIlB86C,EAAiB,eAAC,IAAD,CAAMv6C,GANX,mBAMK,SACnB,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,qBAIrD,GAAI4C,EACF,OACE,eAAC,GAAD,CAA2Bg7C,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,UAOzC,GAAImC,EACF,OACE,eAAC,GAAD,CAA2B+6C,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,KAAD,CAAMpI,MAAOmC,EAAb,SACE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,uCAOb,IAAMgR,EAAQlO,EAAKgpC,cACbxnB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBpuC,EACtB,wBAAM7Q,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEV,OACE,eAAC,GAAD,CAA2Bs5B,eAAgBA,EAAgBxvC,WAAYA,EAAvE,SACE,eAAC,GAAD,CACEjG,UAAW,kCAAOA,EAAP,IAAmBi3C,KAC9Bv3C,SAAUA,EACVG,WAAYA,EAHd,SAKG9H,UC1CQH,qBAAkByD,aAnCjC,YAA6D,IAAzBxD,EAAwB,EAAxBA,EAAG6D,EAAqB,EAArBA,MAAgB2K,GAAK,EAAd1K,QAAc,EAAL0K,IAC/CwwC,EAAUn7C,EAAMkD,OAAOm4C,SAC7B,EAA8C3zC,YAAYq3C,IAA1D,mBAAOC,EAAP,KACMpV,GADN,KAAoC3qC,KACjB,CACjBgpC,cAAekT,IAGjB,OACE,yBAAQ7+C,UAAU,2CAChB6F,MAAOhG,EAAE,kBACTyI,QAAS,WACPoJ,GAAe,CACb7R,EAAGA,EACH8R,WAAY9R,EAAE,8CACd+R,eAAgB,uBAChBC,WAAYhS,EAAE,0CACdiS,eAAgB4wC,EAChB3wC,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAIA,IAGRtC,eAAgB,CACd,CAAEC,MAAOu2C,GAAkCx5C,UAAWukC,QAhBhE,SAqBE,eAAC,KAAD,CAAMx+B,OAAO,KAAKpK,KAAK,kBC9Bd9E,sBAJf,YAA8B,IAANC,EAAK,EAALA,EACtB,OAAO,eAAC,KAAD,CAAO2E,MAAM,UAAb,SAAwB3E,EAAE,yBCwJpBD,qBAAkByD,aAjIjC,YAAoD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC1B+c,GAD2C,EAAV9c,QACnBmF,qBAAWrI,KACZggB,EAAY9T,WAC/BvS,QAAQC,IAAIomB,GAEZ,IAAMo+B,EAAUn7C,EAAMkD,OAAOm4C,SACvB9wC,EAAa,UAEbwvC,EAAiB,eAAC,IAAD,CAAMv6C,GAAE,gCAA2B27C,EAA3B,gBAAR,SACrB,gBAAC,KAAD,CAAQr6C,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,gBADzB,IAC2C7E,EAAE,oCAI/C,EAA4C2C,YAAS+/C,GAAkC,CACrFx5C,UAAW,CACT4iC,cAAekT,KAFXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA2BwL,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACG59C,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CAA2BuL,WAAYA,EAAYwvC,eAAgBA,EAAnE,UACE,6BAAI59C,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GAEZ,IAAMggD,EAAuBhgD,EAAKggD,qBAC5Bj7C,EAAW/E,EAAKggD,qBAAqBj7C,SAG3C,OAAKi7C,EAAqBrhD,MAAM0E,OA+B9B,eAAC,GAAD,CAA2BiI,WAAYA,EAAYvG,SAAUA,EAAUG,WAzBtD,WACjBjE,EAAU,CACRmF,UAAW,CACTM,MAAOs5C,EAAqBj7C,SAAS4B,WAEvCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBk5C,qBAAqBrhD,MAChDoG,EAAW+B,EAAgBk5C,qBAAqBj7C,SAEtD,OAAOgC,EAAS1D,OACZ,CAGE28C,qBAAsB,CACpBh5C,WAAYH,EAAem5C,qBAAqBh5C,WAChDrI,MAAM,GAAD,oBAAOkI,EAAem5C,qBAAqBrhD,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MAMuFi0C,eAAgBA,EAA/G,SACE,gBAAC,KAAD,WACE,eAAC,KAAM73C,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,uBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,MAPcC,kBAUlB,eAAC,KAAMxD,KAAP,UACGs8C,EAAqBrhD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC9B,gBAAC,KAAMxB,IAAP,WAOE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKiD,KADR,IACc,wBACZ,sBAAK4B,wBAAyB,CAACC,OAAQ9E,EAAKoD,aAAc7E,UAAU,kBAEtE,gBAAC,KAAM0F,IAAP,WACGjE,EAAKkhB,aADR,IACsB,wBAClBlhB,EAAKmhD,UAAa,eAAC,GAAD,IAAmB,MAEzC,eAAC,KAAMl9C,IAAP,UACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKuZ,kBAE5B,eAAC,KAAMtV,IAAP,UACIjE,EAAK6O,iBAAoB7O,EAAK6O,iBAAiB5L,KAAO,KAE1D,eAAC,KAAMgB,IAAP,UACIjE,EAAKiO,kBAAqBjO,EAAKiO,kBAAkBhL,KAAO,KAE5D,eAAC,KAAMgB,IAAP,CAAW1F,UAAU,aAArB,SACE,eAAC,IAAD,CAAMkD,GAAE,gCAA2B27C,EAA3B,yBAAmDp9C,EAAK4M,IAAhE,SACE,eAAC,KAAD,CAAQrO,UAAU,SACVwE,MAAM,YADd,SAEG3E,EAAE,sBAIT,eAAC,KAAM6F,IAAP,CAAW1F,UAAU,aAArB,SAEIyB,EAAKohD,UAAa,eAAC,GAAD,CAA2Bx0C,GAAI5M,EAAK4M,KAAS,OAlCrDxE,0BA7CxB,eAAC,GAAD,CAA2BoE,WAAYA,EAAYwvC,eAAgBA,EAAnE,SACE,6BAAI59C,EAAE,8CCtECijD,GAA+B14C,OAAaC,MAAM,CAC7D2Q,cAAe5Q,OACf1F,KAAM0F,OACDK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBAChBgF,YAAauF,OACb+J,MAAO/J,OACPgK,eAAgBhK,OAChBkG,iBAAkBlG,OAClBsF,kBAAmBtF,SCgBNxK,qBAAkByD,aAdjC,YAAgD,IAAbxD,EAAY,EAAZA,EAC3Bg/C,EADuC,EAATn7C,MACdkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,YAEf,OACE,eAAC,IAAD,CAAM37C,GAAIyF,EAAV,SACE,gBAAC,KAAD,CAAQnE,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCsItCD,I,GAAAA,iBAAkByD,aAxIjC,YAYC,IAXCxD,EAWF,EAXEA,EACA8D,EAUF,EAVEA,QAEAiH,GAQF,EATElH,MASF,EAREkH,cACAC,EAOF,EAPEA,OACAa,EAMF,EANEA,OACAsI,EAKF,EALEA,UACArL,EAIF,EAJEA,UACAoL,EAGF,EAHEA,gBACA8C,EAEF,EAFEA,cAIA,OAFF,EADE4U,UAIE,gBAAC,KAAD,WACE,gBAAC,KAAKplB,KAAN,WACE,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAOsP,gBAClB,uBAAMhb,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uCAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,eAInD,eAAC,KAAKhL,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAOnG,KAAQ,0BAA4B,eACvDsG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,4BAI3D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACI,eAAC,KAAD,CAAOwE,KAAK,OACRK,KAAK,QACL1E,UAAY6K,EAAOsJ,MAAS,0BAA4B,eACxDnJ,aAAa,QACjB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,iBACL1E,UAAY6K,EAAOuJ,eAAkB,0BAA4B,eACjEpJ,aAAa,MAHrB,UAIG5Q,QAAQC,IAAI,yCACZD,QAAQC,IAAI2Z,GACb,yBAAQ/Q,MAAM,GAAd,SAA6BpD,EAAE,0BAATgK,gBACrBmK,EAAUK,gBAAgB/S,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK6S,WAAtD,KAAoE7S,EAAK8S,SAAzE,MAA6B1K,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,6BAIrE,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,UACA,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAGzC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,4BAIhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,mBACL1E,UAAY6K,EAAOyF,iBAAoB,0BAA4B,eACnEtF,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU9D,kBAAkB5O,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,oBACL1E,UAAY6K,EAAO6E,kBAAqB,0BAA4B,eACpE1E,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,IAAQ4G,gBACrBmK,EAAU5E,mBAAmB9N,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtC,0BAAQwB,MAAOxB,EAAK4M,GAApB,UAAoC5M,EAAKiD,KAAzC,KAAiDjD,EAAK4N,KAAtD,MAA6BxF,sBAGjC,eAAC,KAAD,CAAcnF,KAAK,oBAAoBuG,UAAU,OAAOjL,UAAU,gCAK1E,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,KAAD,CAAQ2E,MAAM,OAAO8D,QAAS,kBAAM3E,EAAQX,KAAK2F,IAAYiU,KAAK,SAAlE,SACK/c,EAAE,8BC3HXkjD,GAA4B3nD,YAAH,4NAkHhBwE,qBAAkByD,aAvGjC,YAAwD,IAAtBxD,EAAqB,EAArBA,EAAG8D,EAAkB,EAAlBA,QAC7Bk7C,EAD+C,EAATn7C,MACtBkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,aACT5wC,EAAa,UACbjG,EAAYnI,EAAE,+BAEpB,EAAiCuL,YAAY23C,GAA2B,CACtEjmC,YAAa,kBAAMnZ,EAAQX,KAAK2F,MAD3Bo3C,EAAP,oBAGA,EAA4Cv9C,YAAS+rB,IAA7C9rB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAElB86C,GAFN,EAA8B75C,UAEP,eAAC,GAAD,KAEvB,GAAInB,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAId,IAAM5O,EAAYrR,EAElB,OACE,eAAC,GAAD,CACE86C,eAAgBA,EAChBz1C,UAAWA,EACXiG,WAAYA,EACZtF,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb0P,eAAe,EACftW,KAAM,GACNG,YAAa,IAEf2G,iBAAkBs3C,GAClBr3C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZq0C,EAAuB,CAAEh3C,UAAW,CAClC6C,MAAO,CACL+/B,cAAekT,EACf7jC,cAAetP,EAAOsP,cACtBtW,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB9D,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOu2C,GAAkCx5C,UAAW,CACnD4iC,cAAekT,OAGpB5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,6CAA+C,CAC5DuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCtB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRsI,UAAWA,EACXrL,UAAWA,EACX8iB,UAAU,oBChGP7rB,sBA1Bf,YAAmE,IAAhCC,EAA+B,EAA/BA,EAAGU,EAA4B,EAA5BA,OAAQs+C,EAAoB,EAApBA,QAASmE,EAAW,EAAXA,SACrD,OACE,eAAC,GAAD,CACE52C,SAAS,MACTugC,KAAM,CACF,CACEjoC,KAAM,UACNmB,MAAOhG,EAAE,6CACT4G,KAAK,yBAAD,OAA2Bo4C,EAA3B,yBAAmDmE,IAEzD,CACEt+C,KAAM,aACNmB,MAAOhG,EAAE,gDACT4G,KAAK,yBAAD,OAA2Bo4C,EAA3B,yBAAmDmE,EAAnD,gBAEN,CACEt+C,KAAM,YACNmB,MAAOhG,EAAE,+CACT4G,KAAK,yBAAD,OAA2Bo4C,EAA3B,yBAAmDmE,EAAnD,gBAGVziD,OAAQA,OCgFCX,I,GAAAA,iBAAkByD,aA1EjC,YAAwH,IAAlFxD,EAAiF,EAAjFA,EAAG6D,EAA8E,EAA9EA,MAAgBopC,GAA8D,EAAvEnpC,QAAuE,EAA9DmpC,WAAW/sC,EAAmD,EAAnDA,SAAmD,IAAzC++C,yBAAyC,MAAvB,GAAuB,MAAnBmE,qBAAmB,MAAL,GAAK,EAE/Gt2C,EADc7D,qBAAWrI,IACAkM,WACzB3E,EAAYnI,EAAE,gCAGdg/C,EAAUn7C,EAAMkD,OAAOm4C,SACvBiE,EAAWt/C,EAAMkD,OAAOyH,GAE9B,EAAiC7L,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAAyEH,YAASggD,GAAiC,CACjHz5C,UAAW,CACTsF,GAAI20C,KAFSE,EAAjB,EAAQzgD,QAA+B0gD,EAAvC,EAAgCzgD,MAA0B0gD,EAA1D,EAAoDzgD,KAM9C86C,EAAiB,eAAC,GAAD,IAEvB,GAAIh7C,GAAWygD,EACb,OACE,eAAC,GAAD,CAA2BpE,kBAAmBA,EAAmBrB,eAAgBA,EAAjF,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAAyBzH,OAAQusC,EAAW+R,QAASA,EAAUmE,SAAUA,IACzE,eAAC,KAAK38C,KAAN,UACE,eAAC,KAAD,CAAQ5D,SAAS,EAAMlC,QAAQ,WAOzC,GAAImC,GAASygD,EACX,OACE,eAAC,GAAD,CAA2BrE,kBAAmBA,EAAmBrB,eAAgBA,EAAjF,SACE,gBAAC,KAAD,CAAM53C,MAAOmC,EAAb,UACE,eAAC,GAAD,CAAyBzH,OAAQusC,EAAW+R,QAASA,EAASmE,SAAUA,IACxE,eAAC,KAAK38C,KAAN,UACGxG,EAAE,wCAOb,IAAMgR,EAAQlO,EAAKgpC,cACb0X,EAASD,EAAW1X,oBACpBvnB,EAAatT,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAc,GAC7EsyC,EAAgBpuC,EACtB,wBAAM7Q,UAAU,aAAhB,eACK6Q,EAAMnM,KAAO,IAAMyf,KACd,GAEJm/B,EAAsBD,EAC5B,wBAAMrjD,UAAU,aAAhB,eACKqjD,EAAO3+C,QACF,GAEV,OACE,gBAAC,GAAD,CAA2Bo6C,kBAAmBA,EAAmB7wC,WAzDhD,UAyDwEwvC,eAAgBA,EAAzG,UACGwF,EACD,gBAAC,KAAD,WACE,eAAC,KAAKr9C,OAAN,UACE,gBAAC,KAAKwC,MAAN,WAAaJ,EAAb,IAAyBi3C,EAAzB,IAAwCqE,OAE1C,eAAC,GAAD,CAAyB/iD,OAAQusC,EAAW+R,QAASA,EAASmE,SAAUA,IACvEjjD,YCrFHwjD,GAA+BnoD,YAAH,4NA8InBwE,I,MAAAA,iBAAkByD,aAnIjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACvC2K,EAAK3K,EAAMkD,OAAOyH,GAClBwwC,EAAUn7C,EAAMkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,aACT/R,EAAY,UACZ7+B,EAAa,UACbwvC,EAAiB,eAAC,GAAD,IAEvB,EAAiCj7C,YAASggD,GAAiC,CACzEz5C,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAoCyI,YAAYm4C,IAAzCjD,EAAP,oBAEA,GAAI79C,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IAAMqR,EAAYrR,EACZ+oC,EAAsB/oC,EAAK+oC,oBAG7Bva,EAAwB,GACxBua,EAAoBt3B,iBACtB+c,EAAwBua,EAAoBt3B,eAAe/F,IAG7D,IAAIm1C,EAA0B,GAC1B9X,EAAoBp7B,mBACtBkzC,EAA0B9X,EAAoBp7B,iBAAiBjC,IAGjE,IAAIo1C,EAA2B,GAM/B,OALI/X,EAAoBh8B,oBACtB+zC,EAA2B/X,EAAoBh8B,kBAAkBrB,IAKjE,eAAC,GAAD,CACEovC,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,SAME,eAAC,KAAD,CACE2C,cAAe,CACb0P,cAAe0wB,EAAoB1wB,cACnCtW,KAAMgnC,EAAoBhnC,KAC1BG,YAAa6mC,EAAoB7mC,YACjCsP,MAAOu3B,EAAoBv3B,MAC3BC,eAAgB+c,EAChB7gB,iBAAkBkzC,EAClB9zC,kBAAmB+zC,GAErBj4C,iBAAkBs3C,GAClBr3C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZ40C,EAA0B,CAAEv3C,UAAW,CACrC6C,MAAO,CACLyC,GAAIA,EACJ2M,cAAetP,EAAOsP,cACtBtW,KAAMgH,EAAOhH,KACbG,YAAa6G,EAAO7G,YACpBsP,MAAOzI,EAAOyI,MACdC,eAAgB1I,EAAO0I,eACvB9D,iBAAkB5E,EAAO4E,iBACzBZ,kBAAmBhE,EAAOgE,oBAE3B3D,eAAgB,CACf,CAACC,MAAOu2C,GAAkCx5C,UAAW,CACnD4iC,cAAekT,OAGpB5yC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,8CAAgD,CAC7DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1CtB,SA8CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACf7C,UAAWA,EACXnJ,OAAQA,EACRa,OAAQA,EACR/C,UAAWA,EACX8iB,UAAU,oBCrJTi4B,GAAiDtoD,YAAH,glBCC9CuoD,GAA4Cv5C,OAAaC,MAAM,CAC1Eu5C,SAAUx5C,SCsCGxK,iBAAkByD,aA3BW,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAmBqL,GAAtB,EAAMvH,QAAN,EAAeD,MAAf,EAAsBwH,UAAUN,EAAhC,EAAgCA,aAAce,EAA9C,EAA8CA,cAAeyL,EAA7D,EAA6DA,WAAoB1L,GAAjF,EAAyEb,OAAzE,EAAiFa,QAAQqI,EAAzF,EAAyFA,gBAAiB8C,EAA1G,EAA0GA,cAA1G,OAC1C,eAAC,KAAD,UACE,eAAC,KAAD,CAAQtW,OAAQqK,EAAcpK,OAAQoK,EAAtC,SACE,gBAAC,KAAKE,MAAN,CAAY9K,UAAU,OAAtB,UACE,gBAAC,KAAKob,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,WACLmI,SAAU,WACRgK,EAAc,YAAanL,EAAOk4C,UAClC7vC,EAAgB,YAAY,GAC5BpI,GAAc,GACdiK,YAAW,WAAOwB,MAAe,MAEnCiE,QAAS3P,EAAOk4C,SAChB14C,SAAUA,IAEZ,uBAAMlL,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,yBAEjD,eAAC,KAAD,CAAc6E,KAAK,WAAWuG,UAAU,mBCZ1C44C,GAA6CzoD,YAAH,4QA6IjCwE,I,GAAAA,iBAAkByD,aAlIjC,YAAmE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACjD2K,EAAK3K,EAAMkD,OAAOyH,GAClBwwC,EAAUn7C,EAAMkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,aACT/R,EAAY,aACZ7+B,EAAa,UACbwvC,EAAiB,eAAC,GAAD,IAEvB,EAAiCj7C,YAASkhD,GAAgD,CACxF36C,UAAW,CACT2iC,oBAAqBr9B,KAFjB5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAgDyI,YAAYy4C,IAArDC,EAAP,oBAEA,GAAIrhD,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IACMohD,EAAgCphD,EAAKqhD,iCAI3C,OAHA5pD,QAAQC,IAAI0pD,GAIV,eAAC,GAAD,CACEtG,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,SAME,eAAC,KAAKtC,KAAN,UACE,gBAAC,KAAD,WACE,eAAC,KAAMT,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,2BAGxB,eAAC,KAAMwG,KAAP,UACG09C,EAA8BziD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKilC,aAAahiC,OAErB,eAAC,KAAMgB,IAAP,UACE,eAAC,KAAD,CACE4F,cAAe,CACbs4C,SAAUniD,EAAKmiD,UAEjBp4C,iBAAkBm4C,GAClBl4C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBvR,QAAQC,IAAI,iBACZD,QAAQC,IAAIqR,GAEZo4C,EAAsC,CAAE/6C,UAAW,CACjD6C,MAAO,CACHyC,GAAI5M,EAAK4M,GACTu1C,SAAUl4C,EAAOk4C,WAGrB73C,eAAgB,CACZ,CAACC,MAAO03C,GAAgD36C,UAAW,CACjE2iC,oBAAqBr9B,OAI1BpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,yDAA2D,CACxEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAhCxB,SAoCG,gBAAIf,EAAJ,EAAIA,aAAcC,EAAlB,EAAkBA,OAAQa,EAA1B,EAA0BA,OAAQqI,EAAlC,EAAkCA,gBAAiB8C,EAAnD,EAAmDA,cAAeO,EAAlE,EAAkEA,WAAYzL,EAA9E,EAA8EA,cAA9E,OACC,eAAC,GAAD,CACEf,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACRR,SAAUzJ,EAAKiqC,oBAAoBuY,UACnCt4C,cAAeA,EACfyL,WAAYA,WAlDNvN,gCC/FvB,SAAS8uC,KACd,IAAInoC,EAAY,CACd4wB,aAAS1wB,EACT2wB,cAAU3wB,EACV6wB,gBAAY7wB,GAGV4wB,EAAS7iC,aAAagS,QAAQ9R,EAAKd,0CAKvC,OAJA2S,EAAU+wB,WAAaD,EAEvBlnC,QAAQC,IAAImW,GAELA,ECoBT,IAAM0zC,GAAoC9oD,YAAH,0OA+UxBwE,qBAAkByD,aApUjC,YAAkE,IAAtBxD,EAAqB,EAArBA,EAAY6D,GAAS,EAAlBC,QAAkB,EAATD,OACtD,EAAoC8I,oBAAS,GAA7C,mBAAO4sC,EAAP,KAAmBC,EAAnB,KACMhrC,EAAK3K,EAAMkD,OAAOyH,GAClBwwC,EAAUn7C,EAAMkD,OAAOm4C,SACvBp2C,EAAS,gCAA4Bk2C,EAA5B,aACT/R,EAAY,YACZ7+B,EAAa,UACbwvC,EAAiB,eAAC,GAAD,IAEvB,EAAiCj7C,YAAS6oC,GAA0C,CAClFtiC,UAAW,CACT2iC,oBAAqBr9B,KAFjB5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,EAAwCyI,YAAY84C,IAA7CC,EAAP,oBACA,EAA2C/4C,YAAYmgC,IAAhDC,EAAP,oBAIA,EAMOiO,aAAchY,IANrB,mBAAQiY,EAAR,YAEeC,GAFf,EACI1qC,QADJ,EAEIrL,WACSg2C,EAHb,EAGIn3C,QACOo3C,EAJX,EAIIn3C,MACMo3C,EALV,EAKIn3C,KAMJ,GAHAvI,QAAQC,IAAI,qBACZD,QAAQC,IAAIy/C,GAERr3C,EAAS,OACX,eAAC,GAAD,CACEg7C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,SAMG9I,EAAE,+BAGP,GAAI6C,EAAO,OACT,gBAAC,GAAD,CACE+6C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EAJb,UAME,6BAAI9I,EAAE,8BACN,6BAAI6C,EAAMkgB,aAIdxoB,QAAQC,IAAI,cACZD,QAAQC,IAAIsI,GACZ,IACM8oC,EAA8B9oC,EAAK8oC,4BACzCrxC,QAAQC,IAAIoxC,GAEZ,IAAI2Y,EAAwB,GAC5B3Y,EAA4BnqC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC2iD,EAAsBphD,KAAKvB,EAAKiR,QAAQrE,OAE1CjU,QAAQC,IAAI+pD,GAEZ,IAAMtF,EAAoB,eAAC,GAAD,CACxBze,gBAAiB1hC,EAAKd,yCACtByY,YAAY,YACZzJ,SAAU,SAAC5J,GACT7I,QAAQC,IAAI4I,GACZxE,aAAaC,QAAQC,EAAKd,yCAA0CoF,GAChEA,GAGFo2C,GAAc,GACdK,EAAY,CAAE3wC,UAAW4vC,QAEzBU,GAAc,MAQd4J,EAAiB7J,GAAeU,IAAwBF,IAA2BC,EACvF,eAAC,GAAD,CAAa7xC,UAAWnI,EAAE,0BACd6H,SAAUoyC,EAAkB7X,SAASv6B,SACrCG,WAAY,WACV8xC,EAAkB,CAChB5wC,UAAW,CACXM,MAAOywC,EAAkB7X,SAASv6B,SAAS4B,WAE7CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBw4B,SAAS3gC,MACpCoG,EAAW+B,EAAgBw4B,SAASv6B,SAE1C,OAAOgC,EAAS1D,OACZ,CAGE8zC,kBAAmB,CACjB7X,SAAU,CACRt4B,WAAYH,EAAey4B,SAASt4B,WACpCrI,MAAM,GAAD,oBAAOkI,EAAey4B,SAAS3gC,OAA/B,aAAyCoI,IAC9ChC,cAIN8B,MAvBpB,SA2BMswC,EAAkB7X,SAAS3gC,MAAM0E,OAEnC,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGyzC,EAAkB7X,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKib,UADQ7S,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKmX,OADQ/O,gBAGhB,eAAC,KAAMnE,IAAP,UACI0+C,EAAsBpK,SAASv4C,EAAK4M,IACpC,uBAAMrO,UAAU,aAAhB,SAA8BH,EAAE,qEAChC,eAAC,KAAD,CACEyI,QAAS,kBACP67C,EAA8B,CAAEp7C,UAAW,CACzC6C,MAAO,CACL8G,QAASjR,EAAK4M,GACdq9B,oBAAqBr9B,IAEtBtC,eAAgB,CACf,CAACC,MAAOq/B,GAA0CtiC,UAAW,CAC3D2iC,oBAAqBr9B,OAG1BpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uDAAyD,CACtEuM,SAAUF,IAAMG,SAASC,eAE7B+sC,GAAc,MACb9sC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpD22C,GAAc,OAvBtB,SA2BGx5C,EAAE,kBA9BOgK,kBAPFA,wBAXtBhK,EAAE,2DA+DJ,GAmCJ,OACE,eAAC,GAAD,CACE49C,eAAgBA,EAChB3Q,UAAWA,EACX7+B,WAAYA,EACZtF,UAAWA,EACXm2C,kBAAmBA,EACnBmE,cAAeA,EANjB,SAQE,eAAC,KAAK58C,KAAN,UACE,gBAAC,KAAD,WACE,eAAC,KAAMT,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4CACpB,eAAC,KAAM+J,UAAP,IACA,eAAC,KAAMA,UAAP,SAGJ,eAAC,KAAMvD,KAAP,UACGolC,EAA4BnqC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKiR,QAAQgK,SADhB,IAC0B,wBACtBjb,EAAKmqC,UAAa,eAAC,KAAD,CAAOpnC,MAAM,UAAb,SAAwB3E,EAAE,uBAAgC,MAEhF,eAAC,KAAM6F,IAAP,IAGA,gBAAC,KAAMA,IAAP,WACE,eAAC,GAAD,CAAczC,MAAOxB,EAAKqqC,eAD5B,IAC6C,2BAG7C,eAAC,KAAMpmC,IAAP,UACIjE,EAAKmqC,UACL,eAAC,KAAD,CACE5rC,UAAU,aACVwE,MAAM,UACN8D,QAAS,kBACPkjC,EAAiC,CAAEziC,UAAW,CAC5C6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTu9B,WAAW,IAEZ7/B,eAAgB,CACf,CAACC,MAAOq/B,GAA0CtiC,UAAW,CAC3D2iC,oBAAqBr9B,OAG1BpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,iDAAmD,CAChEuM,SAAUF,IAAMG,SAASC,eAE7B+sC,GAAc,MACb9sC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpD22C,GAAc,OAzBtB,SA8BGx5C,EAAE,sBAGL,eAAC,KAAD,CACEG,UAAU,aACVwE,MAAM,UACN8D,QAAS,kBACPkjC,EAAiC,CAAEziC,UAAW,CAC5C6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTu9B,WAAW,IAEZ7/B,eAAgB,CACf,CAACC,MAAOq/B,GAA0CtiC,UAAW,CAC3D2iC,oBAAqBr9B,OAG1BpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,+CAAiD,CAC9DuM,SAAUF,IAAMG,SAASC,eAE7B+sC,GAAc,MACb9sC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpD22C,GAAc,OAzBtB,SA6BKx5C,EAAE,wBA5EGgK,gCC5JxBrG,GAAM,IAAIC,KA6QD7D,sBA1Qf,YAAgE,IAA/BC,EAA8B,EAA9BA,EAAmBE,GAAW,EAA3B2D,MAA2B,EAApBC,QAAoB,EAAX5D,UAClD,EAA4CyC,YAASvB,IAA7CyB,EAAR,EAAQA,MAAOD,EAAf,EAAeA,QAASE,EAAxB,EAAwBA,KAExB,OAFA,EAA8BiB,UAE1BnB,EAAgB,eAAC,GAAD,IAChBC,EAAc,6BAAI7C,EAAE,gCAExBzF,QAAQC,IAAIsI,GAGV,gBAAC,KAAKoB,QAAN,CACEC,YAAa,CACXC,KAAM,IACN9D,IAAK,cACL+D,SAAU,+CAqCVO,gBAAiB,CACjBZ,UAAW,IACXa,KAAM/B,EAAKxB,KAAKwD,UAAY,IAAMhC,EAAKxB,KAAKyD,SAC5CC,YAAa,GACbC,QAAS,CAEP,CAAE3B,KAAM,OAAQF,MAAO,kBAAmBC,GAAI,4BAC9C,CAAE6B,WAAW,GACb,CAAE5B,KAAM,UAAWF,MAAO,WAAYC,GAAI,sBAM9CgC,2BAA4B7B,YAAW8B,MACvCC,YAAa,CAaXC,UACE,eAAC,WAAD,UACE,2DAEE,qBACEpB,KAAK,8BACLsB,OAAO,SACPC,IAAI,sBAHN,UAKG,IALH,iBAOK,KATP,4BAUyBhC,GAAI8B,cAV7B,SAcJG,IACE,gBAAC,WAAD,WACE,eAAC,KAAKC,IAAN,CAAUC,MAAM,IAUhB,eAAC,KAAKD,IAAN,CAAUC,MAAM,QAjGxB,UAgHG5F,EACD,eAAC,IAAD,CACEK,UAAW,IACXC,WAAYC,aC1NLV,I,YAAAA,iBAAkByD,aAnBjC,YAA8E,EAAnDxD,EAAmD,EAAhD6D,MAAgD,EAAzCC,QAA0C,IAAjC5D,EAAgC,EAAhCA,SAAU8F,EAAsB,EAAtBA,MAAsB,IAAfsa,gBAAe,MAAN,GAAM,EAE5E,OACE,eAAC,GAAD,UACE,sBAAKngB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOA,EAAOsa,SAAUA,IACnC,eAAC,KAAKlgB,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACIrG,iBCpBL0hC,GAAqBrmC,YAAH,6oBAqClBirC,GAAsCjrC,YAAH,+/BA2DnCmrC,IATmCnrC,YAAH,8LASEA,YAAH,yOC/FrC,SAASu9C,KACd,IAAInoC,EAAY,CACd4wB,aAAS1wB,EACT2wB,cAAU3wB,EACV6wB,gBAAY7wB,GAGV4wB,EAAS7iC,aAAagS,QAAQ9R,EAAKb,4BAKvC,OAJA0S,EAAU+wB,WAAaD,EAEvBlnC,QAAQC,IAAImW,GAELA,EAUF,SAASymB,GAAYgjB,EAAWvT,EAAcxoB,GACnD,OAAO,kCACJwoB,EAAatL,yBAAyBlC,qBAAqBx0B,KADvD,IAC+D,MACnEoF,KAAOmwC,EAAY,IAAOvT,EAAaC,WAAW38B,OAAOkU,GAFrD,IAEwE,IAC5EwoB,EAAa3R,sBAAsBrwB,KAH/B,IAGuC,OCKhD,SAASw0C,GAAT,GAAmE,IAArCr5C,EAAoC,EAApCA,EAAGs5C,EAAiC,EAAjCA,iBAAkB13C,EAAe,EAAfA,KAAMmH,EAAS,EAATA,OACvDuwC,EAAiB,CACfpwC,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTw4B,cAAej+B,MAGlBqD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACTvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJtM,EAAE,kDAAmD,CACnDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MA+RzC9C,I,MAAAA,iBAAkByD,aA1RjC,YAAoD,IDvCAw1C,EAAkBxrC,ECuCxCxN,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC/B,GADiD,EAAXC,QACF6I,oBAAS,IAA7C,mBAAO4sC,EAAP,KAAmBC,EAAnB,KACMpgB,EAAav1B,EAAMkD,OAAO+zB,YAC1B0Y,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BoC,EAAar1C,EAAMkD,OAAOyG,KAC1BoT,EAAc3X,qBAAWrI,IAGzByd,EAFauC,EAAY9T,WAEK,IADjB8T,EAAYC,iBAG/B,EAKIle,YACF6jC,GAAqC,CACnCt9B,WDxD8C8vC,ECwDCxF,EDxDiBhmC,ECwDD0rC,EDvD5D,CACLrS,aAAcmS,EACdxrC,KAAMA,MC+CGg3C,EADX,EACEp1C,QACSqqC,EAFX,EAEE72C,QACO82C,EAHT,EAGE72C,MACM82C,EAJR,EAIE72C,KAOF,EAEIyI,YAAYm7B,IAFhB,mBAAQ4S,EAAR,YAIA,GAJA,EACI12C,QADJ,EACwCC,MASjC+2C,aAAchY,KANrB,mBAAQiY,EAAR,YAEeC,GAFf,EACI1qC,QADJ,EAEIrL,WACSg2C,EAHb,EAGIn3C,QACOo3C,EAJX,EAIIn3C,MACMo3C,EALV,EAKIn3C,KAMJ,GAHAvI,QAAQC,IAAI,qBACZD,QAAQC,IAAIy/C,GAERR,EAAwB,OAC1B,eAAC,GAAD,UACGz5C,EAAE,+BAGP,GAAI05C,EAAsB,OACxB,eAAC,GAAD,UACG15C,EAAE,uCAIPzF,QAAQC,IAAIm/C,GACZ,IAAIO,EAAe,GACnBP,EAAoB5S,wBAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpDs4C,EAAa/2C,KAAKvB,EAAKiR,QAAQrE,OAEjCjU,QAAQC,IAAI0/C,GACZ,IAAMrT,EAAe8S,EAAoB9S,aAEnCvmB,EAAW8W,GACf8hB,EACArS,EACAxoB,GAGF,OACE,gBAAC,GAAD,CAAiBrY,MAAOhG,EAAE,6BAA8BsgB,SAAUA,EAAlE,UACE,eAAC,GAAD,CAAanY,UAAWnI,EAAE,sBACZ6H,SAAU8xC,EAAoB5S,wBAAwBl/B,SACtDG,WAAY,WACV8xC,EAAkB,CAClB5wC,UAAW,CACTM,MAAOmwC,EAAoB5S,wBAAwBl/B,SAAS4B,WAE9DC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBm9B,wBAAwBtlC,MACnDoG,EAAW+B,EAAgBm9B,wBAAwBl/B,SAEzD,OAAOgC,EAAS1D,OACZ,CAGEwzC,oBAAqB,CACnB5S,wBAAyB,CACvBj9B,WAAYH,EAAeo9B,wBAAwBj9B,WACnDrI,MAAM,GAAD,oBAAOkI,EAAeo9B,wBAAwBtlC,OAA9C,aAAwDoI,IAC7DhC,cAIN8B,MAvBtB,SA2BI,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGmzC,EAAoB5S,wBAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACnD,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiR,QAAQgK,WAEhB,eAAC,KAAMhX,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKolC,kBAEnC,gBAAC,KAAMnhC,IAAP,WAIE,eAAC,KAAD,CAEE1F,UAAU,aACVqE,KAAK,SACL0V,QAAM,EACNvV,MAAM,YACNwV,eAAgBna,EAAE,kBAClBkD,MAAO,CACL,eAAC,GAAD,CAAiCZ,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,QACLmF,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACHs5C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,cAEVy7C,KAVJ,SAYKxkD,EAAE,+DAXAgK,iBAFkBA,gBAgB3B,eAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,WACLmF,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACHs5C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,WAEVy7C,KAVJ,SAYKxkD,EAAE,4DAXAgK,iBAFkBA,gBAgB3B,eAAC,GAAD,CAAiC1H,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAASgC,KAAV,CAEEjB,KAAK,IACLmF,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACHs5C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,cAEVy7C,KAVJ,SAYKxkD,EAAE,+DAXAgK,iBAFkBA,kBAvCxBA,gBAyDiB,UAAtBpI,EAAKolC,cACL,eAAC,GAAD,CAAiC1kC,WAAW,SAASC,SAAS,yBAA9D,SACE,eAAC,KAAD,CAEEpC,UAAU,aACVwE,MAAM,UACND,KAAK,GACL+D,QAAS,WACP4wC,GAAoB,CAClBr5C,EAAGA,EACHs5C,iBAAkBA,EAClB13C,KAAMA,EACNmH,OAAQ,cAEVy7C,KAZJ,SAcKxkD,EAAE,oBAbAgK,iBAFkBA,gBAiBA,QAvFjBA,0BA8F5B,8BAAKhK,EAAE,2CACP,eAAC,GAAD,CACEwgC,gBAAiB1hC,EAAKb,2BACtBwY,YAAazW,EAAE,UACfgN,SAAU,SAAC5J,GACT7I,QAAQC,IAAI4I,GACZxE,aAAaC,QAAQC,EAAKb,2BAA4BmF,GAClDA,GAGFo2C,GAAc,GACdK,EAAY,CAAE3wC,UAAW4vC,QAEzBU,GAAc,MAjJtB,IAoJK,wBAEDD,GAAeU,IAAwBF,IAA2BC,EAClE,eAAC,GAAD,CAAa7xC,UAAWnI,EAAE,0BACd6H,SAAUoyC,EAAkB7X,SAASv6B,SACrCG,WAAY,WACV8xC,EAAkB,CAChB5wC,UAAW,CACXM,MAAOywC,EAAkB7X,SAASv6B,SAAS4B,WAE7CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBw4B,SAAS3gC,MACpCoG,EAAW+B,EAAgBw4B,SAASv6B,SAE1C,OAAOgC,EAAS1D,OACZ,CAGE8zC,kBAAmB,CACjB7X,SAAU,CACRt4B,WAAYH,EAAey4B,SAASt4B,WACpCrI,MAAM,GAAD,oBAAOkI,EAAey4B,SAAS3gC,OAA/B,aAAyCoI,IAC9ChC,cAIN8B,MAvBpB,SA2BMswC,EAAkB7X,SAAS3gC,MAAM0E,OAEnC,gBAAC,KAAD,WACE,eAAC,KAAMJ,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,MAHcC,kBAMlB,eAAC,KAAMxD,KAAP,UACGyzC,EAAkB7X,SAAS3gC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKib,UADQ7S,gBAGhB,eAAC,KAAMnE,IAAP,UACGjE,EAAKmX,OADQ/O,gBAGhB,eAAC,KAAMnE,IAAP,UACIq0C,EAAaC,SAASv4C,EAAK4M,IAC3B,uBAAMrO,UAAU,aAAhB,SAA8BH,EAAE,yEAChC,eAAC,IAAD,CAAMqD,GAAI,qBAAuB+1B,EAAa,IAAMoa,EAAiB,IAAM0F,EAAa,IAAMt3C,EAAK4M,GAAnG,SACE,gBAAC,KAAD,CAAQ7J,MAAM,uBAAd,UACG3E,EAAE,mBADL,IACyB,eAAC,KAAD,CAAM6E,KAAK,wBAL1BmF,kBAPFA,wBAXtBhK,EAAE,2DAkCJ,UCzUGo7C,GAA4B7/C,YAAH,uhDA4ESA,YAAH,wOC4C7BwE,I,GAAAA,iBAAkByD,aA3FjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACtC,GADwD,EAAXC,QACT6I,oBAAS,IAA7C,mBACMiU,GADN,UACoB3X,qBAAWrI,KAGzByd,EAFauC,EAAY9T,WAEK,IADjB8T,EAAYC,iBAIzBsjB,EAAatgC,EAAMkD,OAAOo9B,WAC1B6U,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAC1B4rB,EAAav1B,EAAMkD,OAAO+zB,YAChC,EAAsEn4B,YACpEy4C,GAA2B,CACzBlyC,UAAW,CACT2J,QAASsxB,EACT0C,aAAcmS,EACdxrC,KAAM0rC,EACN+C,SAAU,YANCx/B,EAAjB,EAAQ7Z,QAA8B8Z,EAAtC,EAA+B7Z,MAAyBitC,EAAxD,EAAkDhtC,KAgBlD,GAJAlE,aAAaS,WAAWP,EAAKb,4BAIzBwe,EAAc,OAAO,6BAAIzc,EAAE,+BAE/B,GAAI0c,EAEF,OADAniB,QAAQC,IAAIkiB,GACL,6BAAI1c,EAAE,8BAGfzF,QAAQC,IAAIs1C,GACZ,IAAMj9B,EAAUi9B,EAAUoM,4BAA4BrpC,QAChD6X,EAAcolB,EAAUoM,4BAA4BxxB,YACpDC,EAAgBmlB,EAAUoM,4BAA4BvxB,cACtDiG,EAASkf,EAAUoM,4BAA4BC,mBAC/CtV,EAAeiJ,EAAUoM,4BAA4BrV,aAC3DtsC,QAAQC,IAAIo2B,GAEZ,IAAMtQ,EAAW8W,GACf8hB,EACArS,EACAxoB,GAGF,OACE,eAAC,GAAD,CAAiBrY,MAAOhG,EAAE,6BAA8BsgB,SAAUA,EAAlE,SACE,eAAC,KAAKlgB,IAAN,UACI,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACE,gCAAKvG,EAAE,2BAAP,IAAoC6S,EAAQgK,YAC5C,sBAAK1c,UAAU,OAAf,SACA,gBAAC,KAAKC,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,UACE,eAAC,GAAD,CACEskB,cAAeA,EACf4wB,SAAS,cACTniB,WAAYA,IAEd,eAAC,GAAD,CACE1O,YAAaA,EACb6wB,SAAS,cACTniB,WAAYA,IAEZxI,GACCA,EAAOwrB,4BACN,eAAC,GAAD,CACEN,YAAalrB,EAAOwrB,4BACpBb,SAAS,cACTniB,WAAYA,IAEd,GACFxI,GACCA,EAAOyrB,2BACN,eAAC,GAAD,CACEL,WAAYprB,EAAOyrB,2BACnBd,SAAS,cACTniB,WAAYA,IAEd,mBC/GLqrB,GAAmClpD,YAAH,glBC0E9BwE,I,GAAAA,iBAAkByD,aA1DjC,YAA2C,IAAtBxD,EAAqB,EAArBA,EACnB,GADwC,EAAlB6D,MAAkB,EAAXC,QACInB,YAAS8hD,KAAlC7hD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,OAAIF,EACF,eAAC,GAAD,UACG5C,EAAE,+BAGH6C,EACF,eAAC,GAAD,UACG7C,EAAE,yCAML,gBAAC,GAAD,CAAiBgG,MAAOhG,EAAE,0BAA1B,UACE,8BAAKA,EAAE,yCACL,eAAC,KAAKiL,MAAN,UAEInI,EAAK21B,sBAAsBh3B,MAAM6E,KAAI,gBAAE1E,EAAF,EAAEA,KAAF,OACnC,eAAC,KAAK0M,UAAN,CAAgBo2C,QAAM,EAAtB,SACE,eAAC,IAAD,CAAMrhD,GAAI,yBAA2BzB,EAAK4M,GAA1C,SACE,iCACE,uBAAMrO,UAAU,aAAhB,SAA6B,eAAC,KAAD,CAAM0E,KAAK,oBACvCjD,EAAKiD,wBCzCb8/C,GAA6BppD,YAAH,k1CCkIxBwE,I,MAAAA,iBAAkByD,aA5GjC,YAAiD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACtBu1B,GADwC,EAAXt1B,QAChBD,EAAMkD,OAAO+zB,aAC1Bla,EAAc3X,qBAAWrI,IAEzB+lC,GADa/lB,EAAY9T,WACZ8T,EAAYC,kBACzB+jC,EAAQ36C,OAASE,OAAO,cAE9B,EAAiCxH,YAASgiD,GAA4B,CACpEz7C,UAAW,CACT2pC,SAAU+R,EACV9R,UAAW8R,EACXvrB,qBAAsBD,EACtBgc,oBAAqB,0BALjBxyC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KASxB,GAAIF,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,uCAIPzF,QAAQC,IAAIsI,GACZ,IAAMwd,EAAWxd,EAAKu2B,qBAAqBx0B,KAE3C,OACE,eAAC,GAAD,CAAiBmB,MAAOhG,EAAE,6BAA8BsgB,SAAUA,EAAlE,SACE,eAAC,KAAD,UACA,gBAAC,KAAD,WACE,eAAC,KAAMva,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UACI/J,EAAE,kBAEN,eAAC,KAAM+J,UAAP,UACI/J,EAAE,kBAEN,eAAC,KAAM+J,UAAP,UACI/J,EAAE,mBAEN,eAAC,KAAM+J,UAAP,UACI/J,EAAE,0BAIV,eAAC,KAAMwG,KAAP,UAEI1D,EAAKkzC,gBAAgB1vC,KAAI,cAAGkH,KAAH,SAASwkB,QACxB1rB,KAAI,gBACRktC,EADQ,EACRA,eAEAhmC,GAHQ,EAERu8B,cAFQ,EAGRv8B,MAGAqF,GANQ,EAIR9J,OAJQ,EAKR/D,YALQ,EAMR6N,SAIA0oB,GAVQ,EAORxe,KAPQ,EAQRk5B,SARQ,EASRC,MATQ,EAUR3a,0BACArG,EAXQ,EAWRA,sBAEA4R,GAbQ,EAYR3K,kBAZQ,EAaR2K,WACA2M,EAdQ,EAcRA,QAdQ,EAeRt4B,cAfQ,OAiBN,eADA,CACC,KAAM/a,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGoE,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAOw8B,GADzC,IACuD,MACpD18B,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAOw8B,MAEvC,eAAC,KAAM9gC,IAAP,UACI01B,EAAyB12B,OAE7B,eAAC,KAAMgB,IAAP,UACIqvB,EAAsBrwB,OAE1B,eAAC,KAAMgB,IAAP,UAEKgN,EAAWA,EAAQgK,SACpB,uBAAM1c,UAAU,WAAhB,SAA4BH,EAAE,mCAGlC,eAAC,KAAM6F,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAI,wBAA0B+1B,EAAa,IAAMoa,EAAiB,IAAMhmC,EAA9E,SACE,gBAAC,KAAD,CAAQ7I,MAAM,YAAYxE,UAAU,aAApC,UACGH,EAAE,qCACH,eAAC,KAAD,CAAM6E,KAAK,+CChH1BggD,GAA4BtpD,YAAH,qOAezBupD,GAAwBvpD,YAAH,qMCPnBwE,sBANf,YAAoD,EAA5BC,EAA6B,IAAD,IAAzB8I,iBAAyB,MAAf,YAAe,EAClD,OACE,eAAC,GAAD,CAAYA,UAAWA,OCsCZ/I,qBAAkByD,aA5BjC,YAA6G,IAArFxD,EAAoF,EAApFA,EAAGE,EAAiF,EAAjFA,SAAiF,IAAvE6kD,sBAAuE,MAAxD,GAAwD,EAApD58C,EAAoD,EAApDA,UAAoD,IAAzC68C,mBAAyC,MAA7B,GAA6B,MAAzBl8C,iBAAyB,MAAf,YAAe,EAC1G,OACE,eAAC,GAAD,UACE,sBAAK3I,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,kBAAmBsgB,SAAUykC,EAAnD,SACE,sBAAK5kD,UAAU,sBAAf,SACE,eAAC,GAAD,CAAc2I,UAAWA,QAG7B,eAAC,KAAK1I,IAAN,UACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACGy+C,EACD,gBAAC,KAAD,WACE,eAAC,KAAKj/C,OAAN,UACE,eAAC,KAAKwC,MAAN,UAAaJ,MAEdjI,qBCiLFH,qBAAkByD,aA5LjC,YAA+C,IAAtBxD,EAAqB,EAArBA,EACjB+kD,GADsC,EAAlBlhD,MAAkB,EAAXC,QACV9D,EAAE,yBACnBmI,EAAYnI,EAAE,8BAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,oBALFC,EADX,EACEtiD,QACOuiD,EAFT,EAEEtiD,MACMuiD,EAHR,EAGEtiD,KAMF,EAIIH,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,0BALFI,EADX,EACEziD,QACO0iD,EAFT,EAEEziD,MACM0iD,EAHR,EAGEziD,KAOF,GAAKoiD,GAAoBG,EACvB,OACE,eAAC,GAAD,CACIN,eAAgBA,EAChB58C,UAAWA,EAFf,SAGE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAKwkD,GAAiBG,EACpB,OACE,eAAC,GAAD,CACIP,eAAgBA,EAChB58C,UAAWA,EAFf,SAGE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAI4qD,GACZ7qD,QAAQC,IAAI+qD,GAEZ,IAAIruB,EAAU,EACVsuB,EAAQ,EAUZ,OATIJ,EAAYK,eAAehkD,MAAM0E,SACnC+wB,EAAUkuB,EAAYK,eAAehkD,MAAM,GAAGG,KAAKwB,OAEjDmiD,EAAUE,eAAehkD,MAAM0E,SACjCq/C,EAAQD,EAAUE,eAAehkD,MAAM,GAAGG,KAAKwB,OAM/C,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EAFb,SAIE,gBAAC,KAAK3B,KAAN,WACE,gCACGxG,EAAE,4CADL,cACsDk3B,EADtD,YACiEsuB,MAEjE,8BAAKxlD,EAAE,0BACNA,EAAE,wCALL,IAK8C,wBAAM,wBAClD,8BAAKA,EAAE,qBANT,mPAO0O,wBAAM,wBAPhP,uEAQ8D,sDAR9D,0CAQgI,iDARhI,OAQ0J,kEAR1J,0DAQwP,wBAAM,wBAR9P,gNASuM,wBAC7M,wBAVM,6BAWoB,wBAC1B,wBAZM,uBAac,wBACpB,wBAdM,sHAe6G,wBACnH,wBAhBM,0HAiBiH,wBACvH,wBAlBM,WAmBE,wBACR,wBApBM,gjBAqBuiB,wBAC7iB,wBAtBM,4ZAuBmZ,wBAAM,wBAC/Z,wBAxBM,0QAyBiQ,wBACvQ,wBA1BM,wRA2B+Q,wBACrR,wBA5BM,qLA6B4K,wBAClL,wBA9BM,uXA+B8W,wBACpX,wBAhCM,wVAiC+U,wBACrV,wBAlCM,sFAmC6E,wBACnF,wBApCM,kEAqCyD,wBAC/D,wBAtCM,wmBAuC+lB,wBACrmB,wBAxCM,sYAyC6X,wBACnY,wBA1CM,0aA2Cia,wBACva,wBA5CM,gJA6CuI,wBAC7I,wBA9CM,mQA+C0P,wBAChQ,wBAhDM,qkDAiD4jD,wBAClkD,wBAlDM,qPAmD4O,wBAClP,wBApDM,+OAqDsO,wBAC5O,wBAtDM,kNAuDyM,wBAC/M,wBAxDM,u+CAyD89C,wBACp+C,wBA1DM,6TA2DoT,wBAC1T,wBA5DM,ybA6Dgb,wBACtb,wBA9DM,yfA+Dgf,wBACtf,wBAhEM,oaAiE2Z,wBACja,wBAlEM,syBAmE6xB,wBACnyB,wBApEM,6NAqEoN,wBAC1N,wBAtEM,4mBAuEmmB,wBACzmB,wBAxEM,sHAyE6G,wBACnH,wBA1EM,odA2E2c,wBACjd,wBA5EM,6PA6EoP,wBAC1P,wBA9EM,icA+Ewb,wBAC9b,wBAhFM,yeAiFge,wBACte,wBAlFM,cAmFK,wBACX,wBApFM,wlBAqF+kB,wBACrlB,wBAtFM,wmBAuF+lB,wBACrmB,wBAxFM,8BAyFqB,wBAC3B,wBA1FM,gDA2FuC,wBAC7C,wBA5FM,yNA6FgN,wBACtN,wBA9FM,qRA+F4Q,wBAClR,wBAhGM,qGAiG4F,wBAClG,wBAlGM,kPAmGyO,wBAC/O,wBApGM,2OAqGkO,wBACxO,wBAtGM,wRAuG+Q,wBACrR,wBAxGM,gHAyGuG,wBAC7G,wBA1GM,ghBA2GugB,wBAC7gB,wBA5GM,6LA6GoL,wBAC1L,wBA9GM,kJA+GyI,wBAC/I,wBAhHM,yECxCSD,iBAAkByD,aApCO,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAsBc,GAArC,EAA6Bb,OAA7B,EAAqCa,QAArC,EAA6CkO,WAA7C,OACtC,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACE,gBAAC,KAAKyE,MAAN,WACI,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACE,eAAC,KAAD,CACEA,UAAU,sBACVqE,KAAK,WACLK,KAAK,6BACL2W,QAAS3P,EAAO65C,6BAEhB,uBAAMvlD,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,4CAErD,eAAC,KAAD,CAAc6E,KAAK,6BAA6BuG,UAAU,aAG9D,eAAC,KAAK5C,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BC8GAD,qBAAkByD,aAvHjC,YAAqD,IAAtBxD,EAAqB,EAArBA,EACvB+kD,GAD4C,EAAlBlhD,MAAkB,EAAXC,QAChB9D,EAAE,2BACnBmI,EAAYnI,EAAE,wCAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,gCALFriD,EADX,EACEA,QACOC,EAFT,EAEEA,MACMC,EAHR,EAGEA,KAOF,EAA2ByI,YAAYu5C,IAA/Ba,EAAR,oBAEA,GAAI/iD,EACF,OACE,eAAC,GAAD,CACImiD,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAIkC,EACF,OACE,eAAC,GAAD,CACIkiD,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAIsI,GAEZ,IAAI2I,EAAgB,CAClBm6C,MAAM,GAMR,OAJI9iD,EAAK2iD,eAAehkD,MAAM0E,SAC5BsF,EAAa,KAAsE,SAA1D3I,EAAK2iD,eAAehkD,MAAM,GAAGG,KAAKwB,MAAMyiD,eAIjE,eAAC,GAAD,CACEd,eAAgBA,EAChB58C,UAAWA,EAFb,SAIA,eAAC,KAAD,CACEsD,cAAe,CACbi6C,2BAA4Bj6C,EAAa,MAG3CG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,6BAA8B7hD,MAAOyI,EAAO65C,6BAKzD,IAAK,IAAI3K,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASa,EAAS/K,GAAGkK,aAExE74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzC1B,SA8CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCvFRjL,iBAAkByD,aArCG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAClC,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,6BAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,mBACL1E,UAAY6K,EAAO+6C,iBAAoB,0BAA4B,eACnE56C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,mBAAmBuG,UAAU,OAAOjL,UAAU,wBAEnE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,0BACL1E,UAAY6K,EAAOg7C,wBAA2B,0BAA4B,eAC1E76C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,0BAA0BuG,UAAU,OAAOjL,UAAU,2BAG9E,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCgIAD,qBAAkByD,aA1IjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAC3B+kD,GADgD,EAAlBlhD,MAAkB,EAAXC,QACpB9D,EAAE,2BACnBmI,EAAYnI,EAAE,mCACdimD,EAAgB,cAEtB,EAIItjD,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,sBALFiB,EADX,EACEtjD,QACOujD,EAFT,EAEEtjD,MACMujD,EAHR,EAGEtjD,KAMF,EAIIH,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,6BALFoB,EADX,EACEzjD,QACO0jD,EAFT,EAEEzjD,MACM0jD,EAHR,EAGEzjD,KAMF,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAEA,GAFA,KAA0B7iD,KAErBojD,GAAqBG,EACxB,OACE,eAAC,GAAD,CACItB,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAKwlD,GAAkBG,EACrB,OACE,eAAC,GAAD,CACIvB,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAI4rD,GACZ7rD,QAAQC,IAAI+rD,GAEZ,IAAI96C,EAAgB,CAClB2V,SAAU,MACVolC,OAAQ,UAWV,OATIJ,EAAaX,eAAehkD,MAAM0E,SACpCsF,EAAa,SAAe26C,EAAaX,eAAehkD,MAAM,GAAGG,KAAKwB,OAEpEmjD,EAAWd,eAAehkD,MAAM0E,SAClCsF,EAAa,OAAa86C,EAAWd,eAAehkD,MAAM,GAAGG,KAAKwB,OAMlE,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHjB,SAKA,eAAC,KAAD,CACEx6C,cAAe,CACbs6C,iBAAkBt6C,EAAa,SAC/Bu6C,wBAAyBv6C,EAAa,QAGxCG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,mBAAoB7hD,MAAOyI,EAAOk6C,kBAC7C,CAAEd,QAAS,0BAA2B7hD,MAAOyI,EAAOm6C,0BAKtD,IAAK,IAAIjL,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASlK,EAAEkK,aAE9D74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3C1B,SAgDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cC3JVy7C,GAAkBl8C,OAAaC,MAAM,CAC9CsC,WAAYvC,OACTG,SAAS1K,YAAE,uBACd2mC,WAAYp8B,OACTG,SAAS1K,YAAE,yBCqDHD,iBAAkByD,aA5CG,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAClC,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,aACL1E,UAAY6K,EAAO8B,WAAc,0BAA4B,eAC7D3B,aAAa,MAHrB,UAII,yBAAQ/H,MAAM,aAAd,SAAuCpD,EAAE,6CAATgK,gBAChC,yBAAQ5G,MAAM,aAAd,SAAuCpD,EAAE,6CAATgK,gBAChC,yBAAQ5G,MAAM,aAAd,SAAuCpD,EAAE,6CAATgK,mBAEpC,eAAC,KAAD,CAAcnF,KAAK,aAAauG,UAAU,OAAOjL,UAAU,wBAE7D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACTvG,KAAK,aACL1E,UAAY6K,EAAO27B,WAAc,0BAA4B,eAC7Dx7B,aAAa,MAHrB,UAII,yBAAQ/H,MAAM,KAAd,SAA+BpD,EAAE,uCAATgK,gBACxB,yBAAQ5G,MAAM,KAAd,SAA+BpD,EAAE,uCAATgK,mBAE5B,eAAC,KAAD,CAAcnF,KAAK,aAAauG,UAAU,OAAOjL,UAAU,2BAGjE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCwEAD,qBAAkByD,aA/FjC,YAAyD,IAAtBxD,EAAqB,EAArBA,EAC3B+kD,GADgD,EAAlBlhD,MAAkB,EAAXC,QACpB9D,EAAE,8BACnBmI,EAAYnI,EAAE,6BACdimD,EAAgB,UAEtB,EAAiCtjD,YAAS/C,GAAlCgD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAAgDyI,YAAY1L,GAA5D,mBAAQ8lD,EAAR,KAKA,OALA,KAA0B7iD,KAE1BvI,QAAQC,IAAI,2BACZD,QAAQC,IAAIsI,GAERF,EAEA,eAAC,GAAD,CACImiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMpBkC,EAEA,eAAC,GAAD,CACIkiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACGxG,EAAE,sCAQT,eAAC,GAAD,CACE+kD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHjB,SAKA,eAAC,KAAD,CACEx6C,cAAe,CACbqB,WAAYhK,EAAK8d,YAAY9T,WAC7B65B,WAAY7jC,EAAK8d,YAAY+lB,WAC7BnvB,KAAM,IAER7L,iBAAkB86C,GAClB76C,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ26C,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLe,WAAYjB,EAAOiB,WACnB65B,WAAY96B,EAAO86B,aAEpBz6B,eAAgB,CACf,CAACC,MAAOvM,MAEXwM,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCjERjL,iBAAkByD,aA9BC,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAChC,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,2CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,kBACL1E,UAAY6K,EAAO07C,gBAAmB,0BAA4B,eAClEv7C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,0BAGtE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCoGAD,qBAAkByD,aAvGjC,YAAuD,IAAtBxD,EAAqB,EAArBA,EACzB+kD,GAD8C,EAAlBlhD,MAAkB,EAAXC,QAClB9D,EAAE,2BACnBmI,EAAYnI,EAAE,iCACdimD,EAAgB,UAChBU,EAAiB,CACrB1B,QAAS,mBAGX,EAAiCtiD,YAASkiD,GAA2B,CACnE37C,UAAWy9C,IADL/jD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAGxB,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAKA,GALA,KAA0B7iD,KAE1BvI,QAAQC,IAAI,uBACZD,QAAQC,IAAIsI,GAERF,EACF,OACE,eAAC,GAAD,CACImiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAIkC,EACF,OACE,eAAC,GAAD,CACIkiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACGxG,EAAE,sCAMX,IAAI4mD,EAAW,GAMf,OALI9jD,EAAK2iD,eAAehkD,MAAM0E,SAC5BygD,EAAW9jD,EAAK2iD,eAAehkD,MAAM,GAAGG,KAAKwB,OAK7C,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHjB,SAKA,eAAC,KAAD,CACEx6C,cAAe,CACbi7C,gBAAiBE,GAGnBh7C,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ26C,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAAS,kBACT7hD,MAAOyI,EAAO66C,kBAEfx6C,eAAgB,CACf,CAAEC,MAAO04C,GAA2B37C,UAAWy9C,MAElDv6C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA7BxB,SAiCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCoERjL,qBAAkByD,aA1KjC,YAA6C,IAArBxD,EAAoB,EAApBA,EACtB,OAD0C,EAAjB6D,MAAiB,EAAVkD,OAE9B,eAAC,GAAD,UACE,sBAAK5G,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,oBACtB,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,8BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,sCACNA,EAAE,0CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,sCAI3B,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,mCACNA,EAAE,uCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,uCAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,+BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,2CACNA,EAAE,+CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,4CAI3B,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,iDACNA,EAAE,qDACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,kDAI3B,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,mCACNA,EAAE,uCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,oCAI3B,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,kCACNA,EAAE,sCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,sCAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,8BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,qCACNA,EAAE,yCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,sCAI3B,eAAC,KAAKf,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,0CACNA,EAAE,8CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,8CAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,2BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,mCACNA,EAAE,uCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,uCAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,2BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,kCACNA,EAAE,sCACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,uCAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,kCAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,uCACNA,EAAE,2CACH,wBAAM,wBACN,eAAC,GAAD,CAAgB4G,KAAK,4CAK7B,gBAAC,KAAKxG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKvG,EAAE,4BAET,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,gCACNA,EAAE,8BACH,wBAAM,wBACN,eAAC,GAAD,CACE4G,KAAK,kBACLC,UAAW7G,EAAE,oCCtIlBD,iBAAkByD,aA9BK,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OACpC,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,uCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,iBACL1E,UAAY6K,EAAO67C,eAAkB,0BAA4B,eACjE17C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,iBAAiBuG,UAAU,OAAOjL,UAAU,0BAGrE,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCGAD,qBAAkByD,aArBjC,YAAsF,IAApCxD,EAAmC,EAAnCA,EAChD,OADmF,EAAhC6D,MAAgC,EAAzBC,QAAyB,EAAhBgjD,aAE1D,GAIP,gBAAC,KAAD,CAAOtiD,KAAK,UAAZ,UACE,eAAC,KAAOuiD,GAAR,UAAY/mD,EAAE,sDACd,6BACGA,EAAE,wDAEL,oBAAGoE,KAAK,kDAAkDsB,OAAO,SAAjE,SACE,gBAAC,KAAD,CAAQf,MAAM,UAAUyiB,cAAc,SAAtC,UACGpnB,EAAE,yCADL,IAC+C,eAAC,KAAD,CAAM6E,KAAK,8BC2GnD9E,qBAAkByD,aAxGjC,YAA2D,IAAtBxD,EAAqB,EAArBA,EAC7B+kD,GADkD,EAAlBlhD,MAAkB,EAAXC,QACtB9D,EAAE,+BACnBmI,EAAYnI,EAAE,qCACdimD,EAAgB,cAEtB,EAAiCtjD,YAASkiD,GAA2B,CACnE37C,UAAW,CACT+7C,QAAS,gCAFLriD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAKA,GALA,KAA0B7iD,KAE1BvI,QAAQC,IAAI,2BACZD,QAAQC,IAAIsI,GAERF,EACF,OACE,eAAC,GAAD,CACImiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAIkC,EACF,OACE,eAAC,GAAD,CACIkiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACGxG,EAAE,sCAMX,IAAI8mD,EAAe,GAKnB,OAJIhkD,EAAK2iD,eAAehkD,MAAM0E,SAC5B2gD,EAAehkD,EAAK2iD,eAAehkD,MAAM,GAAGG,KAAKwB,OAIjD,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EACfjB,YAAa,eAAC,GAAD,CAAwC8B,aAAcA,IAJrE,SAMA,eAAC,KAAD,CACEr7C,cAAe,CACbo7C,eAAgBC,GAGlBl7C,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ26C,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAAS,6BACT7hD,MAAOyI,EAAOg7C,iBAEf36C,eAAgB,CACf,CAACC,MAAO04C,GAA+B37C,UAAW,CAChD+7C,QAAS,kCAGd74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCtFRjL,I,SAAAA,iBAAkByD,aArBjC,YAAsE,IAAjCxD,EAAgC,EAAhCA,EAAGE,EAA6B,EAA7BA,SAAU6kD,EAAmB,EAAnBA,eAChD,OACE,eAAC,GAAD,UACE,sBAAK5kD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iCAAkCsgB,SAAUykC,EAAlE,SACE,sBAAK5kD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJ,eAAC,KAAKC,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACGrG,iBC5BF8mD,GAAkCzrD,YAAH,mZAwB/B0rD,GAAiC1rD,YAAH,wNAc9B2rD,GAA+B3rD,YAAJ,+TCwEzBwE,qBAAkByD,aAlFjC,YAAoD,IAArBxD,EAAoB,EAApBA,EACvBgG,GAD2C,EAAjBnC,MAAiB,EAAVkD,OACzB/G,EAAE,kCAChB,EAA4C2C,YAASqkD,IAA7CpkD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAE9B,GAAInB,EAAS,OACX,eAAC,GAAD,CAA2BoD,MAAOA,EAAlC,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAA2BmD,MAAOA,EAAlC,SACGhG,EAAE,2CAIPzF,QAAQC,IAAIsI,GACZ,IAAMqkD,EAAgBrkD,EAAKskD,oBAM3B,OACE,eAAC,GAAD,CAA2BphD,MAAOA,EAAlC,SACE,eAAC,GAAD,CACEmC,UAAWnI,EAAE,iCAEb6H,SAAUs/C,EAAct/C,SACxBS,aAAa,EACbN,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO29C,EAAct/C,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBw9C,oBAAoB3lD,MAC/CoG,EAAW+B,EAAgBw9C,oBAAoBv/C,SAErD,OAAOgC,EAAS1D,OACZ,CAGEihD,oBAAqB,CACnBt9C,WAAYH,EAAey9C,oBAAoBt9C,WAC/CrI,MAAM,GAAD,oBAAOkI,EAAey9C,oBAAoB3lD,OAA1C,aAAoDoI,IACzDhC,aAGJ8B,MAxBZ,SA4BE,gBAAC,KAAD,CAAOvD,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kCACpB,eAAC,KAAM+J,UAAP,MAFcC,kBAKd,eAAC,KAAMxD,KAAP,UACK2gD,EAAc1lD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKiD,OAER,eAAC,KAAMgB,IAAP,UACE,eAAC,IAAD,CAAMxC,GAAI,iCAAmCzB,EAAK4M,GAAlD,SACE,eAAC,KAAD,CAAQrO,UAAU,oBACVwE,MAAM,YADd,SAEG3E,EAAE,wBARKgK,gCCzBrBjK,qBAAkByD,aAhDjC,YAA8E,IAAzCxD,EAAwC,EAAxCA,EAAGE,EAAqC,EAArCA,SAAU6kD,EAA2B,EAA3BA,eAA2B,IAAXsC,YAAW,MAAN,GAAM,EAC3E,OACE,eAAC,GAAD,UACE,sBAAKlnD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,iCAAkCsgB,SAAUykC,EAAlE,SACE,sBAAK5kD,UAAU,sBAAf,SACE,eAAC,GAAD,CAAc2I,UAAU,iCAG5B,gBAAC,KAAK1I,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACGrG,IAEH,gBAAC,KAAK2F,IAAN,CAAUU,GAAI,EAAd,UACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,mBAAf,SACE,eAAC,KAAKwG,KAAN,UACG6gD,EAAKC,YAGV,eAAC,KAAD,CAAMthD,MAAOhG,EAAE,iBAAf,SACE,eAAC,KAAKwG,KAAN,UACG6gD,EAAKrhD,UAGV,eAAC,KAAD,CAAMA,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACG6gD,EAAKriD,gBAGV,eAAC,KAAD,CAAMgB,MAAOhG,EAAE,mBAAf,SACE,eAAC,KAAKwG,KAAN,UACG6gD,EAAK1gD,YAGV,eAAC,KAAD,CAAMX,MAAOhG,EAAE,oBAAf,SACE,eAAC,KAAKwG,KAAN,UACG6gD,EAAKE,8BCkDTxnD,qBAAkByD,aArFjC,YAA2I,IAAnGxD,EAAkG,EAAlGA,EAAY+K,GAAsF,EAA/FjH,QAA+F,EAAtFiH,cAAcC,EAAwE,EAAxEA,OAAQa,EAAgE,EAAhEA,OAAQqI,EAAwD,EAAxDA,gBAAiB8C,EAAuC,EAAvCA,cAAelO,EAAwB,EAAxBA,UAAWX,EAAa,EAAbA,UAG3H,OACE,eAAC,KAAD,UACE,gBAAC,KAAD,CAAMnC,MAAOmC,EAAb,UACE,gBAAC,KAAK3B,KAAN,WACE,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,UACL1E,UAAY6K,EAAOs8C,QAAW,0BAA4B,eAC1Dn8C,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACNK,KAAK,QACL1E,UAAY6K,EAAOhF,MAAS,0BAA4B,eACxDmF,aAAa,QACnB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,uBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,cACbC,aAActL,EAAO7G,YACrBnK,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,cAAe5C,EAAE1O,OAAO2R,cACtCnD,EAAgB,eAAe,GAAM,MAGzC,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,UACbC,aAActL,EAAOlF,QACrB9L,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,UAAW5C,EAAE1O,OAAO2R,cAClCnD,EAAgB,WAAW,GAAM,MAGrC,eAAC,KAAD,CAAcrP,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CACEiX,iBAAiB,mCACjBC,aAAa,WACbC,aAActL,EAAO07C,SACrB1sD,KAAM6b,GACNzJ,OAAQ,SAACmH,GACP4C,EAAc,WAAY5C,EAAE1O,OAAO2R,cACnCnD,EAAgB,YAAY,GAAM,MAGtC,eAAC,KAAD,CAAcrP,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,2BAG7D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACErI,UAAU,aACVwE,MAAM,UACN0G,SAAUN,EACVvG,KAAK,SAJP,SAMGxE,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CACEtE,KAAK,SACLG,MAAM,OAFR,SAIG3E,EAAE,kCC+CJD,I,MAAAA,iBAAkByD,aAjHjC,YAA0D,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC/B2K,GADiD,EAAX1K,QACjCD,EAAMkD,OAAOyH,IAElBu2C,EAAiB/kD,EAAE,uBACnBmI,EAAYnI,EAAE,sCAEpB,EAAiC2C,YAASskD,GAAgC,CACxE/9C,UAAW,CACTsF,GAAIA,KAFA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,EAAgDyI,YAAY27C,IAA5D,mBAAQvB,EAAR,KAKA,GALA,KAA0B7iD,KAE1BvI,QAAQC,IAAI,2BACZD,QAAQC,IAAIsI,GAERF,EACF,OACE,eAAC4kD,GAAD,CACIzC,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAIkC,EACF,OACE,eAAC2kD,GAAD,CACIzC,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMX,IAAMynD,ECrED,SAAyBznD,EAAG0nD,GACjC,IAAIv/C,EACAw/C,EAGJ,OAAOD,GACL,IAAK,kBACHv/C,EAAYnI,EAAE,iDACd2nD,EAAY,CACVL,QAAStnD,EAAE,wDACXgG,MAAOhG,EAAE,sDACTgF,YAAahF,EAAE,2DAA4D,CACzE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,uDAAwD,CACjE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,0DAEd,MACF,IAAK,kBACHmI,EAAYnI,EAAE,iDACd2nD,EAAY,CACVL,QAAStnD,EAAE,wDACXgG,MAAOhG,EAAE,sDACTgF,YAAahF,EAAE,2DAA4D,CACzE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,uDAAwD,CACjE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,0DAEd,MACF,IAAK,iBACHmI,EAAYnI,EAAE,gDACd2nD,EAAY,CACVL,QAAStnD,EAAE,uDACXgG,MAAOhG,EAAE,qDACTgF,YAAahF,EAAE,0DAA2D,CACxE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,sDAAuD,CAChE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,yDAEd,MACF,IAAK,2BACHmI,EAAYnI,EAAE,0DACd2nD,EAAY,CACVL,QAAStnD,EAAE,iEACXgG,MAAOhG,EAAE,+DACTgF,YAAahF,EAAE,oEAAqE,CAClF5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,gEAAiE,CAC1E5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,mEAEd,MAEF,IAAK,gBACHmI,EAAYnI,EAAE,+CACd2nD,EAAY,CACVL,QAAStnD,EAAE,sDACXgG,MAAOhG,EAAE,oDACTgF,YAAahF,EAAE,yDAA0D,CACvE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,qDAAsD,CAC/D5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,wDAEd,MACF,IAAK,qBACHmI,EAAYnI,EAAE,oDACd2nD,EAAY,CACVL,QAAStnD,EAAE,2DACXgG,MAAOhG,EAAE,yDACTgF,YAAahF,EAAE,8DAA+D,CAC5E5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCjhD,QAAS3G,EAAE,0DAA2D,CACpE5E,cAAe,CAAE6T,OAAQ,KAAM24C,OAAQ,QAEzCL,SAAUvnD,EAAE,6DAEd,MACF,QACEmI,EAAYnI,EAAE,2CACd2nD,EAAY,CACVL,QAAStnD,EAAE,kDACXgG,MAAOhG,EAAE,gDACTgF,YAAahF,EAAE,sDACf2G,QAAS3G,EAAE,kDACXunD,SAAUvnD,EAAE,oDAKlB,MAAO,CACL,UAAamI,EACb,UAAaw/C,GDpCME,CAAgB7nD,EAAG8C,EAAKglD,mBAAmBjjD,MAKhE,OAJAtK,QAAQC,IAAIsI,EAAKglD,mBAAmBjjD,MACpCtK,QAAQC,IAAIitD,GAIV,eAACD,GAAD,CACEzC,eAAgBA,EAChBsC,KAAMI,EAAaE,UAFrB,SAIA,eAAC,KAAD,CACEl8C,cAAe,CACb67C,QAASxkD,EAAKglD,mBAAmBR,QACjCthD,MAAOlD,EAAKglD,mBAAmB9hD,MAC/BhB,YAAalC,EAAKglD,mBAAmB9iD,YACrC2B,QAAS7D,EAAKglD,mBAAmBnhD,QACjC4gD,SAAUzkD,EAAKglD,mBAAmBP,UAGpC37C,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ26C,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLyC,GAAIA,EACJ84C,QAASz7C,EAAOy7C,QAChBthD,MAAO6F,EAAO7F,MACdhB,YAAa6G,EAAO7G,YACpB2B,QAASkF,EAAOlF,QAChB4gD,SAAU17C,EAAO07C,WAElBr7C,eAAgB,CACf,CAACC,MAAO66C,OAEX56C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,mDAAqD,CAClEuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OArCxB,SAyCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,EACf7O,UAAWs/C,EAAat/C,UACxBW,UApGU,2BA6FZ,SASGvO,QAAQC,IAAIwQ,cElIV+8C,GAA0BxsD,YAAH,gOAavBysD,GAAuBzsD,YAAH,qNCbpB0sD,GAAuB19C,OAAaC,MAAM,CACnDmgB,cAAepgB,OACfmgB,YAAangB,OACbynB,QAASznB,OACTwmC,OAAQxmC,SC4FGxK,iBAAkByD,aAnFA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAsBc,GAArC,EAA6Bb,OAA7B,EAAqCa,QAArC,EAA6CkO,WAA7C,OAC/B,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WAaE,gBAAC,KAAKyE,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,gBACL2W,QAAS3P,EAAO8e,gBAChB,uBAAMxqB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,8BAEnD,eAAC,KAAD,CAAc6E,KAAK,gBAAgBuG,UAAU,WAE/C,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,cACL2W,QAAS3P,EAAO6e,cAChB,uBAAMvqB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,4BAEnD,eAAC,KAAD,CAAc6E,KAAK,cAAcuG,UAAU,WAE7C,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,UACL2W,QAAS3P,EAAOmmB,UAChB,uBAAM7xB,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,wBAEnD,eAAC,KAAD,CAAc6E,KAAK,UAAUuG,UAAU,WAEzC,gBAAC,KAAKH,MAAN,WACE,gBAAC,KAAKsQ,MAAN,CAAYpb,UAAU,gBAAtB,UACI,eAAC,KAAD,CACAA,UAAU,sBACVqE,KAAK,WACLK,KAAK,SACL2W,QAAS3P,EAAOklC,SAChB,uBAAM5wC,UAAU,4BAChB,uBAAMA,UAAU,4BAAhB,SAA6CH,EAAE,uBAEnD,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,cAG1C,eAAC,KAAK5C,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCuCAD,qBAAkByD,aArGjC,YAAsD,IAAtBxD,EAAqB,EAArBA,EACxB+kD,GAD6C,EAAlBlhD,MAAkB,EAAXC,QACjB9D,EAAE,iCACnBmI,EAAYnI,EAAE,gCACdimD,EAAgB,UAEtB,EAAiCtjD,YAASolD,IAAlCnlD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA2ByI,YAAYy8C,IAA/BrC,EAAR,oBAKA,GAHAprD,QAAQC,IAAI,2BACZD,QAAQC,IAAIsI,GAERF,EACF,OACE,eAAC,GAAD,CACImiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAIkC,EACF,OACE,eAAC,GAAD,CACIkiD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHnB,SAIE,eAAC,KAAKz/C,KAAN,UACGxG,EAAE,sCAMX,IAAMkoD,EAAeplD,EAAKqlD,kBAE1B,OACE,eAAC,GAAD,CACEpD,eAAgBA,EAChB58C,UAAWA,EACX89C,cAAeA,EAHjB,SAKA,eAAC,KAAD,CACEx6C,cAAe,CACb+wB,YAAa0rB,EAAa1rB,YAC1B7R,cAAeu9B,EAAav9B,cAC5BD,YAAaw9B,EAAax9B,YAC1BsH,QAASk2B,EAAal2B,QACtB+e,OAAQmX,EAAanX,QAEvBplC,iBAAkBs8C,GAClBr8C,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ26C,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLywB,YAAa3wB,EAAO2wB,YACpB7R,cAAe9e,EAAO8e,cACtBD,YAAa7e,EAAO6e,YACpBsH,QAASnmB,EAAOmmB,QAChB+e,OAAQllC,EAAOklC,SAEhB7kC,eAAgB,CACf,CAACC,MAAO47C,OAEX37C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OApCxB,SAwCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cChERjL,iBAAkByD,aArCQ,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OACvC,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,qDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,mCACL1E,UAAY6K,EAAOo9C,iCAAoC,0BAA4B,eACnFj9C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,mCAAmCuG,UAAU,OAAOjL,UAAU,wBAEnF,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,gDAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,8BACL1E,UAAY6K,EAAOq9C,4BAA+B,0BAA4B,eAC9El9C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,8BAA8BuG,UAAU,OAAOjL,UAAU,2BAGlF,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCuHAD,qBAAkByD,aAxIjC,YAA8D,IAAtBxD,EAAqB,EAArBA,EAChC+kD,GADqD,EAAlBlhD,MAAkB,EAAXC,QACzB9D,EAAE,4BACnBmI,EAAYnI,EAAE,yCAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,sCALFqD,EADX,EACE1lD,QACO2lD,EAFT,EAEE1lD,MACM2lD,EAHR,EAGE1lD,KAMF,EAIIH,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,iCALFwD,EADX,EACE7lD,QACO8lD,EAFT,EAEE7lD,MACM8lD,EAHR,EAGE7lD,KAMF,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAEA,GAFA,KAA0B7iD,KAErBwlD,GAAwBG,EAC3B,OACE,eAAC,GAAD,CACI1D,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAK4nD,GAAqBG,EACxB,OACE,eAAC,GAAD,CACI3D,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAIguD,GACZjuD,QAAQC,IAAImuD,GAEZ,IAAIl9C,EAAgB,CAClB28C,iCAAkC,KAClCC,4BAA6B,KAW/B,OATIG,EAAgB/C,eAAehkD,MAAM0E,SACvCsF,EAAa,iCAAuC+8C,EAAgB/C,eAAehkD,MAAM,GAAGG,KAAKwB,OAE/FulD,EAAgBlD,eAAehkD,MAAM0E,SACvCsF,EAAa,4BAAkCk9C,EAAgBlD,eAAehkD,MAAM,GAAGG,KAAKwB,OAM5F,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EAFb,SAIA,eAAC,KAAD,CACEsD,cAAe,CACb28C,iCAAkC38C,EAAa,iCAC/C48C,4BAA6B58C,EAAa,6BAG5CG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,mCAAoC7hD,MAAOyI,EAAOu8C,kCAC7D,CAAEnD,QAAS,8BAA+B7hD,MAAOyI,EAAOw8C,8BAK1D,IAAK,IAAItN,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASa,EAAS/K,GAAGkK,aAExE74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3C1B,SAgDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCrGRjL,iBAAkByD,aAjCA,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAC/B,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,sDAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACfvG,KAAK,4CACL1E,UAAY6K,EAAO49C,0CAA6C,0BAA4B,eAC5Fz9C,aAAa,MAHf,UAII,yBAAQ/H,MAAM,SAAd,SAAwBpD,EAAE,oCAC1B,yBAAQoD,MAAM,cAAd,SAA6BpD,EAAE,6CAEnC,eAAC,KAAD,CAAc6E,KAAK,4CAA4CuG,UAAU,OAAOjL,UAAU,0BAGhG,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BC0GAD,qBAAkByD,aAvHjC,YAAsD,IAAtBxD,EAAqB,EAArBA,EACxB+kD,GAD6C,EAAlBlhD,MAAkB,EAAXC,QACjB9D,EAAE,4BACnBmI,EAAYnI,EAAE,gCAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,+CALF4D,EADX,EACEjmD,QACOkmD,EAFT,EAEEjmD,MACMkmD,EAHR,EAGEjmD,KAMF,EAA2ByI,YAAYu5C,IAA/Ba,EAAR,oBAEA,GAAIkD,EACF,OACE,eAAC,GAAD,CACI9D,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAImoD,EACF,OACE,eAAC,GAAD,CACI/D,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,uBACZD,QAAQC,IAAIuuD,GAEZ,IAAIt9C,EAAgB,CAClBm9C,0CAA2C,IAM7C,OAJIG,EAAwBtD,eAAehkD,MAAM0E,SAC/CsF,EAAa,0CAAgDs9C,EAAwBtD,eAAehkD,MAAM,GAAGG,KAAKwB,OAIlH,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EAFb,SAIA,eAAC,KAAD,CACEsD,cAAe,CACbm9C,0CAA2Cn9C,EAAa,2CAG1DG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,4CACT7hD,MAAOyI,EAAO+8C,4CAKlB,IAAK,IAAI7N,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASa,EAAS/K,GAAGkK,aAExE74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1C1B,SA+CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cChFRjL,iBAAkByD,aArCc,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAC7C,gBAAC,KAAD,WACI,gBAAC,KAAKvT,KAAN,WACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,8DAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,oDACL1E,UAAY6K,EAAOg+C,kDAAqD,0BAA4B,eACpG79C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,oDAAoDuG,UAAU,OAAOjL,UAAU,wBAEpG,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,4DAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,kDACL1E,UAAY6K,EAAOi+C,gDAAmD,0BAA4B,eAClG99C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,kDAAkDuG,UAAU,OAAOjL,UAAU,2BAGtG,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BCwHAD,qBAAkByD,aAzIjC,YAAoE,IAAtBxD,EAAqB,EAArBA,EACtC+kD,GAD2D,EAAlBlhD,MAAkB,EAAXC,QAC/B9D,EAAE,4BACnBmI,EAAYnI,EAAE,+CAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,uDALFiE,EADX,EACEtmD,QACOumD,EAFT,EAEEtmD,MACMumD,EAHR,EAGEtmD,KAMF,EAIIH,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,qDALFoE,EADX,EACEzmD,QACO0mD,EAFT,EAEEzmD,MACM0mD,EAHR,EAGEzmD,KAMF,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAEA,GAFA,KAA0B7iD,KAErBomD,GAAwBG,EAC3B,OACE,eAAC,GAAD,CACItE,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAKwoD,GAAqBG,EACxB,OACE,eAAC,GAAD,CACIvE,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAI4uD,GACZ7uD,QAAQC,IAAI+uD,GAEZ,IAAI99C,EAAgB,CAClBu9C,kDAAmD,IACnDC,gDAAiD,KAUnD,OAPIG,EAAgB3D,eAAehkD,MAAM0E,SACvCsF,EAAa,kDAAwD29C,EAAgB3D,eAAehkD,MAAM,GAAGG,KAAKwB,OAEhHmmD,EAAc9D,eAAehkD,MAAM0E,SACrCsF,EAAa,gDAAsD89C,EAAc9D,eAAehkD,MAAM,GAAGG,KAAKwB,OAI9G,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EAFb,SAIA,eAAC,KAAD,CACEsD,cAAe,CACbu9C,kDAAmDv9C,EAAa,kDAChEw9C,gDAAiDx9C,EAAa,iDAGhEG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,oDACT7hD,MAAOyI,EAAOm9C,mDAChB,CAAE/D,QAAS,kDACT7hD,MAAOyI,EAAOo9C,kDAKlB,IAAK,IAAIlO,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASa,EAAS/K,GAAGkK,aAExE74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA7C1B,SAkDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCzGRjL,iBAAkByD,aA9BC,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,OAChC,gBAAC,KAAD,WACI,eAAC,KAAKvT,KAAN,UACI,gBAAC,KAAKyE,MAAN,CAAYC,MAAOlL,EAAE,4CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACVK,KAAK,4BACL1E,UAAY6K,EAAOw+C,0BAA6B,0BAA4B,eAC5Er+C,aAAa,QACf,eAAC,KAAD,CAActG,KAAK,4BAA4BuG,UAAU,OAAOjL,UAAU,0BAGhF,eAAC,KAAKqI,OAAN,UACI,eAAC,KAAD,CACE7D,MAAM,UACNH,KAAK,SACL6G,SAAUN,EAHZ,SAKG/K,EAAE,6BC4GAD,I,GAAAA,iBAAkByD,aAtHjC,YAA8D,IAAtBxD,EAAqB,EAArBA,EAChC+kD,GADqD,EAAlBlhD,MAAkB,EAAXC,QACzB9D,EAAE,4BACnBmI,EAAYnI,EAAE,yCAEpB,EAII2C,YAASkiD,GAA2B,CACtC37C,UAAW,CACT+7C,QAAS,+BALFwE,EADX,EACE7mD,QACO8mD,EAFT,EAEE7mD,MACM8mD,EAHR,EAGE7mD,KAMF,EAAgDyI,YAAYu5C,IAA5D,mBAAQa,EAAR,KAEA,GAFA,KAA0B7iD,KAEtB2mD,EACF,OACE,eAAC,GAAD,CACI1E,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACE,eAAC,KAAD,CAAQ9F,QAAQ,EACRC,QAAQ,QAMxB,GAAI+oD,EACF,OACE,eAAC,GAAD,CACI3E,eAAgBA,EAChB58C,UAAWA,EAFf,SAIE,eAAC,KAAK3B,KAAN,UACGxG,EAAE,sCAMXzF,QAAQC,IAAI,2BACZD,QAAQC,IAAImvD,GAEZ,IAAIl+C,EAAgB,CAClB+9C,0BAA2B,KAM7B,OAJIG,EAAoBlE,eAAehkD,MAAM0E,SAC3CsF,EAAa,0BAAgCk+C,EAAoBlE,eAAehkD,MAAM,GAAGG,KAAKwB,OAI9F,eAAC,GAAD,CACE2hD,eAAgBA,EAChB58C,UAAWA,EAFb,SAIA,eAAC,KAAD,CACEsD,cAAe,CACb+9C,0BAA2B/9C,EAAa,2BAG1CG,SAAU,SAACC,EAAD,EAA4Bb,GAAY,IAA7Bc,EAA4B,EAA5BA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GACZtR,QAAQC,IAAIwQ,GAEZ,IAAM86C,EAAW,CACf,CAAEb,QAAS,4BAA6B7hD,MAAOyI,EAAO29C,4BAKxD,IAAK,IAAIzO,KAAK+K,EAEZvrD,QAAQC,IAAIugD,GACZxgD,QAAQC,IAAIsrD,EAAS/K,GAAGkK,SACxB1qD,QAAQC,IAAIsrD,EAAS/K,GAAG33C,OAExBuiD,EAAe,CAAEz8C,UAAW,CAC1B6C,MAAO,CACLk5C,QAASa,EAAS/K,GAAGkK,QACrB7hD,MAAO0iD,EAAS/K,GAAG33C,QAEpB8I,eAAgB,CACf,CAACC,MAAO04C,GAA2B37C,UAAW,CAAE+7C,QAASa,EAAS/K,GAAGkK,aAExE74C,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,uCAAyC,CACtDuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzC1B,SA8CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EAHV,SAKGtR,QAAQC,IAAIwQ,cCzGR4+C,GAxBUruD,YAAH,qUCqDhB0H,GAAiB,SAACjD,EAAG4C,EAASC,EAAOC,GACzC,IAAMolD,EAAeplD,EAAKqlD,kBAEtBjlD,EAAwB,GAG5B,GAAIN,EASF,OARAM,EAAMC,KAAK,CACTC,MAAOpD,EAAE,6BACTqD,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGT,GAAIL,EASF,OARAK,EAAMC,KAAK,CACTC,MAAOpD,EAAE,4BACTqD,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGTA,EAAMC,KAAK,CACTC,MAAOpD,EAAE,mBACTqD,GAAI,IACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIRwkD,EAAav9B,eACfznB,EAAMC,KAAK,CACTC,MAAOpD,EAAE,4BACTqD,GAAI,sBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVwkD,EAAax9B,aACfxnB,EAAMC,KAAK,CACTC,MAAOpD,EAAE,0BACTqD,GAAI,oBACJC,KAAM,cACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVwkD,EAAal2B,SACf9uB,EAAMC,KAAK,CACTC,MAAOpD,EAAE,sBACTqD,GAAI,gBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVwkD,EAAanX,QACf7tC,EAAMC,KAAK,CACTC,MAAOpD,EAAE,qBACTqD,GAAI,eACJC,KAAM,WACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIdR,EAAMC,KAAK,CACTC,MAAOpD,EAAE,sBACTqD,GAAI,gBACJC,KAAM,iBACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIZ,IAAMmmD,EAAkBjrD,aAAagS,QAAQ9R,EAAK7C,wBAC9C6tD,EAAe9pD,EAAE,sBACjB+pD,EAAc,gBAclB,OAbI,IAAInmD,KAAS,KAAQimD,GAAsC,MAAnBA,KAC1CC,EAAe9pD,EAAE,mBACjB+pD,EAAc,eAGhB7mD,EAAMC,KAAK,CACTC,MAAO0mD,EACPzmD,GAAI0mD,EACJzmD,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,GAeT,IAAMS,GAAM,IAAIC,KA4ID7D,sBA1If,YAAyD,IAA/BC,EAA8B,EAA9BA,EAAmBE,GAAW,EAA3B2D,MAA2B,EAApBC,QAAoB,EAAX5D,UAC3C,EAAiCyC,YAASolD,IAAlCnlD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAClB8V,EAAe3P,qBAAW/H,IAIhC,GAHA3G,QAAQC,IAAIoe,GAGRhW,EAAS,OAAO,eAAC,GAAD,IACpB,GAAIC,EAAO,OAAO,6BAAI7C,EAAE,+BAExBzF,QAAQC,IAAIsI,GAEZ,IAAMknD,EAzBR,SAA2BpxC,GACzB,IAAIvU,EAAW,+CAQf,OANIuU,GACEA,EAAa8S,oBACfrnB,EAAWuU,EAAa8S,mBAIrBrnB,EAgBgB4lD,CAAkBrxC,GAEzC,OACE,gBAAC,KAAK1U,QAAN,CACEC,YAAa,CACTC,KAAM,IACN9D,IAAK,cACL+D,SAAU2lD,EACV1lD,SACE,eAAC,KAAIC,KAAL,CAAUC,KAAK,MAAMrE,UAAU,mBAA/B,SACI2C,EAAKxB,OAASwB,EAAKxB,KAAKigC,SAAWz+B,EAAKxB,KAAKkgC,UAAY,eAAC,IAAD,CAAMn+B,GAAG,gBAAT,SACzD,eAAC,KAAD,CACElD,UAAU,OACVmD,KAAK,OACLmB,SAAO,EACPC,KAAK,KACLC,MAAM,UALR,SAOG3E,EAAE,kBAEQ,MAuCrBmF,SAAU,CAAEC,aAAcnC,GAAejD,EAAG4C,EAASC,EAAOC,IAC5DuC,2BAA4B7B,YAAW8B,MACvCC,YAAa,CAaXC,UACE,eAAC,WAAD,UACE,2DAEE,qBACEpB,KAAK,8BACLsB,OAAO,SACPC,IAAI,sBAHN,UAKG,IALH,iBAOK,KATP,4BAUyBhC,GAAI8B,cAV7B,SAcJG,IACE,gBAAC,WAAD,WACE,eAAC,KAAKC,IAAN,CAAUC,MAAM,IAUhB,eAAC,KAAKD,IAAN,CAAUC,MAAM,QAnG1B,UAkHG5F,EACD,eAAC,IAAD,CACEK,UAAW,IACXC,WAAYC,YCvRLV,qBAAkByD,aAbjC,YAA4E,IAA7CxD,EAA4C,EAA5CA,EAAmBE,GAAyB,EAAzC2D,MAAyC,EAAlCC,QAAkC,EAAzB5D,UAAyB,IAAfogB,gBAAe,MAAN,GAAM,EACzE,OACE,eAAC,GAAD,UACE,sBAAKngB,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAUA,IACrDpgB,aCMGH,qBAAkByD,aAdjC,YAAwD,EAAvBxD,EAAwB,IAArB4G,EAAoB,EAApBA,KAAMsjD,EAAc,EAAdA,WACxC,OACE,eAAC,IAAD,CAAM7mD,GAAIuD,EAAV,SACE,gBAAC,KAAD,CACEnC,SAAO,EACPqC,OAAK,EACLnC,MAAM,UAHR,UAKGulD,EALH,IAKe,eAAC,KAAD,CAAMrlD,KAAK,2BCyJjB9E,I,MAAAA,iBAAkByD,aAzJjC,YAA+C,IAArBxD,EAAoB,EAApBA,EACxB,GAD4C,EAAjB6D,MAAiB,EAAVC,QACDnB,YAASinD,KAAlChnD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,GAHAlE,aAAaS,WAAWP,EAAKZ,gCAGzB0E,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,0CAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOwB,EAAKxB,KAElB,OACE,gBAAC,GAAD,CAAqBgf,SAAUhf,EAAKub,SAApC,UACIvb,EAAKigC,SAAWjgC,EAAKkgC,SACrB,iCACE,eAAC,KAAKphC,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,gBACNA,EAAE,iCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,gBAAgBsjD,WAAYlqD,EAAE,qCAKlE,2BAEA,GAEJ,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,gCACNA,EAAE,oCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,wBAAwBsjD,WAAYlqD,EAAE,uCAIxE,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,sCACNA,EAAE,0CACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,8BAA8BsjD,WAAYlqD,EAAE,uCAI9E,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,oCACNA,EAAE,wCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,4BAA4BsjD,WAAYlqD,EAAE,uCAI5E,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,sCACNA,EAAE,0CACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,8BAA8BsjD,WAAYlqD,EAAE,0CAKhF,wBAEA,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,gCACNA,EAAE,oCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,wBAAwBsjD,WAAYlqD,EAAE,+CAIxE,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,qCACNA,EAAE,yCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,6BAA6BsjD,WAAYlqD,EAAE,+CAI7E,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,+BACNA,EAAE,mCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,uBAAuBsjD,WAAYlqD,EAAE,uCAIvE,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,iCACNA,EAAE,qCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,yBAAyBsjD,WAAYlqD,EAAE,uCAIzE,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,wCACNA,EAAE,4CACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,yBAAyBsjD,WAAYlqD,EAAE,kDAIzE,eAAC,KAAK6F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,UACE,gBAAC,KAAKlI,KAAN,WACE,8BAAKxG,EAAE,iCACNA,EAAE,qCACH,wBAAM,wBACN,eAAC,GAAD,CAAuB4G,KAAK,gBAAgBsjD,WAAYlqD,EAAE,qDClK3DqqD,GAA4B9uD,YAAH,ivBA2CzB+uD,GAAsB/uD,YAAH,iNCjCjBwE,sBAPf,YAA2D,EAAhCC,EAAiC,IAAD,IAA7B8I,iBAA6B,MAAnB,gBAAmB,EAEzD,OACE,eAAC,GAAD,CAAYA,UAAWA,OCyBZ/I,qBAAkByD,aAjBjC,YAAkF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC/E,OACE,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACI,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJD,aC8CGH,iBAAkByD,aAvDE,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQlC,EAArC,EAAqCA,UAArC,OACjC,eAAC,KAAD,UACE,gBAAC,KAAD,CAAM9C,MAAOhG,EAAE,mCAAf,UACA,gBAAC,KAAKwG,KAAN,WACI,eAAC,KAAKpG,IAAN,UACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOq6B,OAAU,0BAA4B,eACzDl6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,MAAMuG,UAAU,OAAOjL,UAAU,4BAI1D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,0CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,SACL1E,UAAY6K,EAAOs6B,OAAU,0BAA4B,eACzDn6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,0BAG3D,eAAC,KAAK0F,IAAN,UACE,gBAAC,KAAKoF,MAAN,CAAYC,MAAOlL,EAAE,uCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,MACL1E,UAAY6K,EAAOu6B,IAAO,0BAA4B,eACtDp6B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,MAAMuG,UAAU,OAAOjL,UAAU,gCAK5D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,kCC7DNwqD,GAA8BjgD,OAAaC,MAAM,CAC1D66B,OAAQ96B,OACLK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACdslC,OAAQ/6B,OACLK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,yBC2GHD,I,GAAAA,iBAAkByD,aAhGjC,YAAsD,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SAEnC2mD,EAAU7rD,aAAagS,QAAQ9R,EAAKZ,gCAG1C,EAAmEyE,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS0nD,GAA2B,CAC9EQ,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,GANA,EAA8BiB,UAMAwH,YAAY++C,KAAlCQ,EAAR,oBAEA,GAAIloD,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACG9C,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACG3qD,EAAE,kDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZvI,QAAQC,IAAIowD,GACZ,IAAMtpD,EAAOspD,EAAStpD,KAChBypD,EAAcjoD,EAAK6iC,oBAAoBlkC,MAAM,GAAGG,KAEtD,OACE,eAAC,GAAD,CAAwB2oD,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CACEkF,cAAe,CACb65B,OAAQylB,EAAYzlB,OACpBD,OAAQ0lB,EAAY1lB,OACpBE,IAAKwlB,EAAYxlB,KAEnB55B,iBAAkB6+C,GAClB5+C,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI04B,EAAa,CACf/1B,GAAIu8C,EAAYv8C,GAChB82B,OAAQz5B,EAAOy5B,OACfD,OAAQx5B,EAAOw5B,OACfE,IAAK15B,EAAO05B,KAGdulB,EAAkB,CAAE5hD,UAAW,CAC7B6C,MAAOw4B,GACNr4B,eAAgB,KAMlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACpB2nD,GACF3mD,EAAQX,KAAKsnD,GAGfp+C,IAAMC,QAAStM,EAAE,gDAAkD,CAC/DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAzCxB,SA6CG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAAC,GAAD,CACEd,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACR/C,UAAW,+BCpGpB,SAASkiD,GAAT,GAA+E,IAApDhrD,EAAmD,EAAnDA,EAAGo6C,EAAgD,EAAhDA,UAAW6Q,EAAqC,EAArCA,UAAWn+C,EAA0B,EAA1BA,WAAY65B,EAAc,EAAdA,WACnE,OACE,iCACE,+BACG18B,KAAOmwC,GAAWjwC,OAAO2C,GAD5B,IAC0C,IACvC7C,KAAOkO,GAAsB8yC,EAAUC,cAAcpkB,YAAY38B,OAAOw8B,GAF3E,IAEyF,MACtF18B,KAAOkO,GAAsB8yC,EAAUC,cAAczX,UAAUtpC,OAAOw8B,GAHzE,IAGsF,2BAErFskB,EAAUC,cAAch2B,sBAAsBrwB,KAAO,IAAM7E,EAAE,cAAgB,IAC5EirD,EAAUC,cAAc3vB,yBAAyBlC,qBAAqBx0B,QCXzE,IAAMsmD,GAA0B5vD,YAAH,ilCCmCrBwE,qBAAkByD,aAvBjC,YAAsF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EACnF,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CACEC,MAAOhG,EAAE,sBACTsgB,SAAWiqC,EAFb,SAIE,sBAAKpqD,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAI,wBACJlD,UAAU,oBADhB,UAEE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAFzB,IAE0C7E,EAAE,uBAI9CE,aC+GCH,I,GAAAA,iBAAkByD,aAjHjC,YAAsD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QACnC8c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAEzBuqC,EAAevnD,EAAMkD,OAAOskD,cAC5B7X,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BtpC,EAAO3J,EAAMkD,OAAOyG,KAC1B,EAAqF7K,YAASwoD,GAAyB,CACrHjiD,UAAW,CACTsF,GAAI48C,EACJ5X,eAAgBA,EAChBhmC,KAAMA,KAJO89C,EAAjB,EAAQ1oD,QAAmC2oD,EAA3C,EAAoC1oD,MAA8B2oD,EAAlE,EAA4D1oD,KAO5D,EAAmEH,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAAuCyI,YAAYm7B,IAA5C+kB,EAAP,oBAEA,GAAIf,GAAeY,EAAmB,OACpC,eAAC,GAAD,UACGtrD,EAAE,+BAGP,GAAI2qD,GAAaY,EAAiB,OAChC,eAAC,GAAD,UACGvrD,EAAE,gDAIP,IAAMsB,EAAOspD,EAAStpD,KACtB/G,QAAQC,IAAIowD,GACZrwD,QAAQC,IAAIgxD,GACZ,IAAME,EAAyBF,EAAeE,uBAG9C,MAA4C,aAAxCA,EAAuB1kB,cAEvB,eAAC,GAAD,CAA4BujB,YAAajpD,EAAKub,SAA9C,SACE,eAAC,KAAD,CAAM7W,MAAOhG,EAAE,qDAAf,SACE,eAAC,KAAKwG,KAAN,UACE,8BAAKxG,EAAE,uDAQZ0rD,EAAuBC,qBAc1B,eAAC,GAAD,CAA4BpB,YAAajpD,EAAKub,SAA9C,SACE,eAAC,KAAD,CAAM7W,MAAOhG,EAAE,mCAAf,SACE,gBAAC,KAAKwG,KAAN,WAEE,8BACGxG,EAAE,qDAEH,eAACgrD,GAAD,CACEhrD,EAAGA,EACHo6C,UAAW5sC,EACXy9C,UAAWO,EACX1+C,WAAYA,EACZ65B,WAAYA,IAEd,wBACA,eAAC,KAAD,CACExmC,UAAU,OACVwE,MAAM,UACN8D,QAAS,kBACPgjD,EAA6B,CAAEviD,UAAW,CACxC6C,MAAO,CACLyC,GAAI48C,EACJpkB,cAAe,gBAGlB56B,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBgB,EAAQX,KAAK,yBACbkJ,IAAMC,QAAStM,EAAE,qCAAuC,CACpDuM,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OApB5D,SAwBG7C,EAAE,2CAEL,eAAC,IAAD,CAAMqD,GAAI,wBAAV,SACGrD,EAAE,iDAtDX,eAAC,GAAD,CAA4BuqD,YAAajpD,EAAKub,SAA9C,SACE,eAAC,KAAD,CAAM7W,MAAOhG,EAAE,4DAAf,SACE,eAAC,KAAKwG,KAAN,UACE,8BAAKxG,EAAE,kEChFN4rD,GAA2BrwD,YAAH,qbCwEtBwE,qBAAkByD,aAtDjC,YAA2E,IAA1CxD,EAAyC,EAAzCA,EAAGwzC,EAAsC,EAAtCA,eAAgBhmC,EAAsB,EAAtBA,KAAsB,IAAhBq+C,gBAAgB,SAClEjrC,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAG/BtmB,QAAQC,IAAIg5C,GACZj5C,QAAQC,IAAIgT,GAEZ,MAAiC7K,YAASipD,GAA0B,CAClE1iD,UAAW,CACTsqC,eAAgBA,EAChBhmC,KAAMA,KAHF5K,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,OAAIF,EACA5C,EAAE,6BAEF6C,EACA7C,EAAE,2CAGNzF,QAAQC,IAAIsI,GAGRF,GAAYC,EAuBV,GAtBF,uBAAK1C,UAAU,aAAf,UACE,gCAAI,eAAC,KAAD,CAAM0E,KAAK,SAAf,IACe7E,EAAZ6rD,EAAc,gDACA,kDAGjB,eAACb,GAAD,CACEhrD,EAAGA,EACHo6C,UAAW5sC,EACXy9C,UAAWnoD,EACXgK,WAAYA,EACZ65B,WAAYA,IAEd,wBACE7jC,EAAKooD,cAAc5U,gBACnB,iCACE,gCAAI,eAAC,KAAD,CAAMzxC,KAAK,SAAf,IAA0B7E,EAAE,yCAC5B,sBAAKyG,wBAAyB,CAAEC,OAAQ5D,EAAKooD,cAAc5U,sBAE3D,WC5BGv2C,qBAAkByD,aAvBjC,YAAoF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EACjF,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CACEC,MAAOhG,EAAE,sBACTsgB,SAAWiqC,EAFb,SAIE,sBAAKpqD,UAAU,sBAAf,SACE,gBAAC,IAAD,CAAMkD,GAAI,wBACJlD,UAAU,oBADhB,UAEE,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAFzB,IAE0C7E,EAAE,uBAI9CE,aC4BCH,I,GAAAA,iBAAkByD,aAnCjC,YAAoD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAChC,GADiD,EAAVC,QACNnB,YAASinD,KAAlChnD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAClB0wC,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BtpC,EAAO3J,EAAMkD,OAAOyG,KAE1B,GAAI5K,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,gDAIP,IAAMsB,EAAOwB,EAAKxB,KAGlB,OACE,eAAC,GAAD,CAA0BipD,YAAajpD,EAAKub,SAA5C,SACE,eAAC,KAAD,CAAM7W,MAAOhG,EAAE,iCAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,GAAD,CACEgtC,eAAgBA,EAChBhmC,KAAMA,EACNq+C,UAAU,cC/CTC,GAA4BvwD,YAAH,y0BC8BvBwE,qBAAkByD,aAjBjC,YAAkF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC/E,OACE,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACI,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJD,aC6GGH,qBAAkByD,aAhHjC,YAAsD,IAArBxD,EAAoB,EAApBA,EAEzB8M,GAF6C,EAAjBjJ,MAAiB,EAAVC,QACrBmF,qBAAWrI,IACAkM,YAC/B,EAAmEnK,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAASmpD,GAA2B,CAC9EjB,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAQ9B,GAAInB,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAACipD,GAAD,UACG/rD,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAACoB,GAAD,UACG/rD,EAAE,iDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOwB,EAAKxB,KACZopB,EAAc5nB,EAAK0nB,mBAGzB,OAAKE,EAAYjpB,MAAM0E,OAkBrB,eAAC4lD,GAAD,CAA4BxB,YAAajpD,EAAKub,SAA9C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,GAAD,CAAa4B,UAAWnI,EAAE,kCAExB6H,SAAU6iB,EAAY7iB,SACtBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOkhB,EAAY7iB,SAAS4B,WAE9BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4gB,mBAAmB/oB,MAC9CoG,EAAW+B,EAAgB4gB,mBAAmB3iB,SAEpD,OAAOgC,EAAS1D,OACZ,CAGEqkB,mBAAoB,CAClB1gB,WAAYH,EAAe6gB,mBAAmB1gB,WAC9CrI,MAAM,GAAD,oBAAOkI,EAAe6gB,mBAAmB/oB,OAAzC,aAAmDoI,IACxDhC,aAGJ8B,MAtBZ,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,iCAJNgK,kBAOlB,eAAC,KAAMxD,KAAP,UACGkkB,EAAYjpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAK6oB,sBAAsB5lB,OAE9B,eAAC,KAAMgB,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACGoE,KAAOrI,EAAK2iB,SAASpa,OAAO2C,KAE/B,eAAC,KAAMjH,IAAP,UACGjE,EAAK2gC,4BAXMv4B,gCAxD5B,eAAC+hD,GAAD,CAA4BxB,YAAajpD,EAAKub,SAA9C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,kCAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,qDC0EJD,I,MAAAA,iBAAkByD,aA7GjC,YAAuD,IAArBxD,EAAoB,EAApBA,EAE1B8M,GAF8C,EAAjBjJ,MAAiB,EAAVC,QACtBmF,qBAAWrI,IACAkM,YAC/B,EAAmEnK,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS6oC,GAA0C,CAC7Fqf,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAO9B,GAAInB,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACG9C,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACG3qD,EAAE,mDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIowD,GACZ,IAAMtpD,EAAOspD,EAAStpD,KAChB0qD,EAAelpD,EAAK8oC,4BAG1B,OAAKogB,EAAavqD,MAAM0E,OAkBtB,eAAC,GAAD,CAAwBokD,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,GAAD,CAAa4B,UAAWnI,EAAE,oCAExB6H,SAAUmkD,EAAankD,SACvBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOwiD,EAAankD,SAAS4B,WAE/BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBgiC,4BAA4BnqC,MACvDoG,EAAW+B,EAAgBgiC,4BAA4B/jC,SAE7D,OAAOgC,EAAS1D,OACZ,CAGE6lD,aAAc,CACZliD,WAAYH,EAAeiiC,4BAA4B9hC,WACvDrI,MAAM,GAAD,oBAAOkI,EAAeiiC,4BAA4BnqC,OAAlD,aAA4DoI,IACjEhC,aAGJ8B,MAtBZ,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,oBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACGwlD,EAAavqD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtB,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKiqC,oBAAoBC,cAAcjnC,KAD1C,IACgD,wBAC9C,eAAC,KAAD,UAAQjD,EAAKiqC,oBAAoBhnC,OAFnC,IAEkD,IAC9CjD,EAAKmqC,UAAa,eAAC,KAAD,CAAOpnC,MAAM,UAAb,SAAwB3E,EAAE,uBAAgC,MAEhF,eAAC,KAAM6F,IAAP,UACGoE,KAAOrI,EAAKiqC,oBAAoBC,cAAcxnB,WAAWna,OAAO2C,KAEnE,eAAC,KAAMjH,IAAP,UACGjE,EAAKiqC,oBAAoBC,cAAczS,qBAAqBx0B,SAVjDmF,gCAvD5B,eAAC,GAAD,CAAwBugD,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,oCAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,uDCxDNqR,GAAoB9V,YAAH,wwDA8FjB0wD,GAAsB1wD,YAAH,qMClEjBwE,qBAAkByD,aAjBjC,YAAyF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EACtF,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACE,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,CAAiB2I,UAAU,+BAG7B5I,aCyHCH,qBAAkByD,aApHjC,YAAyD,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MAC/B+c,GADgD,EAAV9c,QACxBmF,qBAAWrI,KAMzB4N,GALaoS,EAAY9T,WACZ8T,EAAYC,iBAECD,EAAYsrC,wBAEjCroD,EAAMkD,OAAOyH,IAClB29C,EAAwBnsD,EAAE,sCAE1BosD,EAAYhgC,iBAAO,MACnBigC,EAAiB,kCAAM,eAAC,KAAD,CAAMxnD,KAAK,gBAAjB,IAAmC7E,EAAE,oCAArC,IAA0E,eAAC,KAAD,CAAM6E,KAAK,qBAC5G,EAA+B8H,mBAAS0/C,GAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KAGA,EAAmE5pD,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS0O,GAAmB,CACtEw5C,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACTsF,GAAIA,KAHA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAPA,EAA8BiB,UAOFwH,YAAY0gD,KAAjCO,EAAP,oBAoBA,GAAI5pD,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACE,eAAC,KAAD,CAAMkD,MAAOmmD,EAAb,SACE,eAAC,KAAK3lD,KAAN,UACGxG,EAAE,mCAKX,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACE,eAAC,KAAD,CAAM3kD,MAAOmmD,EAAb,SACE,eAAC,KAAK3lD,KAAN,UACGxG,EAAE,yDAMXzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOspD,EAAStpD,KAChBmrD,EAAU3pD,EAAK+Q,eAGrB,OACE,eAAC,GAAD,CAA+B02C,YAAajpD,EAAKub,SAAjD,SACE,gBAAC,KAAD,CAAM7W,MAAO,kCAAOhG,EAAE,mBAAT,KAA+BysD,EAAQ75C,iBAApD,UACE,gBAAC,KAAKpM,KAAN,WACIimD,EAAQvpD,MAAMzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxB,gBAAC,KAAKxB,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,UACG3E,EAAKmS,YADR,IACqB,wBACnB,wBAAO5T,UAAU,aAAjB,SACGyB,EAAKoD,iBAGV,eAAC,KAAKa,IAAN,CAAUU,GAAI,EAAd,SACE,uBAAMpG,UAAU,cAAhB,SACGyB,EAAKyR,uBAMd,gBAAC,KAAKjT,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGpG,UAAU,OAA3B,UACE,wBACCH,EAAE,oBAEL,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,wBAAMpG,UAAU,mBAAhB,UACE,wBACCssD,EAAQp5C,wBAKjB,eAAC,KAAK7K,OAAN,UACE,yBACErI,UAAU,8BACVgW,IAAKi2C,EACL3jD,QAhFV,WACE2jD,EAAU7+B,QAAQm/B,aAAa,WAAY,YAC3CH,EAAWvsD,EAAE,sCAIbwsD,EAAkB,CAAEtjD,UAAW,CAAEsF,GAAIA,KAAQpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACnDvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM6pD,EAAc7pD,EAAK8pD,gCAAgCC,0BAA0BF,YACnFllD,OAAO6K,SAASlO,KAAOuoD,KACtBjgD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OA+DhD,SAKGypD,eCzGEvsD,qBAAkByD,aAjBjC,YAA+F,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC5F,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,IAKtDrqD,aC8GCH,I,GAAAA,iBAAkByD,aAzGjC,YAA+D,IAArBxD,EAAoB,EAApBA,EAAG6D,EAAiB,EAAjBA,MACrC+c,GADsD,EAAV9c,QAC9BmF,qBAAWrI,KAMzB4N,GALaoS,EAAY9T,WACZ8T,EAAYC,iBAECD,EAAYsrC,wBAEjCroD,EAAMkD,OAAOyH,IAClB29C,EAAwBnsD,EAAE,sCAGhC,EAAmE2C,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS0O,GAAmB,CACtEw5C,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACTsF,GAAIA,KAHA5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAOxB,GAPA,EAA8BiB,UAO1BnB,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACE,eAAC,KAAD,CAAMkD,MAAOmmD,EAAb,SACE,eAAC,KAAK3lD,KAAN,UACGxG,EAAE,mCAKX,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACE,eAAC,KAAD,CAAM3kD,MAAOmmD,EAAb,SACE,eAAC,KAAK3lD,KAAN,UACGxG,EAAE,gEAMXzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAGIgqD,EAHExrD,EAAOspD,EAAStpD,KAChBmrD,EAAU3pD,EAAK+Q,eAcrB,OAVEi5C,EADoB,QAAlBL,EAAQ1jD,OACF,eAAC,KAAD,CAAOvE,KAAK,UAAUlB,KAAK,QAA3B,SACLtD,EAAE,0DAGG,eAAC,KAAD,CAAOwE,KAAK,UAAUlB,KAAK,cAA3B,SACLtD,EAAE,+DAML,gBAAC,GAAD,CAAqCuqD,YAAajpD,EAAKub,SAAvD,UACGiwC,EACD,gBAAC,KAAD,CAAM9mD,MAAO,kCAAOhG,EAAE,mBAAT,KAA+BysD,EAAQ75C,iBAApD,UACE,gBAAC,KAAKpM,KAAN,WACIimD,EAAQvpD,MAAMzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxB,gBAAC,KAAKxB,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,UACG3E,EAAKmS,YADR,IACqB,wBACnB,wBAAO5T,UAAU,aAAjB,SACGyB,EAAKoD,iBAGV,eAAC,KAAKa,IAAN,CAAUU,GAAI,EAAd,SACE,uBAAMpG,UAAU,cAAhB,SACGyB,EAAKyR,uBAMd,gBAAC,KAAKjT,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGpG,UAAU,OAA3B,UACE,wBACCH,EAAE,oBAEL,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,wBAAMpG,UAAU,mBAAhB,UACE,wBACCssD,EAAQp5C,wBAKjB,eAAC,KAAK7K,OAAN,UACE,eAAC,IAAD,CAAMnF,GAAG,yBAAT,SACE,gBAAC,KAAD,CACEsB,MAAM,UACNxE,UAAU,cAFZ,UAIGH,EAAE,kDAJL,IAIwD,eAAC,KAAD,CAAM6E,KAAK,mCCzHlEkoD,GAAyBxxD,YAAH,o2BC4BpBwE,qBAAkByD,aAjBjC,YAAmF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAChF,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACE,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGFD,aC8JCH,I,MAAAA,iBAAkByD,aAxJjC,YAAmD,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SAChC8c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WAGzBo/C,GAFatrC,EAAYC,iBAECD,EAAYsrC,yBAG5C,EAAmEvpD,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAASoqD,GAAwB,CAC3ElC,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,EAAyBwH,YAAY/P,GAA9BgY,EAAP,oBAEA,GAAI5Q,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACG9C,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACG3qD,EAAE,iDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOspD,EAAStpD,KAChBoR,EAAW5P,EAAK6P,gBAGtB,OAAKD,EAASjR,MAAM0E,OAkBlB,eAAC,GAAD,CAAyBokD,YAAajpD,EAAKub,SAA3C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,gBAAC,GAAD,CAEEsB,SAAU6K,EAAS7K,SACnBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOkJ,EAAS7K,SAAS4B,WAE3BC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB+I,gBAAgBlR,MAC3CoG,EAAW+B,EAAgB+I,gBAAgB9K,SAEjD,OAAOgC,EAAS1D,OACZ,CAGEwM,gBAAiB,CACf7I,WAAYH,EAAegJ,gBAAgB7I,WAC3CrI,MAAM,GAAD,oBAAOkI,EAAegJ,gBAAgBlR,OAAtC,aAAgDoI,IACrDhC,aAGJ8B,MAtBZ,UA2BE,8BAAK3J,EAAE,iCACP,eAAC,KAAKI,IAAN,UACGsS,EAASjR,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClB,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAD,WACE,gBAAC,KAAK3I,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAa3G,EAAKgR,gBAClB,eAAC,KAAKvJ,QAAN,UACE,eAAC,GAAD,CAAuBN,OAAQnH,EAAKmH,cAGxC,eAAC,KAAKvC,KAAN,UACE,uBAAMrG,UAAU,YAAhB,SACGyB,EAAKqR,YAGR,eAAC,KAAD,CAAO7M,OAAK,EAAZ,SACE,gBAAC,KAAMI,KAAP,WACE,gBAAC,KAAMpG,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM6F,IAAP,UAAYoE,KAAOrI,EAAKuR,UAAUhJ,OAAO2C,QAE3C,gBAAC,KAAM1M,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,0BACpB,eAAC,KAAM6F,IAAP,UAAYoE,KAAOrI,EAAKwR,SAASjJ,OAAO2C,QAE1C,gBAAC,KAAM1M,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM6F,IAAP,UAAYjE,EAAKyR,kBAEnB,gBAAC,KAAMjT,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM6F,IAAP,UAAYjE,EAAK0R,yBAIzB,gBAAC,KAAK9K,OAAN,WACmB,QAAf5G,EAAKmH,QAAoBmjD,EACzB,eAAC,IAAD,CAAM7oD,GAAI,iCAAmCzB,EAAK4M,GAAlD,SACE,gBAAC,KAAD,CACErO,UAAU,cACVwE,MAAM,UAFR,UAIG3E,EAAE,oCAJL,IAI0C,eAAC,KAAD,CAAM6E,KAAK,uBAGrD,GAEJ,eAAC,KAAD,CACEF,MAAM,YACNrB,KAAK,UACLmF,QAAS,kBAAM8K,GACbC,EAAgB1P,EADkC,gCACAlC,EAAK4M,MAJ3D,SAOGxO,EAAE,uCArGrB,eAAC,GAAD,CAAyBuqD,YAAajpD,EAAKub,SAA3C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,+BAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,kDCpENgtD,GAAuBzxD,YAAH,u8CAwEpBmnB,GAAennB,YAAH,0MC5CVwE,qBAAkByD,aAjBjC,YAAiF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC9E,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACE,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGFD,aCxBP,SAAS+sD,GAA4BlkD,GACxC,OAAOA,GACH,IAAM,WAGN,IAAM,mBACJ,MAAO,OAET,IAAM,OAGN,IAAM,YACJ,MAAO,QAET,IAAK,YACH,MAAO,SAET,QACE,MAAO,IC+KFhJ,I,GAAAA,iBAAkByD,aArKjC,YAAiD,IAArBxD,EAAoB,EAApBA,EACpB4gB,GADwC,EAAjB/c,MAAiB,EAAVC,QAChBmF,qBAAWrI,KAGzByd,EAFauC,EAAY9T,WAEK,IADjB8T,EAAYC,iBAEzBqrC,EAA0BtrC,EAAYsrC,wBAG5C,EAAmEvpD,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAASqqD,GAAsB,CACzEnC,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAM9B,EAAwBwH,YAAYmX,IAA5BC,EAAR,oBAEA,GAAI/f,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACG9C,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACG3qD,EAAE,iDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOspD,EAAStpD,KAChBgd,EAASxb,EAAKyb,cAGpB,OAAKD,EAAO7c,MAAM0E,OAkBhB,eAAC,GAAD,CAAuBokD,YAAajpD,EAAKub,SAAzC,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,gBAAC,GAAD,CAEEsB,SAAUyW,EAAOzW,SACjBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAO8U,EAAOzW,SAAS4B,WAEzBC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB2U,cAAc9c,MACzCoG,EAAW+B,EAAgB2U,cAAc1W,SAE/C,OAAOgC,EAAS1D,OACZ,CAGEoY,cAAe,CACbzU,WAAYH,EAAe4U,cAAczU,WACzCrI,MAAM,GAAD,oBAAOkI,EAAe4U,cAAc9c,OAApC,aAA8CoI,IACnDhC,aAGJ8B,MAtBZ,UA0BE,8BAAK3J,EAAE,+BACNse,EAAO7c,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAChB,iCACE,uBAAMzB,UAAU,aAAhB,SACE,eAAC,GAAD,CAAoB4I,OAAQnH,EAAKmH,WAEnC,wBAAO5I,UAAU,aAAjB,SACG8J,KAAOrI,EAAK4c,WAAWrU,OAAOkU,KAEjC,gBAAC,KAAD,CAAMrI,YAAai3C,GAA4BrrD,EAAKmH,QAApD,UACE,gBAAC,KAAKhD,OAAN,WACE,eAAC,KAAKwC,MAAN,UAAavI,EAAE,iBAAmB,KAAO4B,EAAKwc,cAC9C,gBAAC,KAAK/U,QAAN,WACmB,YAAfzH,EAAKmH,QAAuC,oBAAfnH,EAAKmH,OAClC,eAAC,KAAD,CACEtE,SAAO,EACPE,MAAM,UACND,KAAK,KACL+D,QAAS,kBCrH5B,YAAsG,IAAhFzI,EAA+E,EAA/EA,EAAG8R,EAA4E,EAA5EA,WAAYC,EAAgE,EAAhEA,eAAgBC,EAAgD,EAAhDA,WAAYk7C,EAAoC,EAApCA,eAAgBh7C,EAAoB,EAApBA,kBACtF,OACEC,wBAAa,CACXC,SAAU,YAAkB,IAAfC,EAAc,EAAdA,QACX,OACE,uBAAgBlS,UAAU,YAA1B,UACE,8BAAKH,EAAE,wCACN8R,EACAC,EACD,yBAAQ5R,UAAU,0BAA0BsI,QAAS4J,EAArD,SAA+DrS,EAAE,2CACjE,yBACEG,UAAU,iCACVsI,QAAS,WACPykD,EAAeh7C,GACZ9F,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QACJ0F,EAAY,CACVzF,SAAUF,IAAMG,SAASC,kBAE5BC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,MAExDwP,KAhBJ,SAmBGrS,EAAE,8CAxBGgK,mBDgHqBmjD,CAAY,CACzBntD,EAAGA,EACH8R,WAAY9R,EAAE,0CACd+R,eAAgB,6BAAI/R,EAAE,iBAAmB,KAAO4B,EAAKwc,cACrDpM,WAAYhS,EAAE,uCACdktD,eAAgBvqC,EAChBzQ,kBAAmB,CACjBhJ,UAAW,CACT6C,MAAO,CACLyC,GAAI5M,EAAK4M,GACTzF,OAAQ,kBAdlB,SAoBG/I,EAAE,oBAEL,GACe,oBAAf4B,EAAKmH,QAAgCmjD,EACrC,eAAC,IAAD,CAAM7oD,GAAI,0BAA4BzB,EAAK4M,GAA3C,SACE,gBAAC,KAAD,CACErO,UAAU,OACVwE,MAAM,UACND,KAAK,KAHP,UAKG1E,EAAE,kCALL,IAKwC,eAAC,KAAD,CAAM6E,KAAK,uBAGrD,SAGN,gBAAC,KAAD,CAAOuB,OAAK,EAAZ,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,qBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,yBACpB,eAAC,KAAM+J,UAAP,UAAiB,uBAAM5J,UAAU,cAAhB,SAA+BH,EAAE,0BAGtD,gBAAC,KAAMwG,KAAP,WACG5E,EAAKsB,MAAMzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UAAYjE,EAAKmS,cACjB,eAAC,KAAMlO,IAAP,UAAYjE,EAAKoD,cACjB,eAAC,KAAMa,IAAP,UAAW,uBAAM1F,UAAU,cAAhB,SAA+ByB,EAAKyR,uBAGnD,gBAAC,KAAMjT,IAAP,WACE,eAAC,KAAMyF,IAAP,IACA,eAAC,KAAMA,IAAP,IACA,eAAC,KAAMA,IAAP,UAAW,uBAAM1F,UAAU,mBAAhB,SAAoCyB,EAAKyR,4CAlHtE,eAAC,GAAD,CAAuBk3C,YAAajpD,EAAKub,SAAzC,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,6BAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,gDElENotD,GAAiB7xD,YAAH,gOC6BZwE,sBApBf,YAA4D,IAAfC,EAAc,EAAdA,EAAG8D,EAAW,EAAXA,QAE9C,EAAyByH,YAAY/P,GAA9BgY,EAAP,oBAIA,OACE,eAAC,KAAD,CACE7O,MAAM,YACNrB,KAAK,WACLnD,UAAU,OACVsI,QAAS,kBAAM8K,GACbC,EAAgB1P,EAXH,2BAMjB,SAQG9D,EAAE,8CCQMD,qBAAkByD,aAlBjC,YAAkF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC/E,OACE,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACE,uBAAKpqD,UAAU,sBAAf,UACE,eAAC,GAAD,IACA,eAAC,GAAD,SAGFD,aCqJGH,iBAAkByD,aA3JF,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAAQa,EAArC,EAAqCA,OAAQ/C,EAA7C,EAA6CA,UAAWoL,EAAxD,EAAwDA,gBAAiB8C,EAAzE,EAAyEA,cAAzE,OAC7B,eAAC,KAAD,UACE,gBAAC,KAAD,CAAMhR,MAAOhG,EAAE,8BAAf,UACE,gBAAC,KAAKwG,KAAN,WACE,gBAAC,KAAKpG,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,YACL1E,UAAY6K,EAAOlG,UAAa,0BAA4B,eAC5DqG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,0BAG9D,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,qBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,WACL1E,UAAY6K,EAAOjG,SAAY,0BAA4B,eAC3DoG,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACC,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACG,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,yBAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAO83B,YACjB32B,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,cAAexJ,IACjDP,OAAQ,kBAAMiH,EAAgB,eAAe,MAE/C,eAAC,KAAD,CAAcrP,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,0BAGhE,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACXvG,KAAK,SACL1E,UAAY6K,EAAOynB,uBAA0B,0BAA4B,eACzEtnB,aAAa,MAHnB,UAIE,yBAAQ/H,MAAM,KACd,yBAAQA,MAAM,IAAd,SAAmBpD,EAAE,oBACrB,yBAAQoD,MAAM,IAAd,SAAmBpD,EAAE,kBACrB,yBAAQoD,MAAM,IAAd,SAAmBpD,EAAE,sBAEvB,eAAC,KAAD,CAAc6E,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO+N,MAAS,0BAA4B,eACxD5N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,gCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,YACL1E,UAAY6K,EAAO44B,UAAa,0BAA4B,eAC5Dz4B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,6BAIhE,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,iBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL1E,UAAY6K,EAAO8N,MAAS,0BAA4B,eACxD3N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,0BAG1D,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,kBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,SACL1E,UAAY6K,EAAOy4B,OAAU,0BAA4B,eACzDt4B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,SAASuG,UAAU,OAAOjL,UAAU,6BAI7D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,UACL1E,UAAY6K,EAAO6N,QAAW,0BAA4B,eAC1D1N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,0BAG5D,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACLK,KAAK,WACL1E,UAAY6K,EAAO64B,SAAY,0BAA4B,eAC3D14B,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,6BAI/D,gBAAC,KAAKC,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,gBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,OACL1E,UAAY6K,EAAO84B,KAAQ,0BAA4B,eACvD34B,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,OAAOuG,UAAU,OAAOjL,UAAU,0BAGzD,eAAC,KAAK0F,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAKzD,MAAN,CAAYC,MAAOlL,EAAE,mBAArB,UACE,gBAAC,KAAD,CAAOoL,UAAU,SACVvG,KAAK,UACL1E,UAAY6K,EAAO+4B,QAAW,0BAA4B,eAC1D54B,aAAa,MAHpB,UAIE,yBAAQ/H,MAAM,KACZsgC,GAAkBp9B,KAChB,SAAAy9B,GAAO,OAAI,yBAAQ3gC,MAAO2gC,EAAQC,KAAvB,SAAyCD,EAAQE,MAAfj6B,sBAGnD,eAAC,KAAD,CAAcnF,KAAK,SAASuG,UAAU,OAAOjL,UAAU,gCAK/D,gBAAC,KAAKqI,OAAN,WACI,eAAC,KAAD,CACE7D,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EAJZ,SAMG/K,EAAE,oBAEL,eAAC,IAAD,CAAMqD,GAAIyF,EAAV,SACE,eAAC,KAAD,CAAQnE,MAAM,OAAd,SACK3E,EAAE,kCCtKN0iC,GAAiBn4B,OAAaC,MAAM,CAC7C1F,UAAWyF,OACRK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACd+E,SAAUwF,OACPK,IAAI,EAAG5K,YAAE,kBACT0K,SAAS1K,YAAE,uBACd+Y,MAAOxO,OACJwO,MAAM/Y,YAAE,cACR0K,SAAS1K,YAAE,yBC2HHD,I,GAAAA,iBAAkByD,aA5GjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAC3B,GAD+C,EAAjB6D,MAAiB,EAAVC,QACJnB,YAASinD,KAAlChnD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA0ByI,YAAY6hD,IAA9BC,EAAR,oBAEA,GAAIzqD,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,6CAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOwB,EAAKxB,KAEdqiC,EAAc,KAKlB,OAJIriC,EAAKqiC,cACPA,EAAc,IAAI//B,KAAKtC,EAAKqiC,cAI5B,eAAC,GAAD,CAAwB4mB,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CACEkF,cAAe,CACb3G,UAAWxD,EAAKwD,UAChBC,SAAUzD,EAAKyD,SACfgU,MAAOzX,EAAKyX,MACZ4qB,YAAaA,EACbW,OAAQhjC,EAAKgjC,OACbV,UAAWtiC,EAAKsiC,UAChB9qB,MAAOxX,EAAKwX,MACZ2qB,OAAQniC,EAAKmiC,OACb5qB,QAASvX,EAAKuX,QACdgrB,SAAUviC,EAAKuiC,SACfC,KAAMxiC,EAAKwiC,KACXC,QAASziC,EAAKyiC,SAEhBp4B,iBAAkB+2B,GAClB92B,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI04B,EAAa,CACf/1B,GAAIlN,EAAKshC,UACT99B,UAAW+G,EAAO/G,UAClBC,SAAU8G,EAAO9G,SACjBgU,MAAOlN,EAAOkN,MACdurB,OAAQz4B,EAAOy4B,OACfV,UAAW/3B,EAAO+3B,UAClB9qB,MAAOjN,EAAOiN,MACd2qB,OAAQ53B,EAAO43B,OACf5qB,QAAShN,EAAOgN,QAChBgrB,SAAUh4B,EAAOg4B,SACjBC,KAAMj4B,EAAOi4B,KACbC,QAASl4B,EAAOk4B,SAGdl4B,EAAO83B,cACTY,EAAU,YAAkBzsB,GAAejM,EAAO83B,cAGpD0pB,EAAc,CAAEnkD,UAAW,CACzB6C,MAAOw4B,GACNr4B,eAAgB,KAMlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBuJ,IAAMC,QAAStM,EAAE,2CAA6C,CAC1DuM,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,MACbY,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1DxB,SA8DG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACdmJ,gBAAiBA,EACjB8C,cAAeA,EACfhM,OAAQA,EACRa,OAAQA,EACR/C,UAAW,+BCzHdwkD,GAA8B/xD,YAAH,+yBC8BzBwE,qBAAkByD,aAjBjC,YAAkF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC/E,OACE,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACI,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGJD,aC2GGH,qBAAkByD,aA9GjC,YAAwD,IAArBxD,EAAoB,EAApBA,EAE3B8M,GAF+C,EAAjBjJ,MAAiB,EAAVC,QACvBmF,qBAAWrI,IACAkM,YAG/B,EAAmEnK,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS2qD,GAA6B,CAChFzC,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAQ9B,GAAInB,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAACyqD,GAAD,UACGvtD,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC4C,GAAD,UACGvtD,EAAE,mDAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZ,IAAMxB,EAAOwB,EAAKxB,KACZqpB,EAAgB7nB,EAAK0pC,qBAG3B,OAAK7hB,EAAclpB,MAAM0E,OAkBvB,eAAConD,GAAD,CAA8BhD,YAAajpD,EAAKub,SAAhD,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,GAAD,CAAa4B,UAAWnI,EAAE,oCAExB6H,SAAU8iB,EAAc9iB,SACxBG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOmhB,EAAc9iB,SAAS4B,WAEhCC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgB4iC,qBAAqB/qC,MAChDoG,EAAW+B,EAAgB4iC,qBAAqB3kC,SAEtD,OAAOgC,EAAS1D,OACZ,CAGEqmC,qBAAsB,CACpB1iC,WAAYH,EAAe6iC,qBAAqB1iC,WAChDrI,MAAM,GAAD,oBAAOkI,EAAe6iC,qBAAqB/qC,OAA3C,aAAqDoI,IAC1DhC,aAGJ8B,MAtBZ,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBAHNgK,kBAMlB,eAAC,KAAMxD,KAAP,UACGmkB,EAAclpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,gBAAC,KAAMxB,IAAP,WACE,eAAC,KAAMyF,IAAP,UACGjE,EAAKgpB,yBAAyB/lB,OAEjC,eAAC,KAAMgB,IAAP,UACGoE,KAAOrI,EAAK0iB,WAAWna,OAAO2C,KAEjC,eAAC,KAAMjH,IAAP,UACKjE,EAAK2iB,QAAWta,KAAOrI,EAAK2iB,SAASpa,OAAO2C,GAAc,OARjD9C,gCAvD5B,eAACujD,GAAD,CAA8BhD,YAAajpD,EAAKub,SAAhD,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,oCAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,uDCvCJD,iBAAkByD,aARP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAH,OACxB,eAAC,IAAD,CAAMqD,GAAI,gBAAV,SACE,gBAAC,KAAD,CAAQsB,MAAM,yBAAd,UACE,eAAC,KAAD,CAAMsK,OAAO,KAAKpK,KAAK,kBADzB,IAC6C7E,EAAE,yBCkCpCD,qBAAkByD,aAtCjC,YAA2E,IAA3CxD,EAA0C,EAA1CA,EAA0C,KAAvC6D,MAAuC,EAAhCC,QAAgC,EAAvB0pD,kBAC7CC,EAAc,GACdC,EAAgB,GAChBC,EAAiB,GAErB,YALwE,MAAN,GAAM,GAMtE,IAAK,QACHF,EAAc,OACd,MACF,IAAK,UACHA,EAAc,UACdC,EAAgB,OAChB,MACF,IAAK,WACHD,EAAc,UACdC,EAAgB,UAChBC,EAAiB,UAIrB,OACE,sBAAKxtD,UAAU,qCAAf,SACA,gBAAC,KAAIogB,KAAL,WACE,eAAC,KAAD,CAAK5b,MAAO8oD,EAAaG,MAAO,eAAC,KAAD,CAAM/oD,KAAK,kBAA3C,SACG7E,EAAE,kCAEL,eAAC,KAAD,CAAK2E,MAAO+oD,EAAeE,MAAO,eAAC,KAAD,CAAM/oD,KAAK,gBAA7C,SACG7E,EAAE,oCAEL,eAAC,KAAD,CAAK2E,MAAOgpD,EAAgBC,MAAO,eAAC,KAAD,CAAM/oD,KAAK,UAA9C,SACG7E,EAAE,8CCMID,qBAAkByD,aAlCjC,YAAqH,IAAjGxD,EAAgG,EAAhGA,EAAmBE,GAA6E,EAA7F2D,MAA6F,EAAtFC,QAAsF,EAA7E5D,UAAU8F,EAAmE,EAAnEA,MAAO+T,EAA4D,EAA5DA,WAA4D,IAAhDklC,yBAAgD,MAA9B,GAA8B,MAA1BuO,wBAA0B,SAElH,OACE,eAAC,GAAD,UACE,sBAAKrtD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOA,EAApB,SACE,uBAAK7F,UAAU,sBAAf,UAEI4Z,EACA,gBAAC,IAAD,CAAM1W,GAAI0W,EACJ5Z,UAAU,yBADhB,UAEI,eAAC,KAAD,CAAM8O,OAAO,KAAKpK,KAAK,eAF3B,IAE4C7E,EAAE,mBAE5C,GAEFi/C,OAGJ,eAAC,KAAK7+C,IAAN,UACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACIinD,EACA,eAAC,GAAD,CAAsBA,iBAAkBA,IACtC,GACFttD,kBCtBHH,qBAAkByD,aAXjC,YAAmF,IAAtDxD,EAAqD,EAArDA,EAAmBE,GAAkC,EAAlD2D,MAAkD,EAA3CC,QAA2C,EAAlC5D,UAAkC,IAAxB++C,yBAAwB,MAAN,GAAM,EAEhF,OACE,gBAAC,GAAD,CAAUj5C,MAAOhG,EAAE,cAAei/C,kBAAmBA,EAArD,UACE,8BAAKj/C,EAAE,6BACJE,SCgEMH,qBAAkByD,aAzDjC,YAAoE,IAAhCxD,EAA+B,EAA/BA,EAAG6D,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,QAASw+B,EAAY,EAAZA,UACrD/nC,QAAQC,IAAI8nC,GACZ,IAAM0W,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAE1BguC,EAAc,CAClB,aAAgBxC,EAChB,iBAAoB1W,EAAUoF,iBAAiBl5B,GAC/C,KAAQ0qC,EACR,eAAkB,YAClB,eAAiB,EACjB,cAAiB,UAGnB,EAA8D3tC,YAAY8vC,IAA1E,mBAAOI,EAAP,YAA6B74C,GAA7B,EAAuBE,KAAvB,EAA6BF,SAASC,EAAtC,EAAsCA,MAEtC,OAFA,EAA6Coa,YAEzCra,EACK,iBAGLC,EACK,uBAIP,gBAAC,KAAD,CACEiE,OAAK,EACLrC,SAAO,EACPE,MAAM,UACN8D,QAAS,kBAAMgzC,EAAa,CAC1BvyC,UAAW,CAAE,MAASsyC,GACtBtvC,eAAgB,KAGfE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExBvI,QAAQC,IAAI,oBACZsJ,EAAQX,KAAR,+BAAqC61C,EAArC,YAAyDE,OAMxDxsC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvB5D,UA0BG7C,EAAE,gBA1BL,IA0BsB,eAAC,KAAD,CAAM6E,KAAK,yBCzBtB9E,qBAAkByD,aA7BjC,YAAuE,IAAnCxD,EAAkC,EAAlCA,EAAmB0qB,GAAe,EAA/B7mB,MAA+B,EAAxBC,QAAwB,EAAf4mB,aAIrD,OAHAnwB,QAAQC,IAAI,eACZD,QAAQC,IAAIkwB,GAGVA,EAAYpkB,KAAI,SAACg8B,GAAD,OACd,eAAC,KAAKz8B,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,qBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAI87B,EAAUoF,iBAAiBjd,sBAAsB5lB,OAAS,wBAC9D,wBAAM1E,UAAU,aAAhB,UACGH,EAAE,6BADL,KACqCsiC,EAAUoF,iBAAiBnF,wBADhE,IACyF,wBACtFviC,EAAE,uBAFL,KAE+BiK,KAAOq4B,EAAUoF,iBAAiBnjB,SAASpa,OAAO,MAFjF,IAEwF,8BAG1F,eAAC,KAAK3B,OAAN,UACK85B,EAAUqZ,QACX,eAAC,GAAD,CAA2BrZ,UAAWA,IADhBtiC,EAAE,mEC0CrBD,qBAAkByD,aAzDjC,YAA0E,IAAnCxD,EAAkC,EAAlCA,EAAG6D,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,QAAS47B,EAAe,EAAfA,aACxDnlC,QAAQC,IAAIklC,GACZ,IAAMsZ,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAE1BguC,EAAc,CAClB,aAAgBxC,EAChB,oBAAuBtZ,EAAamN,oBAAoBr+B,GACxD,KAAQ0qC,EACR,eAAkB,eAClB,eAAiB,EACjB,cAAiB,UAGnB,EAA8D3tC,YAAY8vC,IAA1E,mBAAOI,EAAP,YAA6B74C,GAA7B,EAAuBE,KAAvB,EAA6BF,SAASC,EAAtC,EAAsCA,MAEtC,OAFA,EAA6Coa,YAEzCra,EACK,iBAGLC,EACK,uBAIP,gBAAC,KAAD,CACEiE,OAAK,EACLrC,SAAO,EACPE,MAAM,UACN8D,QAAS,kBAAMgzC,EAAa,CAC1BvyC,UAAW,CAAE,MAASsyC,GACtBtvC,eAAgB,KAGfE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExBvI,QAAQC,IAAI,oBACZsJ,EAAQX,KAAR,+BAAqC61C,EAArC,YAAyDE,OAMxDxsC,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAvB5D,UA0BG7C,EAAE,gBA1BL,IA0BsB,eAAC,KAAD,CAAM6E,KAAK,yBC1BtB9E,qBAAkByD,aA5BjC,YAA2E,IAArCxD,EAAoC,EAApCA,EAAmB2qB,GAAiB,EAAjC9mB,MAAiC,EAA1BC,QAA0B,EAAjB6mB,eAIvD,OAHApwB,QAAQC,IAAI,iBACZD,QAAQC,IAAImwB,GAGVA,EAAcrkB,KAAI,SAACo5B,GAAD,OAChB,eAAC,KAAK75B,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,wBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIk5B,EAAamN,oBAAoBjiB,yBAAyB/lB,OAAS,wBACvE,wBAAM1E,UAAU,aAAhB,UACGH,EAAE,6BADL,KACqC0/B,EAAamN,oBAAoBH,kBAGxE,eAAC,KAAKlkC,OAAN,UACKk3B,EAAaic,QACd,eAAC,GAAD,CAA8Bjc,aAAcA,IADnB1/B,EAAE,sECAxBD,qBAAkByD,aAnBjC,YAA4D,IAA5BxD,EAA2B,EAA3BA,EAAG6D,EAAwB,EAAxBA,MAAgByQ,GAAQ,EAAjBxQ,QAAiB,EAARwQ,OACjD/Z,QAAQC,IAAI8Z,GACZ,IAAMmzB,EAAcnzB,EAAM9F,GACpBglC,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BsD,EAAYv2C,EAAMkD,OAAOyG,KAE/B,OACE,eAAC,IAAD,CAAMnK,GAAE,0BAAqBokC,EAArB,YAAoC+L,EAApC,YAAsD4G,GAA9D,SACA,gBAAC,KAAD,CACEtzC,OAAK,EACLrC,SAAO,EACPE,MAAM,UAHR,UAKG3E,EAAE,kCALL,IAKwC,eAAC,KAAD,CAAM6E,KAAK,2BCYxC9E,qBAAkByD,aAzBjC,YAKI,IAJFxD,EAIC,EAJDA,EAGA87C,GACC,EAHDj4C,MAGC,EAFDC,QAEC,EADDg4C,aAGA,OACE,eAAC,KAAKj2C,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,gBAAC,KAAD,CACEyP,YAAY,OACZhQ,MAAOhG,EAAE,kBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIs1C,EAAYh5B,eAAiB,wBAChC9iB,EAAE,yCAFL,IAE+C,2BAE/C,eAAC,KAAKwI,OAAN,UACE,eAAC,GAAD,CAAuB8L,MAAOwnC,eCQvB/7C,I,GAAAA,iBAAkByD,aAzBjC,YAKI,IAJFxD,EAIC,EAJDA,EAGAg8C,GACC,EAHDn4C,MAGC,EAFDC,QAEC,EADDk4C,YAGA,OACE,eAAC,KAAKn2C,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,gBAAC,KAAD,CACEyP,YAAY,QACZhQ,MAAOhG,EAAE,iBAFX,UAGA,gBAAC,KAAKwG,KAAN,WACE,6BAAIw1C,EAAWl5B,eAAiB,wBAC/B9iB,EAAE,wCAFL,IAE8C,2BAE9C,eAAC,KAAKwI,OAAN,UACE,eAAC,GAAD,CAAuB8L,MAAO0nC,eC3BzBZ,GAA4B7/C,YAAH,2pDCoLvBwE,qBAAkByD,aA/IjC,YAA+C,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACpB+c,GADsC,EAAX9c,QACbmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAEzBm4B,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAiC7K,YAC/By4C,GAA2B,CACzBlyC,UAAW,CACT29B,aAAcmS,EACdxrC,KAAM0rC,EACN+C,SAAU,eALRr5C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAWxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAmBq8C,kBAAmB,eAAC,GAAD,IAAtC,SACE,6BAAIj/C,EAAE,iCAIV,GAAI6C,EAEF,OADAtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,CAAmBo8C,kBAAmB,eAAC,GAAD,IAAtC,SACE,6BAAIj/C,EAAE,gCAKZzF,QAAQC,IAAIsI,GACZ,IA6BI6D,EA7BEukD,EAAgBpoD,EAAKooD,cAErB2C,EAAgB/qD,EAAKo5C,4BAA4B2R,cACjDh7C,EAAU/P,EAAKo5C,4BAA4BrpC,QAC3C6X,EAAc5nB,EAAKo5C,4BAA4BxxB,YAC/CC,EAAgB7nB,EAAKo5C,4BAA4BvxB,cACjDiG,EAAS9tB,EAAKo5C,4BAA4BC,mBAC1CtV,EAAe/jC,EAAKo5C,4BAA4BrV,aAEhDv0B,EAAWu0B,EAAatL,yBAAyBlC,qBAAqBx0B,KACtEipD,EAAYjnB,EAAa3R,sBAAsBrwB,KAC/CiiC,EAAY78B,KAAOkO,GAAsB0uB,EAAaC,YAAY38B,OAAOw8B,GACzE8M,EAAUxpC,KAAOkO,GAAsB0uB,EAAa4M,UAAUtpC,OAAOw8B,GAUrEonB,EATe9jD,KAAOivC,GAAY/uC,OAAO2C,GASb,IAAMg6B,EAAY,MAAQ2M,EAAU,KAAOqa,EAAY,IAAM9tD,EAAE,cAAgB,IAAMsS,EASvH,OAPA/X,QAAQC,IAAIo2B,GACZr2B,QAAQC,IAAI,kBACZD,QAAQC,IAAIqzD,GACZtzD,QAAQC,IAAI0wD,EAAclkB,eAInBkkB,EAAclkB,eACnB,IAAK,eACH,IAAMgnB,EAAgB9C,EAAc8C,cACpCrnD,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,kDAAoD,IAAMiK,KAAO+jD,GAAe7jD,OAAO2C,MAE9F,MACF,IAAK,YACHnG,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,uDAEP,MACF,IAAK,UACH2G,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,+DAEP,MACF,IAAK,WACH2G,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,sDAEP,MACF,IAAK,UACH2G,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,qDAEP,MAEF,IAAK,OACH2G,EAAU,gBAAC,KAAD,CAAOnC,KAAK,UAAUkvB,eAAa,EAAnC,UACN,8BAAK1zB,EAAE,sDACNA,EAAE,kDAEP,MACF,IAAK,KACH2G,EAAU,gBAAC,KAAKvG,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,UACR,eAAC,GAAD,CAA4BskB,cAAeA,IAC3C,eAAC,GAAD,CAA0BD,YAAaA,IACrCkG,GACCA,EAAOwrB,4BACN,eAAC,GAAD,CAA0BN,YAAalrB,EAAOwrB,8BAChD,GACAxrB,GACEA,EAAOyrB,6BAAiCxpC,EAAQypC,qBAChD,eAAC,GAAD,CAAyBN,WAAYprB,EAAOyrB,6BAC5C,MAEN,MACF,QACE11C,EAAU,GAGd,OACE,eAAC,GAAD,CAAmBs4C,kBAAmB,eAAC,GAAD,IAAtC,SACE,eAAC,KAAK7+C,IAAN,UACE,gBAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,UACIwnD,EACF,sBAAK5tD,UAAU,OAAf,SACI0tD,EACA,gBAAC,KAAD,CAAOrpD,KAAK,UAAUkvB,eAAa,EAAnC,UACE,8BAAK1zB,EAAE,sDACNA,EAAE,uCAEH2G,eC5JD5G,I,MAAAA,iBAAkByD,aAXjC,YAAqF,IAAtDxD,EAAqD,EAArDA,EAAmBE,GAAkC,EAAlD2D,MAAkD,EAA3CC,QAA2C,EAAlC5D,UAAkC,IAAxB++C,yBAAwB,MAAN,GAAM,EAElF,OACE,gBAAC,GAAD,CAAUj5C,MAAOhG,EAAE,cAAei/C,kBAAmBA,EAArD,UACE,8BAAKj/C,EAAE,+BACJE,SCRI01C,GAAkBr6C,YAAH,wYAoBf0yD,GAAe1yD,YAAH,iMC2EVwE,qBAAkByD,aAtEjC,YAA+C,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACpB+c,GADsC,EAAX9c,QACbmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAEzBm4B,EAAmBn1C,EAAMkD,OAAO+vC,SAChCoC,EAAar1C,EAAMkD,OAAOyG,KAChC,EAAiC7K,YAC/BizC,GAAiB,CACf1sC,UAAW,CACTsqC,eAAgBwF,EAChBxrC,KAAM0rC,KAJJt2C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAUxB,OAAIF,EACF,eAAC,GAAD,UACE,6BAAI5C,EAAE,iCAIN6C,GACFtI,QAAQC,IAAIqI,GAEV,eAAC,GAAD,UACE,6BAAI7C,EAAE,kCAKZzF,QAAQC,IAAIsI,GAKV,eAAC,GAAD,UACE,eAAC,KAAK1C,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,SACE,eAAC,KAAKR,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAD,CAAM1I,MAAOhG,EAAE,6BAAf,UACE,gBAAC,KAAKwG,KAAN,WACGxG,EAAE,yCADL,IAC+C,wBAAM,wBACnD,eAACgrD,GAAD,CACEhrD,EAAGA,EACHo6C,UAAWlB,EACX+R,UAAWnoD,EACXgK,WAAYA,EACZ65B,WAAYA,OAGhB,eAAC,KAAKn+B,OAAN,UACE,eAAC,IAAD,CAAMnF,GAAI,gBAAV,SACE,gBAAC,KAAD,CACEoB,SAAO,EACPqC,OAAK,EACLnC,MAAM,UAHR,UAKG3E,EAAE,oBALL,IAK0B,eAAC,KAAD,CAAM6E,KAAK,uCC7DtC9E,qBAAkByD,aAXjC,YAAyF,IAAtDxD,EAAqD,EAArDA,EAAmBE,GAAkC,EAAlD2D,MAAkD,EAA3CC,QAA2C,EAAlC5D,UAAkC,IAAxB++C,yBAAwB,MAAN,GAAM,EAEtF,OACE,gBAAC,GAAD,CAAUj5C,MAAOhG,EAAE,cAAei/C,kBAAmBA,EAArD,UACE,8BAAKj/C,EAAE,wBACJE,SCjBF,SAASwQ,KACZ,IACIwkB,EACAiH,EACA9C,EAEA1oB,EAAY,CACdykC,oBAAqB,uBACrBvC,SAAUj0C,aAAagS,QAAQ9R,EAAKX,wBACpC20C,UAAWl0C,aAAagS,QAAQ9R,EAAKV,0BA+BvC,OAvBA82B,EAAwBt2B,aAAagS,QAAQ9R,EAAKR,+BAEhDqS,EAAUukB,sBADRA,GAGgC,GAGpCiH,EAAoBv9B,aAAagS,QAAQ9R,EAAKP,2BAE5CoS,EAAUwrB,kBADRA,GAG4B,GAGhC9C,EAAuBz6B,aAAagS,QAAQ9R,EAAKN,8BAE/CmS,EAAU0oB,qBADRA,GAG+B,GAGnC9+B,QAAQC,IAAImW,GAELA,ECzBX,SAASG,GAAgB1N,GACvB,IAAI2N,EAAenS,aAAagS,QAAQxN,GACxC,OAAI2N,GAGK,GAKX,SAASG,GAA6BD,EAAK7N,EAAOgM,GAChDxQ,aAAaC,QAAQoS,EAAK7N,GAC1BgM,EAAQsB,MAIV,IAAMglC,GAAc,kCAgEL31C,iBAAkByD,aA9DC,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY8C,GAAf,EAAMgB,QAAN,EAAehB,MAAMsM,EAArB,EAAqBA,QAArB,OAChC,gBAAC,KAAKhP,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SAEE,0BACEpG,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKN,8BACnCwO,SAAW,SAACgE,GACVE,GACEpS,EAAKN,6BACLwS,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,sCAATgK,gBACrBlH,EAAK21B,sBAAsBh3B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACpC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,wBAInC,eAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,SAEE,0BACEpG,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKR,+BACnC0O,SAAW,SAACgE,GACVE,GACEpS,EAAKR,8BACL0S,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,uCAATgK,gBACrBlH,EAAK8xB,uBAAuBnzB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,wBAInC,eAAC,KAAKnE,IAAN,CAAUU,GAAI,EAAd,SAEE,0BACEpG,UAAWu1C,GACX3kC,aAAcD,GAAgBhS,EAAKP,2BACnCyO,SAAW,SAACgE,GACVE,GACEpS,EAAKP,0BACLyS,EAAMtL,OAAOtC,MACbgM,IAPN,UAWE,yBAAQhM,MAAM,GAAd,SAA6BpD,EAAE,mCAATgK,gBACrBlH,EAAKi5B,mBAAmBt6B,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjC,yBAAQwB,MAAOxB,EAAK4M,GAApB,SAAoC5M,EAAKiD,MAAZmF,+BCdxBjK,qBAAkByD,aAzDjC,YAAwH,IAKlH0qD,EALmCluD,EAA8E,EAA9EA,EAAmBwzC,GAA2D,EAA3E3vC,MAA2E,EAApEC,QAAoE,EAA3D0vC,gBAAgB4G,EAA2C,EAA3CA,UAAW4T,EAAgC,EAAhCA,cAAehnB,EAAiB,EAAjBA,cAC9FpmB,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WAO/B,OANmB8T,EAAYC,iBAMxBmmB,GACL,IAAK,eACHknB,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,6CAA+C,IAAMiK,KAAO+jD,GAAe7jD,OAAO2C,KAEzF,MACF,IAAK,YACHohD,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,iDAEP,MACF,IAAK,UACHkuD,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,yDAEP,MACF,IAAK,WACHkuD,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,gDAEP,MACF,IAAK,UACHkuD,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,+CAEP,MAEF,IAAK,OACHkuD,EAAa,uBAAM/tD,UAAU,aAAhB,SACRH,EAAE,4CAEP,MACF,IAAK,KACHkuD,EAAa,eAAC,IAAD,CAAM7qD,GAAE,6BAAwBmwC,EAAxB,YAA0C4G,GAAlD,SACT,gBAAC,KAAD,CAAQj6C,UAAU,aAAawE,MAAM,UAAUF,SAAO,EAAtD,UACGzE,EAAE,gBADL,IACsB,eAAC,KAAD,CAAM6E,KAAK,uBAGrC,MAEF,QACEqpD,EAAa,GAGjB,OAAOA,MCxCT,SAASC,GAAWC,GAClB,IAAMC,EAAQD,EAAKvI,cACnB,OAAOuI,EAAKE,OAAO,GAAG5vC,cAAgB2vC,EAAMn2C,MAAM,GAK/CtZ,aAAagS,QAAQ9R,EAAKX,wBAKV8L,KAAOrL,aAAagS,QAAQ9R,EAAKX,yBACtCowD,SAAStkD,OAAU,SAC/BrL,aAAaC,QAAQC,EAAKX,uBAAwB8L,OAASE,OAAO,eAClEvL,aAAaC,QAAQC,EAAKV,wBAAyB6L,OAAS7H,IAAI,EAAG,QAAQ+H,OAAO,iBAPpF5P,QAAQC,IAAI,iDACZoE,aAAaC,QAAQC,EAAKX,uBAAwB8L,OAASE,OAAO,eAClEvL,aAAaC,QAAQC,EAAKV,wBAAyB6L,OAAS7H,IAAI,EAAG,QAAQ+H,OAAO,gBAyJrEpK,qBAAkByD,aA9IjC,YAAqD,IAAtBxD,EAAqB,EAArBA,EACvB4gB,GAD4C,EAAlB/c,MAAkB,EAAXC,QACnBmF,qBAAWrI,KAEzB+lC,GADa/lB,EAAY9T,WACZ8T,EAAYC,kBAEzB7a,EAAQhG,EAAE,mBAChB,EAA0C2C,YAASgzC,GAAmB,CACpEzsC,UAAWwH,OADL9N,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMsM,EAA9B,EAA8BA,QAI9B,OAAIxM,EACF,eAAC,GAAD,CAAyBoD,MAAOA,EAAhC,SACGhG,EAAE,+BAGH6C,EACF,eAAC,GAAD,CAAyBmD,MAAOA,EAAhC,SACGhG,EAAE,iCAIPzF,QAAQC,IAAIsI,GACZvI,QAAQC,IAAIsI,EAAKkzC,iBAGf,gBAAC,GAAD,CACEhwC,MAAOA,EACPi5C,kBACE,gBAAC,KAAO1+B,KAAR,CAAapgB,UAAU,sCAAvB,UACE,eAAC,KAAD,CACEmD,KAAK,eACLqB,MAAM,YACN0G,SAAYpB,KAAOrL,aAAagS,QAAQ9R,EAAKX,yBAAyBk1C,SAAS,EAAG,QAAQkb,SAAStkD,OAAU,OAC7GxB,QAAU,WACR,IAAI+lD,EAAevkD,KAAOrL,aAAagS,QAAQ9R,EAAKX,yBAAyBk1C,SAAS,EAAG,QACrFob,EAAgBxkD,KAAOukD,GAAcpsD,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAKX,uBAAwBqwD,EAAarkD,OAAO,eACtEvL,aAAaC,QAAQC,EAAKV,wBAAyBqwD,EAActkD,OAAO,eAExEiF,EAAQsB,SAEZ,eAAC,KAAD,CACE/L,MAAM,YACN8D,QAAU,WACR,IAAI6qC,EAAkBrpC,OAClBspC,EAAmBtpC,KAAOqpC,GAAiBlxC,IAAI,EAAG,QAEtDxD,aAAaC,QAAQC,EAAKX,uBAAwBm1C,EAAgBnpC,OAAO,eACzEvL,aAAaC,QAAQC,EAAKV,wBAAyBm1C,EAAiBppC,OAAO,eAE3EiF,EAAQsB,OATZ,SAWG1Q,EAAE,mBAEL,eAAC,KAAD,CACEsD,KAAK,gBACLqB,MAAM,YACN8D,QAAU,WACR,IAAI0qC,EAAelpC,KAAOrL,aAAagS,QAAQ9R,EAAKX,yBAAyBiE,IAAI,EAAG,QAChFgxC,EAAgBnpC,KAAOkpC,GAAc/wC,IAAI,EAAG,QAEhDxD,aAAaC,QAAQC,EAAKX,uBAAwBg1C,EAAahpC,OAAO,eACtEvL,aAAaC,QAAQC,EAAKV,wBAAyBg1C,EAAcjpC,OAAO,eAExEiF,EAAQsB,YAxClB,UA8CE,eAAC,GAAD,CAA2B5N,KAAMA,EAAMsM,QAASA,IAC/CtM,EAAKkzC,gBAAgB1vC,KAAI,gBAAGkH,EAAH,EAAGA,KAAMwgD,EAAT,EAASA,cAAeh8B,EAAxB,EAAwBA,QAAxB,OACxB,eAAC,KAAK5xB,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACI,gBAAC,KAAD,WACE,eAAC,KAAKR,OAAN,UACE,gBAAC,KAAKwC,MAAN,WACE,6BAAI4lD,GAAWlkD,KAAOuD,GAAMrD,OAAO,WADrC,IACoD,IAClD,uBAAMhK,UAAU,aAAhB,SACG8J,KAAOuD,GAAMrD,OAAO,aAIxB6nB,EAAQ7rB,OAIT,eAAC,KAAD,CAAOC,OAAK,EAAZ,SACE,eAAC,KAAMI,KAAP,UACGwrB,EAAQ1rB,KAAI,gBACXktC,EADW,EACXA,eAEAhmC,GAHW,EAEXu8B,cAFW,EAGXv8B,MAKAqF,GARW,EAIX9J,OAJW,EAKXmwB,QALW,EAMXuc,YANW,EAOXzwC,YAPW,EAQX6N,SAIA0oB,GAZW,EASXxe,KATW,EAUXk5B,SAVW,EAWXC,MAXW,EAYX3a,0BACArG,EAbW,EAaXA,sBAEA4R,GAfW,EAcX3K,kBAdW,EAeX2K,WACA2M,EAhBW,EAgBXA,QAEAzM,GAlBW,EAiBX7rB,cAjBW,EAkBX6rB,eAlBW,OAmBT,gBAAC,KAAM5mC,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACA,gCACGoE,KAAOuD,EAAO,IAAMs5B,GAAW38B,OAAOw8B,GADzC,IACuD,MACpD18B,KAAOuD,EAAO,IAAMimC,GAAStpC,OAAOw8B,GAFvC,IAEsD,OAEpDzR,EAAsBrwB,KALxB,IAKkCgO,EAAW,IAAM7S,EAAE,gBAAkB,IAAM6S,EAAQgK,SAAW,GALhG,IAKqG,wBACrG,uBAAM1c,UAAU,aAAhB,SAA+Bo7B,EAAyBlC,qBAAqBx0B,UAE7E,eAAC,KAAMgB,IAAP,UACE,eAAC,GAAD,CACE2tC,eAAgBA,EAChB4G,UAAW5sC,EACXwgD,cAAeA,EACfhnB,cAAeA,gBAtC7B,eAAC,KAAKxgC,KAAN,UACE,6BAAIxG,EAAE,yCAbHgK,2BC3GRjK,qBAAkByD,aAXjC,YAAiF,IAAtDxD,EAAqD,EAArDA,EAAmBE,GAAkC,EAAlD2D,MAAkD,EAA3CC,QAA2C,EAAlC5D,UAAkC,IAAxB++C,yBAAwB,MAAN,GAAM,EAE9E,OACE,gBAAC,GAAD,CAAUj5C,MAAOhG,EAAE,cAAei/C,kBAAmBA,EAArD,UACE,8BAAKj/C,EAAE,wBACJE,SCgDMH,qBAAkByD,aApCjC,YAA6C,IAAtBxD,EAAqB,EAArBA,EAErB,GAF0C,EAAlB6D,MAAkB,EAAXC,QAEWnB,YAAS7C,GAAwB,CACzEoJ,UAAW,CAAEsF,GAAI,mCADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAJA,EAA8BsM,QAI1BxM,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,oCAIPzF,QAAQC,IAAIsI,GACZvI,QAAQC,IAAIsI,EAAK8V,cAEjB,IAAMA,EAAe9V,EAAK8V,aAE1B,OACE,eAAC,GAAD,UACE,eAAC,KAAD,CAAM5S,MAAO4S,EAAa/T,KAA1B,SACE,gBAAC,KAAK2B,KAAN,WACE,sBAAKC,wBAAyB,CAAEC,OAAQkS,EAAaC,WACrD,+BAAID,EAAaG,MAAjB,IAAwB,wBAAxB,IAAgCH,EAAaE,SAC7C,+BAAIF,EAAaI,aAAjB,IAA+B,wBAA/B,IAAuCJ,EAAaK,8BC5B/ClZ,I,GAAAA,iBAAkByD,aAXjC,YAA0D,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAE3C,OACE,gBAAC,GAAD,CAAU8F,MAAOhG,EAAE,cAAnB,UACE,8BAAKA,EAAE,uBACJE,SCjBI49C,GAA4BviD,YAAH,48CCyFvBwE,qBAAkByD,aApEjC,YAA4C,IAAtBxD,EAAqB,EAArBA,EACdgG,GADmC,EAAlBnC,MAAkB,EAAXC,QAChB9D,EAAE,oBAChB,EAAiC2C,YAASm7C,IAAlCl7C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAgBoD,MAAOA,EAAvB,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAgBmD,MAAOA,EAAvB,SACGhG,EAAE,oCAIPzF,QAAQC,IAAIsI,GACZ,IAAMq7C,EAAiBr7C,EAAKq7C,eAG5B,OAFA5jD,QAAQC,IAAI2jD,GAGV,eAAC,GAAD,CAAgBn4C,MAAOA,EAAvB,SACI,eAAC,KAAK5F,IAAN,UACG+9C,EAAe18C,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACxB,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAD,WACI9M,EAAK8sD,MAAMjtD,MAAM0E,OACjB,eAAC,KAAYklB,MAAb,CACEhrB,IAAMuB,EAAK8sD,MAAMjtD,MAAM0E,OAAUvE,EAAK8sD,MAAMjtD,MAAM,GAAGG,KAAK+sD,uBAAwB,GAClFvqD,KAAI,uBAAkBxC,EAAK4M,MACxB,GACP,eAAC,KAAYhG,OAAb,UACE,8BAAK5G,EAAKiD,SAEZ,gBAAC,KAAY2D,OAAb,WACE,eAAC,KAAY+iB,QAAb,CACE1O,SAAU,uBAAM1c,UAAU,GAAhB,SAAqByB,EAAK2/B,QAAW3/B,EAAK2/B,QAAQ1kB,SAAU,KACtE+xC,WAAYhtD,EAAKy3B,qBAAqBx0B,OAExC,eAAC,KAAYgqD,UAAb,UACA,eAAC,KAAYC,SAAb,CACEjqD,KAAK,WACLqG,MAAOtJ,EAAK0iB,UACZ2C,OAAO,EACPG,cAAc,cAIlB,eAAC,IAAD,CAAM/jB,GAAE,uBAAkBzB,EAAK4M,IAA/B,SACE,eAAC,KAAYhG,OAAb,CAAoBumD,GAAI,GAAxB,SACE,gBAAC,KAAD,CACEjoD,OAAK,EACLnC,MAAM,OAFR,UAIG3E,EAAE,4BAJL,IAIkC,eAAC,KAAD,CAAM6E,KAAK,6BA9BRmF,2BCxB1CjK,qBAAkByD,aAdjC,YAAyD,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAE1C,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACT+Z,WAAW,eAFb,SAKG7Z,QCuEQH,I,GAAAA,iBAAkByD,aA/DjC,YAA+F,IAAzDxD,EAAwD,EAAxDA,EAAG6D,EAAqD,EAArDA,MAAOmrD,EAA8C,EAA9CA,YAA8C,IAAjCC,kBAAiC,aAAhBvuD,cAAgB,SAGtFkgB,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAC/BtmB,QAAQC,IAAIw0D,GACZ,IAAME,EAAsBF,EAAYE,oBAElClQ,EAAUn7C,EAAMkD,OAAOm4C,SAE7B,OACE,gBAAC,KAAD,CAAax+C,OAAQA,EAArB,UACE,gBAAC,KAAYyuD,SAAb,WACGH,EAAYnqD,KACXmqD,EAAYI,iBAAoB,+BAAK,eAAC,KAAD,CAAOzqD,MAAM,UAAb,SAAwB3E,EAAE,yCAAsD,MAEzH,eAAC,KAAYqvD,MAAb,UAC0B,GAArBL,EAAY16C,MACbtU,EAAE,0BACFgvD,EAAYM,oBAGhB,gBAAC,KAAYC,cAAb,WACIP,EAAYI,iBACZ,gBAAC,KAAYI,cAAb,WACGxvD,EAAE,mCADL,IAC0CgvD,EAAYlsC,gBAEpD,GAEHosC,EAAoBztD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAC7B,gBAAC,KAAY4tD,cAAb,WACI,eAAC,KAAD,CAAM3qD,KAAK,aADf,IAC+B,IAC1BoF,KAAOrI,EAAKilC,aAAaviB,WAAWna,OAAO2C,GAFhD,IAE8D,IAEzD7C,KAAOrI,EAAKilC,aAAaviB,UAAY,IAAM1iB,EAAKilC,aAAaC,WAAW38B,OAAOw8B,GAJpF,IAIkG,MAC7F18B,KAAOrI,EAAKilC,aAAaviB,UAAY,IAAM1iB,EAAKilC,aAAa4M,SAAStpC,OAAOw8B,GALlF,IAKiG,IAC/F,wBACA,yBAAOxmC,UAAU,aAAjB,UACGyB,EAAKilC,aAAahiC,KADrB,IAC2B,eAAC,KAAD,CAAMA,KAAK,YADtC,IACoDjD,EAAKilC,aAAatL,yBAAyBlC,qBAAqBx0B,iBAKxHoqD,IAAeD,EAAYjM,UAC3B,eAAC,IAAD,CAAM1/C,GAAE,uBAAkB27C,EAAlB,mBAAoCgQ,EAAYxgD,IAAxD,SACE,gBAAC,KAAYihD,OAAb,WACGzvD,EAAE,4BADL,IACkC,eAAC,KAAD,CAAM6E,KAAK,uBAG7C,GAEFoqD,GAAcD,EAAYjM,UAC1B,eAAC,KAAY0M,OAAb,CACEtvD,UAAU,WADZ,SAGGH,EAAE,sBACmB,UC9EnB+9C,GAA2BxiD,YAAH,60DCuGtBwE,qBAAkByD,aA9EjC,YAA2C,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAChB+c,GADkC,EAAX9c,QACTmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WAGzB9G,GAFa4a,EAAYC,iBAEjB7gB,EAAE,oBACVg/C,EAAUn7C,EAAMkD,OAAOm4C,SAE7B,EAAiCv8C,YAASo7C,GAA0B,CAClE70C,UAAW,CAAEsF,GAAIwwC,KADXp8C,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAeoD,MAAOA,EAAtB,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAemD,MAAOA,EAAtB,SACGhG,EAAE,8BAIPzF,QAAQC,IAAIsI,GACZ,IAAMkO,EAAQlO,EAAKgpC,cACb4jB,EAAU1+C,EAAM0+C,QAGtB,OAFAn1D,QAAQC,IAAIwW,GAGV,gBAAC,GAAD,CAAehL,MAAOA,EAAtB,UACE,eAAC,KAAK5F,IAAN,UACE,gBAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,GAAImI,GAAI,GAAtC,UACE,8BAAKsC,EAAMnM,OACX,8BAAKmM,EAAMutC,eAGf,gBAAC,KAAKn+C,IAAN,WACE,gBAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,UACKsC,EAAM09C,MAAMjtD,MAAM0E,OACnB,gBAAC,KAAD,WACE,eAAC,KAAYklB,MAAb,CAAmBhrB,IAAM2Q,EAAM09C,MAAMjtD,MAAM0E,OAAU6K,EAAM09C,MAAMjtD,MAAM,GAAGG,KAAK+sD,uBAAyB,KACxG,eAAC,KAAYpjC,QAAb,UACIva,EAAM09C,MAAMjtD,MAAM0E,OAAU6K,EAAM09C,MAAMjtD,MAAM,GAAGG,KAAKoD,YAAc,QAG1E,GACF,eAAC,KAAD,CAAMgB,MAAOhG,EAAE,gBAAf,SACE,gBAAC,KAAKwG,KAAN,WACE,gCAAKxG,EAAE,mBAAP,KAA8BgR,EAAMuwB,QAAWvwB,EAAMuwB,QAAQ1kB,SAAU,MACvE,gCAAK7c,EAAE,iBAAP,KAA4BgR,EAAMsT,UAAara,KAAO+G,EAAMsT,WAAWna,OAAO2C,GAAa,MAC3F,gCAAK9M,EAAE,eAAP,KAA0BgR,EAAMuT,QAAWta,KAAO+G,EAAMuT,SAASpa,OAAO2C,GAAa,cAI3F,eAAC,KAAKjH,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,KAAD,CAAM1I,MAAOhG,EAAE,uBAAf,SACE,gBAAC,KAAKwG,KAAN,WACE,8BAAKxG,EAAE,yBACP,sBAAKyG,wBAAyB,CAAEC,OAAQsK,EAAMhM,yBAKtD,gBAAC,KAAK5E,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,GAAImI,GAAI,GAAtC,SACE,8BAAK1O,EAAE,0BAER0vD,EAAQjuD,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACjB,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,GAAD,CAA4BihD,QAAS3Q,EAASgQ,YAAaptD,mBC3ExD7B,I,GAAAA,iBAAkByD,aAdjC,YAA+D,IAAhCxD,EAA+B,EAA/BA,EAAG6D,EAA4B,EAA5BA,MAAgB3D,GAAY,EAArB4D,QAAqB,EAAZ5D,UAC1C8+C,EAAUn7C,EAAMkD,OAAOm4C,SAE7B,OACE,eAAC,GAAD,CACEl5C,MAAOhG,EAAE,cACT+Z,WAAU,uBAAkBilC,GAC5BwO,iBAAiB,QAHnB,SAKGttD,QCZQ0vD,GALS,CACpBC,4BAA6B,iCAC7BC,sBAAuB,4BC+CZ/vD,iBAAkByD,aAjCP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAcC,EAApB,EAAoBA,OAApB,OACtB,gBAAC,KAAD,WACE,gBAAC,KAAKC,MAAN,CAAYC,MAAOlL,EAAE,sBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACL4G,UAAU,WACVvG,KAAK,UACL1E,UAAY6K,EAAO+X,QAAW,0BAA4B,eAC1D5X,aAAa,QACpB,eAAC,KAAD,CAActG,KAAK,UAAUuG,UAAU,OAAOjL,UAAU,wBAE1D,yBAAOA,UAAU,aAAjB,UACGH,EAAE,oCADL,IAC0C,wBACxC,gCACE,gCAAKA,EAAE,0BAAP,IAAmC,IACjC,oBAAG0F,OAAO,SAAStB,KAAMwrD,GAAgBC,4BAAzC,SAAuE7vD,EAAE,qCAE3E,gCAAKA,EAAE,4BAAP,IAAqC,IACnC,oBAAG0F,OAAO,SAAStB,KAAMwrD,GAAgBE,sBAAzC,SAAiE9vD,EAAE,qCAIzE,gBAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,EALZ,UAOG/K,EAAE,oBAPL,IAO0B,eAAC,KAAD,CAAM6E,KAAK,4BCzC9B89C,GAAkCpnD,YAAH,s4BC8I7BwE,I,GAAAA,iBAAkByD,aApHjC,YAAiD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC7B8c,EAAc3X,qBAAWrI,IAIzBoF,GAHa4a,EAAY9T,WACZ8T,EAAYC,iBAEjB7gB,EAAE,oBACV+vD,EAAwBlsD,EAAMkD,OAAOyH,GACrCwwC,EAAUn7C,EAAMkD,OAAOm4C,SAG7B,GAFkBr7C,EAAMkD,OAAOyG,KAEE7K,YAASggD,GAAiC,CACzEz5C,UAAW,CAAEsF,GAAIuhD,MADXntD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAAiDyI,YAAY0iD,IAA7D,mBAAO+B,EAAP,KAGA,GAHA,KAAsBltD,KAGlBF,EAAS,OACX,eAAC,GAAD,CAAqBoD,MAAOA,EAA5B,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAqBmD,MAAOA,EAA5B,SACGhG,EAAE,sCAIPzF,QAAQC,IAAIsI,GACZ,IAAMksD,EAAclsD,EAAK+oC,oBAIzB,OAHAtxC,QAAQC,IAAIw0D,GAGRA,EAAYjM,UAEZ,eAAC,GAAD,CAAqB/8C,MAAOA,EAA5B,SACE,eAAC,KAAD,CAAMA,MAAOhG,EAAE,qCAAf,SACE,eAAC,KAAKwG,KAAN,UAAYxG,EAAE,qCAOpB,gBAAC,GAAD,CAAqBgG,MAAOA,EAA5B,UACE,eAAC,KAAK5F,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,8BAAKyoD,EAAYljB,cAAcjnC,WAGnC,gBAAC,KAAKzE,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,GAAD,CAA4By4C,QAASA,EAASgQ,YAAaA,EAAaC,YAAY,EAAOvuD,QAAQ,MAErG,eAAC,KAAKmF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,sCAAf,SACE,eAAC,KAAKwG,KAAN,UACIwoD,EAAYhqD,YACZ,sBAAKyB,wBAAyB,CAAEC,OAAQsoD,EAAYhqD,eACpDhF,EAAE,+CAIV,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACEiF,cAAe,CAAEsX,QAAS,IAE1BnX,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cAEbmkD,EAAmB,CACrBltC,QAASlX,EAAOkX,QAChB8oB,oBAAqBhoC,EAAMkD,OAAOyH,IAIpCwhD,EAAY,CAAE9mD,UAAW,CACvB6C,MAAOkkD,GAEN/jD,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBvI,QAAQC,IAAI,6CACZ,IAAM01D,EAAUptD,EAAKqtD,mBAAmBttC,aAAarU,GACrD1K,EAAQX,KAAK,0BAA4B+sD,MACxCxjD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA3BxB,SA+BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAACukD,GAAD,CACErlD,aAAcA,EACdC,OAAQA,EACRa,OAAQA,uBChIfwkD,GAA+B90D,YAAH,uiBCuB1BwE,qBAAkByD,aAVjC,YAAwD,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAEzC,OACE,eAAC,GAAD,CAAU8F,MAAOhG,EAAE,mBAAnB,SACKE,QCmCMH,qBAAkByD,aApCjC,YAA0C,IAAtBxD,EAAqB,EAArBA,EAElB,GAFuC,EAAlB6D,MAAkB,EAAXC,QAEKnB,YAAS0tD,KAAlCztD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,UACG5C,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,UACG7C,EAAE,2CAIP,IAAMiG,EAAgBnD,EAAKoD,0BAE3B,OACE,eAAC,GAAD,CAAcF,MAAOhG,EAAE,mBAAvB,SACE,eAAC,KAAKI,IAAN,CAAUgG,OAAK,EAACC,MAAI,EAApB,SACIJ,EAAcxE,MAAM0E,OAAUF,EAAcxE,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACtD,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAAC,KAAD,CAAMP,MAAOpE,EAAKoE,MAAlB,SACE,eAAC,KAAKQ,KAAN,UACE,sBAAKC,wBAAyB,CAAEC,OAAO9E,EAAK+E,gBAHZqD,mBAOnC,WCzBEjK,I,GAAAA,iBAAkByD,aAbjC,YAAmE,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAEpD,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACTwtD,iBAAiB,UAFnB,SAIGttD,Q,SCZMowD,GAAkB/0D,YAAH,2iBC8GbwE,I,GAAAA,iBAAkByD,aA7FjC,YAA8D,IAA1BxD,EAAyB,EAAzBA,EAAGwO,EAAsB,EAAtBA,GAAsB,IAAlBq9C,gBAAkB,SAC3D,EAAiClpD,YAAS2tD,GAAiB,CACzDpnD,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OACT5C,EAAE,6BAEN,GAAI6C,EAAO,OACP7C,EAAE,6CAGNzF,QAAQC,IAAIsI,GACZ,IAAM8f,EAAQ9f,EAAK+f,aACnBtoB,QAAQC,IAAIooB,GACZ,IAGIw3B,EACA5G,EAJE+c,EAAa3tC,EAAM1f,MAAMzB,MAC/BlH,QAAQC,IAAI+1D,GAKZh2D,QAAQC,IAAI,iBArB+C,qBAsB9C+1D,GAtB8C,IAsB3D,2BAAyB,CACvB,IAAI3uD,EADmB,QACPA,KAChBrH,QAAQC,IAAIoH,GACRA,EAAKilC,eACPuT,EAAYx4C,EAAK4uD,eACjBhd,EAAiB5xC,EAAKilC,aAAar4B,KA3BoB,8BAoC3D,OALAjU,QAAQC,IAAI,wBACZD,QAAQC,IAAI4/C,GACZ7/C,QAAQC,IAAIg5C,GAIV,gBAAC,KAAD,CAAMxtC,MAAOhG,EAAE,uCAAf,UACE,sBAAKG,UAAU,mBAAf,SACE,gBAAC,KAAD,CAAOiG,OAAO,EAAd,UACE,eAAC,KAAML,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,wBAGxB,gBAAC,KAAMwG,KAAP,WACG+pD,EAAWjqD,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACd,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACGjE,EAAKmS,YADR,IACqB,wBACnB,uBAAM5T,UAAU,aAAhB,SACGyB,EAAKoD,iBAGV,eAAC,KAAMa,IAAP,UAAYjE,EAAKyR,iBAPHrJ,mBAUlB,gBAAC,KAAM5J,IAAP,CAAWD,UAAU,OAArB,UACE,eAAC,KAAM0F,IAAP,UACG7F,EAAE,mBAEL,eAAC,KAAM6F,IAAP,UACK+c,EAAMvP,0BAMnB,gBAAC,KAAK7M,KAAN,WACIoc,EAAMG,QACN,wBAAM5iB,UAAU,aAAhB,UACE,gCAAI,eAAC,KAAD,CAAM0E,KAAK,mBAAf,IAAoC7E,EAAE,0CAErC4iB,EAAMG,QACP,wBAAM,2BAEN,GAEFywB,GAAkB4G,EAClB,eAAC,GAAD,CACE5G,eAAgBA,EAChBhmC,KAAM4sC,EACNyR,SAAUA,IAEV,aCtGCI,GAAsB1wD,YAAH,+LCqHjBwE,qBAAkByD,aAhGjC,YAAqD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAE1BqoD,GAF4C,EAAXpoD,QACnBmF,qBAAWrI,IACasrD,yBACtCE,EAAYhgC,iBAAO,MACnBigC,EAAiB,kCAAM,eAAC,KAAD,CAAMxnD,KAAK,gBAAjB,IAAmC7E,EAAE,oCAArC,IAA0E,eAAC,KAAD,CAAM6E,KAAK,qBAC5G,EAA+B8H,mBAAS0/C,GAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KACMvmD,EAAQhG,EAAE,mBACVwO,EAAK3K,EAAMkD,OAAOyH,GACxB,EAAiC7L,YAAS2tD,GAAiB,CACzDpnD,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAA4ByI,YAAY0gD,IAAjCO,EAAP,oBAEA,GAAI5pD,EAAS,OACX,eAAC,GAAD,CAAyBoD,MAAOA,EAAhC,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAyBmD,MAAOA,EAAhC,SACGhG,EAAE,kCAIPzF,QAAQC,IAAIsI,GACZ,IAAM8f,EAAQ9f,EAAK+f,aACnBtoB,QAAQC,IAAIooB,GACZ,IAqBI6tC,EACAC,EAtBEH,EAAa3tC,EAAM1f,MAAMzB,MA6C/B,OA5CAlH,QAAQC,IAAI+1D,GAsBRrE,GACFuE,EAAczwD,EAAE,wDAChB0wD,EAAa,yBACXvwD,UAAU,4BACVgW,IAAKi2C,EACL3jD,QAzBJ,WACE2jD,EAAU7+B,QAAQm/B,aAAa,WAAY,YAC3CH,EAAWvsD,EAAE,sCAIbwsD,EAAkB,CAAEtjD,UAAW,CAAEsF,GAAIA,KAAQpC,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACnDvI,QAAQC,IAAI,WAAYsI,GACxB,IAAM6pD,EAAc7pD,EAAK6tD,8BAA8BC,wBAAwBjE,YAC/EllD,OAAO6K,SAASlO,KAAOuoD,KACtBjgD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,OAQzC,SAKVypD,MAGHmE,EAAczwD,EAAE,wDAChB0wD,EAAa,eAAC,IAAD,CAAMrtD,GAAG,IAAT,SACX,gBAAC,KAAD,CACEyD,OAAK,EACLnC,MAAM,UAFR,UAIG3E,EAAE,oCAJL,IAI0C,eAAC,KAAD,CAAM6E,KAAK,wBAOvD,eAAC,GAAD,CAAyBmB,MAAOA,EAAhC,SACI,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAD,CAAM1I,MAAOhG,EAAE,wCAAf,UACE,gBAAC,KAAKwG,KAAN,WACE,qBAAIrG,UAAW,OAAf,SAAwBH,EAAE,oDACzBA,EAAE,+DAFL,IAEqE,wBAAM,wBACxEywD,KAEH,eAAC,KAAKjoD,OAAN,UACGkoD,SAIP,eAAC,KAAK7qD,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,GAAD,CAA0BF,GAAIA,eC5F3BzO,qBAAkByD,aAbjC,YAAoE,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAErD,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACTwtD,iBAAiB,WAFnB,SAIGttD,QCuGQH,I,GAAAA,iBAAkByD,aAlGjC,YAAsD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAE3BwoD,GAF6C,EAAXvoD,QACtBsoB,iBAAO,MACF,kCAAM,eAAC,KAAD,CAAMvnB,KAAK,gBAAjB,IAAmC7E,EAAE,oCAArC,IAA0E,eAAC,KAAD,CAAM6E,KAAK,sBAC5G,EAA+B8H,mBAAS0/C,GAAxC,mBACMrmD,GADN,UACchG,EAAE,oBACVwO,EAAK3K,EAAMkD,OAAOyH,GACxB,EAAiC7L,YAAS2tD,GAAiB,CACzDpnD,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAA0BoD,MAAOA,EAAjC,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAA0BmD,MAAOA,EAAjC,SACGhG,EAAE,kCAIPzF,QAAQC,IAAIsI,GACZ,IAAM8f,EAAQ9f,EAAK+f,aACnBtoB,QAAQC,IAAIooB,GACZ,IAAM2tC,EAAa3tC,EAAM1f,MAAMzB,MAI/B,GAHAlH,QAAQC,IAAI+1D,IAGP3tC,EACH,OACE,eAAC,GAAD,CAA0B5c,MAAOA,EAAjC,SACGhG,EAAE,4CAKT,IAAI6wD,EAAY,GACZC,EAAc,GACdC,EAAc,GACdlF,GAAW,EA4Bf,MAzBoB,aAAhBjpC,EAAM7Z,QAER8nD,EAAY7wD,EAAE,4CAEd8wD,EAAc9wD,EAAE,+CAChB6rD,GAAW,EAGPjpC,EAAMiG,QACRkoC,EAAc/wD,EAAE,kDAKlB6wD,EAAY7wD,EAAE,yCAEd8wD,EAAc9wD,EAAE,4CAGZ4iB,EAAMiG,QACRkoC,EAAc/wD,EAAE,8CAMlB,eAAC,GAAD,CAA0BgG,MAAOA,EAAjC,SACI,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,gBAAC,KAAD,CAAM1I,MAAOhG,EAAE,gCAAf,UACE,gBAAC,KAAKwG,KAAN,WACE,qBAAIrG,UAAW,OAAf,SAAwB0wD,IACvBE,EAFH,IAEgB,wBACbD,KAEH,eAAC,KAAKtoD,OAAN,UACE,eAAC,IAAD,CAAMnF,GAAG,iBAAT,SACE,gBAAC,KAAD,CACEyD,OAAK,EACLnC,MAAM,UAFR,UAIG3E,EAAE,4BAJL,IAIkC,eAAC,KAAD,CAAM6E,KAAK,8BAMrD,eAAC,KAAKgB,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAAGmI,GAAI,EAArC,SACE,eAAC,GAAD,CAA0BF,GAAIA,EAAIq9C,SAAUA,eC3G3CtlB,GAA4BhrC,YAAH,8kCC4BvBwE,qBAAkByD,aAjBjC,YAAkF,IAAhDxD,EAA+C,EAA/CA,EAAmBE,GAA4B,EAA5C2D,MAA4C,EAArCC,QAAqC,EAA5B5D,UAA4B,IAAlBqqD,mBAAkB,MAAN,GAAM,EAC/E,OACI,eAAC,GAAD,UACE,sBAAKpqD,UAAU,eAAf,SACE,gBAAC,KAAD,WACE,eAAC,KAAK4F,OAAN,CAAaC,MAAOhG,EAAE,sBAAuBsgB,SAAWiqC,EAAxD,SACE,sBAAKpqD,UAAU,sBAAf,SACE,eAAC,GAAD,QAGFD,aC0JCH,qBAAkByD,aAvJjC,YAAkD,IAArBxD,EAAoB,EAApBA,EACrB4gB,GADyC,EAAjB/c,MAAiB,EAAVC,QACjBmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAI/B,EAAmEle,YAASinD,IAA3Dc,EAAjB,EAAQ9nD,QAA6B+nD,EAArC,EAA8B9nD,MAAwB+nD,EAAtD,EAAgD9nD,KAChD,EAA4CH,YAAS4jC,GAA2B,CAC9EskB,KAAMH,GAAeC,IAAcC,EACnC1hD,UAAW,CACT2J,QAAS+3C,GAAYA,EAAStpD,KAAOspD,EAAStpD,KAAKshC,UAAY,QAH3DhgC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAAMiB,EAA9B,EAA8BA,UAS9B,GAAInB,GAAW8nD,IAAgB5nD,EAAM,OACnC,eAAC,GAAD,UACG9C,EAAE,+BAGP,GAAI6C,GAAS8nD,EAAW,OACtB,eAAC,GAAD,UACG3qD,EAAE,6CAIPzF,QAAQC,IAAI,kBACZD,QAAQC,IAAIsI,GACZvI,QAAQC,IAAIowD,GACZ,IAAMtpD,EAAOspD,EAAStpD,KAChBylC,EAA0BjkC,EAAKikC,wBAGrC,OAAKA,EAAwBtlC,MAAM0E,OAoBjC,eAAC,GAAD,CAAwBokD,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,GAAD,CAAa4B,UAAWnI,EAAE,8BAExB6H,SAAUk/B,EAAwBl/B,SAClCG,WAAY,WACVjE,EAAU,CACRmF,UAAW,CACTM,MAAOu9B,EAAwBl/B,SAAS4B,WAE1CC,YAAa,SAACC,EAAD,GAA0C,IAAvBC,EAAsB,EAAtBA,gBACxBC,EAAWD,EAAgBonD,uBAAuBvvD,MAClDoG,EAAW+B,EAAgBonD,uBAAuBnpD,SAExD,OAAOgC,EAAS1D,OACZ,CAGE6qD,uBAAwB,CACtBlnD,WAAYH,EAAeqnD,uBAAuBlnD,WAClDrI,MAAM,GAAD,oBAAOkI,EAAeqnD,uBAAuBvvD,OAA7C,aAAuDoI,IAC5DhC,aAGJ8B,MAtBZ,SA0BE,gBAAC,KAAD,WACE,eAAC,KAAM5D,OAAP,UACE,gBAAC,KAAM3F,IAAP,WACE,eAAC,KAAM2J,UAAP,UAAkB/J,EAAE,kBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,mBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,sBACpB,eAAC,KAAM+J,UAAP,UAAkB/J,EAAE,4BACpB,eAAC,KAAM+J,UAAP,MALcC,kBAQlB,eAAC,KAAMxD,KAAP,UACIugC,EAAwBtlC,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OAClC,gBAAC,KAAMxB,IAAP,WACE,gBAAC,KAAMyF,IAAP,WACIoE,KAAOrI,EAAK4L,MAAMrD,OAAO2C,GAD7B,IAC2C,wBACzC,uBAAM3M,UAAU,aAAhB,SACG8J,KAAOrI,EAAK4L,KAAO,IAAM5L,EAAKilC,aAAaC,WAAW38B,OAAOw8B,QAGlE,eAAC,KAAM9gC,IAAP,UACIjE,EAAKilC,aAAa3R,sBAAsBrwB,OAE5C,gBAAC,KAAMgB,IAAP,WACIjE,EAAKilC,aAAatL,yBAAyBlC,qBAAqBx0B,KADpE,IAC2E,wBACzE,uBAAM1E,UAAU,aAAhB,SACIyB,EAAKilC,aAAatL,yBAAyB12B,UAGjD,eAAC,KAAMgB,IAAP,UACE,eAAC,GAAD,CAAoBkD,OAAQnH,EAAKolC,kBAEnC,eAAC,KAAMnhC,IAAP,UAE2B,aAAtBjE,EAAKolC,eAAiCplC,EAAK+pD,qBAC5C,iCACE,eAAC,IAAD,CAAMtoD,GAAE,qCAAgCzB,EAAKilC,aAAar4B,GAAlD,YAAwD5M,EAAK4L,KAA7D,YAAqE5L,EAAK4M,IAAlF,SACE,eAAC,KAAD,CACErO,UAAU,kBACVwE,MAAM,UAFR,SAIG3E,EAAE,sBAGP,eAAC,IAAD,CAAMqD,GAAE,mCAA8BzB,EAAKilC,aAAar4B,GAAhD,YAAsD5M,EAAK4L,MAAnE,SACE,eAAC,KAAD,CACErN,UAAU,aACVwE,MAAM,YACNrB,KAAK,OAHP,SAKGtD,EAAE,uBAGA,OAxCCgK,gCA3D5B,eAAC,GAAD,CAAwBugD,YAAajpD,EAAKub,SAA1C,SACE,eAAC,KAAKzc,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,GAAd,SACE,eAAC,KAAD,CAAM4B,UAAWnI,EAAE,8BAAnB,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,iDC5CJD,qBAAkByD,aAXjC,YAA+D,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAEhD,OACE,gBAAC,GAAD,CAAU8F,MAAOhG,EAAE,cAAnB,UACE,8BAAKA,EAAE,4BACJE,SCGMH,I,GAAAA,iBAAkByD,aAdjC,YAA6D,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAE9C,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACT+Z,WAAW,oBACXyzC,iBAAiB,QAHnB,SAKGttD,QCbMsxB,GAAsBj2B,YAAH,6qBCqDjBwE,I,GAAAA,iBAAkByD,aAlCjC,YAA4E,IAAxCxD,EAAuC,EAAvCA,EAAGsiC,EAAoC,EAApCA,UAAW2uB,EAAyB,EAAzBA,QAAyB,IAAhBvwD,cAAgB,SAGzE,OACE,gBAAC,KAAD,CAAaA,OAAQA,EAArB,UACE,eAAC,KAAYyuD,SAAb,UACG7sB,EAAUz9B,OAEb,eAAC,KAAYwqD,MAAb,UACG/sB,EAAUxf,eAEb,gBAAC,KAAYysC,cAAb,WACE,gBAAC,KAAYC,cAAb,WACE,6BAAKltB,EAAUvQ,UAAa/xB,EAAE,qBAAuBsiC,EAAUtQ,UADjE,IACiF,IACvD,GAArBsQ,EAAUtQ,SAAkBsQ,EAAUvQ,UAAa/xB,EAAE,mBAAoBA,EAAE,oBAEhF,gBAAC,KAAYwvD,cAAb,WACGxvD,EAAE,qBADL,IAC6B,IAC3B,6BAAIsiC,EAAUrQ,WAFhB,IAE+B,IAF/B,IAEqCqQ,EAAUpQ,0BAG/C++B,EACA,eAAC,IAAD,CAAM5tD,GAAI4tD,EAAV,SACE,gBAAC,KAAYxB,OAAb,WACGzvD,EAAE,2BADL,IACiC,eAAC,KAAD,CAAM6E,KAAK,uBAG5C,UC/CGqsD,GAAqC31D,YAAH,igCCkFhCwE,qBAAkByD,aA7DjC,YAAiD,IAAtBxD,EAAqB,EAArBA,EACnBgG,GADwC,EAAlBnC,MAAkB,EAAXC,QACrB9D,EAAE,oBAChB,EAAiC2C,YAASuuD,IAAlCtuD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAqBoD,MAAOA,EAA5B,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAqBmD,MAAOA,EAA5B,SACGhG,EAAE,oCAIPzF,QAAQC,IAAIsI,GACZ,IAAM4nB,EAAc5nB,EAAK+uB,wBAGzB,OAFAt3B,QAAQC,IAAIkwB,GAGV,eAAC,GAAD,CAAqB1kB,MAAOA,EAA5B,SACI,eAAC,KAAK5F,IAAN,UACGsqB,EAAYjpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACrB,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAAC,GAAD,CACE+7B,UAAW1gC,EACXqvD,QAAS,mBAAqBrvD,EAAK4M,kBCwHpCzO,qBAAkByD,aA3IjC,YAA+C,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC3B8c,EAAc3X,qBAAWrI,IACzBkM,EAAa8T,EAAY9T,WACzB65B,EAAa/lB,EAAYC,iBAEzB7a,EAAQhG,EAAE,mBACVwO,EAAK3K,EAAMkD,OAAOyH,GAClBglC,EAAiB3vC,EAAMkD,OAAO+vC,SAC9BsD,EAAYv2C,EAAMkD,OAAOyG,KAE/B,EAAiC7K,YAAS6uB,GAAqB,CAC7DtoB,UAAW,CAAEsF,GAAIA,KADX5L,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAIxB,EAAsEH,YAASizC,GAAiB,CAC9F1sC,UAAW,CAAEsqC,eAAgBA,EAAgBhmC,KAAM4sC,GACnDyQ,MAAQrX,IAAmB4G,IAFZ+W,EAAjB,EAAQvuD,QAA8BwuD,EAAtC,EAA+BvuD,MAAyBwuD,EAAxD,EAAkDvuD,KAKlD,EAAiDyI,YAAY0iD,IAA7D,mBAAO+B,EAAP,KAGA,GAHA,KAAsBltD,KAGlBF,EAAS,OACX,eAAC,GAAD,CAAmBoD,MAAOA,EAA1B,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAmBmD,MAAOA,EAA1B,SACGhG,EAAE,kCAIPzF,QAAQC,IAAIsI,GACZ,IAAMw/B,EAAYx/B,EAAK2nB,sBACjBnpB,EAAOwB,EAAKxB,KAMlB,OALA/G,QAAQC,IAAI8nC,GAEZ/nC,QAAQC,IAAI,cACZD,QAAQC,IAAI62D,GAER/vD,EAAKg7C,sBAAwBha,EAAUxQ,UAEvC,eAAC,GAAD,CAAmB9rB,MAAOA,EAA1B,SACE,eAAC,KAAD,CAAMA,MAAOhG,EAAE,sCAAf,SACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,wDAQX,eAAC,GAAD,CAAmBgG,MAAOA,EAA1B,SACE,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAAC,GAAD,CAA4B+7B,UAAWA,EAAW5hC,QAAQ,MAE5D,gBAAC,KAAKmF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,WACI8qD,GAAcF,GAAiBC,EAc7B,GAbF,eAAC,KAAD,CAAMprD,MAAOhG,EAAE,yCAAf,SACE,gBAAC,KAAKwG,KAAN,WACGxG,EAAE,yCADL,IAC+C,wBAAM,wBACnD,+BACGiK,KAAOmwC,GAAWjwC,OAAO2C,GAD5B,IAC0C,IACvC7C,KAAOkO,GAAsBk5C,EAAUnG,cAAcpkB,YAAY38B,OAAOw8B,GAF3E,IAEyF,MACtF18B,KAAOkO,GAAsBk5C,EAAUnG,cAAczX,UAAUtpC,OAAOw8B,GAHzE,IAGsF,2BAErF0qB,EAAUnG,cAAch2B,sBAAsBrwB,KAAO,IAAM7E,EAAE,cAAgB,IAC5EqxD,EAAUnG,cAAc3vB,yBAAyBlC,qBAAqBx0B,UAM9E,eAAC,KAAD,CAAMmB,MAAOhG,EAAE,yCAAf,SACE,eAAC,KAAKwG,KAAN,UACE,sBAAKC,wBAAyB,CAACC,OAAO47B,EAAUt9B,sBAItD,eAAC,KAAKa,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACEiF,cAAe,CAAEsX,QAAS,IAE1BnX,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cAEbmkD,EAAmB,CACrBltC,QAASlX,EAAOkX,QAChB0H,sBAAuB5mB,EAAMkD,OAAOyH,IAGlCglC,GAAkB4G,IACpB6V,EAAiBO,eAAiBpW,EAClC6V,EAAiBppB,aAAe2M,GAGlCwc,EAAY,CAAE9mD,UAAW,CACvB6C,MAAOkkD,GAEN/jD,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBvI,QAAQC,IAAI,6CACZ,IAAM01D,EAAUptD,EAAKqtD,mBAAmBttC,aAAarU,GACrD1K,EAAQX,KAAK,0BAA4B+sD,MACxCxjD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA/BxB,SAmCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAACukD,GAAD,CACErlD,aAAcA,EACdC,OAAQA,EACRa,OAAQA,sBCjIb9L,qBAAkByD,aAXjC,YAAiE,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAElD,OACE,gBAAC,GAAD,CAAU8F,MAAOhG,EAAE,cAAnB,UACE,8BAAKA,EAAE,8BACJE,SC6CMH,I,GAAAA,iBAAkByD,aA7CjC,YAA0G,IAAtExD,EAAqE,EAArEA,EAAG0/B,EAAkE,EAAlEA,aAAcuxB,EAAoD,EAApDA,QAAoD,IAA3CvwD,cAA2C,aAA7B4wD,2BAA6B,SAGvG,OACE,gBAAC,KAAD,CAAa5wD,OAAQA,EAArB,UACE,eAAC,KAAYyuD,SAAb,UACGzvB,EAAa76B,OAEhB,eAAC,KAAYwqD,MAAb,UACG3vB,EAAahC,oBAEhB,gBAAC,KAAY6xB,cAAb,WACE,gBAAC,KAAYC,cAAb,WAEGxvD,EAAE,mBAFL,MAE4BA,EAAE,iBAF9B,IAEkD,KAChD,6BAAK0/B,EAAa3N,UAAa/xB,EAAE,qBAAuB0/B,EAAa1N,aAEvE,gBAAC,KAAYw9B,cAAb,WACGxvD,EAAE,wBADL,IACgC,KAC9B,+BAAI0/B,EAAa7B,YAAjB,IAA4D,GAA5B6B,EAAa7B,YAAoB79B,EAAE,iBAAmBA,EAAE,wBAExFsxD,EACA,gBAAC,KAAY9B,cAAb,WACGxvD,EAAE,uBADL,KAC8B,6BAAI0/B,EAAa6xB,4BAE/C,GACAD,GAAuB5xB,EAAa8xB,uBAAyB,EAC7D,gBAAC,KAAYhC,cAAb,WACGxvD,EAAE,4BADL,KACmC,6BAAI0/B,EAAa+xB,mCAEpD,MAEFR,EACA,eAAC,IAAD,CAAM5tD,GAAI4tD,EAAV,SACE,gBAAC,KAAYxB,OAAb,WACGzvD,EAAE,6BADL,IACmC,eAAC,KAAD,CAAM6E,KAAK,uBAG9C,UCvDG6sD,GAAuCn2D,YAAH,ggCCwDlCwE,qBAAkByD,aAtCjC,YAAmD,IAAtBxD,EAAqB,EAArBA,EACrBgG,GAD0C,EAAlBnC,MAAkB,EAAXC,QACvB9D,EAAE,oBAChB,EAAiC2C,YAAS+uD,IAAlC9uD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAuBoD,MAAOA,EAA9B,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAuBmD,MAAOA,EAA9B,SACGhG,EAAE,sCAIPzF,QAAQC,IAAIsI,GACZ,IAAM6nB,EAAgB7nB,EAAK06B,0BAG3B,OAFAjjC,QAAQC,IAAImwB,GAGV,eAAC,GAAD,CAAuB3kB,MAAOA,EAA9B,SACI,eAAC,KAAK5F,IAAN,UACGuqB,EAAclpB,MAAM6E,KAAI,gBAAG1E,EAAH,EAAGA,KAAH,OACvB,eAAC,KAAKiE,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAACorD,GAAD,CACEjyB,aAAc99B,EACdqvD,QAAS,sBAAwBrvD,EAAK4M,kBCqBvCzO,qBAAkByD,aAlDjC,YAAgF,IAAlDxD,EAAiD,EAAjDA,EAAU8D,GAAuC,EAA9CD,MAA8C,EAAvCC,SAAS8tD,EAA8B,EAA9BA,2BAC/C,EAAiDrmD,YAAY0iD,IAA7D,mBAAO+B,EAAP,KAEA,OAFA,KAAsBltD,KAGpB,eAAC,KAAD,CAAMkD,MAAOhG,EAAE,uBAAf,SACE,eAAC,KAAKwG,KAAN,UACE,eAAC,KAAD,CACEiF,cAAe,CAAEsX,QAAS,IAE1BnX,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cAEbmkD,EAAmB,CACrBltC,QAASlX,EAAOkX,QAChB6H,yBAA0BgnC,GAG5B5B,EAAY,CAAE9mD,UAAW,CACvB6C,MAAOkkD,GAEN/jD,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBvI,QAAQC,IAAI,6CACZ,IAAM01D,EAAUptD,EAAKqtD,mBAAmBttC,aAAarU,GACrD1K,EAAQX,KAAK,0BAA4B+sD,MACxCxjD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OA1BxB,SA8BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAzB,OACC,eAACukD,GAAD,CACErlD,aAAcA,EACdC,OAAQA,EACRa,OAAQA,eCnBP9L,qBAAkByD,aAxBjC,YAAiE,IAAtBxD,EAAqB,EAArBA,EAEzC,OAF8D,EAAlB6D,MAAkB,EAAXC,QAGjD,gBAAC,KAAD,CAAMkC,MAAOhG,EAAE,2CAAf,UACE,eAAC,KAAKwG,KAAN,UACGxG,EAAE,yDAEL,eAAC,KAAKwI,OAAN,UACA,eAAC,IAAD,CAAMnF,GAAG,6BAAT,SACE,gBAAC,KAAD,CACEyD,OAAK,EACLnC,MAAM,UACNxE,UAAU,aACVqE,KAAK,SAJP,UAMGxE,EAAE,qCANL,IAM2C,eAAC,KAAD,CAAM6E,KAAK,gCCsB/C9E,iBAAkByD,aAlCP,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAG+K,EAAN,EAAMA,aAAsBc,GAA5B,EAAoBb,OAApB,EAA4Ba,QAAQqI,EAApC,EAAoCA,gBAAiB8C,EAArD,EAAqDA,cAArD,OACtB,gBAAC,KAAD,WACE,gBAAC,KAAK/L,MAAN,CAAYC,MAAOlL,EAAE,8BAArB,UACE,eAAC,GAAD,CACE+M,SAAUlB,EAAOyY,UACjBtX,SAAU,SAACQ,GAAD,OAAUwJ,EAAc,YAAaxJ,IAC/CP,OAAQ,kBAAMiH,EAAgB,aAAa,MAE7C,eAAC,KAAD,CAAcrP,KAAK,YAAYuG,UAAU,OAAOjL,UAAU,wBAE5D,yBAAOA,UAAU,aAAjB,UACGH,EAAE,oCADL,IAC0C,wBACxC,gCACE,gCAAKA,EAAE,0BAAP,IAAmC,IACjC,oBAAG0F,OAAO,SAAStB,KAAMwrD,GAAgBC,4BAAzC,SAAuE7vD,EAAE,qCAE3E,gCAAKA,EAAE,4BAAP,IAAqC,IACnC,oBAAG0F,OAAO,SAAStB,KAAMwrD,GAAgBE,sBAAzC,SAAiE9vD,EAAE,qCAIzE,gBAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,UACNxE,UAAU,aACVqE,KAAK,SACL6G,SAAUN,IAAiBc,EAAOyY,UALpC,UAOKzY,EAAOyY,UAAyDtkB,EAAE,mBAA9CA,EAAE,wCACxB,IARH,IAQQ,eAAC,KAAD,CAAM6E,KAAK,4BC3CZgtD,GAA8BtnD,OAAaC,MAAM,CAC1D8Z,UAAW/Z,OACRg9B,WACA78B,SAAS1K,YAAE,yBCkEHD,qBAAkByD,aApDjC,YAA0F,IAA3DxD,EAA0D,EAA1DA,EAAU8D,GAAgD,EAAvDD,MAAuD,EAAhDC,SAAS8+B,EAAuC,EAAvCA,UAAWhY,EAA4B,EAA5BA,yBAC3D,EAA6Brf,YAAY6gC,IAAlCnO,EAAP,oBAEA,OACE,eAAC,KAAD,CAAMj4B,MAAOhG,EAAE,uBAAf,SACE,gBAAC,KAAKwG,KAAN,WAEE,sBAAKC,wBAAyB,CAAEC,OAAQkkB,EAAyBmS,sBACjE,eAAC,KAAD,CACEtxB,cAAe,CAAEsX,QAAS,IAC1BpX,iBAAkBkmD,GAClBjmD,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBmyB,EAAmB,CAAE/0B,UAAW,CAC9B6C,MAAO,CACL6e,yBAA0BA,EAAyBpc,GACnDqE,QAAS+vB,EACTte,UAAWxM,GAAejM,EAAOyY,aAGlCpY,eAAgB,KAGlBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GACxBvI,QAAQC,IAAI,4DACZ,IAAMs3D,EAAwBhvD,EAAK6pC,0BAA0BE,oBAAoBr+B,GACjF1K,EAAQX,KAAR,oDAA0D2uD,OACzDplD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAxBxB,SA4BG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC+6C,GAAD,CACEhnD,aAAcA,EACdC,OAAQA,EACRa,OAAQA,EACRqI,gBAAiBA,EACjB8C,cAAeA,gBCxCdjX,I,GAAAA,iBAAkByD,aAdjC,YAAgE,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAEjD,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACT+Z,WAAW,sBACXyzC,iBAAiB,QAHnB,SAKGttD,QCbMi9B,GAAyB5hC,YAAH,gkCCwGpBwE,qBAAkByD,aA3EjC,YAAkD,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MACvB+c,GADyC,EAAX9c,QAChBmF,qBAAWrI,KAIzBoF,GAHa4a,EAAY9T,WACZ8T,EAAYC,iBAEjB7gB,EAAE,oBACVwO,EAAK3K,EAAMkD,OAAOyH,GAMxB,EAAiC7L,YAASw6B,GAAwB,CAChEj0B,UAAW,CAAEsF,GAAIA,GACjBgE,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAsBoD,MAAOA,EAA7B,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAsBmD,MAAOA,EAA7B,SACGhG,EAAE,qCAIPzF,QAAQC,IAAIsI,GACZ,IAKIkvD,EALEtyB,EAAe58B,EAAK8nB,yBACpB/X,EAAU/P,EAAKxB,KAuBrB,OAtBA/G,QAAQC,IAAIklC,GACZnlC,QAAQC,IAAIqY,GAK2B,gBAAnC6sB,EAAauyB,kBAEVp/C,EAAQq/C,mBAOXF,EAAe,eAACG,GAAD,CAAyBvvB,UAAW/vB,EAAQ+vB,UAAWhY,yBAA0B8U,KALhG9gC,aAAaC,QAAQC,EAAKZ,+BAA1B,6BAAgFsQ,IAEhFwjD,EAAe,eAAC,GAAD,KAMjBA,EAAe,eAAC,GAAD,CAAoBJ,2BAA4BpjD,IAK/D,eAAC,GAAD,CAAsBxI,MAAOA,EAA7B,SACE,gBAAC,KAAK5F,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAACorD,GAAD,CAA6BjyB,aAAcA,EAAch/B,QAAQ,EAAM4wD,qBAAqB,MAE9F,eAAC,KAAKzrD,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACE,eAAC,KAAD,CAAMP,MAAOhG,EAAE,4CAAf,SACE,eAAC,KAAKwG,KAAN,UACE,sBAAKC,wBAAyB,CAACC,OAAOg5B,EAAa16B,qBAIzD,eAAC,KAAKa,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,EAA9B,SACGyrD,aC9EIjyD,I,GAAAA,iBAAkByD,aAbjC,YAAoF,IAAhCxD,EAA+B,EAA/BA,EAAmBE,GAAY,EAA5B2D,MAA4B,EAArBC,QAAqB,EAAZ5D,UAErE,OACE,eAAC,GAAD,CACE8F,MAAOhG,EAAE,cACTwtD,iBAAiB,WAFnB,SAIGttD,QCbMisC,GAAiC5wC,YAAH,iXCiG5BwE,qBAAkByD,aAvEjC,YAAsE,IAAtBxD,EAAqB,EAArBA,EAAG6D,EAAkB,EAAlBA,MAC3C+c,GAD6D,EAAX9c,QACpCmF,qBAAWrI,KACzBkM,EAAa8T,EAAY9T,WAGzB9G,GAFa4a,EAAYC,iBAEjB7gB,EAAE,oBACVwO,EAAK3K,EAAMkD,OAAOyH,GAMxB,EAAiC7L,YAASwpC,GAAgC,CACxEjjC,UAAW,CAAEsF,GAAIA,GACjBgE,YAAa,iBAFP5P,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAKxB,GAAIF,EAAS,OACX,eAAC,GAAD,CAA0CoD,MAAOA,EAAjD,SACGhG,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAA0CmD,MAAOA,EAAjD,SACGhG,EAAE,qCAIPzF,QAAQC,IAAIsI,GACZ,IAAM48B,EAAe58B,EAAK+pC,oBACpBh6B,EAAU/P,EAAKxB,KAIrB,OAHA/G,QAAQC,IAAIklC,GACZnlC,QAAQC,IAAIqY,GAGV,eAAC,GAAD,CAA0C7M,MAAOA,EAAjD,SACE,eAAC,KAAK5F,IAAN,UACE,eAAC,KAAKyF,IAAN,CAAUskD,GAAI,GAAIC,GAAI,GAAI7jD,GAAI,GAAImI,GAAI,GAAtC,SACE,eAAC,KAAD,CAAM1I,MAAOhG,EAAE,qDAAf,SACE,gBAAC,KAAKwG,KAAN,WACGxG,EAAE,6DADL,IACmE,wBAEjE,6BAAI0/B,EAAa9U,yBAAyB/lB,OAH5C,IAGuD7E,EAAE,uDAHzD,IAGkH,IAChH,6BAAIiK,KAAOy1B,EAAapb,WAAWna,OAAO2C,KAJ5C,IAKE,wBAAM,wBACN,6BAAI9M,EAAE,gEACN,gBAAC,KAAKiL,MAAN,WACE,eAAC,IAAD,CAAM5H,GAAG,gBAAgBlD,UAAU,OAAnC,SACE,gBAAC,KAAKmO,UAAN,WACGtO,EAAE,2DADL,IACiE,eAAC,KAAD,CAAM6E,KAAK,uBAG9E,eAAC,IAAD,CAAMxB,GAAG,gBAAgBlD,UAAU,OAAnC,SACE,gBAAC,KAAKmO,UAAN,WACGtO,EAAE,wDADL,IAC8D,eAAC,KAAD,CAAM6E,KAAK,uBAG3E,eAAC,IAAD,CAAMxB,GAAG,IAAT,SACE,gBAAC,KAAKiL,UAAN,WACGtO,EAAE,kEADL,IACwE,eAAC,KAAD,CAAM6E,KAAK,yCCpFxFutD,GAAyB7nD,OAAaC,MAAM,CACrD6nD,gBAAiB9nD,OACdG,SAAS1K,YAAE,uBACdsyD,YAAa/nD,OACVG,SAAS1K,YAAE,uBACX4K,IAAI,EAAG5K,YAAE,kBACZuyD,aAAchoD,OACXioD,MAAM,CAACjoD,KAAQ,eAAgB,MAAOvK,YAAE,+BCsDhCD,iBAAkByD,aA1CF,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,EAAqCa,OAArC,EAA6CkO,WAA7C,EAAyD7F,gBAAzD,EAA0E8C,cAA1E,OAC7B,eAAC,KAAD,CAAQ7W,UAAU,OAAOgL,aAAa,MAAtC,SACE,gBAAC,KAAK3E,KAAN,CAAWrG,UAAU,MAArB,UACE,eAAC,KAAKoI,MAAN,UACGvI,EAAE,gCAEL,gBAAC,KAAKiL,MAAN,CAAYC,MAAOlL,EAAE,yCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,WACJK,KAAK,kBACL1E,UAAY6K,EAAOqnD,gBAAmB,0BAA4B,eAClElnD,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,kBAAkBuG,UAAU,OAAOjL,UAAU,wBAElE,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,qCAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,WACJK,KAAK,cACL1E,UAAY6K,EAAOsnD,YAAe,0BAA4B,eAC9DnnD,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,cAAcuG,UAAU,OAAOjL,UAAU,wBAE9D,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,4CAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,WACJK,KAAK,eACL1E,UAAY6K,EAAOunD,aAAgB,0BAA4B,eAC/DpnD,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,eAAeuG,UAAU,OAAOjL,UAAU,wBAE/D,eAAC,KAAKqI,OAAN,UACE,eAAC,KAAD,CACE1B,OAAK,EACLlE,QAASmI,EACTpG,MAAM,UACNH,KAAK,SACL6G,SAAUN,EALZ,SAOG/K,EAAE,2CClBED,sBAxBf,YAAsD,EAA1BC,EAA2B,IAAD,IAAvBC,eAAuB,MAAf,GAAe,EAAXC,EAAW,EAAXA,SAEzC,OACE,eAAC,KAAD,UACE,sBAAKC,UAAU,cAAf,SACE,eAAC,KAAD,UACE,eAAC,KAAKC,IAAN,UACE,uBAAKD,UAAU,wBAAf,UACE,sBAAKA,UAAU,mBAAf,SACKF,EAAW,sBAAKI,IAAKJ,EAASE,UAAU,MAAMG,IAAI,SAAY,KAElEJ,EACD,eAAC,IAAD,CACEK,UAAW,IACXC,WAAYC,oBCiGbV,qBAAkByD,aAjGjC,YAAkD,IAArBxD,EAAoB,EAApBA,EACrB4Y,GADyC,EAAjB/U,MAAiB,EAAVC,QAChBmF,qBAAW/H,KAChC3G,QAAQC,IAAIoe,GAGZ,MAAmCrN,YAAY5P,GAA/C,mBAAO82D,EAAP,KAEA,OAFA,KAAyB3vD,KAGvB,gBAAC4vD,GAAD,CAAsBzyD,QAAS2Y,EAAa0S,aAA5C,UAEE,eAAC,KAAD,CACE7f,cAAe,CACb4mD,gBAAiB,GACjBC,YAAa,GACbC,aAAc,IAEhB5mD,iBAAkBymD,GAClBxmD,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACjBvR,QAAQC,IAAI,kBACZD,QAAQC,IAAIqR,GAEZ,IAAI8mD,EAAO,CACT5mD,MAAO,CACLsmD,gBAAiBxmD,EAAOwmD,gBACxBC,YAAazmD,EAAOymD,cAIxBG,EAAe,CAAEvpD,UAAWypD,IACzBvmD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAI,WAAYsI,GACxBiT,YAAW,kBAAM1J,IAAMC,QAAStM,EAAE,gCAAkC,CAClEuM,SAAUF,IAAMG,SAASC,iBACvB,KACJhF,OAAO3D,QAAQwzB,UACd5qB,OAAM,SAAC7J,GAON,IAAIk4C,EADN,GALAxgD,QAAQC,IAAI,iBACZD,QAAQC,IAAIqI,EAAM+vD,UAClBr4D,QAAQC,IAAIqI,EAAMm6C,eAClBziD,QAAQC,IAAIma,OAAOC,KAAK/R,IAEpBA,EAAMm6C,cAER,IAAKjC,EAAI,EAAGA,EAAIl4C,EAAMm6C,cAAc72C,OAAQ40C,IAC1C1uC,IAAMxJ,MAAMA,EAAMm6C,cAAc,GAAGj6B,QAC9B8lB,QAAQ,KAAM,IACdA,QAAQ,KAAM,IACdA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAAK,CACvBt8B,SAAUF,IAAMG,SAASC,oBAK7BJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACtD0J,SAAUF,IAAMG,SAASC,eAI7BlS,QAAQC,IAAI,uCAAwCqI,GACpDiJ,GAAc,OAlDxB,SAsDG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQa,EAAzB,EAAyBA,OAAQqI,EAAjC,EAAiCA,gBAAiB8C,EAAlD,EAAkDA,cAAlD,OACC,eAAC,GAAD,CACEjM,aAAcA,EACd8nD,aAAc77C,EACd87C,iBAAkB5+C,EAClBlJ,OAAQA,EACRa,OAAQA,OAId,8BAAK7L,EAAE,uCACP,gBAAC,KAAD,WACE,eAAC,KAAKuE,KAAN,UAAYvE,EAAE,kDACd,eAAC,KAAKuE,KAAN,UAAYvE,EAAE,iDACd,eAAC,KAAKuE,KAAN,UAAYvE,EAAE,iDACd,eAAC,KAAKuE,KAAN,UAAYvE,EAAE,6DAGhB,eAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,OACN8D,QAAS,SAACuI,GACRA,EAAM+hD,iBACNtrD,OAAO3D,QAAQwzB,QALnB,SAQGt3B,EAAE,2BC5CID,iBAAkByD,aArDX,SAAC,GAAD,IAAGxD,EAAH,EAAGA,EAAY+K,GAAf,EAAMjH,QAAN,EAAeiH,cAAcC,EAA7B,EAA6BA,OAA7B,OACpB,eAAC,KAAD,CAAQ7K,UAAU,OAAOgL,aAAa,MAAtC,SACE,gBAAC,KAAK3E,KAAN,CAAWrG,UAAU,MAArB,UACE,eAAC,KAAKoI,MAAN,UACGvI,EAAE,sBAEL,gBAAC,KAAKiL,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,OACJK,KAAK,QACL4R,YAAazW,EAAE,gCACfG,UAAY6K,EAAO+N,MAAS,0BAA4B,eACxD5N,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,QAAQuG,UAAU,OAAOjL,UAAU,wBAExD,gBAAC,KAAK8K,MAAN,CAAYC,MAAOlL,EAAE,oBAArB,UACE,eAAC,KAAD,CAAOwE,KAAK,WACJK,KAAK,WACL4R,YAAazW,EAAE,mCACfG,UAAY6K,EAAOgoD,SAAY,0BAA4B,eAC3D7nD,aAAa,QACrB,eAAC,KAAD,CAActG,KAAK,WAAWuG,UAAU,OAAOjL,UAAU,wBAE3D,eAAC,KAAKqI,OAAN,UACE,gBAAC,KAAKpI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CACEO,OAAK,EACLlE,QAASmI,EACTpG,MAAM,UACNH,KAAK,SACL6G,SAAUN,EALZ,SAOG/K,EAAE,qBAGP,eAAC,KAAK6F,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,CACE5B,MAAM,OACNyiB,cAAc,IACdhjB,KAAoC,cAA7BqD,OAAO6K,SAASs0C,UAAyD,cAA7Bn/C,OAAO6K,SAASs0C,SACjE,mDACA,8BALJ,SAQG5mD,EAAE,kDCgCFD,qBAAkByD,aA3EjC,YAAyC,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SACtB8U,EAAe3P,qBAAW/H,IAChC3G,QAAQC,IAAIoe,GAGZ,MAAwBrN,YAAYjQ,GAA5B23D,EAAR,oBACA,EAA2B1nD,YAAY/P,GAEvC,OAFA,oBAGE,gBAACk3D,GAAD,CAAsBzyD,QAAS2Y,EAAa0S,aAA5C,UACE,sBAAKnrB,UAAU,8BAAf,SACGyY,EAAeA,EAAa/T,KAAO,KAEtC,eAAC,KAAD,CACE4G,cAAe,CACbsN,MAAO,GACPi6C,SAAU,IAGZpnD,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACb6mD,EAAO,CACTO,SAAUrnD,EAAOkN,MACjBi6C,SAAUnnD,EAAOmnD,UAGnBC,EAAY,CAAE/pD,UAAWypD,EACvBzmD,eAAgB,KAMjBE,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACLvI,QAAQC,IAAI,WAAYsI,GAExB,IAAMqwD,EAAOv0D,aAAagS,QAAQ9R,EAAK5C,kBAAoB,gBAC3DuC,EAAOC,MAAMoE,EAAKswD,WAClBr9C,YAAW,kBAAMjS,EAAQX,KAAKgwD,KAAO,QACtCzmD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAO7C,EAAE,8BAAkC6C,EAAO,CACpD0J,SAAUF,IAAMG,SAASC,eAE7BlS,QAAQC,IAAIqI,GACZiJ,GAAc,OA9BtB,SAkCG,gBAAGf,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAjB,OACC,eAAC,GAAD,CACED,aAAcA,EACdC,OAAQA,OAId,uBAAK7K,UAAU,cAAf,UACE,8BAAKH,EAAE,kCACNA,EAAE,oCAFL,IAE0C,wBACvCA,EAAE,gDAHL,IAGsD,2BAEtD,gBAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,OACNyiB,cAAc,IACdhjB,KAAoC,cAA7BqD,OAAO6K,SAASs0C,UAAyD,wBAA7Bn/C,OAAO6K,SAASs0C,SACjE,2CACA,sBANJ,UASG5mD,EAAE,gCATL,IASsC,eAAC,KAAD,CAAM6E,KAAK,4BC3BxC9E,qBAAkByD,aAtCjC,YAAiD,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SAIpC,EAA4B6I,oBAAS,GAArC,mBAAOjM,EAAP,KAAe2yD,EAAf,KAEA,OACE,gBAACX,GAAD,WAEE,eAAC,KAAD,UACE,gBAAC,KAAKlsD,KAAN,WACE,eAAC,KAAK+B,MAAN,UACGvI,EAAE,+BAEJA,EAAE,+BAJL,IAIqC,wBAAM,wBACzC,gBAAC,KAAD,CACE8G,OAAK,EACLlE,QAASlC,EACT2K,SAAU3K,EACViE,MAAM,UACNH,KAAK,SACLiE,QAAS,WACP4qD,GAAU,GACVt9C,YAAW,kBAAMjS,EAAQX,KAAK,iBAAgB,MARlD,UAWGnD,EAAE,mCAXL,IAWyC,eAAC,KAAD,CAAM6E,KAAK,0BAIxD,eAAC,IAAD,CACItE,UAAW,IACXC,WAAYC,aCiCPV,qBAAkByD,aA9DjC,YAA0C,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SAC7B,EAAyByH,YAAY9P,GAA7B63D,EAAR,oBACA,EAAgC/nD,YAAY7P,GAApC63D,EAAR,oBACA,EAA4B5mD,oBAAS,GAArC,mBAAOjM,EAAP,KAAe2yD,EAAf,KAEMz6C,EAAe3P,qBAAW/H,IAGhC,OAFA3G,QAAQC,IAAIoe,GAGV,gBAAC85C,GAAD,CAAsBzyD,QAAS2Y,EAAa0S,aAA5C,UAEE,eAAC,KAAD,UACE,gBAAC,KAAK9kB,KAAN,WACE,eAAC,KAAK+B,MAAN,UACGvI,EAAE,uBAEJA,EAAE,oCAJL,IAI0C,wBAAM,wBAC9C,eAAC,KAAD,CACE8G,OAAK,EACLlE,QAASlC,EACT2K,SAAU3K,EACViE,MAAM,UACNH,KAAK,SACLiE,QAAS,WACP4qD,GAAU,GACV50D,EAAOgB,SACP6zD,IAAelnD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACrBvI,QAAQC,IAAI,WAAYsI,MAEzB4J,OAAM,SAAC7J,GACNtI,QAAQC,IAAIqI,MAEd0wD,IAAsBnnD,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KAC5BvI,QAAQC,IAAI,WAAYsI,MAEzB4J,OAAM,SAAC7J,GACNtI,QAAQC,IAAIqI,MAEdkT,YAAW,kBAAM1J,IAAMmnD,KAAKxzD,EAAE,uBAAwB,CACpDuM,SAAUF,IAAMG,SAASC,iBACvB,KACJsJ,YAAW,kBAAMjS,EAAQX,KAAK,OAAM,MAxBxC,SA2BGnD,EAAE,yBAIT,eAAC,KAAD,CACE8G,OAAK,EACLnC,MAAM,OACN8D,QAAS,SAACuI,GACRA,EAAM+hD,iBACNtrD,OAAO3D,QAAQwzB,QALnB,SAQGt3B,EAAE,2BCxBID,qBAAkByD,aAnCjC,YAAkD,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SAIrC,EAA4B6I,oBAAS,GAArC,mBAAOjM,EAAP,KAAe2yD,EAAf,KAEA,OACE,gBAACX,GAAD,WAEE,eAAC,KAAD,UACE,gBAAC,KAAKlsD,KAAN,WACE,eAAC,KAAK+B,MAAN,UACGvI,EAAE,gCAEJA,EAAE,gCAJL,IAIsC,wBAAM,wBAC1C,gBAAC,KAAD,CACE8G,OAAK,EACLlE,QAASlC,EACT2K,SAAU3K,EACViE,MAAM,UACNH,KAAK,SACLiE,QAAS,WACP4qD,GAAU,GACVt9C,YAAW,kBAAMjS,EAAQX,KAAK,iBAAgB,MARlD,UAWGnD,EAAE,oCAXL,IAW0C,eAAC,KAAD,CAAM6E,KAAK,0BAIzD,eAAC,IAAD,CAAgBtE,UAAW,aCyDlBR,qBAAkByD,aAzFjC,YAAuC,IAArBxD,EAAoB,EAApBA,EAAU8D,GAAU,EAAjBD,MAAiB,EAAVC,SACpB8U,EAAe3P,qBAAW/H,IAChC3G,QAAQC,IAAIoe,GACZ,MAAiCjW,YAASinD,IAAlChnD,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAExB,GAAIF,EAAS,OACX,eAAC,GAAD,CAAsB3C,QAAS2Y,EAAa0S,aAA5C,SACGtrB,EAAE,+BAGP,GAAI6C,EAAO,OACT,eAAC,GAAD,CAAsB5C,QAAS2Y,EAAa0S,aAA5C,SACGtrB,EAAE,gDAIP,IAAMsB,EAAOwB,EAAKxB,KAQlB,OAPA/G,QAAQC,IAAI8G,GAEPA,EAAKkgC,UAAalgC,EAAKigC,SAC1Bz9B,EAAQX,KAAK,KAKb,gBAAC,GAAD,CAAsBlD,QAAS2Y,EAAa0S,aAA5C,UACE,uBAAKnrB,UAAU,mBAAf,UACE,gCAAKH,EAAE,mBAAP,IAA4BsB,EAAKwD,aACjC,8BAAK9E,EAAE,yCAET,gBAAC,KAAKI,IAAN,WACE,eAAC,KAAKyF,IAAN,CAAUU,GAAI,EAAGktD,SAAU,EAA3B,SACE,eAAC,KAAD,UACE,gBAAC,KAAKjtD,KAAN,WACE,8BAAKxG,EAAE,gBACNA,EAAE,iCAFL,IAEuC,wBAAM,wBAC3C,eAAC,IAAD,CAAMqD,GAAG,IAAT,SACE,gBAAC,KAAD,CACEyD,OAAK,EACLrC,SAAO,EACPE,MAAM,UAHR,UAKG3E,EAAE,wBALL,IAK8B,eAAC,KAAD,CAAM6E,KAAK,8BAMjD,eAAC,KAAKgB,IAAN,CAAUU,GAAI,EAAd,SACE,eAAC,KAAD,UACE,gBAAC,KAAKC,KAAN,WACE,8BAAKxG,EAAE,qBACNA,EAAE,mCAFL,IAEyC,wBAAM,wBAC7C,eAAC,IAAD,CAAMqD,GAAG,WAAT,SACE,gBAAC,KAAD,CACEyD,OAAK,EACLrC,SAAO,EACPE,MAAM,UAHR,UAKG3E,EAAE,2BALL,IAKiC,eAAC,KAAD,CAAM6E,KAAK,8BAMpD,eAAC,GAAD,CAAsBtC,SAAS,cAAcD,WAAW,OAAxD,SACE,eAAC,KAAKuD,IAAN,CAAUU,GAAI,EAAGktD,SAAU,EAA3B,SACE,eAAC,KAAD,UACE,gBAAC,KAAKjtD,KAAN,WACE,8BAAKxG,EAAE,4BACNA,EAAE,uCAFL,IAE6C,wBAAM,wBACjD,eAAC,IAAD,CAAMqD,GAAG,eAAT,SACE,gBAAC,KAAD,CACEyD,OAAK,EACLrC,SAAO,EACPE,MAAM,UAHR,UAKG3E,EAAE,+BALL,IAKqC,eAAC,KAAD,CAAM6E,KAAK,0CCzFnD6uD,OAJf,SAAkB5rD,GAChB,OAAO,eAAC,KAAD,K,iBCuST,SAAS6rD,KACPp5D,QAAQC,IAAI,qDACZ,IACM24D,EADa1rD,OAAO6K,SAASlO,KACXlC,MAAM,KAAK,GACnC3H,QAAQC,IAAI24D,GACZv0D,aAAaC,QAAQC,EAAK5C,gBAAiBi3D,GAI7C,IAAMS,GAAe,SAAC,GAAuC,IAA1BlrD,EAAyB,EAApC0C,UAAyByoD,EAAW,kBAC1D,EAAyBtoD,YAAY/P,GAA9BgY,EAAP,oBACIsgD,GAAmB,EACvBv5D,QAAQC,IAAIq5D,EAAKE,MAEjB,IAAMC,EAAmB,eAAC,IAAD,2BAAWH,GAAX,IAAiBI,OAAQ,SAACnsD,GAAD,OAAa,eAACY,EAAD,eAAeZ,QACxEosD,EAAgB,eAAC,IAAD,2BAAWL,GAAX,IAAiBI,OAAQ,SAACnsD,GAAD,OAAa,eAAC,IAAD,CAAUzE,GAAG,6BACnE8wD,EAAiB,eAAC,IAAD,2BAAWN,GAAX,IAAiBI,OAAQ,SAACnsD,GAAD,OAAa,eAAC,IAAD,CAAUzE,GAAG,8BAGpE+wD,EAAWx1D,aAAagS,QAAQ9R,EAAKhD,gBAK3C,GAJK,IAAI8H,KAAS,KAASwwD,IACzBN,GAAmB,IAGjBA,EAqCF,OAAOE,EApCP,IAAMnK,EAAkBjrD,aAAagS,QAAQ9R,EAAK7C,wBAClD,OAAuB,MAAnB4tD,GACFtvD,QAAQC,IAAI,2BACZm5D,KAEOO,GACG,IAAItwD,KAAS,KAASimD,GAChCtvD,QAAQC,IAAI,yBACZD,QAAQC,IAAI,IAAIoJ,KAAS,KACzBrJ,QAAQC,IAAIqvD,GACZ8J,KAEOQ,IAGP55D,QAAQC,IAAI,sBACZD,QAAQC,IAAI,IAAIoJ,KAAS,KACzBrJ,QAAQC,IAAIqvD,GAGZr2C,EAAe,CAAEtK,UAAW,CAAE/J,aADTP,aAAagS,QAAQ9R,EAAK9C,uBACcoQ,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KAGnE,OAFAvI,QAAQC,IAAI,mBAAoBsI,GAChCrE,EAAOa,gBAAgBwD,EAAK3D,cACrB60D,KACNtnD,OAAM,SAAC7J,GACRwJ,IAAMxJ,MAAM,+BAAuCA,EAAO,CACxD0J,SAAUF,IAAMG,SAASC,eAE3BlS,QAAQC,IAAI,0CAA2CqI,GACvD8wD,KACAp5D,QAAQC,IAAI,0BACZiN,OAAO6K,SAASlO,KAAO,gBACvBqD,OAAO6K,SAAS+hD,YAMf,OAkWMt0D,sBA9Vf,YAAyB,IAANC,EAAK,EAALA,EACjB,EAAwF2C,YAAS/C,GAAhF00D,EAAjB,EAAQ1xD,QAAoC2xD,EAA5C,EAAqC1xD,MAA+B2xD,EAApE,EAA8D1xD,KAC9D,EAA2FH,YAAS7C,GAAwB,CAC1HoJ,UAAW,CAACsF,GAAI,kCADDimD,EAAjB,EAAQ7xD,QAAqC8xD,EAA7C,EAAsC7xD,MAAgC8xD,EAAtE,EAAgE7xD,KAMhE,GAAIwxD,GAAsBG,EACxB,OACE,eAAC,GAAD,IAGJ,GAAIF,GAAoBG,EACtB,MAAgC,yBAA5BH,EAAiBxxC,QACZ,GAGL,iCACI/iB,EAAE,0BADN,IACkC,wBAC9Bu0D,EAAiBxxC,QAFrB,IAE+B,wBAC3B2xC,EAAkB3xC,WAQ5B,IAAInC,EAAc4zC,EAAgB5zC,YAClCrmB,QAAQC,IAAIomB,GACZ,IAAIhI,EAAe+7C,EAAiB/7C,aAGpC,OAFAre,QAAQC,IAAIoe,GAGV,eAAC7X,GAAD,CAAqBqC,MAAOwd,EAA5B,SACE,eAACzf,GAAD,CAAsBiC,MAAOwV,EAA7B,SACE,eAAC,IAAD,UACE,gBAAC,IAAD,WAEE,eAAC,GAAD,CAAcg8C,OAAK,EAACb,KAAK,WAAW3oD,UAAWypD,KAG/C,eAAC,GAAD,CAAcD,OAAK,EAACb,KAAK,cAAc3oD,UAAW0pD,KAClD,eAAC,GAAD,CAAcF,OAAK,EAACb,KAAK,4CACL3oD,UAAW2pD,KAC/B,eAAC,GAAD,CAAcH,OAAK,EAACb,KAAK,gDACL3oD,UAAW4pD,KAC/B,eAAC,GAAD,CAAcJ,OAAK,EAACb,KAAK,uDACL3oD,UAAW6pD,KAC/B,eAAC,GAAD,CAAcL,OAAK,EAACb,KAAK,2DACL3oD,UAAW8pD,KAC/B,eAAC,GAAD,CAAcN,OAAK,EAACb,KAAK,6CACL3oD,UAAW+pD,KAC/B,eAAC,GAAD,CAAcP,OAAK,EAACb,KAAK,iDACL3oD,UAAWgqD,KAC/B,eAAC,GAAD,CAAcR,OAAK,EAACb,KAAK,uDACL3oD,UAAWiqD,KAC/B,eAAC,GAAD,CAAcT,OAAK,EAACb,KAAK,2DACL3oD,UAAWkqD,KAI/B,eAAC,GAAD,CAAcV,OAAK,EAACb,KAAK,WAAW3oD,UAAWmD,KAC/C,eAAC,GAAD,CAAcqmD,OAAK,EAACb,KAAK,uBAAuB3oD,UAAWmqD,KAC3D,eAAC,GAAD,CAAcX,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWoqD,KAC/D,eAAC,GAAD,CAAcZ,OAAK,EAACb,KAAK,gCAAgC3oD,UAAWqqD,KACpE,eAAC,GAAD,CAAcb,OAAK,EAACb,KAAK,oBAAoB3oD,UAAWsqD,KACxD,eAAC,GAAD,CAAcd,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWuqD,KACjE,eAAC,GAAD,CAAcf,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWwqD,KAC/D,eAAC,GAAD,CAAchB,OAAK,EAACb,KAAK,+BAA+B3oD,UAAWyqD,KACnE,eAAC,GAAD,CAAcjB,OAAK,EAACb,KAAK,oCAAoC3oD,UAAW0qD,KACxE,eAAC,GAAD,CAAclB,OAAK,EAACb,KAAK,oCAAoC3oD,UAAW2qD,KACxE,eAAC,GAAD,CAAcnB,OAAK,EAACb,KAAK,4CAA4C3oD,UAAW4qD,KAChF,eAAC,GAAD,CAAcpB,OAAK,EAACb,KAAK,iDAAiD3oD,UAAW6qD,KACrF,eAAC,GAAD,CAAcrB,OAAK,EAACb,KAAK,sBAAsB3oD,UAAW8qD,KAC1D,eAAC,GAAD,CAActB,OAAK,EAACb,KAAK,0BAA0B3oD,UAAW+qD,KAC9D,eAAC,GAAD,CAAcvB,OAAK,EAACb,KAAK,+BAA+B3oD,UAAWgrD,KACnE,eAAC,GAAD,CAAcxB,OAAK,EAACb,KAAK,kBAAkB3oD,UAAWirD,KACtD,eAAC,GAAD,CAAczB,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWkrD,KAC/D,eAAC,GAAD,CAAc1B,OAAK,EAACb,KAAK,sCAAsC3oD,UAAWmrD,KAC1E,eAAC,GAAD,CAAc3B,OAAK,EAACb,KAAK,+CAA+C3oD,UAAWorD,KACnF,eAAC,GAAD,CAAc5B,OAAK,EAACb,KAAK,+CAA+C3oD,UAAWqrD,KACnF,eAAC,GAAD,CAAc7B,OAAK,EAACb,KAAK,yDAAyD3oD,UAAWsrD,KAC7F,eAAC,GAAD,CAAc9B,OAAK,EAACb,KAAK,+CAA+C3oD,UAAWurD,KACnF,eAAC,GAAD,CAAc/B,OAAK,EAACb,KAAK,kCAAkC3oD,UAAWwrD,KACtE,eAAC,GAAD,CAAchC,OAAK,EAACb,KAAK,sCAAsC3oD,UAAWyrD,KAC1E,eAAC,GAAD,CAAcjC,OAAK,EAACb,KAAK,2CAA2C3oD,UAAW0rD,KAC/E,eAAC,GAAD,CAAclC,OAAK,EAACb,KAAK,0BAA0B3oD,UAAW2rD,KAC9D,eAAC,GAAD,CAAcnC,OAAK,EAACb,KAAK,8BAA8B3oD,UAAW4rD,KAClE,eAAC,GAAD,CAAcpC,OAAK,EAACb,KAAK,mCAAmC3oD,UAAW6rD,KACvE,eAAC,GAAD,CAAcrC,OAAK,EAACb,KAAK,oBAAoB3oD,UAAW8rD,KACxD,eAAC,GAAD,CAActC,OAAK,EAACb,KAAK,wBAAwB3oD,UAAW+rD,KAC5D,eAAC,GAAD,CAAcvC,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWgsD,KACjE,eAAC,GAAD,CAAcxC,OAAK,EAACb,KAAK,4BAA4B3oD,UAAWisD,KAGhE,eAAC,GAAD,CAAczC,OAAK,EAACb,KAAK,gBAAgB3oD,UAAWyf,KACpD,eAAC,GAAD,CAAc+pC,OAAK,EAACb,KAAK,yBAAyB3oD,UAAWksD,KAC7D,eAAC,GAAD,CAAc1C,OAAK,EAACb,KAAK,kCAAkC3oD,UAAWmsD,KACtE,eAAC,GAAD,CAAc3C,OAAK,EAACb,KAAK,gDAAgD3oD,UAAWosD,KACpF,eAAC,GAAD,CAAc5C,OAAK,EAACb,KAAK,2CAA2C3oD,UAAWqsD,KAC/E,eAAC,GAAD,CAAc7C,OAAK,EAACb,KAAK,0DAA0D3oD,UAAWssD,KAC9F,eAAC,GAAD,CAAc9C,OAAK,EAACb,KAAK,8DAA8D3oD,UAAWusD,KAClG,eAAC,GAAD,CAAc/C,OAAK,EAACb,KAAK,mEAAmE3oD,UAAWwsD,KACvG,eAAC,GAAD,CAAchD,OAAK,EAACb,KAAK,8BAA8B3oD,UAAWysD,KAClE,eAAC,GAAD,CAAcjD,OAAK,EAACb,KAAK,kCAAkC3oD,UAAW0sD,KACtE,eAAC,GAAD,CAAclD,OAAK,EAACb,KAAK,uCAAuC3oD,UAAW2sD,KAC3E,eAAC,GAAD,CAAcnD,OAAK,EAACb,KAAK,uCAAuC3oD,UAAW4sD,KAC3E,eAAC,GAAD,CAAcpD,OAAK,EAACb,KAAK,2CAA2C3oD,UAAW6sD,KAC/E,eAAC,GAAD,CAAcrD,OAAK,EAACb,KAAK,gDAAgD3oD,UAAWklB,KACpF,eAAC,GAAD,CAAcskC,OAAK,EAACb,KAAK,iEAAiE3oD,UAAW8sD,KACrG,eAAC,GAAD,CAActD,OAAK,EAACb,KAAK,sEAAsE3oD,UAAW+sD,KAC1G,eAAC,GAAD,CAAcvD,OAAK,EAACb,KAAK,0EAA0E3oD,UAAWmkB,KAC9G,eAAC,GAAD,CAAcqlC,OAAK,EAACb,KAAK,wFACnB3oD,UAAWgtD,KACjB,eAAC,GAAD,CAAcxD,OAAK,EAACb,KAAK,4FACnB3oD,UAAWitD,KACjB,eAAC,GAAD,CAAczD,OAAK,EAACb,KAAK,iGACnB3oD,UAAW+lB,KACjB,eAAC,GAAD,CAAcyjC,OAAK,EAACb,KAAK,4BAA4B3oD,UAAWktD,KAChE,eAAC,GAAD,CAAc1D,OAAK,EAACb,KAAK,gCAAgC3oD,UAAWmtD,KACpE,eAAC,GAAD,CAAc3D,OAAK,EAACb,KAAK,qCAAqC3oD,UAAWotD,KACzE,eAAC,GAAD,CAAc5D,OAAK,EAACb,KAAK,mCAAmC3oD,UAAWqtD,KACvE,eAAC,GAAD,CAAc7D,OAAK,EAACb,KAAK,uCAAuC3oD,UAAWstD,KAC3E,eAAC,GAAD,CAAc9D,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWutD,KAChF,eAAC,GAAD,CAAc/D,OAAK,EAACb,KAAK,mDAAmD3oD,UAAWwtD,KACvF,eAAC,GAAD,CAAchE,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWytD,KAC/D,eAAC,GAAD,CAAcjE,OAAK,EAACb,KAAK,+BAA+B3oD,UAAW0tD,KACnE,eAAC,GAAD,CAAclE,OAAK,EAACb,KAAK,oCAAoC3oD,UAAW2tD,KACxE,eAAC,GAAD,CAAcnE,OAAK,EAACb,KAAK,0CAA0C3oD,UAAW4tD,KAC9E,eAAC,GAAD,CAAcpE,OAAK,EAACb,KAAK,4BAA4B3oD,UAAW6tD,KAChE,eAAC,GAAD,CAAcrE,OAAK,EAACb,KAAK,gCAAgC3oD,UAAW8tD,KACpE,eAAC,GAAD,CAActE,OAAK,EAACb,KAAK,qCAAqC3oD,UAAW+tD,KACzE,eAAC,GAAD,CAAcvE,OAAK,EAACb,KAAK,yBAAyB3oD,UAAWguD,KAC7D,eAAC,GAAD,CAAcxE,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWiuD,KACjE,eAAC,GAAD,CAAczE,OAAK,EAACb,KAAK,kCAAkC3oD,UAAWkuD,KACtE,eAAC,GAAD,CAAc1E,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWmuD,KAChF,eAAC,GAAD,CAAc3E,OAAK,EAACb,KAAK,0BAA0B3oD,UAAWouD,KAC9D,eAAC,GAAD,CAAc5E,OAAK,EAACb,KAAK,8BAA8B3oD,UAAWquD,KAClE,eAAC,GAAD,CAAc7E,OAAK,EAACb,KAAK,mCAAmC3oD,UAAWsuD,KACvE,eAAC,GAAD,CAAc9E,OAAK,EAACb,KAAK,uBAAuB3oD,UAAWuuD,KAC3D,eAAC,GAAD,CAAc/E,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWwuD,KAC/D,eAAC,GAAD,CAAchF,OAAK,EAACb,KAAK,gCAAgC3oD,UAAWyuD,KACpE,eAAC,GAAD,CAAcjF,OAAK,EAACb,KAAK,0BAA0B3oD,UAAW0uD,KAC9D,eAAC,GAAD,CAAclF,OAAK,EAACb,KAAK,8BAA8B3oD,UAAW2uD,KAClE,eAAC,GAAD,CAAcnF,OAAK,EAACb,KAAK,mCAAmC3oD,UAAW4uD,KACvE,eAAC,GAAD,CAAcpF,OAAK,EAACb,KAAK,6CAA6C3oD,UAAW6uD,KACjF,eAAC,GAAD,CAAcrF,OAAK,EAACb,KAAK,iDAAiD3oD,UAAW8uD,KACrF,eAAC,GAAD,CAActF,OAAK,EAACb,KAAK,sDAAsD3oD,UAAW+uD,KAC1F,eAAC,GAAD,CAAcvF,OAAK,EAACb,KAAK,4BAA4B3oD,UAAWgvD,KAChE,eAAC,GAAD,CAAcxF,OAAK,EAACb,KAAK,gCAAgC3oD,UAAWyxB,KACpE,eAAC,GAAD,CAAc+3B,OAAK,EAACb,KAAK,qCAAqC3oD,UAAW6xB,KACzE,eAAC,GAAD,CAAc23B,OAAK,EAACb,KAAK,8BAA8B3oD,UAAWivD,KAClE,eAAC,GAAD,CAAczF,OAAK,EAACb,KAAK,kCAAkC3oD,UAAWkvD,KACtE,eAAC,GAAD,CAAc1F,OAAK,EAACb,KAAK,uCAAuC3oD,UAAWmvD,KAC3E,eAAC,GAAD,CAAc3F,OAAK,EAACb,KAAK,qCAAqC3oD,UAAWovD,KACzE,eAAC,GAAD,CAAc5F,OAAK,EAACb,KAAK,yCAAyC3oD,UAAWqvD,KAC7E,eAAC,GAAD,CAAc7F,OAAK,EAACb,KAAK,8CAA8C3oD,UAAWsvD,KAClF,eAAC,GAAD,CAAc9F,OAAK,EAACb,KAAK,4DAA4D3oD,UAAWuvD,KAChG,eAAC,GAAD,CAAc/F,OAAK,EAACb,KAAK,sDAAsD3oD,UAAWwvD,KAC1F,eAAC,GAAD,CAAchG,OAAK,EAACb,KAAK,0DAA0D3oD,UAAWyvD,KAC9F,eAAC,GAAD,CAAcjG,OAAK,EAACb,KAAK,+DAA+D3oD,UAAW60B,KAGnG,eAAC,GAAD,CAAc20B,OAAK,EAACb,KAAK,aAAa3oD,UAAWg1B,KACjD,eAAC,GAAD,CAAcw0B,OAAK,EAACb,KAAK,sBAAsB3oD,UAAW0vD,KAC1D,eAAC,GAAD,CAAclG,OAAK,EAACb,KAAK,0BAA0B3oD,UAAW2vD,KAC9D,eAAC,GAAD,CAAcnG,OAAK,EAACb,KAAK,0CAA0C3oD,UAAW4vD,KAC9E,eAAC,GAAD,CAAcpG,OAAK,EAACb,KAAK,gDAAgD3oD,UAAW6vD,KACpF,eAAC,GAAD,CAAcrG,OAAK,EAACb,KAAK,qDAAqD3oD,UAAW8vD,KACzF,eAAC,GAAD,CAActG,OAAK,EAACb,KAAK,gDAAgD3oD,UAAW+vD,KACpF,eAAC,GAAD,CAAcvG,OAAK,EAACb,KAAK,8EACX3oD,UAAWgwD,KACzB,eAAC,GAAD,CAAcxG,OAAK,EAACb,KAAK,mFACX3oD,UAAWiwD,KACzB,eAAC,GAAD,CAAczG,OAAK,EAACb,KAAK,0CAA0C3oD,UAAWkwD,KAC9E,eAAC,GAAD,CAAc1G,OAAK,EAACb,KAAK,8CAA8C3oD,UAAWmwD,KAClF,eAAC,GAAD,CAAc3G,OAAK,EAACb,KAAK,kDAAkD3oD,UAAWowD,KACtF,eAAC,GAAD,CAAc5G,OAAK,EAACb,KAAK,uDAAuD3oD,UAAWqwD,KAC3F,eAAC,GAAD,CAAc7G,OAAK,EAACb,KAAK,0DAA0D3oD,UAAWswD,KAC9F,eAAC,GAAD,CAAc9G,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWuwD,KAChF,eAAC,GAAD,CAAc/G,OAAK,EAACb,KAAK,gDAAgD3oD,UAAWwwD,KACpF,eAAC,GAAD,CAAchH,OAAK,EAACb,KAAK,qDAAqD3oD,UAAWywD,KACzF,eAAC,GAAD,CAAcjH,OAAK,EAACb,KAAK,uEACX3oD,UAAW0wD,KACzB,eAAC,GAAD,CAAclH,OAAK,EAACb,KAAK,2EACX3oD,UAAW2wD,KACzB,eAAC,GAAD,CAAcnH,OAAK,EAACb,KAAK,gFACX3oD,UAAW4wD,KACzB,eAAC,GAAD,CAAcpH,OAAK,EAACb,KAAK,2CAA2C3oD,UAAW6wD,KAC/E,eAAC,GAAD,CAAcrH,OAAK,EAACb,KAAK,+CAA+C3oD,UAAW8wD,KACnF,eAAC,GAAD,CAActH,OAAK,EAACb,KAAK,8CAA8C3oD,UAAW+wD,KAClF,eAAC,GAAD,CAAcvH,OAAK,EAACb,KAAK,kDAAkD3oD,UAAW6+B,KACtF,eAAC,GAAD,CAAc2qB,OAAK,EAACb,KAAK,uDAAuD3oD,UAAW++B,KAC3F,eAAC,GAAD,CAAcyqB,OAAK,EAACb,KAAK,wCAAwC3oD,UAAWgxD,KAC5E,eAAC,GAAD,CAAcxH,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWixD,KAChF,eAAC,GAAD,CAAczH,OAAK,EAACb,KAAK,iDAAiD3oD,UAAWkxD,KACrF,eAAC,GAAD,CAAc1H,OAAK,EAACb,KAAK,yCAAyC3oD,UAAWmxD,KAC7E,eAAC,GAAD,CAAc3H,OAAK,EAACb,KAAK,gDAAgD3oD,UAAWoxD,KACpF,eAAC,GAAD,CAAc5H,OAAK,EAACb,KAAK,gDAAgD3oD,UAAWqxD,KACpF,eAAC,GAAD,CAAc7H,OAAK,EAACb,KAAK,oDAAoD3oD,UAAWsxD,KACxF,eAAC,GAAD,CAAc9H,OAAK,EAACb,KAAK,sEACX3oD,UAAWuxD,KACzB,eAAC,GAAD,CAAc/H,OAAK,EAACb,KAAK,iFACX3oD,UAAWwxD,KACzB,eAAC,GAAD,CAAchI,OAAK,EAACb,KAAK,qFACX3oD,UAAWyxD,KACzB,eAAC,GAAD,CAAcjI,OAAK,EAACb,KAAK,0FACX3oD,UAAW0xD,KACzB,eAAC,GAAD,CAAclI,OAAK,EAACb,KAAK,6EAA6E3oD,UAAW2xD,KACjH,eAAC,GAAD,CAAcnI,OAAK,EAACb,KAAK,iFAAiF3oD,UAAW4xD,KACrH,eAAC,GAAD,CAAcpI,OAAK,EAACb,KAAK,sFACX3oD,UAAW6xD,KACzB,eAAC,GAAD,CAAcrI,OAAK,EAACb,KAAK,8EAA8E3oD,UAAW8xD,KAClH,eAAC,GAAD,CAActI,OAAK,EAACb,KAAK,kFAAkF3oD,UAAW+xD,KACtH,eAAC,GAAD,CAAcvI,OAAK,EAACb,KAAK,uFACX3oD,UAAWgyD,KACzB,eAAC,GAAD,CAAcxI,OAAK,EAACb,KAAK,+EACvB3oD,UAAWiyD,KACb,eAAC,GAAD,CAAczI,OAAK,EAACb,KAAK,mFACvB3oD,UAAWkyD,KACb,eAAC,GAAD,CAAc1I,OAAK,EAACb,KAAK,6EAA6E3oD,UAAWmyD,KACjH,eAAC,GAAD,CAAc3I,OAAK,EAACb,KAAK,iFAAiF3oD,UAAWoyD,KACrH,eAAC,GAAD,CAAc5I,OAAK,EAACb,KAAK,sFACX3oD,UAAWqyD,KACzB,eAAC,GAAD,CAAc7I,OAAK,EAACb,KAAK,kDAAkD3oD,UAAWsyD,KACtF,eAAC,GAAD,CAAc9I,OAAK,EAACb,KAAK,iBAAiB3oD,UAAWuyD,KACrD,eAAC,GAAD,CAAc/I,OAAK,EAACb,KAAK,qBAAqB3oD,UAAWwyD,KACzD,eAAC,GAAD,CAAchJ,OAAK,EAACb,KAAK,mCAAmC3oD,UAAWyyD,KAGvE,eAAC,GAAD,CAAcjJ,OAAK,EAACb,KAAK,YAAY3oD,UAAWunC,KAChD,eAAC,GAAD,CAAciiB,OAAK,EAACb,KAAK,yBAAyB3oD,UAAW0yD,KAC7D,eAAC,GAAD,CAAclJ,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWipC,KACjE,eAAC,GAAD,CAAcugB,OAAK,EAACb,KAAK,kDAAkD3oD,UAAW6pC,KACtF,eAAC,GAAD,CAAc2f,OAAK,EAACb,KAAK,oBAAoB3oD,UAAW2yD,KACxD,eAAC,GAAD,CAAcnJ,OAAK,EAACb,KAAK,yBAAyB3oD,UAAW4yD,KAC7D,eAAC,GAAD,CAAcpJ,OAAK,EAACb,KAAK,wCAAwC3oD,UAAW6yD,KAC5E,eAAC,GAAD,CAAcrJ,OAAK,EAACb,KAAK,+CAA+C3oD,UAAW8yD,KACnF,eAAC,GAAD,CAActJ,OAAK,EAACb,KAAK,0CAA0C3oD,UAAW+yD,KAC9E,eAAC,GAAD,CAAcvJ,OAAK,EAACb,KAAK,6CAA6C3oD,UAAWgzD,KACjF,eAAC,GAAD,CAAcxJ,OAAK,EAACb,KAAK,kDAAkD3oD,UAAWizD,KACtF,eAAC,GAAD,CAAczJ,OAAK,EAACb,KAAK,iDAAiD3oD,UAAWkzD,KACrF,eAAC,GAAD,CAAc1J,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWmzD,KAChF,eAAC,GAAD,CAAc3J,OAAK,EAACb,KAAK,+CAA+C3oD,UAAWozD,KACnF,eAAC,GAAD,CAAc5J,OAAK,EAACb,KAAK,oDAAoD3oD,UAAWqzD,KACxF,eAAC,GAAD,CAAc7J,OAAK,EAACb,KAAK,qDAAqD3oD,UAAWszD,KACzF,eAAC,GAAD,CAAc9J,OAAK,EAACb,KAAK,2DACX3oD,UAAWuzD,KACzB,eAAC,GAAD,CAAc/J,OAAK,EAACb,KAAK,2DAA2D3oD,UAAWwzD,KAC/F,eAAC,GAAD,CAAchK,OAAK,EAACb,KAAK,+CAA+C3oD,UAAWyzD,KACnF,eAAC,GAAD,CAAcjK,OAAK,EAACb,KAAK,mBAAmB3oD,UAAW0zD,KACvD,eAAC,GAAD,CAAclK,OAAK,EAACb,KAAK,uBAAuB3oD,UAAW2zD,KAC3D,eAAC,GAAD,CAAcnK,OAAK,EAACb,KAAK,kCAAkC3oD,UAAW4zD,KACtE,eAAC,GAAD,CAAcpK,OAAK,EAACb,KAAK,6CAA6C3oD,UAAW6zD,KACjF,eAAC,GAAD,CAAcrK,OAAK,EAACb,KAAK,iDAAiD3oD,UAAW8zD,KACrF,eAAC,GAAD,CAActK,OAAK,EAACb,KAAK,sDAAsD3oD,UAAW+zD,KAC1F,eAAC,GAAD,CAAcvK,OAAK,EAACb,KAAK,iEACX3oD,UAAWg0D,KACzB,eAAC,GAAD,CAAcxK,OAAK,EAACb,KAAK,6CAA6C3oD,UAAWi0D,KACjF,eAAC,GAAD,CAAczK,OAAK,EAACb,KAAK,iDAAiD3oD,UAAWk0D,KACrF,eAAC,GAAD,CAAc1K,OAAK,EAACb,KAAK,sDAAsD3oD,UAAWm0D,KAC1F,eAAC,GAAD,CAAc3K,OAAK,EAACb,KAAK,wCAAwC3oD,UAAWo0D,KAC5E,eAAC,GAAD,CAAc5K,OAAK,EAACb,KAAK,4CAA4C3oD,UAAWq0D,KAChF,eAAC,GAAD,CAAc7K,OAAK,EAACb,KAAK,iDAAiD3oD,UAAWs0D,KACrF,eAAC,GAAD,CAAc9K,OAAK,EAACb,KAAK,0CAA0C3oD,UAAWu0D,KAC9E,eAAC,GAAD,CAAc/K,OAAK,EAACb,KAAK,8CAA8C3oD,UAAWw0D,KAClF,eAAC,GAAD,CAAchL,OAAK,EAACb,KAAK,mDAAmD3oD,UAAWy0D,KACvF,eAAC,GAAD,CAAcjL,OAAK,EAACb,KAAK,8DAA8D3oD,UAAW00D,KAClG,eAAC,GAAD,CAAclL,OAAK,EAACb,KAAK,6DAA6D3oD,UAAW20D,KAGjG,eAAC,GAAD,CAAcnL,OAAK,EAACb,KAAK,WAAW3oD,UAAWyZ,KAC/C,eAAC,GAAD,CAAc+vC,OAAK,EAACb,KAAK,uBAAuB3oD,UAAW40D,KAC3D,eAAC,GAAD,CAAcpL,OAAK,EAACb,KAAK,mBAAmB3oD,UAAW60D,KACvD,eAAC,GAAD,CAAcrL,OAAK,EAACb,KAAK,yBAAyB3oD,UAAW80D,KAC7D,eAAC,GAAD,CAActL,OAAK,EAACb,KAAK,uBAAuB3oD,UAAW+0D,KAG3D,eAAC,GAAD,CAAcvL,OAAK,EAACb,KAAK,oDAAoD3oD,UAAWg1D,KACxF,eAAC,GAAD,CAAcxL,OAAK,EAACb,KAAK,6DACL3oD,UAAWi1D,KAC/B,eAAC,GAAD,CAAczL,OAAK,EAACb,KAAK,eAAe3oD,UAAWk1D,KACnD,eAAC,GAAD,CAAc1L,OAAK,EAACb,KAAK,qCAAqC3oD,UAAWm1D,KAGzE,eAAC,IAAD,CAAO3L,OAAK,EAACb,KAAO,IAAI3oD,UAAWo1D,KACnC,eAAC,GAAD,CAAc5L,OAAK,EAACb,KAAO,gBAAgB3oD,UAAWq1D,KACtD,eAAC,GAAD,CAAc7L,OAAK,EAACb,KAAO,6BAA6B3oD,UAAWs1D,KACnE,eAAC,GAAD,CAAc9L,OAAK,EAACb,KAAO,4DACP3oD,UAAWu1D,KAC/B,eAAC,GAAD,CAAc/L,OAAK,EAACb,KAAO,2CAA2C3oD,UAAWw1D,KACjF,eAAC,GAAD,CAAchM,OAAK,EAACb,KAAO,wBAAwB3oD,UAAWy1D,KAC9D,eAAC,GAAD,CAAcjM,OAAK,EAACb,KAAO,4BAA4B3oD,UAAW01D,KAClE,eAAC,GAAD,CAAclM,OAAK,EAACb,KAAO,8BAA8B3oD,UAAW21D,KACpE,eAAC,GAAD,CAAcnM,OAAK,EAACb,KAAO,oCAAoC3oD,UAAW41D,KAC1E,eAAC,GAAD,CAAcpM,OAAK,EAACb,KAAO,2CAA2C3oD,UAAW61D,KACjF,eAAC,GAAD,CAAcrM,OAAK,EAACb,KAAO,yBAAyB3oD,UAAW81D,KAC/D,eAAC,GAAD,CAActM,OAAK,EAACb,KAAO,uBAAuB3oD,UAAW+1D,KAC7D,eAAC,GAAD,CAAcvM,OAAK,EAACb,KAAO,wBAAwB3oD,UAAWg2D,KAC9D,eAAC,GAAD,CAAcxM,OAAK,EAACb,KAAO,8BAA8B3oD,UAAWi2D,KACpE,eAAC,GAAD,CAAczM,OAAK,EAACb,KAAO,6BAA6B3oD,UAAWk2D,KACnE,eAAC,GAAD,CAAc1M,OAAK,EAACb,KAAO,8BAA8B3oD,UAAWm2D,KACpE,eAAC,IAAD,CAAO3M,OAAK,EAACb,KAAO,gBAAgB3oD,UAAWo2D,KAC/C,eAAC,GAAD,CAAc5M,OAAK,EAACb,KAAO,qCAAqC3oD,UAAWq2D,KAC3E,eAAC,GAAD,CAAc7M,OAAK,EAACb,KAAO,uCAAuC3oD,UAAWs2D,KAC7E,eAAC,IAAD,CAAO9M,OAAK,EAACb,KAAO,oBAAoB3oD,UAAWu2D,KACnD,eAAC,GAAD,CAAc/M,OAAK,EAACb,KAAO,sBAAsB3oD,UAAWw2D,KAC5D,eAAC,GAAD,CAAchN,OAAK,EAACb,KAAO,sCAAsC3oD,UAAWw2D,KAC5E,eAAC,IAAD,CAAOhN,OAAK,EAACb,KAAO,gBAAgB3oD,UAAWy2D,KAC/C,eAAC,IAAD,CAAOjN,OAAK,EAACb,KAAO,eAAe3oD,UAAW02D,KAC9C,eAAC,GAAD,CAAclN,OAAK,EAACb,KAAO,yBAAyB3oD,UAAW22D,KAC/D,eAAC,GAAD,CAAcnN,OAAK,EAACb,KAAO,oCAAoC3oD,UAAW42D,KAC1E,eAAC,IAAD,CAAOpN,OAAK,EAACb,KAAO,sBAAsB3oD,UAAW62D,KACrD,eAAC,GAAD,CAAcrN,OAAK,EAACb,KAAO,yBAAyB3oD,UAAW82D,KAC/D,eAAC,GAAD,CAActN,OAAK,EAACb,KAAO,gDAAgD3oD,UAAW+2D,KAGtF,eAAC,GAAD,CAAcvN,OAAK,EAACb,KAAK,YAAY3oD,UAAWg3D,KAChD,eAAC,GAAD,CAAcxN,OAAK,EAACb,KAAK,kBAAkB3oD,UAAWi3D,KACtD,eAAC,GAAD,CAAczN,OAAK,EAACb,KAAK,kCAAkC3oD,UAAWk3D,KACtE,eAAC,GAAD,CAAc1N,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWm3D,KACjE,eAAC,GAAD,CAAc3N,OAAK,EAACb,KAAK,6BAA6B3oD,UAAWo3D,KACjE,eAAC,GAAD,CAAc5N,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWq3D,KAC/D,eAAC,GAAD,CAAc7N,OAAK,EAACb,KAAK,+BAA+B3oD,UAAWs3D,KACnE,eAAC,GAAD,CAAc9N,OAAK,EAACb,KAAK,2BAA2B3oD,UAAWu3D,KAC/D,eAAC,GAAD,CAAc/N,OAAK,EAACb,KAAK,oCAAoC3oD,UAAWw3D,KACxE,eAAC,GAAD,CAAchO,OAAK,EAACb,KAAK,0BAA0B3oD,UAAWy3D,KAC9D,eAAC,GAAD,CAAcjO,OAAK,EAACb,KAAK,mCAAmC3oD,UAAW03D,KACvE,eAAC,GAAD,CAAclO,OAAK,EAACb,KAAK,0BAA0B3oD,UAAW23D,KAC9D,eAAC,GAAD,CAAcnO,OAAK,EAACb,KAAK,yCAAyC3oD,UAAW43D,KAC7E,eAAC,GAAD,CAAcpO,OAAK,EAACb,KAAK,2BAA2B3oD,UAAW63D,KAG/D,eAAC,GAAD,CAAcrO,OAAK,EAACb,KAAK,wBAAwB3oD,UAAW83D,KAC5D,eAAC,IAAD,CAAOtO,OAAK,EAACb,KAAK,cAAc3oD,UAAW+3D,KAC3C,eAAC,IAAD,CAAOvO,OAAK,EAACb,KAAK,uBAAuB3oD,UAAWg4D,KACpD,eAAC,IAAD,CAAOxO,OAAK,EAACb,KAAK,eAAe3oD,UAAWi4D,KAC5C,eAAC,IAAD,CAAOzO,OAAK,EAACb,KAAK,wBAAwB3oD,UAAWk4D,KACrD,eAAC,IAAD,CAAO1O,OAAK,EAACb,KAAK,gBAAgB3oD,UAAWm4D,KAE7C,eAAC,IAAD,CAAOn4D,UAAWsoD,iB,qBClqB9B8P,OAAOC,UAAUvwD,MACf,SAASwwD,GACL,OAAO/jE,KAAKgkE,OAAO,EAAGD,EAAE,IAAM/jE,KAAKwG,OAASu9D,EAAI,MAAQ,KAkB9D,IAAME,GAAYC,aAAQ,YAAoE,IAAjE7mB,EAAgE,EAAhEA,cAAe8mB,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAAwB,EAAfC,SAkB5E,GAjBA1pE,QAAQC,IAAIupE,GAER/mB,GACFA,EAAcknB,SAAQ,YAAmC,IAAhCnhD,EAA+B,EAA/BA,QAASkW,EAAsB,EAAtBA,UAAW86B,EAAW,EAAXA,KAC3Cx5D,QAAQC,IAAR,oCAC+BuoB,EAD/B,uBACqDkW,EADrD,mBACyE86B,OAIzE+P,GAAcvpE,QAAQC,IAAR,2BAAgCspE,IAG9C9mB,GAA6C,+DAA5BA,EAAc,GAAGj6B,SACpCxoB,QAAQsI,MAAM,kCAIZm6C,GAA6C,yBAA5BA,EAAc,GAAGj6B,QAAoC,CACxExoB,QAAQC,IAAIwiD,EAAc,IAC1BziD,QAAQC,IAAI,6BAEZ,IAAIs5D,GAAmB,EACnBqQ,GAAsB,EACpB/P,EAAWx1D,aAAagS,QAAQ9R,EAAKhD,gBACrC+tD,EAAkBjrD,aAAagS,QAAQ9R,EAAK7C,wBAclD,GAZK,IAAI2H,KAAS,KAASwwD,IACzBN,GAAmB,EAEd,IAAIlwD,KAAS,KAASimD,IACzBsa,GAAsB,EAEtB1lE,EAAOe,UAhDf,WACEjF,QAAQC,IAAI,qDACZ,IACM24D,EADa1rD,OAAO6K,SAASlO,KACXlC,MAAM,KAAK,GACnC3H,QAAQC,IAAI24D,GACC,eAARA,GAAmC,yBAARA,GAA6C,wBAARA,GAAoCA,GAKvGv0D,aAAaC,QAAQC,EAAK5C,gBAAiBi3D,GAwCvCQ,KAIAG,IAAqBqQ,EAIvB,OAHA5pE,QAAQC,IAAI,+BACZD,QAAQC,IAAIoE,aAAagS,QAAQ9R,EAAK9C,qBAE/B,IAAIooE,KAAW,SAAAC,GACpBC,GAAOC,OAAO,CACZt1C,SAAUzzB,EACV0N,UAAW,CACT/J,aAAcP,aAAagS,QAAQ9R,EAAK9C,uBAGzCoQ,MAAK,YAAe,IAAZtJ,EAAW,EAAXA,KACPvI,QAAQC,IAAIsI,GACZrE,EAAOa,gBAAgBwD,EAAK3D,iBAE7BiN,MAAK,WACJ,IAAMo4D,EAAa,CACjBrR,KAAMkR,EAASlR,KAAKjyB,KAAKmjC,GACzBxhE,MAAOwhE,EAASxhE,MAAMq+B,KAAKmjC,GAC3BxY,SAAUwY,EAASxY,SAAS3qB,KAAKmjC,IAInCL,EAAQD,GAAWU,UAAUD,MAE9B93D,OAAM,SAAA7J,GAELtI,QAAQC,IAAI,0DACZ6pE,EAASxhE,MAAMA,GACfpE,EAAOe,UACPiI,OAAO6K,SAASlO,KAAO,gBACvBqD,OAAO6K,SAAS+hD,eAGb8P,GACT18D,OAAO6K,SAASlO,KAAO,yBACvBqD,OAAO6K,SAAS+hD,WAEhB5sD,OAAO6K,SAASlO,KAAO,wBACvBqD,OAAO6K,SAAS+hD,cAMhBqQ,GAAWC,YAAe,CAC9BC,IAAK,cACLC,YAAa,gBAGTC,GAAWC,YAAU,uCAAC,WAAOC,EAAP,oBAAAC,EAAA,6DAAkBC,EAAlB,EAAkBA,QAEtCnmE,EAAQH,aAAagS,QAAQ9R,EAAKjD,YAFd,kBAInB,CACLqpE,QAAQ,2BACHA,GADE,IAELC,cAAepmE,EAAK,cAAUA,GAAS,OAPjB,2CAAD,yDAarBulE,GAAS,IAAIc,IAAa,CAC9Bx+D,KAAMy+D,eAAK,CAACzB,GAAWkB,GAAUJ,KACjCY,MAAO,IAAIC,MAeEC,OAXf,WAIE,OACE,eAACC,EAAA,EAAD,CAAgBnB,OAAQA,GAAxB,SACE,eAAC,GAAD,OCjKcoB,QACW,cAA7Bj+D,OAAO6K,SAASs0C,UAEe,UAA7Bn/C,OAAO6K,SAASs0C,UAEhBn/C,OAAO6K,SAASs0C,SAAS/iD,MACvB,2DCTN8hE,IAAS1R,OAAO,eAAC,GAAD,IAAS7sD,SAASw+D,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM35D,MAAK,SAAA4M,GACjCA,EAAagtD,kB","file":"static/js/main.d946b5ab.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      token\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoiceEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader({}) {\n\n  return (\n    <CSStandalonePageWide>\n    <div className='text-center'>\n      <Dimmer active={true} loader={true} />\n    </div>\n  </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      console.log('found permission')\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({permission, resource, children}) {\n  const {loading, error, data} = useQuery(GET_USER)\n  \n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default HasPermissionWrapper","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\nimport type { NotificationProps } from \"tabler-react\";\n\ntype Props = {|\n  +children: React.Node,\n|};\n\ntype State = {|\n  notificationsObjects: Array<NotificationProps>,\n|};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data, fetchMore } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.announcements.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","// @flow\n\nimport React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\n\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  console.log(\"%%%%%%%%%%%%%%%%%%%%%\")\n  console.log(data)\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  // Data\n  return (\n    <HomeHomeBase>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html:node.content }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Grid,\n  Icon,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits_expiration.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits_expiration.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits_expiration\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(!pageInfo) ? '':\n              (pageInfo.hasNextPage) ? \n                <Button \n                  link\n                  onClick={onLoadMore} \n                  >\n                  {t('general.load_more')}\n                </Button>\n               : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl }) => (\n  <Link to={returnUrl}>\n    <Button\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n      break\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n      break\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n      break\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n      break\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n      break\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n      break\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n// const ARCHIVE_LEVEL = gql`\n//   mutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n//     archiveOrganizationLevel(input: $input) {\n//       organizationLevel {\n//         id\n//         archived\n//       }\n//     }\n//   }\n// `\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    }\n  })\n\n  const headerOptions = <Card.Options>\n    <Link to={\"/automation/account/subscriptions/credits/add\"}>\n      <Button color=\"primary\" \n              size=\"sm\"\n      >\n      {t('general.new_task')}\n      </Button>\n    </Link>\n  </Card.Options>\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        headerContent={headerOptions}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.new_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditExpirationBase({t, history, match, children, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\nfunction AutomationAccountSubscriptionCreditExpiration({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n    }\n  })\n\n  const headerOptions = <Card.Options>\n    <Link to={\"/automation/account/subscriptions/credits_expiration/add\"}>\n      <Button color=\"primary\" \n              size=\"sm\"\n      >\n      {t('general.new_task')}\n      </Button>\n    </Link>\n  </Card.Options>\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditExpirationBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditExpirationBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditExpirationBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits_expiration.title_card')}\n        pageInfo={taskResults.pageInfo}\n        headerContent={headerOptions}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpiration))","// @flow\n\nimport React, {useState} from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\n\n\nconst ADD_TASK = gql`\n  mutation ExpireAccountSubscriptionCredit($input: ExpireAccountSubscriptionCreditInput!) {\n    expireAccountSubscriptionCredit(input:$input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditExpirationAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  let [isSubmitting, setSubmitting] = useState(false)\n  const returnUrl = \"/automation/account/subscriptions/credits_expiration\"\n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits_expiration.title_add')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              {t(\"automation.account.subscriptions.credits_expiration.explanation_new_expiration\")}\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n          color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            onClick={() => {\n              setSubmitting(true)\n              addTask({ variables: {\n                input: {}\n              }, refetchQueries: [\n                {query: GET_TASK_RESULT_QUERY, \n                  variables: {\n                    taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n                }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits_expiration.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n          >\n            {t('general.new_task')} <Icon name=\"chevron-right\" />\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n// const ARCHIVE_LEVEL = gql`h\n//   mutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n//     archiveOrganizationLevel(input: $input) {\n//       organizationLevel {\n//         id\n//         archived\n//       }\n//     }\n//   }\n// `\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    }\n  })\n\n  const headerOptions = <Card.Options>\n    <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n      <Button color=\"primary\" \n              size=\"sm\"\n      >\n      {t('general.new_task')}\n      </Button>\n    </Link>\n  </Card.Options>\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        headerContent={headerOptions}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.new_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    }\n  })\n\n  const headerOptions = <Card.Options>\n    <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n      <Button color=\"primary\" \n              size=\"sm\"\n      >\n      {t('general.new_task')}\n      </Button>\n    </Link>\n  </Card.Options>\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        headerContent={headerOptions}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            :\n            // Content\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.new_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../HasPermissionWrapper\"\n\nlet invoices_active\nlet orders_active\nlet costcenters_active\nlet glaccounts_active\nlet taxrates_active\nlet taxrates_summary_active\nlet payment_methods_active\nlet payment_batch_collections_active\nlet payment_batch_payments_active\nlet payment_batch_categories_active\n\nconst FinanceMenu = ({ t, activeLink }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'costcenters') ? costcenters_active = true: costcenters_active = false}\n        {(activeLink === 'glaccounts') ? glaccounts_active = true: glaccounts_active = false}\n        {(activeLink === 'taxrates') ? taxrates_active = true: taxrates_active = false}\n        {(activeLink === 'taxrates_summary') ? taxrates_summary_active = true: taxrates_summary_active = false}\n        {(activeLink === 'payment_methods') ? payment_methods_active = true: payment_methods_active = false}\n        {(activeLink === 'payment_batch_collections') ? payment_batch_collections_active = true: payment_batch_collections_active = false}\n        {(activeLink === 'payment_batch_payments') ? payment_batch_payments_active = true: payment_batch_payments_active = false}\n        {(activeLink === 'payment_batch_categories') ? payment_batch_categories_active = true: payment_batch_categories_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/invoices\"\n            icon=\"file-text\"\n            active={invoices_active}\n            >\n            {t('finance.invoices.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/orders\"\n            icon=\"file-plus\"\n            active={orders_active}\n            >\n            {t('finance.orders.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/glaccounts\"\n            icon=\"book\"\n            active={glaccounts_active}\n            >\n            {t('finance.glaccounts.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/costcenters\"\n            icon=\"compass\"\n            active={costcenters_active}\n            >\n            {t('finance.costcenters.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/taxrates\"\n            icon=\"briefcase\"\n            active={taxrates_active}\n            >\n            {t('finance.taxrates.title')}\n        </List.GroupItem>\n        <HasPermissionWrapper permission=\"view\"\n                              resource=\"insightfinancetaxratesummary\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to=\"#/finance/taxrates_summary\"\n                icon=\"layout\"\n                active={taxrates_summary_active}\n                >\n                {t('finance.taxrates_summary.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/finance/paymentmethods\"\n            icon=\"credit-card\"\n            active={payment_methods_active}\n            >\n            {t('finance.payment_methods.title')}\n        </List.GroupItem>\n        <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatch\">\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to=\"#/finance/paymentbatches/collection\"\n              icon=\"download\"\n              active={payment_batch_collections_active}\n              >\n              {t('finance.payment_batch_collections.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatch\">\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to=\"#/finance/paymentbatches/payment\"\n              icon=\"upload\"\n              active={payment_batch_payments_active}\n              >\n              {t('finance.payment_batch_payments.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatchcategory\">\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to=\"#/finance/paymentbatchcategories\"\n              icon=\"list\"\n              active={payment_batch_categories_active}\n              >\n              {t('finance.payment_batch_categories.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(FinanceMenu)","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  StampCard\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n                <Grid.Row>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.invoices.title\")}</h5>\n                        {t(\"finance.invoices.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.orders.title\")}</h5>\n                        {t(\"finance.orders.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.glaccounts.title\")}</h5>\n                        {t(\"finance.glaccounts.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.costcenters.title\")}</h5>\n                        {t(\"finance.costcenters.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.taxrates.title\")}</h5>\n                        {t(\"finance.taxrates.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <HasPermissionWrapper permission=\"view\"\n                              resource=\"insightfinancetaxratesummary\">\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                          {t(\"finance.taxrates_summary.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"finance.payment_methods.title\")}</h5>\n                        {t(\"finance.payment_methods.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatch\">\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                          {t(\"finance.payment_batch_collections.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatch\">\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                          {t(\"finance.payment_batch_payments.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper permission=\"view\"\n                              resource=\"financepaymentbatchcategory\">\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                          {t(\"finance.payment_batch_categories.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                </Grid.Row>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <FinanceMenu />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to={\"/finance/costcenters\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <Link to={\"/finance/costcenters/add\"}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.costcenters.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <FinanceMenu activeLink='costcenters'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/finance/glaccounts\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <Link to=\"/finance/glaccounts/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.glaccounts.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <FinanceMenu activeLink='glaccounts'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql, useMutation, useQuery } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Container,\n  Grid,\n  Icon,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <h5>{t(\"general.menu\")}</h5>\n              <FinanceMenu activeLink='invoices'/>\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","// @flow\n\nimport React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const status = this.props.status\n\n    switch (status) {\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n        break\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n        break\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n        break\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n        break\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\n\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}\n                  pageInfo={invoices.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: invoices.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoices.edges\n                        const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoices at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoices: {\n                                __typename: previousResult.financeInvoices.__typename,\n                                edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.relation')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoicesStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      {node.invoiceNumber}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.account) ? \n                      <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                        {(node.relationCompany) ? node.relationCompany: node.relationContactName}\n                      </Link> :\n                      (node.relationCompany) ? node.relationCompany: node.relationContactName\n                    }\n                    <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(20)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    {moment(node.dateDue).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import CSLS from './cs_local_storage'\nimport { CSAuth } from './authentication';\n\nexport function refreshTokenAndOpenExportLinkInNewTab(doTokenRefresh, history, exportUrl) {  \n  const refreshToken = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n\n  doTokenRefresh({ variables: { refreshToken: refreshToken }})\n    .then(({data}) => {\n      CSAuth.updateTokenInfo(data.refreshToken)\n      const token = data.refreshToken.token\n      //Add authentication headers in URL\n      var url = `${exportUrl}/${token}`;\n\n      window.open(url, \"_blank\")\n      // history.push(export_url)\n    }).catch((error) => {\n      console.log(error)\n      history.push(\"/#/user/login\")\n    })\n}\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { CREATE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [addInvoiceItem, { data }] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem, { data }] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, initialValues, node, inputData}) {\n  const [updateInvoiceItem, { data }] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","// @flow\n\nimport React, { useCallback, useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [updateItem, { data }] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const onDragEnd = useCallback((result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n\n  }, []);\n\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  \n  console.log(\"########\")\n  console.log(initialData)\n  console.log(dateSent)\n  console.log(dateDue)\n\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","// @flow\n\nimport React, { Fragment } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: organization.address}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nlet summaryFormTypingTimer\nconst formSubmitTimeout = 750\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {console.log(initialData)}\n        {(initialData.financeInvoice.creditInvoiceNumber) ?\n          t(\"finance.invoice.credit_invoice_for\") + \": \" + initialData.financeInvoice.creditInvoiceNumber\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditToForm = ({ t, isSubmitting, errors, touched, handleChange, setFieldTouched }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t(\"finance.invoices.relation_company\")}>\n        <Field type=\"text\" \n                name=\"relationCompany\" \n                className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationCompany\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyRegistration\" \n                    className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyRegistartion\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyTaxRegistration\" \n                    className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyTaxRegistration\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n        <Field type=\"text\" \n                name=\"relationContactName\" \n                className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationContactName\", true, true)\n                }}\n        />\n        <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_address\")}>\n            <Field type=\"text\" \n                    name=\"relationAddress\" \n                    className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationAddress\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n            <Field type=\"text\" \n                    name=\"relationPostcode\" \n                    className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationPostcode\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_city\")}>\n            <Field type=\"text\" \n                    name=\"relationCity\" \n                    className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCity\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_country\")}>\n            <Field type=\"text\" \n                    name=\"relationCountry\" \n                    className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCountry\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, initialData }) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card title={t('general.to')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            relationCompany: initialData.financeInvoice.relationCompany, \n            relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: initialData.financeInvoice.relationContactName, \n            relationAddress: initialData.financeInvoice.relationAddress, \n            relationPostcode: initialData.financeInvoice.relationPostcode, \n            relationCity: initialData.financeInvoice.relationCity, \n            relationCountry: initialData.financeInvoice.relationCountry, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment, { data }] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html:node.note }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICES_QUERY, GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  console.log(data)\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let return_url = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!return_url) {\n    return_url = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={return_url} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo initialData={data} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions\n            initialData={data}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table,\n  Text\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceMenu from \"../../FinanceMenu\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showBack=true}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/finance/invoices\" \n                    className='btn btn-outline-secondary btn-sm mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('finance.invoices.title')}\n              </Link>\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/finance/invoices/groups\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                  <Link to=\"/finance/invoices/groups/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.invoice_groups.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <FinanceMenu activeLink='invoices'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nconst FinanceInvoiceGroups = ({ t, history, archived=false }) => (\n\n            <Query query={GET_INVOICE_GROUPS_QUERY} variables={{ archived }}>\n             {({ loading, error, data: {financeInvoiceGroups: invoice_groups}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('finance.invoice_groups.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('finance.invoice_groups.title')}>\n                    <p>{t('finance.invoice_groups.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n                \n                // Empty list\n                if (!invoice_groups.edges.length) { return (\n                  <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('finance.invoice_groups.empty_list') : t(\"finance.invoice_groups.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                               headerContent={headerOptions}\n                               pageInfo={invoice_groups.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: invoice_groups.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                                    const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new invoice_groups at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          financeInvoiceGroups: {\n                                            __typename: previousResult.financeInvoiceGroups.__typename,\n                                            edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} \n                    >\n                    <Table>\n                      <Table.Header>\n                        <Table.Row key={v4()}>\n                          <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                          <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n                          <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                          <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n                        </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                          {invoice_groups.edges.map(({ node }) => (\n                            <Table.Row key={v4()}>\n                              <Table.Col key={v4()}>\n                                {node.name}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.nextId}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dueAfterDays}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.prefix} \n                                {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                                {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                                  {t('finance.invoice_groups.auto_reset_prefix_year')}\n                                </Text.Small>: ''}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                <BadgeBoolean value={node.displayPublic} />\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.code}\n                              </Table.Col>\n                              <Table.Col className=\"text-right\" key={v4()}>\n                                {(node.archived) ? \n                                  <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                  <Button className='btn-sm' \n                                          onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                                          color=\"secondary\">\n                                    {t('general.edit')}\n                                  </Button>\n                                }\n                              </Table.Col>\n                              <Mutation mutation={ARCHIVE_INVOICE_GROUP} key={v4()}>\n                                {(archiveInvoiceGroup, { data }) => (\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    <button className=\"icon btn btn-link btn-sm\" \n                                        title={t('general.archive')} \n                                        href=\"\"\n                                        onClick={() => {\n                                          console.log(\"clicked archived\")\n                                          let id = node.id\n                                          archiveInvoiceGroup({ variables: {\n                                            input: {\n                                            id,\n                                            archived: !archived\n                                            }\n                                    }, refetchQueries: [\n                                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                                    ]}).then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success(\n                                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error);\n                                    })\n                                    }}>\n                                      <Icon prefix=\"fa\" name=\"inbox\" />\n                                    </button>\n                                  </Table.Col>\n                                )}\n                              </Mutation>\n                            </Table.Row>\n                          ))}\n                      </Table.Body>\n                    </Table>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n\n);\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../../../FinanceMenu\"\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('finance.invoice_groups.title')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <h5>{t(\"general.menu\")}</h5>\n              <FinanceMenu activeLink='invoices'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Container,\n  Table,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceMenu from \"../../../FinanceMenu\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_QUERY } from \"../queries\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n      break\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n      break\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n      break\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n      break\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n      break\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n      break\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n      break\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n      break\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n      break\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const FINANCE_INVOICE_PAYMENT_SCHEMA = Yup.object().shape({\n  // account: Yup.string()\n  //   .required(t('yup.field_required')),\n  // role: Yup.string(),\n  // account2: Yup.string(),\n  // role2: Yup.string(),\n  // dateStart: Yup.date()\n  //   .required(t('yup.field_required')),\n  // // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\n// import { GET_INVOICE_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_INVOICE_QUERY } from \"../queries\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const return_url = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type == \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={return_url} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { inputData.financeInvoice.account.fullName } <br />\n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, return_url, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(return_url)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INPUT_VALUES_QUERY } from './queries'\nimport { FINANCE_INVOICE_PAYMENT_SCHEMA } from './yupSchema'\n// import ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nconst ADD_FINANCE_INVOICE_PAYMENT = gql`\n  mutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n    createFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const return_url = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment, { mutationData, mutationLoading, mutationError, onCompleted }] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(return_url),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            return_url={return_url}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { FINANCE_INVOICE_PAYMENT_SCHEMA } from './yupSchema'\n// import ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const return_url = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment, { mutationData, mutationLoading, mutationError, onCompleted }] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(return_url),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            return_url={return_url}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\n\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {children}\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n            <FinanceOrdersFilter refetch={refetch}/>\n            <h5>{t(\"general.menu\")}</h5>\n            <FinanceMenu activeLink='orders'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","// @flow\n\nimport React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n        break\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n        break\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n        break\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n        break\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n        break\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteOrder, { data }] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  console.log(data)\n  const orders = data.financeOrders\n  console.log(orders)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber} <br />\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n      break\n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n      break\n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n      break\n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n      break\n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  let activeLink\n  if (batchType == 'collection') {\n    activeLink = 'payment_batch_collections'\n  } else {\n    activeLink = 'payment_batch_payments'\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <Link to={`/finance/paymentbatches/${batchType}/add_what`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_batches.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <Link to={returnUrl}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              <FinanceMenu activeLink={activeLink} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: String!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: String!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\n\n// import FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceMenu from \"../FinanceMenu\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\nimport moment from 'moment'\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType == \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","// @flow\n\nimport React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance payment batch category props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n        break\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n        break\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\n\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType == \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","// @flow\n\nimport React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status != \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status != \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as PDF */}\n                <a href={exportUrl} \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"download\" /> {t('general.export')} \n                </a>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary mr-2'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n                {(status) ? \n                  (status == \"SENT_TO_BANK\") ?\n                    <Button.List>\n                      <Button \n                        icon=\"mail\"\n                        disabled={true}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                    </Button.List>\n                  :\n                    <Button.List>\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                  : \"\"\n                }\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport { GET_PAYMENT_BATCHES_QUERY, GET_PAYMENT_BATCH_QUERY } from './queries'\n// import { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n  List,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport BooleanBadge from \"../../ui/BadgeBoolean\"\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport FinanceMenu from '../FinanceMenu'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\nimport FinanceMenu from '../FinanceMenu'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType == \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\nimport FinanceMenu from '../FinanceMenu'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <Link to={\"/finance/paymentbatchcategories/add\"}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_batch_categories.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <Link to=\"/finance/paymentbatchcategories\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              <FinanceMenu activeLink='payment_batch_categories'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceMenu from \"../FinanceMenu\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) != \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <FinanceMenu activeLink='payment_methods'/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinanceMenu from '../FinanceMenu'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","// @flow\n\nimport React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\n\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Icon,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport FinanceMenu from \"../../FinanceMenu\"\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"change\"\n                                    resource=\"financeorder\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>            \n              <h5>{t(\"general.menu\")}</h5>\n              <FinanceMenu activeLink='orders'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","// @flow\n\nimport React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  console.log(data) \n  const order = data.financeOrder\n  \n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status != \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/finance/paymentmethods\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <Link to=\"/finance/paymentmethods/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <FinanceMenu activeLink='payment_methods'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                  </Table.Col>\n                  {(node.systemMethod) ? \n                    <Table.Col></Table.Col> :\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                  }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/finance/taxrates\"  >\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <Link to=\"/finance/taxrates/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.taxrates.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <FinanceMenu activeLink='taxrates'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form\n} from \"tabler-react\";\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n// import { get_list_query_variables } from './tools'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  return (\n    <FoForm>\n      <Form.Group label={t('general.date_start')}>\n        <CSDatePicker \n          className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateStart}\n          onChange={(date) => {\n            setFieldValue(\"dateStart\", date)\n            setFieldTouched(\"dateStart\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.date_end')}>\n        <CSDatePicker \n          className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateEnd}\n          onChange={(date) => {\n            setFieldValue(\"dateEnd\", date)\n            setFieldTouched(\"dateEnd\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('finance.taxrates_summary.set_dates')}\n      </Button>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\n\nimport moment from 'moment'\n\nimport {\n  Container,\n  Grid,\n  Icon,\n  Page\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\nimport FinanceMenu from \"../FinanceMenu\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {/* <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5> */}\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              <br /><br /><br />\n              <h5>{t(\"general.menu\")}</h5>\n              <FinanceMenu activeLink='taxrates_summary'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\n// import { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\n\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\n\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.classpasses.title\")}</h5>\n                    {t(\"insight.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.subscriptions.title\")}</h5>\n                    {t(\"insight.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialcards\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"insight.revenue.title\")}</h5>\n                    {t(\"insight.revenue.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASSES_SOLD_QUERY = gql`\n  query InsightAccountClasspassesSold($year: Int!) {\n    insightAccountClasspassesSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_CLASSPASSES_ACTIVE_QUERY = gql`\n  query InsightAccountClasspassesActive($year: Int!) {\n    insightAccountClasspassesActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n// import ContentCard from \"../../general/ContentCard\"\nimport { GET_CLASSPASSES_SOLD_QUERY, GET_CLASSPASSES_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const year = localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_CLASSPASSES_SOLD_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_CLASSPASSES_ACTIVE_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightClasspassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightClasspassesBase>\n    )\n  }\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.classpasses.sold.title\")\n  const chart_data_sold = dataSold.insightAccountClasspassesSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.classpasses.active.title\")\n  const chart_data_active = dataActive.insightAccountClasspassesActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightClasspassesBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightClasspassesBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_TOTAL_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_REVENUE_SUBTOTAL_QUERY = gql`\n  query InsightRevenueSubTotal($year: Int!) {\n    insightRevenueSubtotal(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_REVENUE_TAX_QUERY = gql`\n  query InsightRevenueTax($year: Int!) {\n    insightRevenueTax(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetchData=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n// import ContentCard from \"../../general/ContentCard\"\nimport { GET_REVENUE_TOTAL_QUERY, GET_REVENUE_SUBTOTAL_QUERY, GET_REVENUE_TAX_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightRevenueBase from './InsightRevenueBase'\n\nfunction InsightRevenue ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const year = localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)\n  // const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  // const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingTotal, \n    error: errorTotal, \n    data: dataTotal,\n    refetch: refetchTotal\n   } = useQuery(GET_REVENUE_TOTAL_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingSubtotal, \n    error: errorSubtotal, \n    data: dataSubtotal,\n    refetch: refetchSubtotal\n   } = useQuery(GET_REVENUE_SUBTOTAL_QUERY, {\n    variables: { year: year }\n  })\n\n  const { \n    loading: loadingTax, \n    error: errorTax, \n    data: dataTax,\n    refetch: refetchTax\n   } = useQuery(GET_REVENUE_TAX_QUERY, {\n    variables: { year: year }\n  })\n\n\n  if (loadingTotal || loadingSubtotal || loadingTax) {\n    return (\n      <InsightRevenueBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightRevenueBase>\n    )\n  }\n\n  if (errorTotal || errorSubtotal || errorTax) {\n    return (\n      <InsightRevenueBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightRevenueBase>\n    )\n  }\n\n  function refetchData(year) {\n    refetchTotal({year: year})\n    refetchSubtotal({year: year})\n    refetchTax({year: year})\n  }\n\n  console.log(dataTotal)\n  console.log(dataSubtotal)\n\n  const data_label_total = t(\"insight.revenue.total.title\")\n  const chart_data_total = dataTotal.insightRevenueTotal.data\n  console.log(\"chart_data total\")\n  console.log(data_label_total, ...chart_data_total)\n\n  const data_label_subtotal = t(\"insight.revenue.subtotal.title\")\n  const chart_data_subtotal = dataSubtotal.insightRevenueSubtotal.data\n  console.log(\"chart_data subtotal\")\n  console.log(data_label_subtotal, ...chart_data_subtotal)\n\n  const data_label_tax = t(\"insight.revenue.tax.title\")\n  const chart_data_tax = dataTax.insightRevenueTax.data\n  console.log(\"chart_data tax\")\n  console.log(data_label_tax, ...chart_data_tax)\n\n\n  return (\n    <InsightRevenueBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.total')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'total', ...chart_data_total],\n                    [ 'subtotal', ...chart_data_subtotal],\n                    [ 'tax', ...chart_data_tax],\n                  ],\n                  type: \"bar\", // default type of chart\n                  // types: {\n                  //   total: \"bar\"\n                  // },\n                  groups: [['subtotal', 'tax']],\n                  colors: {\n                    total: colors[\"blue\"],\n                    subtotal: colors[\"green\"],\n                    tax: colors[\"orange\"],\n                  },\n                  names: {\n                    // name of each serie\n                    total: data_label_total,\n                    subtotal: data_label_subtotal,\n                    tax: data_label_tax,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n            <Card.Footer>\n              {t(\"insight.revenue.total.explanation\")}\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          {/* <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button> */}\n          {/* Export as active as excel sheet */}\n          {/* <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button> */}\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightRevenueBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTIONS_SOLD_QUERY = gql`\n  query InsightAccountSubscriptionsSold($year: Int!) {\n    insightAccountSubscriptionsSold(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTIONS_ACTIVE_QUERY = gql`\n  query InsightAccountSubscriptionsActive($year: Int!) {\n    insightAccountSubscriptionsActive(year: $year) {\n      description\n      data\n      year\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetchData=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  colors,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n// import ContentCard from \"../../general/ContentCard\"\nimport { GET_SUBSCRIPTIONS_SOLD_QUERY, GET_SUBSCRIPTIONS_ACTIVE_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\nfunction InsightSubscriptions ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const year = localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { \n    loading: loadingSold, \n    error: errorSold, \n    data: dataSold,\n    refetch: refetchSold\n   } = useQuery(GET_SUBSCRIPTIONS_SOLD_QUERY, {\n    variables: { year: 2020 }\n  })\n\n  const { \n    loading: loadingActive, \n    error: errorActive, \n    data: dataActive,\n    refetch: refetchActive\n   } = useQuery(GET_SUBSCRIPTIONS_ACTIVE_QUERY, {\n    variables: { year: 2020 }\n  })\n\n\n  if (loadingSold || loadingActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (errorSold || errorActive) {\n    return (\n      <InsightSubscriptionsBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightSubscriptionsBase>\n    )\n  }\n\n\n  function refetchData(year) {\n    refetchActive({year: year})\n    refetchSold({year: year})\n  }\n\n  console.log(dataSold)\n  console.log(dataActive)\n\n  const data_sold_label = t(\"insight.subscriptions.sold.title\")\n  const chart_data_sold = dataSold.insightAccountSubscriptionsSold.data\n  console.log(\"chart_data sold\")\n  console.log(data_sold_label, ...chart_data_sold)\n\n  const data_active_label = t(\"insight.subscriptions.active.title\")\n  const chart_data_active = dataActive.insightAccountSubscriptionsActive.data\n  console.log(\"chart_data active\")\n  console.log(data_sold_label, ...chart_data_active)\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetchData={refetchData}>\n      {/* <Grid.Row> */}\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <Card.Body>\n              <C3Chart\n                style={{ height: \"16rem\" }}\n                data={{\n                  x: 'x',\n                  columns: [\n                    // each columns data as array, starting with \"name\" and then containing data\n                    [ 'x',\n                      t(\"datetime.months.short_january\"),\n                      t(\"datetime.months.short_february\"),\n                      t(\"datetime.months.short_march\"),\n                      t(\"datetime.months.short_april\"),\n                      t(\"datetime.months.short_may\"),\n                      t(\"datetime.months.short_june\"),\n                      t(\"datetime.months.short_july\"),\n                      t(\"datetime.months.short_august\"),\n                      t(\"datetime.months.short_september\"),\n                      t(\"datetime.months.short_october\"),\n                      t(\"datetime.months.short_november\"),\n                      t(\"datetime.months.short_decemer\"),\n                    ],\n                    [ 'sold', ...chart_data_sold],\n                    [ 'active', ...chart_data_active],\n                  ],\n                  type: \"area\", // default type of chart\n                  groups: [['sold'], ['active']],\n                  colors: {\n                    sold: colors[\"blue\"],\n                    active: colors[\"green\"],\n                  },\n                  names: {\n                    // name of each serie\n                    sold: data_sold_label,\n                    active: data_active_label,\n                  },\n                  \n                }}\n                axis={{\n                  y: {\n                    padding: {\n                      bottom: 0,\n                    },\n                    show: true,\n                  },\n                  x: {\n                    padding: {\n                      left: 0,\n                      right: 0,\n                    },\n                    type: 'category',\n                    show: true,\n                  },\n                }}\n                tooltip={{\n                  format: {\n                    title: function(x) {\n                      return \"\";\n                    },\n                  },\n                }}\n                padding={{\n                  bottom: 0,\n                  // left: -1,\n                  right: -1,\n                }}\n                point={{\n                  show: false,\n                }}\n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      {/* </Grid.Row> */}\n    </InsightSubscriptionsBase>\n  //   <SiteWrapper>\n  //     <div className=\"my-3 my-md-5\">\n  //       <Container>\n  //         <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n  //           <div className=\"page-options d-flex\">\n  //             <InsightBackHome />\n  //           </div>\n  //         </Page.Header>\n\n  //       </Container>  \n  //     </div>\n  //   </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form\n} from \"tabler-react\";\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n// import { get_list_query_variables } from './tools'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Form.Group label={t('general.year')}>\n        <Field type=\"number\" \n                name=\"year\" \n                className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.month')}>\n        <Field component=\"select\" \n              name=\"month\" \n              className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              // onChange={(e) => {\n              //   handleChange(e)\n              //   setFieldTouched(\"financeTaxRate\", true, true)\n              // }}\n        >\n          <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n          <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n          <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n          <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n          <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n          <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n          <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n          <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n          <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n          <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n          <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n          <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n        </Field>\n        <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('insight.trialpasses.set_month')}\n      </Button>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport C3Chart from \"react-c3js\"\nimport moment from 'moment'\nimport {\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\n\nimport ContentCard from '../../general/ContentCard'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\n\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../HasPermissionWrapper\"\n\n\nlet classpasses_active\nlet classtypes_active\nlet discoveries_active\nlet documents_active\nlet languages_active\nlet locations_active\nlet levels_active\nlet holidays_active\nlet memberships_active\nlet subscriptions_active\nlet appointments_active\nlet organization_active\nlet organization_branding_active\nlet announcements_active\n\nconst OrganizationMenu = ({ t, activeLink }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classtypes') ? classtypes_active = true: classtypes_active = false}\n        {(activeLink === 'discoveries') ? discoveries_active = true: discoveries_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'languages') ? languages_active = true: languages_active = false}\n        {(activeLink === 'locations') ? locations_active = true: locations_active = false}\n        {(activeLink === 'levels') ? levels_active = true: levels_active = false}\n        {(activeLink === 'holidays') ? holidays_active = true: holidays_active = false}\n        {(activeLink === 'memberships') ? memberships_active = true: memberships_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'appointments') ? appointments_active = true: appointments_active = false}\n        {(activeLink === 'organization') ? organization_active = true: organization_active = false}\n        {(activeLink === 'organization_branding') ? organization_branding_active = true: organization_branding_active = false}\n        {(activeLink === 'announcements') ? announcements_active = true: announcements_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\"\n            icon=\"layout\"\n            active={organization_active}\n            >\n            {t('organization.organization.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/locations\"\n            icon=\"home\"\n            active={locations_active}\n            >\n            {t('organization.locations.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/classtypes\"\n            icon=\"book-open\"\n            active={classtypes_active}\n            >\n            {t('organization.classtypes.title')}\n        </List.GroupItem>\n        {/* <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/memberships\"\n            icon=\"clipboard\"\n            active={memberships_active}\n            >\n            {t('organization.memberships.title')}\n        </List.GroupItem> */}\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/classpasses\"\n            icon=\"credit-card\"\n            active={classpasses_active}\n            >\n            {t('organization.classpasses.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/subscriptions\"\n            icon=\"edit\"\n            active={subscriptions_active}\n            >\n            {t('organization.subscriptions.title')}\n        </List.GroupItem>\n        {/* <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/appointment_categories\"\n            icon=\"calendar\"\n            active={appointments_active}\n            >\n            {t('organization.appointments.title')}\n        </List.GroupItem> */}\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/levels\"\n            icon=\"tag\"\n            active={levels_active}\n            >\n            {t('organization.levels.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/holidays\"\n            icon=\"sun\"\n            active={holidays_active}\n            >\n            {t('organization.holidays.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/discoveries\"\n            icon=\"compass\"\n            active={discoveries_active}\n            >\n            {t('organization.discoveries.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/languages\"\n            icon=\"flag\"\n            active={languages_active}\n            >\n            {t('organization.languages.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\"\n            icon=\"image\"\n            active={organization_branding_active}\n            >\n            {t('organization.organization.branding.title')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\"\n            icon=\"briefcase\"\n            active={documents_active}\n            >\n            {t('organization.documents.title')}\n        </List.GroupItem>\n        <HasPermissionWrapper permission=\"view\"\n                              resource=\"organizationannouncement\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to=\"#/organization/announcements\"\n                icon=\"message-square\"\n                active={announcements_active}\n                >\n                {t('organization.announcements.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(OrganizationMenu)","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n                <Grid.Row>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.organization.title\")}</h5>\n                        {t(\"organization.organization.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.locations.title\")}</h5>\n                        {t(\"organization.locations.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.classtypes.title\")}</h5>\n                        {t(\"organization.classtypes.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.classpasses.title\")}</h5>\n                        {t(\"organization.classpasses.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.subscriptions.title\")}</h5>\n                        {t(\"organization.subscriptions.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  {/* <Grid.Col md={4} lg={4}>\n                    <Link to='/organization/appointment_categories'>\n                      <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                    </Link>\n                  </Grid.Col> */}\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.levels.title\")}</h5>\n                        {t(\"organization.levels.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.holidays.title\")}</h5>\n                        {t(\"organization.holidays.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.discoveries.title\")}</h5>\n                        {t(\"organization.discoveries.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.languages.title\")}</h5>\n                        {t(\"organization.languages.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.organization.branding.title\")}</h5>\n                        {t(\"organization.organization.branding.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"organization.documents.title\")}</h5>\n                        {t(\"organization.documents.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  <HasPermissionWrapper permission=\"view\"\n                                        resource=\"organizationannouncement\">\n\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"organization.announcements.title\")}</h5>\n                          {t(\"organization.announcements.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                </Grid.Row>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <OrganizationMenu />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  const id = match.params.id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <h5>{t(\"general.menu\")}</h5>\n              <OrganizationMenu activeLink='organization'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationEditBase from \"./OrganizationEditBase\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data, fetchMore } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  const id = match.params.id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <h5>{t(\"general.menu\")}</h5>\n              <OrganizationMenu activeLink='organization_branding'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from '../queries'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data, fetchMore } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\nimport { updateLocale } from 'moment'\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n      }\n    }\n  }\n`\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {children}\n          </Grid.Col>\n          <Grid.Col md={3}>\n            {(showEditBack) ?\n              <Link to=\"/organization/announcements\">\n                <Button color=\"primary btn-block mb-6\">\n                  <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                </Button>\n              </Link>\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <Link to=\"/organization/announcements/add\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.announcements.add')}\n                  </Button>\n                </Link>\n                </HasPermissionWrapper>\n            }\n            <OrganizationMenu activeLink='announcements'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                      <Table.Col>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                      {/* <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n                        {(archiveCostcenter, { data }) => (\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <button className=\"icon btn btn-link btn-sm\" \n                                title={t('general.archive')} \n                                href=\"\"\n                                onClick={() => {\n                                  console.log(\"clicked archived\")\n                                  let id = node.id\n                                  archiveCostcenter({ variables: {\n                                    input: {\n                                    id,\n                                    archived: !archived\n                                    }\n                            }, refetchQueries: [\n                                {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                            ]}).then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success(\n                                (archived) ? t('general.unarchived'): t('general.archived'), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error);\n                            })\n                            }}>\n                              <Icon prefix=\"fa\" name=\"inbox\" />\n                            </button>\n                          </Table.Col>\n                        )}\n                      </Mutation> */}\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <OrganizationMenu activeLink='levels'/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from '../OrganizationMenu'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ \n                      displayPublic: false,\n                      displayShop: false,\n                      displayBackend: false,\n                      title: '', \n                      content: '',\n                      dateStart: new Date(),\n                      dateEnd: new Date(),\n                      priority: 100,\n                    }}\n                    validationSchema={ANNOUNCEMENT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                      let inputValues = {\n                        displayPublic: values.displayPublic,\n                        displayBackend: values.displayBackend,\n                        displayShop: values.displayShop,\n                        title: values.title, \n                        content: values.content,\n                        dateStart: dateToLocalISO(values.dateStart),\n                        dateEnd: dateToLocalISO(values.dateEnd),\n                        priority: values.priority\n                      }\n\n                      addAnnouncement({ variables: {\n                        input: inputValues\n                      }, refetchQueries: [\n                          {query: GET_ANNOUNCEMENTS_QUERY}\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data)\n                          history.push(returnUrl)\n                          toast.success((t('organization.announcements.toast_add_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                    }}\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                        <OrganizationAnnouncementForm \n                          isSubmitting={isSubmitting}\n                          values={values}\n                          errors={errors}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationannouncement\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              <OrganizationMenu activeLink='announcements'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: values.priority\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query OrganizationAppointments($after: String, $before: String, $organizationAppointmentCategory: ID!, $archived: Boolean!) {\n    organizationAppointments(first: 15, before: $before, after: $after, organizationAppointmentCategory: $organizationAppointmentCategory, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationAppointmentCategory {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationAppointmentCategory(id: $organizationAppointmentCategory) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointment(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport CardHeaderSeparator from \"../../../general/CardHeaderSeparator\"\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT = gql`\n  mutation ArchiveOrganizationAppointment($input: ArchiveOrganizationAppointmentInput!) {\n    archiveOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointments = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to=\"/organization/appointment_categories\" \n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.appointment_categories.title')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENTS_QUERY} variables={{ archived, organizationAppointmentCategory: match.params.category_id }}>\n             {({ loading, error, data: {organizationAppointments: appointments, organizationAppointmentCategory: location}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}>\n                    <p>{t('organization.appointments.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n\n                // Empty list\n                if (!appointments.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointments.empty_list') : t(\"organization.appointments.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointments.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointments.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointments.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.appointment_category')}</strong> {location.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {appointments.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                <Table.Col key={v4()}>\n                                  {node.name}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {(node.displayPublic) ? \n                                    <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                    <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('organization.appointments.instructor_prices')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={ARCHIVE_APPOINTMENT} key={v4()}>\n                                  {(archiveAppointmentCategorysRoom, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                          title={t('general.archive')} \n                                          href=\"\"\n                                          onClick={() => {\n                                            console.log(\"clicked archived\")\n                                            let id = node.id\n                                            archiveAppointmentCategorysRoom({ variables: {\n                                              input: {\n                                              id,\n                                              archived: !archived\n                                              }\n                                      }, refetchQueries: [\n                                          { \n                                            query: GET_APPOINTMENTS_QUERY, \n                                            variables: {\"archived\": archived, organizationAppointmentCategory: match.params.category_id }\n                                          }\n                                      ]}).then(({ data }) => {\n                                        console.log('got data', data);\n                                        toast.success(\n                                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                      }).catch((error) => {\n                                        toast.error((t('general.toast_server_error')) +  error, {\n                                            position: toast.POSITION.BOTTOM_RIGHT\n                                          })\n                                        console.log('there was an error sending the query', error);\n                                      })\n                                      }}>\n                                        <Icon prefix=\"fa\" name=\"inbox\" />\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/add/\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointments.add')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointments'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.appointments.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={return_url}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","// @flow\n\nimport React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nconst ADD_APPOINTMENT = gql`\n  mutation CreateOrganizationAppointment($input: CreateOrganizationAppointmentInput!) {\n    createOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        organizationAppointmentCategory {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst return_url = \"/organization/appointment_categories/appointments/\"\n\nconst OrganizationAppointmentAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointments.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT} onCompleted={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\")}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ name: '', displayPublic: true }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointmentCategory: match.params.category_id,\n                                      name: values.name, \n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointments.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(return_url + match.params.category_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointments'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from './queries'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentForm from './OrganizationAppointmentForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateOrganizationAppointment($input: UpdateOrganizationAppointmentInput!) {\n    updateOrganizationAppointment(input: $input) {\n      organizationAppointment {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const category_id = match.params.category_id\n    const return_url = \"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointments.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointment\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialGlaccount = \"\"\n                    if (initialData.financeGlaccount) {\n                      initialGlaccount =  initialData.financeGlaccount.id\n                    } \n\n                    let initialCostcenter = \"\"\n                    if (initialData.financeCostcenter) {\n                      initialCostcenter =  initialData.financeCostcenter.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(return_url)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic,\n                                financeGlaccount: initialGlaccount,\n                                financeCostcenter: initialCostcenter,\n                              }}\n                              validationSchema={APPOINTMENT_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENTS_QUERY,\n                                      variables: {\"archived\": false, \"organizationAppointmentCategory\": match.params.category_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointments.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointment\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='appointments'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_CATEGORIES_QUERY = gql`\n  query OrganizationAppointmentCategories($after: String, $before: String, $archived: Boolean) {\n    organizationAppointmentCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_CATEGORY_QUERY = gql`\n  query OrganizationAppointmentCategory($id: ID!) {\n    organizationAppointmentCategory(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from \"./queries\"\n\nconst ARCHIVE_APPOINTMENT_CATEGORY = gql`\n  mutation ArchiveOrganizationAppointmentCategory($input: ArchiveOrganizationAppointmentCategoryInput!) {\n    archiveOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n\nconst OrganizationAppointmentCategories = ({ t, history, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_CATEGORIES_QUERY} variables={{ archived }}>\n             {({ loading, error, data: {organizationAppointmentCategories: appointment_categories}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}>\n                    <p>{t('organization.appointment_categories.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n                \n                // Empty list\n                if (!appointment_categories.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.appointment_categories.empty_list') : t(\"organization.appointment_categories.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_categories.title')}\n                               headerContent={headerOptions}\n                               pageInfo={appointment_categories.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: appointment_categories.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentCategories.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentCategories.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new appointment_categories at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentCategories: {\n                                            __typename: previousResult.organizationAppointmentCategories.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentCategories.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <Table>\n                          <Table.Header>\n                            <Table.Row key={v4()}>\n                              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                            </Table.Row>\n                          </Table.Header>\n                          <Table.Body>\n                              {appointment_categories.edges.map(({ node }) => (\n                                <Table.Row key={v4()}>\n                                  <Table.Col key={v4()}>\n                                    {node.name}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {(node.displayPublic) ? \n                                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                                  </Table.Col>\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    {(node.archived) ? \n                                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                      <div>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/edit/\" + node.id)}\n                                                color=\"secondary\">\n                                          {t('general.edit')}\n                                        </Button>\n                                        <Button className='btn-sm' \n                                                onClick={() => history.push(\"/organization/appointment_categories/\" + node.id + \"/appointments/\")}\n                                                color=\"secondary\">\n                                          {t('organization.appointments.title')}\n                                        </Button>\n                                      </div>\n                                    }\n                                  </Table.Col>\n                                  <Mutation mutation={ARCHIVE_APPOINTMENT_CATEGORY} key={v4()}>\n                                    {(archiveLocation, { data }) => (\n                                      <Table.Col className=\"text-right\" key={v4()}>\n                                        <button className=\"icon btn btn-link btn-sm\" \n                                           title={t('general.archive')} \n                                           href=\"\"\n                                           onClick={() => {\n                                             console.log(\"clicked archived\")\n                                             let id = node.id\n                                             archiveLocation({ variables: {\n                                               input: {\n                                                id,\n                                                archived: !archived\n                                               }\n                                        }, refetchQueries: [\n                                            {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": archived }}\n                                        ]}).then(({ data }) => {\n                                          console.log('got data', data);\n                                          toast.success(\n                                            (archived) ? t('general.unarchived'): t('general.archived'), {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                        }).catch((error) => {\n                                          toast.error((t('general.toast_server_error')) +  error, {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                          console.log('there was an error sending the query', error);\n                                        })\n                                        }}>\n                                          <Icon prefix=\"fa\" name=\"inbox\" />\n                                        </button>\n                                      </Table.Col>\n                                    )}\n                                  </Mutation>\n                                </Table.Row>\n                              ))}\n                          </Table.Body>\n                        </Table>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_categories.add')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointments'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategories))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationAppointmentCategoryForm = ({ t, history, isSubmitting, values, errors, return_url }) => (\n  <FoForm>\n    <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.appointment_category.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>    \n\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={return_url}>\n          <Button color=\"link\" type=\"button\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationAppointmentCategoryForm))","// @flow\n\nimport React from 'react'\nimport { Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APPOINTMENT_CATEGORIES_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nconst ADD_ORGANIZATION_APPOINTMENT_CATEGORY = gql`\n  mutation CreateOrganizationAppointmentCategory($input: CreateOrganizationAppointmentCategoryInput!) {\n    createOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nconst return_url = \"/organization/appointment_categories\"\n\nconst OrganizationAppointmentCategoryAdd = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_categories.title_add')}</Card.Title>\n            </Card.Header>\n            <Mutation mutation={ADD_ORGANIZATION_APPOINTMENT_CATEGORY} onCompleted={() => history.push(return_url)}> \n                {(addAppointmentCategory, { data }) => (\n                    <Formik\n                        initialValues={{ name: '', displayPublic: true }}\n                        validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                        onSubmit={(values, { setSubmitting }) => {\n                            addAppointmentCategory({ variables: {\n                              input: {\n                                name: values.name, \n                                displayPublic: values.displayPublic\n                              }\n                            }, refetchQueries: [\n                                {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                            ]})\n                            .then(({ data }) => {\n                                console.log('got data', data);\n                                toast.success((t('organization.appointment_categories.toast_add_success')), {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                              }).catch((error) => {\n                                toast.error((t('general.toast_server_error')) +  error, {\n                                    position: toast.POSITION.BOTTOM_RIGHT\n                                  })\n                                console.log('there was an error sending the query', error)\n                                setSubmitting(false)\n                              })\n                        }}\n                        >\n                        {({ isSubmitting, errors, values }) => (\n                          <OrganizationAppointmentCategoryForm\n                            isSubmitting={isSubmitting}\n                            errors={errors}\n                            values={values}\n                            return_url={return_url}\n                          />\n                        )}\n                    </Formik>\n                )}\n                </Mutation>\n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentcategory\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(return_url)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointment_categories'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENT_CATEGORIES_QUERY, GET_APPOINTMENT_CATEGORY_QUERY } from './queries'\nimport { APPOINTMENT_CATEGORY_SCHEMA } from './yupSchema'\n\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\nimport OrganizationAppointmentCategoryForm from \"./OrganizationAppointmentCategoryForm\"\n\n\nconst UPDATE_APPOINTMENT_CATEGORY = gql`\n  mutation UpdateOrganizationAppointmentCategory($input: UpdateOrganizationAppointmentCategoryInput!) {\n    updateOrganizationAppointmentCategory(input: $input) {\n      organizationAppointmentCategory {\n        id\n        name\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentCategoryEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization location edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const return_url = \"/organization/appointment_categories\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_categories.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_CATEGORY_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const initialData = data.organizationAppointmentCategory;\n                    console.log('query data')\n                    console.log(data)\n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_CATEGORY} onCompleted={() => history.push(return_url)}> \n                      {(updateAppointmentCategory, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                name: initialData.name, \n                                displayPublic: initialData.displayPublic \n                              }}\n                              validationSchema={APPOINTMENT_CATEGORY_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateAppointmentCategory({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      name: values.name,\n                                      displayPublic: values.displayPublic \n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_CATEGORIES_QUERY, variables: {\"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_categories.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                  <OrganizationAppointmentCategoryForm\n                                    isSubmitting={isSubmitting}\n                                    errors={errors}\n                                    values={values}\n                                    return_url={return_url}\n                                  />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentcategory\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='appointment_categories'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENT_PRICES_QUERY = gql`\n  query OrganizationAppointmentPrices($after: String, $before: String, $organizationAppointment: ID!) {\n    organizationAppointmentPrices(first: 15, before: $before, after: $after, organizationAppointment: $organizationAppointment) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointment(id: $organizationAppointment) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_PRICE_QUERY = gql`\n  query OrganizationAppointment($id: ID!, $after: String, $before: String) {\n    organizationAppointmentPrice(id:$id) {\n      id\n      price\n      account {\n        id\n        fullName\n      }\n      financeTaxRate {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AppointmentInputValues($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    accountInstructorProfiles(first: 100, before: $before, after: $after, appointments: true, account_IsActive: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport CardHeaderSeparator from \"../../../../general/CardHeaderSeparator\"\nimport OrganizationMenu from \"../../../OrganizationMenu\"\n\nimport { GET_APPOINTMENT_PRICES_QUERY } from \"./queries\"\n\nconst DELETE_APPOINTMENT_PRICE = gql`\n  mutation DeleteOrganizationAppointmentPrice($input: DeleteOrganizationAppointmentPriceInput!) {\n    deleteOrganizationAppointmentPrice(input: $input) {\n      ok\n    }\n  }\n`\n\nconst OrganizationAppointmentPrices = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")}>\n          <div className=\"page-options d-flex\">\n            <Link to={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments\"}\n                  className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('general.appointment')}\n            </Link>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_APPOINTMENT_PRICES_QUERY} variables={{ organizationAppointment: match.params.appointment_id }}>\n             {({ loading, error, data, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>{t('organization.appointment_prices.error_loading')}</p>\n                  </ContentCard>\n                )\n\n                const prices = data.organizationAppointmentPrices\n\n                // Empty list\n                if (!prices.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}>\n                    <p>\n                      {t('organization.appointment_prices.empty_list')}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.appointment_prices.title')}\n                               pageInfo={prices.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: prices.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationAppointmentPrices.edges\n                                    const pageInfo = fetchMoreResult.organizationAppointmentPrices.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new locations at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationAppointmentPrices: {\n                                            __typename: previousResult.organizationAppointmentPrices.__typename,\n                                            edges: [ ...previousResult.organizationAppointmentPrices.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <div>\n                      <Alert type=\"primary\">\n                        <strong>{t('general.prices_for')} {t('general.appointment')}</strong> {data.organizationAppointment.name}\n                      </Alert>\n\n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                            {prices.edges.map(({ node }) => (\n                              <Table.Row key={v4()}>\n                                {console.log(node)}\n                                <Table.Col key={v4()}>\n                                  {node.account.fullName}\n                                </Table.Col>\n                                <Table.Col key={v4()}>\n                                  {node.priceDisplay}\n                                </Table.Col>\n                                <Table.Col className=\"text-right\" key={v4()}>\n                                  {(node.archived) ? \n                                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                    <span>\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/appointment_categories/\" + \n                                                match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                    </span>\n                                  }\n                                </Table.Col>\n                                <Mutation mutation={DELETE_APPOINTMENT_PRICE} key={v4()}>\n                                  {(deleteAppointmentPrice, { data }) => (\n                                    <Table.Col className=\"text-right\" key={v4()}>\n                                      <button className=\"icon btn btn-link btn-sm\" \n                                        title={t('general.delete')} \n                                        href=\"\"\n                                        onClick={() => {\n                                          confirm_delete({\n                                            t: t,\n                                            msgConfirm: t(\"organization.appointment_prices.delete_confirm_msg\"),\n                                            msgDescription: <p>{node.account.fullName} {node.priceDisplay}</p>,\n                                            msgSuccess: t('organization.appointment_prices.deleted'),\n                                            deleteFunction: deleteAppointmentPrice,\n                                            functionVariables: { variables: {\n                                              input: {\n                                                id: node.id\n                                              }\n                                            }, refetchQueries: [\n                                              {query: GET_APPOINTMENT_PRICES_QUERY, variables: { organizationAppointment: match.params.appointment_id }} \n                                            ]}\n                                          })\n                                      }}>\n                                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                      </button>\n                                    </Table.Col>\n                                  )}\n                                </Mutation>\n                              </Table.Row>\n                            ))}\n                        </Table.Body>\n                      </Table>\n                      </div>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointment\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id + \"/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.appointment_prices.add')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointments'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_PRICE_SCHEMA = Yup.object().shape({\n    account: Yup.string()\n      .required(t('yup.field_required')),\n    price: Yup.number()\n      .required(t('yup.field_required')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required'))\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst OrganizationAppointmentForm = ({ t, history, match, inputData, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n         <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                    name=\"account\" \n                    className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.accountInstructorProfiles.edges.map(({ node }) =>\n                <option value={node.account.id} key={v4()}>{node.account.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n              <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in appointment price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={return_url}>\n            <Button color=\"link\" type=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentForm))","// @flow\n\nimport React from 'react'\nimport { Mutation, Query } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../../OrganizationMenu\"\n\n\nconst ADD_APPOINTMENT_PRICE = gql`\n  mutation CreateOrganizationAppointmentPrice($input: CreateOrganizationAppointmentPriceInput!) {\n    createOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nconst return_url = \"/organization/appointment_categories/appointments/\"\n\nconst OrganizationAppointmentPriceAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t('organization.title')} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.appointment_prices.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n              {({ loading, error, data, refetch }) => {\n                // Loading\n                if (loading) return <p>{t('general.loading_with_dots')}</p>\n                // Error\n                if (error) {\n                  console.log(error)\n                  return <p>{t('general.error_sad_smiley')}</p>\n                }\n                \n                console.log('query data')\n                console.log(data)\n                const inputData = data\n\n                return (\n                  <Mutation mutation={ADD_APPOINTMENT_PRICE} onCompleted={\n                    () => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}> \n                      {(addAppointment, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationAppointment: '', \n                                account: '',\n                                price: '',\n                                financeTaxRate: \"\",\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  addAppointment({ variables: {\n                                    input: {\n                                      organizationAppointment: match.params.appointment_id,\n                                      account: values.account,\n                                      price: values.price, \n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {\"organizationAppointment\": match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.appointment_prices.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                )}}\n              </Query>                    \n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationappointmentprice\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/appointment_categories/\" + match.params.category_id + \"/appointments/prices/\" + match.params.appointment_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='appointments'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENT_PRICES_QUERY, GET_APPOINTMENT_PRICE_QUERY } from './queries'\nimport { APPOINTMENT_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationAppointmentPriceForm from './OrganizationAppointmentPriceForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../../OrganizationMenu\"\n\n\nconst UPDATE_APPOINTMENT_PRICE = gql`\n  mutation UpdateOrganizationAppointmentPrice($input: UpdateOrganizationAppointmentPriceInput!) {\n    updateOrganizationAppointmentPrice(input: $input) {\n      organizationAppointmentPrice {\n        id\n        account {\n          id\n          fullName\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nclass OrganizationAppointmentPriceEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization appointment edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const appointment_id = match.params.appointment_id\n    const category_id = match.params.category_id\n    const return_url = \"/organization/appointment_categories/\" + category_id + \"/appointments/prices/\" + appointment_id\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t('organization.title')} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.appointment_prices.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_APPOINTMENT_PRICE_QUERY} variables={{ id: id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const inputData = data\n                    const initialData = data.organizationAppointmentPrice\n                    console.log('query data')\n                    console.log(data)\n\n                    let initialAccount = \"\"\n                    if (initialData.account) {\n                      initialAccount = initialData.account.id\n                    }\n\n                    let initialFinanceTaxRate = \"\"\n                    if (initialData.financeTaxRate) {\n                      initialFinanceTaxRate =  initialData.financeTaxRate.id\n                    } \n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_APPOINTMENT_PRICE} onCompleted={() => history.push(return_url)}> \n                      {(updateLocation, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                account: initialAccount,\n                                price: initialData.price, \n                                financeTaxRate: initialFinanceTaxRate,\n                              }}\n                              validationSchema={APPOINTMENT_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  updateLocation({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      account: values.account,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_APPOINTMENT_PRICES_QUERY,\n                                      variables: {organizationAppointment: match.params.appointment_id }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.appointment_prices.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values }) => (\n                                <OrganizationAppointmentPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationappointmentprice\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='appointments'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationAppointmentPriceEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  const activeLink = \"classpasses\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/classpasses/\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-let\" /> {t('general.back')}\n                  </Button>\n                </Link>            \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                  <Link to=\"/organization/classpasses/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpasses.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>              \n              }\n\n              <OrganizationMenu activeLink={activeLink}/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          organizationMembership {\n            id\n            name\n          }\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      organizationMembership {\n        id\n        name\n      }\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    organizationMemberships(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationMemberships(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      displayPublic\n      displayShop\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      classes\n      unlimited\n      organizationMembership {\n        id\n        name\n      }\n      quickStatsAmount\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n        displayPublic\n        displayShop\n        name\n        description\n        price\n        financeTaxRate {\n          id\n          name\n        }\n        validity\n        validityUnit\n        classes\n        unlimited\n        organizationMembership {\n          id\n          name\n        }\n        quickStatsAmount\n        financeGlaccount {\n          id\n          name\n        }\n        financeCostcenter {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY)\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: archived});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: archived});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\n// const OrganizationClasspasses = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//          <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses/groups\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASSES_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationClasspasses: classpasses}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}>\n//                     <p>{t('organization.classpasses.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   {/* <Link to=\"/organization/classpasses/groups\">\n//                     <Button color='secondary'  \n//                             size=\"sm\"\n//                             icon=\"folder\"\n//                             // onClick={() => {archived=false; refetch({archived});}}>\n//                             >\n//                       {t('general.groups')}\n//                     </Button>\n//                   </Link>\n//                   <CardHeaderSeparator /> */}\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!classpasses.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpasses.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={classpasses.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpasses.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspasses.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new memberships at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationMemberships: {\n//                                             __typename: previousResult.organizationClasspasses.__typename,\n//                                             edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpasses.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.displayPublic} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.displayShop} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     <BadgeBoolean value={node.trialPass} />\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {(node.unlimited) ? t('general.unlimited') : node.classes }\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.priceDisplay} <br />\n//                                     {(node.financeTaxRate) ? \n//                                       <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n//                                       : \"\"\n//                                     }\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.validity} <br />\n//                                     <span className=\"text-muted\">\n//                                       {node.validityUnitDisplay}\n//                                     </span>\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                         title={t('general.archive')} \n//                                         href=\"\"\n//                                         onClick={() => {\n//                                           console.log(\"clicked archived\")\n//                                           let id = node.id\n//                                           archiveClasspass({ variables: {\n//                                             input: {\n//                                             id,\n//                                             archived: !archived\n//                                             }\n//                                     }, refetchQueries: [\n//                                         {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n//                                     ]}).then(({ data }) => {\n//                                       console.log('got data', data);\n//                                       toast.success(\n//                                         (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error);\n//                                     })\n//                                     }}>\n//                                       <Icon prefix=\"fa\" name=\"inbox\" />\n//                                     </button>\n//                                       </Table.Col>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspass\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpasses.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <OrganizationMenu activeLink='classpasses'/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const return_url = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>      \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayShop\" \n                    checked={values.displayShop} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(return_url)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            organizationMembership: \"\",\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: values.validity,\n                  validityUnit: values.validityUnit,\n                  classes: values.classes,\n                  unlimited: values.unlimited,\n                  organizationMembership: values.organizationMembership,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASSES_QUERY, GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/classpasses\"\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationClasspass.organizationMembership) {\n    initialMembership = initialData.organizationClasspass.organizationMembership.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialData.organizationClasspass.financeTaxRate.id,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: values.validity,\n                  validityUnit: values.validityUnit,\n                  classes: values.classes,\n                  unlimited: values.unlimited,\n                  organizationMembership: values.organizationMembership,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","// @flow\n\nimport React, { Children } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/classpasses\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to={\"/organization/classpasses/groups\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t(\"general.back\")}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n                  </Button>\n                </HasPermissionWrapper>              \n              }\n              <OrganizationMenu activeLink=''/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                    </Table.Col>\n                    <Table.Col>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <OrganizationMenu activeLink=''/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport {\n  Dimmer,\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  const cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Alert type=\"primary\">\n            <strong>{t('general.group')}</strong> {group.name}\n          </Alert>\n          <Table>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        </Card.Body>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\" />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/classtypes/\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <Link to=\"/organization/classtypes/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classtypes.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <OrganizationMenu activeLink='classtypes'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history, archived=false}) {\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED) === \"true\") ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <div>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classtypes.edit_image')}\n                        </Button>\n                      </div>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  const cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/discoveries\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n             :\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationdiscovery\">\n                <Link to=\"/organization/discoveries/add\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.discoveries.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              }\n              <OrganizationMenu activeLink='discoveries'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n            <Grid.Col md={3}>\n              <h5>{t(\"general.menu\")}</h5>\n              <OrganizationMenu activeLink='documents'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import React, { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationDocumentsBase({ t, children, headerLinks, sidebarButton }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {headerLinks}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}        \n            </Grid.Col>\n            <Grid.Col md={3}>\n              {sidebarButton}\n              <h5>{t(\"general.menu\")}</h5>\n              <OrganizationMenu activeLink='documents'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: String!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [deleteOrganizationDocument, { data }] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationMenu from \"../OrganizationMenu\"\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  const back = <Link to={`/organization/documents/${organizationId}`}>\n    <Button \n      icon=\"arrow-left\"\n      className=\"mr-2\"\n      outline\n      color=\"secondary\"\n    >\n      {t('general.back_to')} {t('organization.documents.title')}\n    </Button>\n  </Link>\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"organizationdocument\">\n      <Link to={`/organization/documents/${organizationId}/${documentType}/add`} >\n        <Button color=\"primary btn-block mb-6\" >\n          <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.documents.add')}\n        </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase headerLinks={back}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase headerLinks={back}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n  \n\n  return (\n    <OrganizationDocumentsBase headerLinks={back} sidebarButton={sidebarButton}>\n      <ContentCard \n        cardTitle={t('organization.documents.title') + ' - ' + subTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {data.organizationDocuments.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        <ISODateString ISODateStr={node.dateStart} />\n                        {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                      </Table.Col>\n                      <Table.Col key={v4()}>\n                        {node.version}\n                      </Table.Col>\n                      <Table.Col key={v4()}>\n                        <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                      </Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <OrganizationDocumentsDelete node={node} />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n// import OrganizationDocumentForm from './OrganizationDocumentForm'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"organizationdocument\">\n      <Link to={returnUrl} >\n        <Button color=\"primary btn-block mb-6\" >\n          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n        </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  const [addDocument, { data }] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase sidebarButton={sidebarButton}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentAdd)\n\n\n// const OrganizationLevelAdd = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t('organization.title')} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//           <Card>\n//             <Card.Header>\n//               <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n//             </Card.Header>\n//             <Mutation mutation={ADD_LEVEL} onCompleted={() => history.push(return_url)}> \n//                 {(addLocation, { data }) => (\n//                     <Formik\n//                         initialValues={{ name: '', code: '' }}\n//                         validationSchema={LEVEL_SCHEMA}\n//                         onSubmit={(values, { setSubmitting }) => {\n//                             addLocation({ variables: {\n//                               input: {\n//                                 name: values.name, \n//                               }\n//                             }, refetchQueries: [\n//                                 {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n//                             ]})\n//                             .then(({ data }) => {\n//                                 console.log('got data', data);\n//                                 toast.success((t('organization.levels.toast_add_success')), {\n//                                     position: toast.POSITION.BOTTOM_RIGHT\n//                                   })\n//                               }).catch((error) => {\n//                                 toast.error((t('general.toast_server_error')) +  error, {\n//                                     position: toast.POSITION.BOTTOM_RIGHT\n//                                   })\n//                                 console.log('there was an error sending the query', error)\n//                                 setSubmitting(false)\n//                               })\n//                         }}\n//                         >\n//                         {({ isSubmitting, errors }) => (\n//                             <OrganizationLevelForm \n//                               isSubmitting={isSubmitting}\n//                               errors={errors}\n//                               return_url={return_url}\n//                             />\n//                         )}\n//                     </Formik>\n//                 )}\n//                 </Mutation>\n//           </Card>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(return_url)}>\n//                 <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <OrganizationMenu activeLink='levels'/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\n// export default withTranslation()(withRouter(OrganizationLevelAdd))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n// import OrganizationDocumentForm from './OrganizationDocumentForm'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"change\"\n    resource=\"organizationdocument\">\n      <Link to={returnUrl} >\n        <Button color=\"primary btn-block mb-6\" >\n          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n        </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  const [updateDocument, { data: dataUpdate }] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase sidebarButton={sidebarButton}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase sidebarButton={sidebarButton}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n\n  return (\n    <OrganizationDocumentsBase sidebarButton={sidebarButton}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: data.organizationDocument.dateStart, \n            dateEnd: data.organizationDocument.dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/holidays\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>  \n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <Link to=\"/organization/holidays/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.holidays.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }     \n              <OrganizationMenu activeLink='holidays'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: node.description}} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  const returnUrl = \"/organization/holidays\"\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Table>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {locations.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in holiday_locations) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in holiday_locations))}\n                    {(!(node.id in holiday_locations)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('organization.holiday.locations.add_to_holiday')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let locationId = node.id\n                            addLocationToHoliday({ variables: {\n                              input: {\n                                organizationHoliday: holidayId,\n                                organizationLocation: locationId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('organization.holiday.locations.add_to_holiday')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('organization.holiday.locations.delete_from_holiday')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let locationId = node.id\n                            deleteLocationFromHoliday({ variables: {\n                              input: {\n                                organizationHoliday: holidayId,\n                                organizationLocation: locationId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('organization.holiday.locations.delete_from_holiday')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        </Card.Body>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/languages\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>  \n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <Link to=\"/organization/languages/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.languages.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }     \n              <OrganizationMenu activeLink='languages'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\" />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ? \n                <Link to=\"/organization/locations\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button> \n                </Link>\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <Link to=\"/organization/locations/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.locations.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <OrganizationMenu activeLink='locations'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <div>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </div>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showBack=false}) {\n  const locationId = match.params.location_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/locations\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.locations.title')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to={`/organization/locations/rooms/${locationId}`}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <Link to={`/organization/locations/rooms/add/${match.params.location_id}`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.location_rooms.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n            <OrganizationMenu activeLink='locations'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  const cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <div>\n          <Alert type=\"primary\">\n            <strong>{t('general.location')}</strong> {location.name}\n          </Alert>\n\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {locationRooms.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(node.displayPublic) ? \n                        <Badge color=\"success\">{t('general.yes')}</Badge>: \n                        <Badge color=\"danger\">{t('general.no')}</Badge>}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      {(node.archived) ? \n                        <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      }\n                    </Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <button className=\"icon btn btn-link btn-sm\" \n                            title={t('general.archive')} \n                            href=\"\"\n                            onClick={() => {\n                              console.log(\"clicked archived\")\n                              let id = node.id\n                              archiveLocationRoom({ variables: {\n                                input: {\n                                id,\n                                archived: !archived\n                                }\n                        }, refetchQueries: [\n                            { \n                              query: GET_LOCATION_ROOMS_QUERY, \n                              variables: {archived: archived, organizationLocation: organizationLocationId }\n                            }\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(\n                            (archived) ? t('general.unarchived'): t('general.archived'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fa\" name=\"inbox\" />\n                        </button>\n                      </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n          </div>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ?\n                <Link to=\"/organization/levels\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>  \n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <Link to=\"/organization/levels/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }     \n              <OrganizationMenu activeLink='levels'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","// @flow\n\nimport { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nclass Validity extends Component {\n    render() {\n      const t = this.props.t\n      const validity = this.props.validity\n\n      switch(validity) {\n        case \"DAYS\":\n            return t('validity.days')\n            break\n        case \"WEEKS\":\n            return t('validity.weeks')\n            break\n        case \"MONTHS\":\n            return t('validity.months')\n            break\n        case \"YEARS\":\n            return t('validity.years')\n            break\n        default:\n            return \"\"\n            break\n        }\n    }\n}\n  \nexport default withTranslation()(Validity)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_MEMBERSHIPS_QUERY = gql`\n  query OrganizationMemberships($after: String, $before: String, $archived: Boolean) {\n    organizationMemberships(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          termsAndConditions\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MEMBERSHIP_QUERY = gql`\n  query OrganizationMembership($id: ID!, $after: String, $before: String, $archived: Boolean!) {\n    organizationMembership(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      termsAndConditions\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query FinanceInputValues($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport Validity from \"../../ui/Validity\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\nimport { GET_MEMBERSHIPS_QUERY } from \"./queries\"\n\nconst ARCHIVE_MEMBERSHIP = gql`\n  mutation ArchiveOrganizationMembership($input: ArchiveOrganizationMembershipInput!) {\n    archiveOrganizationMembership(input: $input) {\n      organizationMembership {\n        id\n        archived\n      }\n    }\n  }\n`\n\n\nconst OrganizationMemberships = ({ t, history, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} />\n        <Grid.Row>\n          <Grid.Col md={9}>\n            <Query query={GET_MEMBERSHIPS_QUERY} variables={{ archived }}>\n             {({ loading, error, data: {organizationMemberships: memberships}, refetch, fetchMore }) => {\n                // Loading\n                if (loading) return (\n                  <ContentCard cardTitle={t('organization.memberships.title')}>\n                    <Dimmer active={true}\n                            loader={true}>\n                    </Dimmer>\n                  </ContentCard>\n                )\n                // Error\n                if (error) return (\n                  <ContentCard cardTitle={t('organization.memberships.title')}>\n                    <p>{t('organization.memberships.error_loading')}</p>\n                  </ContentCard>\n                )\n                const headerOptions = <Card.Options>\n                  <Button color={(!archived) ? 'primary': 'secondary'}  \n                          size=\"sm\"\n                          onClick={() => {archived=false; refetch({archived});}}>\n                    {t('general.current')}\n                  </Button>\n                  <Button color={(archived) ? 'primary': 'secondary'} \n                          size=\"sm\" \n                          className=\"ml-2\" \n                          onClick={() => {archived=true; refetch({archived});}}>\n                    {t('general.archive')}\n                  </Button>\n                </Card.Options>\n                \n                // Empty list\n                if (!memberships.edges.length) { return (\n                  <ContentCard cardTitle={t('organization.memberships.title')}\n                               headerContent={headerOptions}>\n                    <p>\n                    {(!archived) ? t('organization.memberships.empty_list') : t(\"organization.memberships.empty_archive\")}\n                    </p>\n                   \n                  </ContentCard>\n                )} else {   \n                // Life's good! :)\n                return (\n                  <ContentCard cardTitle={t('organization.memberships.title')}\n                               headerContent={headerOptions}\n                               pageInfo={memberships.pageInfo}\n                               onLoadMore={() => {\n                                fetchMore({\n                                  variables: {\n                                    after: memberships.pageInfo.endCursor\n                                  },\n                                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                                    const newEdges = fetchMoreResult.organizationMemberships.edges\n                                    const pageInfo = fetchMoreResult.organizationMemberships.pageInfo\n\n                                    return newEdges.length\n                                      ? {\n                                          // Put the new memberships at the end of the list and update `pageInfo`\n                                          // so we have the new `endCursor` and `hasNextPage` values\n                                          organizationMemberships: {\n                                            __typename: previousResult.organizationMemberships.__typename,\n                                            edges: [ ...previousResult.organizationMemberships.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      : previousResult\n                                  }\n                                })\n                              }} >\n                    <Table>\n                          <Table.Header>\n                            <Table.Row key={v4()}>\n                              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n                            </Table.Row>\n                          </Table.Header>\n                          <Table.Body>\n                              {memberships.edges.map(({ node }) => (\n                                <Table.Row key={v4()}>\n                                  <Table.Col key={v4()}>\n                                    {node.name}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    <BadgeBoolean value={node.displayPublic} />\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    <BadgeBoolean value={node.displayShop} />\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {node.priceDisplay} <br />\n                                    {(node.financeTaxRate) ? \n                                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                                      : \"\"\n                                    }\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {node.validity} <br />\n                                    <span className=\"text-muted\">\n                                      {node.validityUnitDisplay}\n                                    </span>\n                                  </Table.Col>\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    {(node.archived) ? \n                                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/memberships/edit/\" + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                    }\n                                  </Table.Col>\n                                  <Mutation mutation={ARCHIVE_MEMBERSHIP} key={v4()}>\n                                    {(archiveMembership, { data }) => (\n                                      <Table.Col className=\"text-right\" key={v4()}>\n                                        <button className=\"icon btn btn-link btn-sm\" \n                                           title={t('general.archive')} \n                                           href=\"\"\n                                           onClick={() => {\n                                             console.log(\"clicked archived\")\n                                             let id = node.id\n                                             archiveMembership({ variables: {\n                                               input: {\n                                                id,\n                                                archived: !archived\n                                               }\n                                        }, refetchQueries: [\n                                            {query: GET_MEMBERSHIPS_QUERY, variables: {\"archived\": archived }}\n                                        ]}).then(({ data }) => {\n                                          console.log('got data', data);\n                                          toast.success(\n                                            (archived) ? t('general.unarchived'): t('general.archived'), {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                        }).catch((error) => {\n                                          toast.error((t('general.toast_server_error')) +  error, {\n                                              position: toast.POSITION.BOTTOM_RIGHT\n                                            })\n                                          console.log('there was an error sending the query', error);\n                                        })\n                                        }}>\n                                          <Icon prefix=\"fa\" name=\"inbox\" />\n                                        </button>\n                                      </Table.Col>\n                                    )}\n                                  </Mutation>\n                                </Table.Row>\n                              ))}\n                          </Table.Body>\n                        </Table>\n                  </ContentCard>\n                )}}\n             }\n            </Query>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationmembership\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/organization/memberships/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.memberships.add')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='memberships'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationMemberships))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MEMBERSHIP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    price: Yup.number()\n      .required(t('yup.field_required')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    validity: Yup.number()\n      .positive(t('yup.positive_number_required'))\n      .required(t('yup.field_required')),\n    validityUnit: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_MEMBERSHIPS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nconst CREATE_MEMBERSHIP = gql`\n  mutation CreateMembership($input: CreateOrganizationMembershipInput!) {\n    createOrganizationMembership(input: $input) {\n      organizationMembership {\n        id\n        displayPublic\n        displayShop\n        name\n        description\n        price\n        financeTaxRate {\n          id\n          name\n        }\n        validity\n        validityUnit\n        termsAndConditions\n        financeGlaccount {\n          id\n          name\n        }\n        financeCostcenter {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nclass OrganizationMembershipAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const return_url = \"/organization/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title=\"Organization\" />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.memberships.title_add')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_INPUT_VALUES_QUERY} variables={{ id }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    console.log('query data')\n                    console.log(data)\n                    const inputData = data\n\n                    return (\n                      \n                      <Mutation mutation={CREATE_MEMBERSHIP} onCompleted={() => history.push(return_url)}> \n                      {(createMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                displayPublic: true,\n                                displayShop: true,\n                                name: \"\",\n                                description: \"\",\n                                price: 0,\n                                financeTaxRate: \"\",\n                                validity: 1,\n                                validityUnit: \"MONTHS\",\n                                termsAndConditions: \"\",\n                                financeGlaccount: \"\",\n                                financeCostcenter: \"\"\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  createMembership({ variables: {\n                                    input: {\n                                      displayPublic: values.displayPublic,\n                                      displayShop: values.displayShop,\n                                      name: values.name,\n                                      description: values.description,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                      validity: values.validity,\n                                      validityUnit: values.validityUnit,\n                                      termsAndConditions: values.termsAndConditions,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_MEMBERSHIPS_QUERY, variables: {\"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.memberships.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                  <FoForm>\n                                      <Card.Body> \n                                        <Form.Group>\n                                          <Form.Label className=\"custom-switch\">\n                                              <Field \n                                                className=\"custom-switch-input\"\n                                                type=\"checkbox\" \n                                                name=\"displayPublic\" \n                                                checked={values.displayPublic} />\n                                              <span className=\"custom-switch-indicator\" ></span>\n                                              <span className=\"custom-switch-description\">{t('organization.membership.public')}</span>\n                                            </Form.Label>\n                                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                                        </Form.Group>      \n                                        <Form.Group>\n                                          <Form.Label className=\"custom-switch\">\n                                              <Field \n                                                className=\"custom-switch-input\"\n                                                type=\"checkbox\" \n                                                name=\"displayShop\" \n                                                checked={values.displayShop} />\n                                              <span className=\"custom-switch-indicator\" ></span>\n                                              <span className=\"custom-switch-description\">{t('organization.membership.shop')}</span>\n                                            </Form.Label>\n                                          <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                                        </Form.Group>      \n                                        <Form.Group label={t('general.name')} >\n                                          <Field type=\"text\" \n                                                name=\"name\" \n                                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.description')}>\n                                          <Editor\n                                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                                            textareaName=\"description\"\n                                            initialValue={values.description}\n                                            init={tinymceBasicConf}\n                                            onBlur={(e) => {\n                                              setFieldValue(\"description\", e.target.getContent())\n                                              setFieldTouched(\"description\", true, true)\n                                            }}\n                                          />\n                                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.price')}>\n                                          <Field type=\"text\" \n                                                name=\"price\" \n                                                className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.taxrate')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeTaxRate\" \n                                                 className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            {console.log(\"query data in membership add:\")}\n                                            {console.log(inputData)}\n                                            <option value=\"\" key={v4()}></option>\n                                            {inputData.financeTaxRates.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.validity')}>\n                                          <Field type=\"text\" \n                                                name=\"validity\" \n                                                className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.validity_unit')}>\n                                          <Field component=\"select\" \n                                                 name=\"validityUnit\" \n                                                 className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                                            <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                                            <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                                          </Field>\n                                          <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.terms_and_conditions')}>\n                                          <Editor\n                                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                                            textareaName=\"termsAndConditions\"\n                                            initialValue={values.termsAndConditions}\n                                            init={tinymceBasicConf}\n                                            onBlur={(e) => {\n                                              setFieldValue(\"termsAndConditions\", e.target.getContent())\n                                              setFieldTouched(\"termsAndConditions\", true, true)\n                                            }}\n                                          />\n                                          <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.glaccount')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeGlaccount\" \n                                                 className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"\" key={v4()}></option>\n                                            {inputData.financeGlaccounts.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.costcenter')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeCostcenter\" \n                                                 className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"\" key={v4()}></option>\n                                            {inputData.financeCostcenters.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                      </Card.Body>\n                                      <Card.Footer>\n                                          <Button \n                                            className=\"pull-right\"\n                                            color=\"primary\"\n                                            disabled={isSubmitting}\n                                            type=\"submit\"\n                                          >\n                                            {t('general.submit')}\n                                          </Button>\n                                          <Button\n                                            type=\"button\" \n                                            color=\"link\" \n                                            onClick={() => history.push(return_url)}\n                                          >\n                                              {t('general.cancel')}\n                                          </Button>\n                                      </Card.Footer>\n                                  </FoForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationmembership\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='memberships'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationMembershipAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_MEMBERSHIPS_QUERY, GET_MEMBERSHIP_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nconst UPDATE_MEMBERSHIP = gql`\n  mutation UpdateOrganizationMembership($input: UpdateOrganizationMembershipInput!) {\n    updateOrganizationMembership(input: $input) {\n        organizationMembership {\n          id\n          displayPublic\n          displayShop\n          name\n          description\n          price\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          termsAndConditions\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n    }\n  }\n`\n\n\nclass OrganizationMembershipEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization membership edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const return_url = \"/organization/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title=\"Organization\" />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.memberships.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_MEMBERSHIP_QUERY} variables={{ \"id\": id, \"archived\": false}} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    console.log('query data')\n                    console.log(data)\n                    const initialData = data\n\n                    let initialGlaccount = \"\"\n                    if (initialData.organizationMembership.financeGlaccount) {\n                      initialGlaccount =  initialData.organizationMembership.financeGlaccount.id\n                    } \n\n                    let initialCostcenter = \"\"\n                    if (initialData.organizationMembership.financeCostcenter) {\n                      initialCostcenter =  initialData.organizationMembership.financeCostcenter.id\n                    } \n\n                    return (\n                      <Mutation mutation={UPDATE_MEMBERSHIP} onCompleted={() => history.push(return_url)}> \n                      {(createMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                displayPublic: initialData.organizationMembership.displayPublic,\n                                displayShop: initialData.organizationMembership.displayShop,\n                                name: initialData.organizationMembership.name,\n                                description: initialData.organizationMembership.description,\n                                price: initialData.organizationMembership.price,\n                                financeTaxRate: initialData.organizationMembership.financeTaxRate.id,\n                                validity: initialData.organizationMembership.validity,\n                                validityUnit: initialData.organizationMembership.validityUnit,\n                                termsAndConditions: initialData.organizationMembership.termsAndConditions,\n                                financeGlaccount:  initialGlaccount,\n                                financeCostcenter: initialCostcenter\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  createMembership({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      displayPublic: values.displayPublic,\n                                      displayShop: values.displayShop,\n                                      name: values.name,\n                                      description: values.description,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                      validity: values.validity,\n                                      validityUnit: values.validityUnit,\n                                      termsAndConditions: values.termsAndConditions,\n                                      financeGlaccount: values.financeGlaccount,\n                                      financeCostcenter: values.financeCostcenter\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_MEMBERSHIPS_QUERY, variables: {\"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.memberships.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                  <FoForm>\n                                      <Card.Body> \n                                        <Form.Group>\n                                          <Form.Label className=\"custom-switch\">\n                                              <Field \n                                                className=\"custom-switch-input\"\n                                                type=\"checkbox\" \n                                                name=\"displayPublic\" \n                                                checked={values.displayPublic} />\n                                              <span className=\"custom-switch-indicator\" ></span>\n                                              <span className=\"custom-switch-description\">{t('organization.membership.public')}</span>\n                                            </Form.Label>\n                                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                                        </Form.Group>      \n                                        <Form.Group>\n                                          <Form.Label className=\"custom-switch\">\n                                              <Field \n                                                className=\"custom-switch-input\"\n                                                type=\"checkbox\" \n                                                name=\"displayShop\" \n                                                checked={values.displayShop} />\n                                              <span className=\"custom-switch-indicator\" ></span>\n                                              <span className=\"custom-switch-description\">{t('organization.membership.shop')}</span>\n                                            </Form.Label>\n                                          <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                                        </Form.Group>      \n                                        <Form.Group label={t('general.name')} >\n                                          <Field type=\"text\" \n                                                name=\"name\" \n                                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.description')}>\n                                          <Editor\n                                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                                              textareaName=\"description\"\n                                              initialValue={values.description}\n                                              init={tinymceBasicConf}\n                                              onBlur={(e) => {\n                                                setFieldValue(\"description\", e.target.getContent())\n                                                setFieldTouched(\"description\", true, true)\n                                              }}\n                                            />\n                                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.price')}>\n                                          <Field type=\"text\" \n                                                name=\"price\" \n                                                className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.taxrate')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeTaxRate\" \n                                                 className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            {initialData.financeTaxRates.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.validity')}>\n                                          <Field type=\"text\" \n                                                name=\"validity\" \n                                                className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                                                autoComplete=\"off\" />\n                                          <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.validity_unit')}>\n                                          <Field component=\"select\" \n                                                 name=\"validityUnit\" \n                                                 className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                                            <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                                            <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                                          </Field>\n                                          <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.terms_and_conditions')}>\n                                          <Editor\n                                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                                              textareaName=\"termsAndConditions\"\n                                              initialValue={values.termsAndConditions}\n                                              init={tinymceBasicConf}\n                                              onBlur={(e) => {\n                                                setFieldValue(\"termsAndConditions\", e.target.getContent())\n                                                setFieldTouched(\"termsAndConditions\", true, true)\n                                              }}\n                                            />\n                                          <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.glaccount')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeGlaccount\" \n                                                 className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"\" key={v4()}></option>\n                                            {initialData.financeGlaccounts.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                        <Form.Group label={t('general.costcenter')}>\n                                          <Field component=\"select\" \n                                                 name=\"financeCostcenter\" \n                                                 className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                                                 autoComplete=\"off\">\n                                            <option value=\"\" key={v4()}></option>\n                                            {initialData.financeCostcenters.edges.map(({ node }) =>\n                                              <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                                            )}\n                                          </Field>\n                                          <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                                        </Form.Group>\n                                      </Card.Body>\n                                      <Card.Footer>\n                                          <Button \n                                            className=\"pull-right\"\n                                            color=\"primary\"\n                                            disabled={isSubmitting}\n                                            type=\"submit\"\n                                          >\n                                            {t('general.submit')}\n                                          </Button>\n                                          <Button\n                                            type=\"button\" \n                                            color=\"link\" \n                                            onClick={() => history.push(return_url)}\n                                          >\n                                              {t('general.cancel')}\n                                          </Button>\n                                      </Card.Footer>\n                                  </FoForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationmembership\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='memberships'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationMembershipEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  const activeLink = \"subscriptions\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/subscriptions/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ? \n                <Link to=\"/organization/subscriptions/\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                  <Link to=\"/organization/subscriptions/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.subscriptions.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <OrganizationMenu activeLink={activeLink}/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditAccumulationDays\n          unlimited\n          termsAndConditions\n          registrationFee\n          organizationMembership {\n            id\n            name\n          }\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditAccumulationDays\n      unlimited\n      termsAndConditions\n      registrationFee\n      organizationMembership {\n        id\n        name\n      }\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    organizationMemberships(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    organizationMemberships(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n        displayPublic\n        displayShop\n        name\n        description\n        sortOrder\n        minDuration\n        classes\n        subscriptionUnit\n        subscriptionUnitDisplay\n        reconciliationClasses\n        creditValidity\n        unlimited\n        termsAndConditions\n        organizationMembership {\n          id\n          name\n        }\n        quickStatsAmount\n        financeGlaccount {\n          id\n          name\n        }\n        financeCostcenter {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n        displayPublic\n        displayShop\n        name\n        description\n        sortOrder\n        minDuration\n        classes\n        subscriptionUnit\n        subscriptionUnitDisplay\n        reconciliationClasses\n        creditValidity\n        unlimited\n        termsAndConditions\n        organizationMembership {\n          id\n          name\n        }\n        quickStatsAmount\n        financeGlaccount {\n          id\n          name\n        }\n        financeCostcenter {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived}\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: archived});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: archived});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <span>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('organization.subscriptions.credit_accumulation_days')}>\n            <Field type=\"text\" \n                  name=\"creditAccumulationDays\" \n                  className={(errors.creditAccumulationDays) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"creditAccumulationDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </span>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditAccumulationDays: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: values.sortOrder,\n                    minDuration: values.minDuration,\n                    classes: values.classes,\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: values.reconciliationClasses,\n                    creditAccumulationDays: values.creditAccumulationDays,\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }, refetchQueries: [\n                    {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const return_url = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(return_url)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//                 <OrganizationMenu activeLink='subscriptions'/>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTIONS_QUERY, GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id }\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditAccumulationDays: initialData.organizationSubscription.creditAccumulationDays,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: values.sortOrder,\n                  minDuration: values.minDuration,\n                  classes: values.classes,\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: values.reconciliationClasses,\n                  creditAccumulationDays: values.creditAccumulationDays,\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../OrganizationMenu\"\n\n\nfunction OrganizationSubscriptionsGroupsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/subscriptions\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.subscriptions.title')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showBack) ? \n                <Link to=\"/organization/subscriptions/groups\">\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <Link to=\"/organization/subscriptions/groups/add\">\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.subscription_groups.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              }\n              <OrganizationMenu activeLink=''/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport CardHeaderSeparator from \"../../general/CardHeaderSeparator\"\nimport OrganizationMenu from \"../OrganizationMenu\"\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const return_url = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(return_url)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   return_url={return_url}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(return_url)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//                 <OrganizationMenu activeLink=''/>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase>\n      <Card title={cardTitle}>\n      {\n      (!subscriptions.edges) ? \"\" : \n        <Card.Body>\n          <Alert type=\"primary\">\n            <strong>{t('general.group')}</strong> {group.name}\n          </Alert>\n          <Table>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {subscriptions.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_subscriptions) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_subscriptions))}\n                    {(!(node.id in group_subscriptions)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationSubscription: pass_id,\n                                organizationSubscriptionGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationSubscription: pass_id,\n                                organizationSubscriptionGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        </Card.Body>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Alert\n} from \"tabler-react\"\n\nconst AlertInfo = ({ t, title, message }) => (\n  <Alert type=\"primary\">\n      <strong>{title}</strong> {message}\n  </Alert> \n)\n\nexport default withTranslation()(AlertInfo)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String, $archived: Boolean!) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationMenu from \"../../OrganizationMenu\"\nimport AlertInfo from \"../../../ui/AlertInfo\"\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport moment from 'moment'\n\n\nconst DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirmDelete = (t, match, deleteSubscriptionPrice, node) => {\n  console.log(\"clicked delete\")\n  let id = node.id\n\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          <p>{t('organization.subscription_prices.delete_confirm_msg')}</p>\n          <p>\n            {node.priceDisplay} {node.financeTaxRate.name} <br />\n            <span className=\"text-muted\">\n              {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n            </span>\n          </p>\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n            deleteSubscriptionPrice({ variables: {\n                input: {\n                id\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n              ]}).then(({ data }) => {\n                console.log('got data', data);\n                toast.success(\n                  t('organization.subscription_prices.deleted'), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error);\n              })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n          \n        </div>\n      );\n    }\n  })\n}\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match, archived=false }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <Link to=\"/organization/subscriptions\" \n                    className='btn btn-outline-secondary btn-sm'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.subscriptions.title')}\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Query query={GET_SUBSCRIPTION_PRICES_QUERY} variables={{ organizationSubscription: match.params.subscription_id }}>\n              {({ loading, error, data: {organizationSubscriptionPrices: subscription_prices, organizationSubscription: subscription}, refetch, fetchMore }) => {\n                  // Loading\n                  if (loading) return (\n                    <ContentCard cardTitle={t('organization.subscription_prices.title')}>\n                      <Dimmer active={true}\n                              loader={true}>\n                      </Dimmer>\n                    </ContentCard>\n                  )\n                  // Error\n                  if (error) return (\n                    <ContentCard cardTitle={t('organization.subscription_prices.title')}>\n                      <p>{t('organization.subscription_prices.error_loading')}</p>\n                    </ContentCard>\n                  )\n                  const headerOptions = null\n\n                  // Empty list\n                  if (!subscription_prices.edges.length) { return (\n                    <ContentCard cardTitle={t('organization.subscription_prices.title')}\n                                headerContent={headerOptions}>\n                      <AlertInfo title={t('general.subscription')} message={subscription.name} />\n                      <p>\n                      {(!archived) ? t('organization.subscription_prices.empty_list') : t(\"organization.subscription_prices.empty_archive\")}\n                      </p>\n                    \n                    </ContentCard>\n                  )} else {   \n                  // Life's good! :)\n                  return (\n                    <ContentCard cardTitle={t('organization.subscription_prices.title')}\n                                headerContent={headerOptions}\n                                pageInfo={subscription_prices.pageInfo}\n                                onLoadMore={() => {\n                                  fetchMore({\n                                    variables: {\n                                      after: subscription_prices.pageInfo.endCursor\n                                    },\n                                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                                      const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n                                      const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n                                      return newEdges.length\n                                        ? {\n                                            // Put the new subscriptions at the end of the list and update `pageInfo`\n                                            // so we have the new `endCursor` and `hasNextPage` values\n                                            organizationSubscriptionsPrices: {\n                                              __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                                              edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                                              pageInfo\n                                            }\n                                          }\n                                        : previousResult\n                                    }\n                                  })\n                                }} >\n                      <div>\n                        <AlertInfo title={t('general.subscription')} message={subscription.name} />\n\n                        <Table>\n                          <Table.Header>\n                            <Table.Row key={v4()}>\n                              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n                              <Table.ColHeader></Table.ColHeader>\n                            </Table.Row>\n                          </Table.Header>\n                          <Table.Body>\n                              {subscription_prices.edges.map(({ node }) => (\n                                <Table.Row key={v4()}>\n                                  <Table.Col key={v4()}>\n                                    {moment(node.dateStart).format(dateFormat)}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                                  </Table.Col>\n                                  <Table.Col key={v4()}>\n                                    {node.priceDisplay} <br />\n                                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                                  </Table.Col>\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    {(node.archived) ? \n                                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                                      <Button className='btn-sm' \n                                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + match.params.subscription_id + '/' + node.id)}\n                                              color=\"secondary\">\n                                        {t('general.edit')}\n                                      </Button>\n                                    }\n                                  </Table.Col>\n                                  <Mutation mutation={DELETE_SUBSCRIPTION_PRICE} key={v4()}>\n                                      {(deleteSubscriptionPrice, { data }) => (\n                                        <Table.Col className=\"text-right\" key={v4()}>\n                                          <button className=\"icon btn btn-link btn-sm\" \n                                            title={t('general.delete')} \n                                            href=\"\"\n                                            onClick={() => {confirmDelete(t, match, deleteSubscriptionPrice, node)}}\n                                          >\n                                            <span className=\"text-red\">\n                                              <Icon prefix=\"fe\" name=\"trash-2\" />\n                                            </span>\n                                          </button>\n                                        </Table.Col>\n                                      )}\n                                    </Mutation>\n                                </Table.Row>\n                              ))}\n                          </Table.Body>\n                        </Table>\n                        </div>\n                    </ContentCard>\n                  )}}\n              }\n              </Query>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationsubscriptionprice\">\n                <Button color=\"primary btn-block mb-6\"\n                        onClick={() => history.push(\"/organization/subscriptions/prices/add/\" + match.params.subscription_id)}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.subscription_prices.add')}\n                </Button>\n              </HasPermissionWrapper>\n              <OrganizationMenu activeLink='subscriptions'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../HasPermissionWrapper\"\n\n\nlet accounts_active\nlet b2b_active\nlet suppliers_active\n\n\nconst RelationsMenu = ({ t, activeLink }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'accounts') ? accounts_active = true: accounts_active = false}\n        {(activeLink === 'b2b') ? b2b_active = true: b2b_active = false}\n        {(activeLink === 'suppliers') ? suppliers_active = true: suppliers_active = false}\n        \n\n        <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to=\"#/relations/accounts\"\n          icon=\"users\"\n          active={accounts_active}\n        >\n          {t('relations.accounts.title')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n          permission=\"view\"\n          resource=\"business\">\n          <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/relations/suppliers\"\n            icon=\"package\"\n            active={suppliers_active}\n          >\n            {t('relations.suppliers.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n          permission=\"view\"\n          resource=\"business\">\n          <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to=\"#/relations/b2b\"\n            icon=\"briefcase\"\n            active={b2b_active}\n          >\n            {t('relations.b2b.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(RelationsMenu)","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, return_url }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.price')}>\n        <Field type=\"text\" \n              name=\"price\" \n              className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.taxrate')}>\n        <Field component=\"select\" \n                name=\"financeTaxRate\" \n                className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n          {console.log(\"query data in subscription price add:\")}\n          {console.log(inputData)}\n          <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n          {inputData.financeTaxRates.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.date_start')}>\n        <CSDatePicker \n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.date_end')}>\n        <CSDatePicker \n          selected={values.dateEnd}\n          onChange={(date) => setFieldValue(\"dateEnd\", date)}\n          onBlur={() => setFieldTouched(\"dateEnd\", true)}\n        />\n        <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Button color=\"link\" onClick={() => history.push(return_url)}>\n        {t('general.cancel')}\n      </Button>\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nconst ADD_SUBSCRIPTION_PRICE = gql`\n  mutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n    createOrganizationSubscriptionPrice(input: $input) {\n      organizationSubscriptionPrice {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nconst return_url = \"/organization/subscriptions/prices/\"\n\nconst OrganizationSubscriptionPriceAdd = ({ t, history, match }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title=\"Organization\" />\n        <Grid.Row>\n          <Grid.Col md={9}>\n          <Card>\n            <Card.Header>\n              <Card.Title>{t('organization.subscription_prices.title_add')}</Card.Title>\n            </Card.Header>\n            <Query query={GET_INPUT_VALUES_QUERY} variables={{ archived: false }} >\n              {({ loading, error, data, refetch }) => {\n                  // Loading\n                  if (loading) return <p>{t('general.loading_with_dots')}</p>\n                  // Error\n                  if (error) {\n                    console.log(error)\n                    return <p>{t('general.error_sad_smiley')}</p>\n                  }\n                  \n                  console.log('query data')\n                  console.log(data)\n                  const inputData = data\n\n                  return (\n                    <Mutation mutation={ADD_SUBSCRIPTION_PRICE} onCompleted={() => history.push(return_url + match.params.subscription_id)}> \n                      {(addSubscription, { data }) => (\n                          <Formik\n                              initialValues={{ price: \"\", dateStart: new Date() }}\n                              validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n\n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  addSubscription({ variables: {\n                                    input: {\n                                      organizationSubscription: match.params.subscription_id,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data);\n                                      toast.success((t('organization.subscription_prices.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                                <OrganizationSubscriptionPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldTouched={setFieldTouched}\n                                  setFieldValue={setFieldValue}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                />\n                              )}\n                          </Formik>\n                      )}\n                    </Mutation>\n                  )}}\n                </Query>\n          </Card>\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"organizationsubscriptionprice\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(return_url + match.params.subscription_id)}>\n                <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n              </Button>\n            </HasPermissionWrapper>\n            <OrganizationMenu activeLink='subscriptions'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\n\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport OrganizationMenu from \"../../OrganizationMenu\"\n\n\nconst UPDATE_SUBSCRIPTION_PRICE = gql`\n  mutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n    updateOrganizationSubscriptionPrice(input: $input) {\n      organizationSubscriptionPrice {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        price\n        financeTaxRate {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\n\nclass OrganizationSubscriptionPriceEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization location room edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const subscription_id = match.params.subscription_id\n    const return_url = \"/organization/subscriptions/prices/\" + subscription_id\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title=\"Organization\" />\n            <Grid.Row>\n              <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.subscription_prices.title_edit')}</Card.Title>\n                  {console.log(match.params.id)}\n                </Card.Header>\n                <Query query={GET_SUBSCRIPTION_PRICE_QUERY} variables={{ id, archived: false }} >\n                {({ loading, error, data, refetch }) => {\n                    // Loading\n                    if (loading) return <p>{t('general.loading_with_dots')}</p>\n                    // Error\n                    if (error) {\n                      console.log(error)\n                      return <p>{t('general.error_sad_smiley')}</p>\n                    }\n                    \n                    const initialData = data.organizationSubscriptionPrice\n                    console.log('query data')\n                    console.log(data)\n                    const inputData = data\n\n                    return (\n                      \n                      <Mutation mutation={UPDATE_SUBSCRIPTION_PRICE} onCompleted={() => history.push(return_url)}> \n                      {(updateSubscriptionPrice, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                price: initialData.price, \n                                financeTaxRate: initialData.financeTaxRate.id,\n                                dateStart: initialData.dateStart,\n                                dateEnd: initialData.dateEnd,\n                              }}\n                              validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n                              onSubmit={(values, { setSubmitting }) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n\n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    if (values.dateEnd instanceof Date) {\n                                      dateEnd = dateToLocalISO(values.dateEnd)\n                                    } else {\n                                      dateEnd = values.dateEnd\n                                    }\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  let dateStart\n                                  if (values.dateStart instanceof Date) {\n                                    dateStart = dateToLocalISO(values.dateStart)\n                                  } else {\n                                    // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                                    dateStart = values.dateStart\n                                  }\n\n                                  updateSubscriptionPrice({ variables: {\n                                    input: {\n                                      id: match.params.id,\n                                      price: values.price,\n                                      financeTaxRate: values.financeTaxRate,\n                                      dateStart: dateStart,\n                                      dateEnd: dateEnd,\n                                    }\n                                  }, refetchQueries: [\n                                    {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: match.params.subscription_id }},\n                                    {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                                <OrganizationSubscriptionPriceForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldTouched={setFieldTouched}\n                                  setFieldValue={setFieldValue}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                >\n                                  {console.log(errors)}\n                                </OrganizationSubscriptionPriceForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                      )}}\n                </Query>\n              </Card>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"change\"\n                                      resource=\"organizationlocationroom\">\n                  <Button color=\"primary btn-block mb-6\"\n                          onClick={() => history.push(return_url)}>\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </HasPermissionWrapper>\n                <OrganizationMenu activeLink='locations'/>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  StampCard\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport RelationsMenu from \"../RelationsMenu\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n                <Grid.Row>\n                  <Grid.Col md={4} lg={4}>\n                    <Card>\n                      <Card.Body>\n                        <h5>{t(\"relations.accounts.title\")}</h5>\n                        {t(\"relations.accounts.explanation\")}\n                        <br /><br />\n                        <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                      </Card.Body>\n                    </Card>\n                  </Grid.Col>\n                  {/* <HasPermissionWrapper permission=\"view\"\n                                        resource=\"business\">\n                    <Grid.Col md={4} lg={4}>\n                      <Link to='/relations/suppliers')}>\n                        <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                      </Link>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                  <HasPermissionWrapper permission=\"view\"\n                                        resource=\"business\">\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"relations.b2b.title\")}</h5>\n                          {t(\"relations.b2b.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                </Grid.Row>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <RelationsMenu />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","// @flow\n\nimport React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\nimport CSLS from \"../../tools/cs_local_storage\"\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className=\"form-control\" \n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          <div className=\"col col-auto\">\n            <Button\n              color=\"secondary\"\n              icon=\"x\"\n              disabled={!(this.state.inputValue)}\n              onClick={() => {\n                this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                  // setState callback, this makes sure the onChange function is calles with new values\n                  console.log(this.state)\n                  this.props.onChange(this.state.submitValue) \n                })\n              }}\n            >\n            </Button>\n          </div>\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n  }\n\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\nimport RelationsMenu from \"../RelationsMenu\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <Form.Select\n                className=\"w-auto mr-2\"\n                onChange={(event) => {\n                  console.log(event.target.value)\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log('fire refetch')\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  console.log(value)\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary btn-block mb-6\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.accounts.add')}\n                </Button>\n              </HasPermissionWrapper>\n              <RelationsMenu activeLink='accounts'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean\n  \n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        isActive\n        urlImageThumbnailSmall\n        subscriptions(last: 2) {\n          edges {\n            node {\n              organizationSubscription {\n                id\n                name\n              }\n              dateStart\n              dateEnd\n            }\n          }\n        }\n        classpasses(last: 2) {\n          edges {\n            node {\n              id\n              organizationClasspass {\n                id\n                name\n              }\n              dateStart\n              dateEnd\n              classesRemaining\n              classesRemainingDisplay\n              isExpired\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch} = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.accounts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accounts.edges\n              const pageInfo = fetchMoreResult.accounts.pageInfo \n\n              return newEdges.length\n                ? {\n                    // Put the new accounts at the end of the list and update `pageInfo`\n                  accounts: {\n                    __typename: previousResult.accounts.__typename,\n                    edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              {/* <Table.ColHeader>{t('general.info')}</Table.ColHeader> */}\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptions) ? \n                      // This is a workaround that reserves the array. Not yet figured out how to get the sorting right on subqueries in the backend\n                      node.subscriptions.edges.slice(0).reverse().map(({ node: subscription }) => (\n                        <div>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpasses) ? \n                      // This is a workaround that reserves the array. Not yet figured out how to get the sorting right on subqueries in the backend\n                      node.classpasses.edges.slice(0).reverse().map(({ node: classpass }) => (\n                        <div>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked isActive\")\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) == \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  </Table.Col>\n                  {\n                    (node.isActive) ? '' :\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                  }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\nimport RelationsMenu from '../RelationsMenu'\n\nconst returnUrl = \"/relations/accounts\"\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary btn-block mb-6\"\n                        onClick={() => history.push(returnUrl)}>\n                  <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                </Button>\n              </HasPermissionWrapper>\n              <RelationsMenu activeLink='accounts'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='md' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nlet profile_active\nlet memberships_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'memberships') ? memberships_active = true: memberships_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n  </div>\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\nimport { GraphQLID } from 'graphql'\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport RelationsAccountsBack from \"./RelationsAccountsBack\"\nimport ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsAccountProfileBase({t, match, children, back, sidebarButton=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            {(back) ? back : <RelationsAccountsBack />}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              {sidebarButton}\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountsBack from \"./RelationsAccountsBack\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\n\n// import OrganizationMenu from \"../OrganizationMenu\"\nimport ProfileMenu from \"./ProfileMenu\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const returnUrl = \"/relations/accounts\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountsBack from \"./RelationsAccountsBack\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\n\n// import OrganizationMenu from \"../OrganizationMenu\"\nimport ProfileMenu from \"./ProfileMenu\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n      break\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n      break\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\nimport moment from 'moment'\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={t('relations.account.accepted_documents.title')}\n                pageInfo={acceptedDocuments.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                  fetchMore({\n                    variables: {\n                      after: data.accountAcceptedDocuments.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                      const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                      return newEdges.length\n                        ? {\n                            // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            accountAcceptedDocuments: {\n                              __typename: previousResult.accountAcceptedDocuments.__typename,\n                              edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                              pageInfo\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} \n              >\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                      <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                      <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                      <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {acceptedDocuments.edges.map(({ node }) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            <DocumentType documentType={node.document.documentType} />\n                          </Table.Col>\n                          <Table.Col key={v4()}>\n                            {moment(node.dateAccepted).format(dateFormat)}\n                          </Table.Col>\n                          <Table.Col>\n                            {node.clientIp}\n                          </Table.Col>\n                          <Table.Col key={v4()}>\n                            <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Button,\n  Icon,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", showBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {((bankAccountId) && !(showBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.bank_accounts.mandates.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountbankaccount\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/bank_accounts/`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\"\n              }\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport moment from 'moment'\n\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const returnUrl = \"/relations/accounts\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: node.content}} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\n// import { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n\n  return (\n    <RelationsAccountBankAccountBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\n// import { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n      break\n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n      break\n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n      break\n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n                {/* <HasPermissionWrapper permission=\"view\"\n                                      resource=\"scheduleitemattendance\">\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classes/add\"}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classes.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance, { data }] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  console.log(\"AccountClassDelete\")\n  console.log(node)\n  console.log(account)\n  console.log(\"---\")\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <Link to={`/relations/accounts/${accountId}/classpasses/add`}>\n        <Button color=\"primary btn-block mb-6\">\n          <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n        </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      sidebarButton={sidebarButton}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Icon,\n  Button,\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  const sidebarButton = <Link to={returnUrl}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n  const sidebarButton = <Link to={returnUrl}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={`${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n      doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      {t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport moment from 'moment'\n\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <Link to={`/relations/accounts/${accountId}/documents/add`}>\n        <Button color=\"primary btn-block mb-6\">\n          <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.documents.add')}\n        </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      sidebarButton={sidebarButton}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Icon,\n  Button,\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarButton = <Link to={returnUrl}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountClasspassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountClasspassForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n  const sidebarButton = <Link to={returnUrl}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {!(showBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/add`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.finance_payment_batch_category_items.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\"\n              }\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={t('relations.account.finance_payment_batch_category_items.title')}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoice\">\n                  <Link to={`/relations/accounts/${accountId}/invoices/add`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.invoices.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Icon,\n  Button,\n  Table,\n  Text\n} from \"tabler-react\";\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../finance/invoices/queries\"\nimport FinanceInvoiceStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountInvoicesBase from './AccountInvoicesBase'\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteFinanceInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n  \n  return (\n    <AccountInvoicesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoiceStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceNumber} <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(35)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    <Text.Small color=\"gray\">{moment(node.dateDue).format(dateFormat)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/finance/invoices/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_ACCOUNT_INVOICES_QUERY, variables: {accountId: accountId}},\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, return_url }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={return_url}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ProfileMenu from \"../ProfileMenu\"\n\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n  const sidebarButton = <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  console.log(data)\n  const account = data.account\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: \"\",\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              return_url={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_MEMBERSHIPS_QUERY = gql`\n  query AccountMemberships($after: String, $before: String, $accountId: ID!) {\n    accountMemberships(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationMembership {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_ACCOUNT_MEMBERSHIP_QUERY = gql`\n  query AccountMembership($id: ID!, $accountId: ID!, $after: String, $before: String, $archived: Boolean!) {\n    accountMembership(id:$id) {\n      id\n      organizationMembership {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query MembershipInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationMemberships(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY } from \"./queries\"\n\nconst DELETE_ACCOUNT_MEMBERSHIP = gql`\n  mutation DeleteAccountMembership($input: DeleteAccountMembershipInput!) {\n    deleteAccountMembership(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst AccountMemberships = ({ t, history, match, archived=false }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_ACCOUNT_MEMBERSHIPS_QUERY} variables={{ archived: archived, accountId: match.params.account_id }}> \n        {({ loading, error, data, refetch, fetchMore }) => {\n          // Loading\n          if (loading) return <p>{t('general.loading_with_dots')}</p>\n          // Error\n          if (error) {\n            console.log(error)\n            return <p>{t('general.error_sad_smiley')}</p>\n          }\n\n          const account = data.account\n          const accountMemberships = data.accountMemberships\n\n          return (\n            <Container>\n              <Page.Header title={account.firstName + \" \" + account.lastName} >\n                <RelationsAccountsBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  <ContentCard \n                    cardTitle={t('relations.account.memberships.title')}\n                    pageInfo={accountMemberships.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: accountMemberships.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.accountMemberships.edges\n                          const pageInfo = fetchMoreResult.accountMemberships.pageInfo\n\n                          return newEdges.length\n                            ? {\n                                // Put the new accountMemberships at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                accountMemberships: {\n                                  __typename: previousResult.accountMemberships.__typename,\n                                  edges: [ ...previousResult.accountMemberships.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            : previousResult\n                        }\n                      })\n                    }} \n                  >\n                    <Table>\n                      <Table.Header>\n                        <Table.Row key={v4()}>\n                          <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                          <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n                          <Table.ColHeader></Table.ColHeader> \n                        </Table.Row>\n                      </Table.Header>\n                      <Table.Body>\n                          {accountMemberships.edges.map(({ node }) => (\n                            <Table.Row key={v4()}>\n                              <Table.Col key={v4()}>\n                                {node.organizationMembership.name}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateStart}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.dateEnd}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                              </Table.Col>\n                              <Table.Col className=\"text-right\" key={v4()}>\n                                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/edit/\" + node.id}>\n                                  <Button className='btn-sm' \n                                          color=\"secondary\">\n                                    {t('general.edit')}\n                                  </Button>\n                                </Link>\n                              </Table.Col>\n                              <Mutation mutation={DELETE_ACCOUNT_MEMBERSHIP} key={v4()}>\n                                {(deleteAccountMembership, { data }) => (\n                                  <Table.Col className=\"text-right\" key={v4()}>\n                                    <button className=\"icon btn btn-link btn-sm\" \n                                      title={t('general.delete')} \n                                      href=\"\"\n                                      onClick={() => {\n                                        confirm_delete({\n                                          t: t,\n                                          msgConfirm: t(\"relations.account.memberships.delete_confirm_msg\"),\n                                          msgDescription: <p>{node.organizationMembership.name} {node.dateStart}</p>,\n                                          msgSuccess: t('relations.account.memberships.deleted'),\n                                          deleteFunction: deleteAccountMembership,\n                                          functionVariables: { variables: {\n                                            input: {\n                                              id: node.id\n                                            }\n                                          }, refetchQueries: [\n                                            {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                                          ]}\n                                        })\n                                    }}>\n                                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                                    </button>\n                                  </Table.Col>\n                                )}\n                              </Mutation>\n                            </Table.Row>\n                          ))}\n                      </Table.Body>\n                    </Table>\n                  </ContentCard>\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  <ProfileCardSmall user={account}/>\n                  <HasPermissionWrapper permission=\"add\"\n                                        resource=\"accountmembership\">\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/memberships/add\"}>\n                      <Button color=\"primary btn-block mb-6\">\n                              {/* //  onClick={() => history.push(\"/organization/memberships/add\")}> */}\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.memberships.add')}\n                      </Button>\n                    </Link>\n                  </HasPermissionWrapper>\n                  <ProfileMenu \n                    activeLink='memberships' \n                    account_id={match.params.account_id}\n                  />\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n    </div>\n  </SiteWrapper>\n)\n      \n        \nexport default withTranslation()(withRouter(AccountMemberships))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const MEMBERSHIP_SCHEMA = Yup.object().shape({\n  organizationMembership: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  //   .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountMembershipForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, return_url }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.membership')}>\n            <Field component=\"select\" \n                  name=\"organizationMembership\" \n                  className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationMemberships.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType == \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(return_url)}\n        >\n            {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountMembershipForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst CREATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation CreateAccountMembership($input: CreateAccountMembershipInput!) {\n    createAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note     \n      }\n    }\n  }\n`\n\n\nclass AccountMembershipAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const account_id = match.params.account_id\n    const return_url = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: account_id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_add')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={CREATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(return_url)}> \n                      {(createMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: \"\",\n                                financePaymentMethod: \"\",\n                                dateStart: new Date(),\n                                note: \"\",\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  createMembership({ variables: {\n                                    input: {\n                                      account: account_id, \n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_add_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"add\"\n                                          resource=\"accountmembership\">\n                      <Link to={return_url}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipAdd))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { Query, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_MEMBERSHIPS_QUERY, GET_ACCOUNT_MEMBERSHIP_QUERY } from './queries'\nimport { MEMBERSHIP_SCHEMA } from './yupSchema'\nimport AccountMembershipForm from './AccountMembershipForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nconst UPDATE_ACCOUNT_MEMBERSHIP = gql`\n  mutation UpdateAccountMembership($input: UpdateAccountMembershipInput!) {\n    updateAccountMembership(input: $input) {\n      accountMembership {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationMembership {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\n\nclass AccountMembershipEdit extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Account membership add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const match = this.props.match\n    const id = match.params.id\n    const account_id = match.params.account_id\n    const return_url = \"/relations/accounts/\" + account_id + \"/memberships\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n        <Query query={GET_ACCOUNT_MEMBERSHIP_QUERY} variables = {{archived: false,  accountId: account_id, id: id}} >\n          {({ loading, error, data, refetch }) => {\n            // Loading\n            if (loading) return <p>{t('general.loading_with_dots')}</p>\n            // Error\n            if (error) {\n              console.log(error)\n              return <p>{t('general.error_sad_smiley')}</p>\n            }\n            \n            console.log('query data')\n            console.log(data)\n            const inputData = data\n            const account = data.account\n            const initialdata = data.accountMembership\n\n            let initialPaymentMethod = \"\"\n            if (initialdata.financePaymentMethod) {\n              initialPaymentMethod = initialdata.financePaymentMethod.id\n            }\n\n            return (\n              <Container>\n               <Page.Header title={account.firstName + \" \" + account.lastName} />\n               <Grid.Row>\n                  <Grid.Col md={9}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{t('relations.account.memberships.title_edit')}</Card.Title>\n                    </Card.Header>\n                      <Mutation mutation={UPDATE_ACCOUNT_MEMBERSHIP} onCompleted={() => history.push(return_url)}> \n                      {(updateMembership, { data }) => (\n                          <Formik\n                              initialValues={{ \n                                organizationMembership: initialdata.organizationMembership.id,\n                                financePaymentMethod: initialPaymentMethod,\n                                dateStart: initialdata.dateStart,\n                                dateEnd: initialdata.dateEnd,\n                                note: initialdata.note,\n                                registrationFeePaid: initialdata.registrationFeePaid\n                              }}\n                              validationSchema={MEMBERSHIP_SCHEMA}\n                              onSubmit={(values, { setSubmitting }, errors) => {\n                                  console.log('submit values:')\n                                  console.log(values)\n                                  console.log(errors)\n\n                                  \n                                  let dateEnd\n                                  if (values.dateEnd) {\n                                    dateEnd = dateToLocalISO(values.dateEnd)\n                                  } else {\n                                    dateEnd = values.dateEnd\n                                  }\n\n                                  updateMembership({ variables: {\n                                    input: {\n                                      id: id,\n                                      organizationMembership: values.organizationMembership,\n                                      financePaymentMethod: values.financePaymentMethod,\n                                      dateStart: dateToLocalISO(values.dateStart),\n                                      dateEnd: dateEnd,\n                                      note: values.note,\n                                      registrationFeePaid: values.registrationFeePaid\n                                    }\n                                  }, refetchQueries: [\n                                      {query: GET_ACCOUNT_MEMBERSHIPS_QUERY, variables: {archived: false, accountId: account_id}}\n                                  ]})\n                                  .then(({ data }) => {\n                                      console.log('got data', data)\n                                      toast.success((t('relations.account.memberships.toast_edit_success')), {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                    }).catch((error) => {\n                                      toast.error((t('general.toast_server_error')) +  error, {\n                                          position: toast.POSITION.BOTTOM_RIGHT\n                                        })\n                                      console.log('there was an error sending the query', error)\n                                      setSubmitting(false)\n                                    })\n                              }}\n                              >\n                              {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                                <AccountMembershipForm\n                                  inputData={inputData}\n                                  isSubmitting={isSubmitting}\n                                  setFieldValue={setFieldValue}\n                                  setFieldTouched={setFieldTouched}\n                                  errors={errors}\n                                  values={values}\n                                  return_url={return_url}\n                                >\n                                  {console.log(errors)}\n                                </AccountMembershipForm>\n                              )}\n                          </Formik>\n                      )}\n                      </Mutation>\n                    </Card>\n                  </Grid.Col>\n                  <Grid.Col md={3}>\n                    <HasPermissionWrapper permission=\"change\"\n                                          resource=\"accountmembership\">\n                      <Link to={return_url}>\n                        <Button color=\"primary btn-block mb-6\">\n                          <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                        </Button>\n                      </Link>\n                    </HasPermissionWrapper>\n                    <ProfileMenu account_id={account_id} activeLink='memberships'/>\n                  </Grid.Col>\n                </Grid.Row>\n              </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(AccountMembershipEdit))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Body>\n                  {(!pageInfo) ? '':\n                    (pageInfo.hasNextPage) ? \n                      <Button \n                        link\n                        onClick={onLoadMore} \n                        >\n                        {t('general.load_more')}\n                      </Button>\n                    : t('general.loaded_all')\n                  }\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {!(showBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountnote\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/notes/add`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.notes.add')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountnote\">\n                  <Link to={`/relations/accounts/${match.params.account_id}/notes/`}>\n                    <Button color=\"primary btn-block mb-6\">\n                      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                    </Button>\n                  </Link>\n                </HasPermissionWrapper>\n                : \"\"\n              }\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: String!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\n\nimport {\n  BlogCard,\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: node.note}} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteOrder, { data }] = useMutation(DELETE_FINANCE_ORDER)\n\n  console.log(\"AccountOrderDelete\")\n  console.log(node)\n  console.log(account)\n  console.log(\"---\")\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n        \n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n//   query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String, $archived: Boolean!) {\n//     accountClasspass(id:$id) {\n//       id\n//       organizationClasspass {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       createdAt\n//     }\n//     organizationClasspasses(first: 100, before: $before, after: $after, archived: $archived) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query ClasspassInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n//     organizationClasspasses(first: 100, before: $before, after: $after, archived: $archived) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\nimport ScheduleEventTickets from './AccountScheduleEventTickets'\n\n// const CANCEL_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n//     deleteAccountClasspass(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <RelationsAccountsBack />\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n      }\n    }\n  }\n}\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\nquery ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n  scheduleEventTicket(id: $id) {\n    id\n    displayPublic\n    name\n    description\n    price\n    financeTaxRate {\n      id\n      name\n    }\n    financeGlaccount {\n      id\n      name\n    }\n    financeCostcenter {\n      id\n      name\n    }\n  }\n  financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n  financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n  financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  // const title = t(\"relations.account.event_tickets.title\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  console.log(data)\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  console.log(accountScheduleEventTickets)\n\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={t('relations.account.event_tickets.title')}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const sidebarButton = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/add\"}>\n      <Button color=\"primary btn-block mb-6\">\n      {/* //  onClick={() => history.push(\"/organization/subscriptions/add\")}> */}\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.subscriptions.add')}\n      </Button>\n      </Link>\n  </HasPermissionWrapper>\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.Enddate && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.creditTotal}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\nimport { yupToFormErrors } from 'formik';\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, return_url }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType == \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"registrationFeePaid\" \n              checked={values.registrationFeePaid} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n      </Form.Group> \n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(return_url)}\n        >\n            {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Icon,\n  Button,\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n  const sidebarButton = <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} sidebarButton={sidebarButton}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      sidebarButton={sidebarButton} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                    registrationFeePaid: values.registrationFeePaid\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\nimport ProfileMenu from \"../../ProfileMenu\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} account={account} subscription={subscription}>\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\nimport ProfileMenu from \"../../ProfileMenu\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            return_url={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ButtonAddSecondaryMenu({t, match, history, linkTo}) {\n  return (\n    <Link to={linkTo}>\n      <Button\n        color=\"primary\"\n        size=\"sm\"\n        icon=\"plus-circle\"\n        className=\"float-right\"\n      >\n        {t(\"general.add\")}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonAddSecondaryMenu))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab}\n  ){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, Mutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\nimport ProfileMenu from \"../../ProfileMenu\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoaMore={onLoadMore}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice, { data }] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../../../ui/ButtonAddSecondaryMenu'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const buttonAdd = <ButtonAddSecondaryMenu \n                      linkTo={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab}>\n        <div className=\"pull-right\">{buttonAdd}</div>\n        <h5>{t('relations.account.subscriptions.alt_prices.title_list')}</h5>\n        <p>{t('relations.account.subscriptions.alt_prices.empty_list')}</p>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} pageInfo={pageInfo} onLoadMore={onLoadMore}>\n      <div className=\"pull-right\">{buttonAdd}</div>\n      <h5>{t('relations.account.subscriptions.alt_prices.title_list')}</h5>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle == \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock, { data }] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../../../ui/ButtonAddSecondaryMenu'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const buttonAdd = <ButtonAddSecondaryMenu \n                      linkTo={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionBlocks.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab}>\n        <div className=\"pull-right\">{buttonAdd}</div>\n        <h5>{t('relations.account.subscriptions.blocks.title_list')}</h5>\n        <p>{t('relations.account.subscriptions.blocks.empty_list')}</p>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} pageInfo={pageInfo} onLoadMore={onLoadMore}>\n      <div className=\"pull-right\">{buttonAdd}</div>\n      <h5>{t('relations.account.subscriptions.blocks.title_list')}</h5>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle == \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\";\n\nfunction SubscriptionCreditsMutationType({ t, mutationType }) {\n  switch (mutationType) {\n    case \"ADD\":  \n      return <Badge color=\"success\">+</Badge>\n      break\n    case \"SUB\":\n      return <Badge color=\"secondary\">-</Badge>\n      break\n    default:\n      return \"\"\n  }\n}\n\nexport default withTranslation()(SubscriptionCreditsMutationType)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        mutationType\n        mutationAmount\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    mutationType\n    mutationAmount\n    description\n    createdAt\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport SubscriptionCreditsMutationType from \"../../../../../ui/SubscriptionCreditsMutationType\"\nimport ButtonAddSecondaryMenu from '../../../../../ui/ButtonAddSecondaryMenu'\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  console.log(appSettings)\n  \n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const buttonAdd = <ButtonAddSecondaryMenu \n                     linkTo={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} pageInfo={pageInfo} onLoadMore={onLoadMore}>\n      <div className=\"pull-right\">{buttonAdd}</div>\n      <h5>{t('relations.account.subscriptions.credits.title_list')}</h5>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.mutation')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  mutationAmount: Yup.number()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle == \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.credits')}>\n              <Field type=\"number\" \n                      name=\"mutationAmount\" \n                      className={(errors.mutationAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mutationAmount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.subscriptions.credits.mutationType')}>\n              <Field component=\"select\" \n                     name=\"mutationType\" \n                     className={(errors.mutationType) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"ADD\">{t(\"general.add\")}</option>\n                <option value=\"SUB\">{t(\"general.subtract\")}</option>\n              </Field>\n              <ErrorMessage name=\"mutationType\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: \"ADD\",\n          mutationAmount: 0,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: accountSubscriptionCredit.mutationType,\n          mutationAmount: accountSubscriptionCredit.mutationAmount,\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport ButtonAddSecondaryMenu from '../../../../../ui/ButtonAddSecondaryMenu'\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\n// import AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  console.log(appSettings)\n  \n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const buttonAdd = <ButtonAddSecondaryMenu \n                     linkTo={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} pageInfo={pageInfo} onLoadMore={onLoadMore}>\n      <div className=\"pull-right\">{buttonAdd}</div>\n      <h5>{t('relations.account.subscriptions.invoices.title_list')}</h5>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Table.Col>\n                <Table.Col>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n                {/* <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col> */}\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause, { data }] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport ButtonAddSecondaryMenu from '../../../../../ui/ButtonAddSecondaryMenu'\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\n\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  console.log(appSettings)\n  \n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const buttonAdd = <ButtonAddSecondaryMenu \n                      linkTo={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionPauses.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab}>\n        <div className=\"pull-right\">{buttonAdd}</div>\n        <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5>\n        <p>{t('relations.account.subscriptions.pauses.empty_list')}</p>\n      </AccountSubscriptionEditListBase>\n    )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} pageInfo={pageInfo} onLoadMore={onLoadMore}>\n      <div className=\"pull-right\">{buttonAdd}</div>\n      <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: node.description}} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\n// import { GET_INVOICE_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\n// import { GET_INVOICE_QUERY } from \"../queries\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\n// import ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle == \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, return_url, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Icon,\n    Button,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport RelationsMenu from \"../RelationsMenu\"\nimport { get_list_query_variables } from \"./tools\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {children}\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <HasPermissionWrapper permission=\"add\"\n                                  resource=\"business\">\n              <Button color=\"primary btn-block mb-6\"\n                      onClick={() => history.push(\"/relations/b2b/add\")}>\n                <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.b2b.add')}\n              </Button>\n            </HasPermissionWrapper>\n            <RelationsMenu activeLink='b2b'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Badge,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_archive from \"../../../tools/confirm_archive\"\nimport confirm_unarchive from \"../../../tools/confirm_unarchive\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  console.log(data)\n\n  \n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                  </Table.Col>\n                  {/* Archive / restore buttons */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked isActive\")\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) == \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\n\n// const RelationsB2B = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNTS_QUERY} variables={get_list_query_variables()} notifyOnNetworkStatusChange>\n//         {({ loading, error, data, refetch, fetchMore, variables}) => {\n//           // Loading\n//           if (loading) return (\n//             <RelationsAccountsBase refetch={refetch}>\n//               <ContentCard cardTitle={t('relations.b2b.title')}>\n//                 <Dimmer active={true}\n//                         loader={true}>\n//                 </Dimmer>\n//               </ContentCard>\n//             </RelationsAccountsBase>\n//           )\n//           // Error\n//           if (error) return (\n//             <RelationsAccountsBase>\n//               <Container>\n//                 <ContentCard cardTitle={t('relations.b2b.title')}>\n//                   <p>{t('relations.b2b.error_loading')}</p>\n//                 </ContentCard>\n//               </Container>\n//             </RelationsAccountsBase>\n//           )\n//           const headerOptions = <Card.Options>\n//             <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'}  \n//                     size=\"sm\"\n//                     onClick={() => {\n//                       localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n//                       refetch(get_list_query_variables())\n//                     }\n//             }>\n//               {t('general.active')}\n//             </Button>\n//             <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'} \n//                     size=\"sm\" \n//                     className=\"ml-2\" \n//                     onClick={() => {\n//                       localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n//                       refetch(get_list_query_variables())\n//                     }\n//             }>\n//               {t('general.deleted')}\n//             </Button>\n//           </Card.Options>\n          \n//           // Empty list\n//           if (!data.businesses.edges.length) { return (\n//             <RelationsAccountsBase refetch={refetch}>\n//               <ContentCard cardTitle={t('relations.b2b.title')}\n//                             headerContent={headerOptions}>\n//                 <p>\n//                   {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n//                     t('relations.b2b.empty_list') : \n//                     t(\"relations.b2b.empty_archive\")}\n//                 </p>\n//               </ContentCard>\n//             </RelationsAccountsBase>\n//           )} else {   \n//           // Life's good! :)\n//           return (\n//             <RelationsAccountsBase refetch={refetch}>\n//               {console.log('query vars:')}\n//               {console.log(variables)}\n//               <ContentCard cardTitle={t('relations.b2b.title')}\n//                            headerContent={headerOptions}\n//                            pageInfo={data.businesses.pageInfo}\n//                            onLoadMore={() => {\n//                              fetchMore({\n//                                variables: {\n//                                  after: data.businesses.pageInfo.endCursor\n//                                },\n//                                updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                  const newEdges = fetchMoreResult.businesses.edges\n//                                  const pageInfo = fetchMoreResult.businesses.pageInfo \n\n//                                  return newEdges.length\n//                                    ? {\n//                                        // Put the new businesses at the end of the list and update `pageInfo`\n//                                        // so we have the new `endCursor` and `hasNextPage` values\n//                                       data: {\n//                                         businesses: {\n//                                           __typename: previousResult.businesses.__typename,\n//                                           edges: [ ...previousResult.businesses.edges, ...newEdges ],\n//                                           pageInfo\n//                                         }\n//                                       }\n//                                     }\n//                                   : previousResult\n//                               }\n//                             })\n//                           }} >\n//                 <Table>\n//                   <Table.Header>\n//                     <Table.Row key={v4()}>\n//                       <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                     </Table.Row>\n//                   </Table.Header>\n//                   <Table.Body>\n//                       {data.businesses.edges.map(({ node }) => (\n//                         <Table.Row key={v4()}>\n//                           <Table.Col key={v4()}>\n//                             {node.name}\n//                           </Table.Col>\n//                           {/* <Table.Col key={v4()}>\n//                             {node.email}\n//                           </Table.Col> */}\n//                           <Table.Col className=\"text-right\" key={v4()}>\n//                             {(!node.archived) ? \n//                               <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                               <Button className='btn-sm' \n//                                       onClick={() => history.push(\"/relations/businesses/\" + node.id + \"/edit\")}\n//                                       color=\"secondary\">\n//                                 {t('general.edit')}\n//                               </Button>\n//                             }\n//                           </Table.Col>\n//                           {/* <Mutation mutation={UPDATE_ACCOUNT_ACTIVE} key={v4()}>\n//                             {(updateAccountActive, { data }) => (\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <button className=\"icon btn btn-link btn-sm\" \n//                                   title={t('general.deactivate')} \n//                                   href=\"\"\n//                                   onClick={() => {\n//                                     console.log(\"clicked archived\")\n//                                     let id = node.id\n//                                     let archived \n//                                     if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) == \"true\") {\n//                                       archived = true\n//                                     } else {\n//                                       archived = false\n//                                     }\n\n//                                     updateAccountActive({ variables: {\n//                                       input: {\n//                                         id,\n//                                         archived: !archived // invert, as we need the opposite from the list currently displayed\n//                                       }\n//                                 }, refetchQueries: [\n//                                     {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n//                                 ]}).then(({ data }) => {\n//                                   console.log('got data', data);\n//                                   toast.success(\n//                                     (archived) ? t('relations.b2b.deactivated'): t('relations.b2b.restored')``, {\n//                                       position: toast.POSITION.BOTTOM_RIGHT\n//                                     })\n//                                 }).catch((error) => {\n//                                   toast.error((t('general.toast_server_error')) +  error, {\n//                                       position: toast.POSITION.BOTTOM_RIGHT\n//                                     })\n//                                   console.log('there was an error sending the query', error);\n//                                 })\n//                                 }}>\n//                                   {\n//                                     (node.archived) ?\n//                                       <Icon prefix=\"fe\" name=\"trash-2\" /> :\n//                                       t(\"general.restore\")\n//                                   }\n//                                 </button>\n//                               </Table.Col>\n//                             )}\n//                           </Mutation> */}\n//                           {/* {\n//                             (node.archived) ? '' :\n//                               <Mutation mutation={DELETE_ACCOUNT} key={v4()}>\n//                                 {(deleteAccount, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.first_name} {node.last_name}</p>,\n//                                           msgSuccess: t('relations.b2b.deleted'),\n//                                           deleteFunction: deleteAccount,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                           } */}\n//                         </Table.Row>\n//                       ))}\n//                   </Table.Body>\n//                 </Table>\n//               </ContentCard>\n//             </RelationsAccountsBase>\n//           )}}\n//         }\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(RelationsB2B))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_BUSINESSES_QUERY } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\nimport RelationsMenu from '../RelationsMenu'\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst return_url = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          return_url={return_url}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"business\">\n                <Button color=\"primary btn-block mb-6\"\n                        onClick={() => history.push(return_url)}>\n                  <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                </Button>\n              </HasPermissionWrapper>\n              <RelationsMenu activeLink='accounts'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\n\nimport {\n  Button,\n  Icon,\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n// import OrganizationMenu from \"../OrganizationMenu\"\n// import ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsB2BEditBase({ t, match, history, children, cardTitle=\"\" }) {\n  const returnUrl = \"/relations/b2b\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            {/* <RelationsAccountsBack /> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{cardTitle}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              {/* B2B relation menu goes here */}\n              <HasPermissionWrapper permission=\"change\"\n                                    resource=\"business\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              {/* <RelationsMenu activeLink='b2b'/> */}\n              {/* <ProfileMenu \n                activeLink='profile'\n                account_id={account_id}\n              />  */}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, return_url, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(return_url)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\n// import RelationsAccountsBack from \"./RelationsAccountsBack\"\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// import OrganizationMenu from \"../OrganizationMenu\"\n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data, refetch } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase>\n      <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase>\n      <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n  console.log(initialData)\n\n  return (\n    <RelationsB2BEditBase cardTitle={t('relations.b2b.title_edit')}>\n      <Formik\n        initialValues={{ \n          name: initialData.name,\n          phone: initialData.phone,\n          phone2: initialData.phone2,\n          address: initialData.address,\n          postcode: initialData.postcode,\n          city: initialData.city,\n          country: initialData.country,\n          emailBilling: initialData.emailBilling,\n          emailContact: initialData.emailContact,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let input_vars = {\n              id: businessId,\n              name: values.name,\n              phone: values.phone,\n              phone2: values.phone2,\n              address: values.address,\n              postcode: values.postcode,\n              city: values.city,\n              country: values.country,\n              emailBilling: values.emailBilling,\n              emailContact: values.emailContact,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration\n            }\n\n            updateBusiness({ variables: {\n              input: input_vars\n            }, refetchQueries: [\n                // Refetch list\n                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                // Refresh local cached results for this account\n                {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <RelationsB2BEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../HasPermissionWrapper\"\n\nlet appointments_active\nlet events_active\nlet classes_active\n\nconst ScheduleMenu = ({ t, activeLink }) => (\n  <List.Group transparent={true}>\n    {(activeLink === 'appointments') ? appointments_active = true: appointments_active = false}\n    {(activeLink === 'events') ? events_active = true: events_active = false}\n    {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n    \n\n    <HasPermissionWrapper \n        resource=\"scheduleclass\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to=\"#/schedule/classes\"\n          icon=\"book\"\n          active={classes_active}\n          >\n          {t('schedule.classes.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to=\"#/schedule/events\"\n          icon=\"clipboard\"\n          active={events_active}\n          >\n          {t('schedule.events.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    {/* <HasPermissionWrapper \n        resource=\"scheduleappointment\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to=\"#/schedule/appointments\"\n          icon=\"calendar\"\n          active={appointments_active}\n          >\n          {t('schedule.appointments.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper> */}\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleMenu)","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  StampCard\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ScheduleMenu from \"../ScheduleMenu\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.id\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={9}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={4} lg={4}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={4} lg={4}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <ScheduleMenu />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationAppointment\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationAppointment = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)\n  if (organizationAppointment) {\n    queryVars.organizationAppointment = organizationAppointment\n  } else {\n    queryVars.organizationAppointment = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst ScheduleAppointmentsFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Locations */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_locations\")}</option>\n      {data.organizationLocations.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n    {/* Appointments */}\n    {/* <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.appointments.filter_all_appointments\")}</option>\n      {data.organizationAppointments.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select> */}\n  </div>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointmentsFilter))","import { gql } from \"@apollo/client\"\n\nexport const GET_APPOINTMENTS_QUERY = gql`\n  query ScheduleAppointments(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationLocation: String\n    ){\n    scheduleAppointments(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationLocation: $organizationLocation\n    ){\n      date\n      appointments {\n        scheduleItemId\n        frequencyType\n        date\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationAppointment {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions {\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationAppointments(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_APPOINTMENT_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String, $archived: Boolean!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String, $archived: Boolean) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationAppointments(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Badge,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table,\n  Text,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleMenu from \"../ScheduleMenu\"\nimport ScheduleAppointmentsFilter from \"./ScheduleAppointmentsFilter\"\n\nimport { GET_APPOINTMENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_APPOINTMENT = gql`\n  mutation DeleteScheduleAppointment($input: DeleteScheduleAppointmentInput!) {\n    deleteScheduleAppointment(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nconst ScheduleAppointments = ({ t, history }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Query query={GET_APPOINTMENTS_QUERY} variables={get_list_query_variables()}>\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <Container>\n              <p>{t('general.loading_with_dots')}</p>\n            </Container>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <Container>\n                <p>{t('general.error_sad_smiley')}</p>\n              </Container>\n            )\n          }\n          \n          // Empty list\n          if (!data.scheduleAppointments.length) { return (\n            <ContentCard cardTitle={t('schedule.appointments.title')}>\n              <p>\n                {t('schedule.appointments.empty_list')}\n              </p>\n            </ContentCard>\n          )} else {   \n          // Life's good! :)\n          return (\n            <Container>\n              <Page.Header title={t(\"schedule.title\")}>\n                <div className=\"page-options d-flex\">\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_location\")}>\n                    <Button \n                      icon=\"home\"\n                      tooltip=\"text\"\n                      className=\"mr-2\"\n                      color={\n                        ((localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY))) ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"location\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <span title={t(\"schedule.appointments.tooltip_sort_by_starttime\")}>\n                    <Button \n                      icon=\"clock\"\n                      className=\"mr-2\"\n                      color={\n                        (localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY) === \"starttime\") ?\n                        \"azure\" : \"secondary\"\n                      }\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_ORDER_BY, \"starttime\")\n                        refetch(get_list_query_variables())\n                      }}\n                    />\n                  </span>\n                  <CSDatePicker \n                    className=\"form-control schedule-list-csdatepicker mr-2\"\n                    selected={new Date(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM))}\n                    isClearable={false}\n                    onChange={(date) => {\n                      let nextWeekFrom = moment(date)\n                      let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                      console.log(get_list_query_variables())\n\n                      refetch(get_list_query_variables())\n                    }}\n                    placeholderText={t('schedule.appointments.go_to_date')}\n                  />\n                  <Button.List className=\"schedule-list-page-options-btn-list\">\n                    <Button \n                      icon=\"chevron-left\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).subtract(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"sun\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let currentWeekFrom = moment()\n                        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                        \n                        refetch(get_list_query_variables())\n                    }} />\n                    <Button \n                      icon=\"chevron-right\"\n                      color=\"secondary\"\n                      onClick={ () => {\n                        let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM)).add(7, 'days')\n                        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                        \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                        localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                        refetch(get_list_query_variables())\n                    }} />\n                  </Button.List> \n                </div>\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  { data.scheduleAppointments.map(({ date, appointments }) => (\n                    <div key={v4()}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>\n                            <b>{moment(date).format(\"dddd\")}</b> {' '}\n                            <span className=\"text-muted\">\n                              {moment(date).format(\"LL\")} \n                            </span>\n                          </Card.Title>\n                        </Card.Header>\n                        <Card.Body>\n                          {!(appointments.length) ? t('schedule.appointments.empty_list') :\n                            <Table>\n                              <Table.Header>\n                                <Table.Row key={v4()}>\n                                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.appointment')}</Table.ColHeader>\n                                  <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                                  <Table.ColHeader></Table.ColHeader>\n                                </Table.Row>\n                              </Table.Header>\n                              <Table.Body>\n                                {appointments.map((\n                                  { scheduleItemId, \n                                    frequencyType,\n                                    date, \n                                    organizationLocationRoom, \n                                    organizationAppointment, \n                                    timeStart, \n                                    timeEnd,\n                                    displayPublic }) => (\n                                  <Table.Row key={v4()}>\n                                    <Table.Col>\n                                      {/* Start & end time */}\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} { ' ' }\n                                      {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null }\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Location */}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      <span className=\"text-muted\"> &bull; {organizationLocationRoom.name}</span>\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Type */}\n                                      {/* {organizationAppointment.name} <br /> */}\n                                    </Table.Col>\n                                    <Table.Col>\n                                      {/* Public */}\n                                      <BadgeBoolean value={displayPublic} />\n                                    </Table.Col>\n                                    <Table.Col>\n                                      <Dropdown\n                                        key={v4()}\n                                        className=\"pull-right\"\n                                        type=\"button\"\n                                        toggle\n                                        color=\"secondary btn-sm\"\n                                        triggerContent={t(\"general.actions\")}\n                                        items={[\n                                          <Dropdown.Item key={v4()}>Dropdown Link</Dropdown.Item>,\n                                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Dropdown.Item\n                                              key={v4()}\n                                              badge={t('schedule.appointments.all_appointments_in_series')}\n                                              badgeType=\"secondary\"\n                                              icon=\"edit-2\"\n                                              onClick={() => history.push('/schedule/appointments/all/edit/' + scheduleItemId)}>\n                                                {t(\"general.edit\")}\n                                            </Dropdown.Item>\n                                          </HasPermissionWrapper>,\n                                          <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                            <Dropdown.ItemDivider key={v4()} />\n                                            <Mutation mutation={DELETE_SCHEDULE_APPOINTMENT} key={v4()}>\n                                              {(deleteScheduleAppointment, { data }) => (\n                                                  <Dropdown.Item\n                                                    key={v4()}\n                                                    badge={t('schedule.appointments.all_appointments_in_series')}\n                                                    badgeType=\"danger\"\n                                                    icon=\"trash-2\"\n                                                    onClick={() => {\n                                                      confirm_delete({\n                                                        t: t,\n                                                        msgConfirm: t(\"schedule.appointments.delete_confirm_msg\"),\n                                                        msgDescription: <p key={v4()}>\n                                                          {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                                          {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                                          {organizationLocationRoom.organizationLocation.name} {' '}\n                                                          {organizationLocationRoom.name}\n                                                          </p>,\n                                                        msgSuccess: t('schedule.appointments.deleted'),\n                                                        deleteFunction: deleteScheduleAppointment,\n                                                        functionVariables: { variables: {\n                                                          input: {\n                                                            id: scheduleItemId\n                                                          }\n                                                        }, refetchQueries: [\n                                                          { query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables() }\n                                                        ]}\n                                                      })\n                                                  }}>\n                                                  {t(\"general.delete\")}\n                                                  </Dropdown.Item>\n                                              )}\n                                            </Mutation>\n                                          </HasPermissionWrapper>\n                                        ]}\n                                      />\n                                    </Table.Col>\n                                  </Table.Row>\n                                ))}\n                              </Table.Body>\n                            </Table>\n                          }\n                        </Card.Body>\n                      </Card>\n                    </div>\n                    ))}\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"scheduleclass\">\n                  <Button color=\"primary btn-block mb-1\"\n                          onClick={() => history.push(\"/schedule/appointments/add\")}>\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.appointments.add')}\n                  </Button>\n                </HasPermissionWrapper>\n                <div>\n                  <Button\n                    className=\"pull-right\"\n                    color=\"link\"\n                    size=\"sm\"\n                    onClick={() => {\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LEVEL, \"\")\n                      localStorage.setItem(CSLS.SCHEDULE_APPOINTMENTS_FILTER_LOCATION, \"\")\n                      refetch(get_list_query_variables())\n                    }}\n                  >\n                    {t(\"general.clear\")}\n                  </Button>\n                </div>\n                <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n                <ScheduleAppointmentsFilter data={data} refetch={refetch} />\n                <h5>{t(\"general.menu\")}</h5>\n                <ScheduleMenu activeLink='appointments'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      )}}}\n      </Query>\n    </div>\n  </SiteWrapper>\n);\n\nexport default withTranslation()(withRouter(ScheduleAppointments))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nlet edit_active\nlet instructors_available_active\n\nconst AppointmentEditMenu = ({ t, activeLink, appointmentId }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'edit') ? edit_active = true: edit_active = false}\n        {(activeLink === 'instructors_available') ? instructors_available_active = true: instructors_available_active = false}\n        \n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >        \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/edit/\" + appointmentId}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t('general.edit')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper\n          resource=\"scheduleappointment\"\n          permission=\"change\"\n        >     \n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/appointments/all/instructors_available/\" + appointmentId}\n              icon=\"users\"\n              active={instructors_available_active}\n              >\n              {t('general.instructors_available')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(AppointmentEditMenu)","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const APPOINTMENT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nconst CSTimePicker = ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) =>\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={t('system.datepicker_timeformat')}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n        isClearable={clearable}\n        showTimeSelect\n        showTimeSelectOnly\n        timeIntervals={15}\n        className={className}\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n\nexport default withTranslation()(CSTimePicker)","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleAppointmentForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, return_url }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.appointments.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.appointments.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.appointments.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.appointments.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.appointments.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.appointment')}>\n          <Field component=\"select\" \n                name=\"organizationAppointment\" \n                className={(errors.organizationAppointment) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationAppointments.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationAppointment\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  */}\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType == \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.appointments.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(return_url)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleAppointmentForm))","// @flow\n\nimport React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { APPOINTMENT_SCHEMA } from './yupSchema'\nimport ScheduleAppointmentForm from './ScheduleAppointmentForm'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleMenu from '../ScheduleMenu'\n\n\nconst CREATE_APPOINTMENT = gql`\n  mutation CreateScheduleAppointment($input:CreateScheduleAppointmentInput!) {\n    createScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentAdd extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment add add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const return_url = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n\n          <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <Container>\n                  <p>{t('general.loading_with_dots')}</p>\n                </Container>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <Container>\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </Container>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n\n              return (\n                <Container>\n                  <Page.Header title={t(\"schedule.title\")} />\n                  <Grid.Row>\n                    <Grid.Col md={9}>\n                      <Card>\n                        <Card.Header>\n                          <Card.Title>{t('schedule.appointments.title_add')}</Card.Title>\n                        </Card.Header>\n                        <Mutation mutation={CREATE_APPOINTMENT} onCompleted={() => history.push(return_url)}> \n                  {(createSubscription, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: true,\n                        frequencyType: \"WEEKLY\",\n                        frequencyInterval: 1,\n                        organizationLocationRoom: \"\",\n                        dateStart: new Date(),\n                        timeStart: new Date(),\n                        timeEnd: new Date(),\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType == 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }\n                          \n                          createSubscription({ variables: {\n                            input: {\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_add_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                            <ScheduleAppointmentForm\n                              inputData={inputData}\n                              isSubmitting={isSubmitting}\n                              setFieldValue={setFieldValue}\n                              setFieldTouched={setFieldTouched}\n                              errors={errors}\n                              values={values}\n                              touched={touched}\n                              return_url={return_url}\n                            >\n                              {console.log('########## v & e')}\n                              {console.log(values)}\n                              {console.log(errors)}\n                              {console.log(touched)}\n                            </ScheduleAppointmentForm>\n                          )\n                        }\n                    </Formik>\n                    )}\n                  </Mutation>\n                </Card>\n                    </Grid.Col>\n                      <Grid.Col md={3}>\n                        <HasPermissionWrapper permission=\"add\"\n                                              resource=\"scheduleappointment\">\n                          <Button color=\"primary btn-block mb-6\"\n                                  onClick={() => history.push(return_url)}>\n                            <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                          </Button>\n                        </HasPermissionWrapper>\n                        <ScheduleMenu activeLink='appointments'/>\n                      </Grid.Col>\n                    </Grid.Row>\n                  </Container>\n            )}}\n          </Query>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst AppointmentEditBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/schedule/appointments\" \n          className='btn btn-outline-secondary btn-sm'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('schedule.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(AppointmentEditBack)","// @flow\n\nimport React, { Component } from 'react'\nimport { t } from 'i18next'\nimport { Query } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_APPOINTMENT_QUERY } from \"../queries\"\n\nimport AppointmentEditMenu from './AppointmentEditMenu'\nimport AppointmentEditBack from './AppointmentEditBack';\nimport { appointment_edit_all_subtitle } from \"./tools\"\n\n\nclass AppointmentEditBase extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const appointmentId = match.params.appointment_id\n    const menu_activeLink = this.props.menu_activeLink\n    const default_card = this.props.default_card\n    const sidebar_button = this.props.sidebar_button\n\n    return (\n      <Query query={GET_APPOINTMENT_QUERY} variables = {{id: appointmentId, archived: false}} >\n        {({ loading, error, data, refetch }) => {\n          // Loading\n          if (loading) return (\n            <p>{t('general.loading_with_dots')}</p>\n          )\n          // Error\n          if (error) {\n            console.log(error)\n            return (\n              <p>{t('general.error_sad_smiley')}</p>\n            )\n          }\n          \n          console.log('query data')\n          console.log(data)\n          const initialValues = data.scheduleItem\n\n          const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n          const subtitle = appointment_edit_all_subtitle({\n            t: t,\n            location: initialValues.organizationLocationRoom.organizationLocation.name,\n            locationRoom: initialValues.organizationLocationRoom.name,\n            starttime: initialTimeStart\n          })\n          \n          return (\n            <Container>\n              <Page.Header \n                title={t(\"schedule.title\")} \n                subTitle={subtitle}\n              >\n                <AppointmentEditBack />\n              </Page.Header>\n              <Grid.Row>\n                <Grid.Col md={9}>\n                  {!default_card ? this.props.children :\n                    <Card>\n                      <Card.Header>\n                        <Card.Title>{this.props.card_title}</Card.Title>\n                      </Card.Header>\n                      <Card.Body>\n                        {this.props.children}\n                      </Card.Body>\n                    </Card>\n                  }\n                </Grid.Col>\n                <Grid.Col md={3}>\n                  {sidebar_button}\n                  <h5>{t('general.menu')}</h5>\n                  <AppointmentEditMenu activeLink={menu_activeLink} appointmentId={appointmentId}/>\n                </Grid.Col>\n              </Grid.Row>\n            </Container>\n          )\n        }}\n      </Query>\n)}}\n\nAppointmentEditBase.defaultProps = {\n  default_card: true,\n  sidebar_button: \"\",\n  card_title: t('schedule.appointments.title_edit')\n}\n\nexport default withTranslation()(withRouter(AppointmentEditBase))","import moment from 'moment'\n\nexport function appointment_edit_all_subtitle({t, location, locationRoom, starttime}) {\n  return t('general.appointment') + ': ' + location + ' (' + locationRoom + ') @ ' + moment(starttime).format('LT')\n}\n\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n      break\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n      break\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n      break\n    default:\n      return \"\"\n      break\n  }\n}\n","// @flow\n\nimport React, { Component } from 'react'\nimport { Query, Mutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APPOINTMENTS_QUERY, GET_APPOINTMENT_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { APPOINTMENT_SCHEMA } from '../../yupSchema'\nimport ScheduleAppointmentForm from '../../ScheduleAppointmentForm'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport AppointmentEditBase from '../AppointmentEditBase'\n\n\nconst UPDATE_APPOINTMENT = gql`\n  mutation UpdateScheduleAppointment($input:UpdateScheduleAppointmentInput!) {\n    updateScheduleAppointment(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`\n\n\nclass ScheduleAppointmentEditAll extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule appointment edit add props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const match = this.props.match\n    const history = this.props.history\n    const id = match.params.appointment_id\n    const return_url = \"/schedule/appointments\"\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Query query={GET_APPOINTMENT_QUERY} variables = {{id: id, archived: false}} >\n            {({ loading, error, data, refetch }) => {\n              // Loading\n              if (loading) return (\n                <AppointmentEditBase menu_activeLink=\"edit\">\n                  <p>{t('general.loading_with_dots')}</p>\n                </AppointmentEditBase>\n              )\n              // Error\n              if (error) {\n                console.log(error)\n                return (\n                  <AppointmentEditBase menu_activeLink=\"edit\">\n                    <p>{t('general.error_sad_smiley')}</p>\n                  </AppointmentEditBase>\n                )\n              }\n              \n              console.log('query data')\n              console.log(data)\n              const inputData = data\n              const initialValues = data.scheduleItem\n\n              const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n              const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n              \n              return (\n                <AppointmentEditBase \n                  menu_activeLink=\"edit\"\n                >\n                  <Mutation mutation={UPDATE_APPOINTMENT} onCompleted={() => history.push(return_url)}> \n                  {(updateScheduleAppointment, { data }) => (\n                    <Formik\n                      initialValues={{ \n                        displayPublic: initialValues.displayPublic,\n                        frequencyType: initialValues.frequencyType,\n                        frequencyInterval: initialValues.frequencyInterval,\n                        organizationLocationRoom: initialValues.organizationLocationRoom.id,\n                        dateStart: initialValues.dateStart,\n                        dateEnd: initialValues.dateEnd,\n                        timeStart: initialTimeStart,\n                        timeEnd: initialTimeEnd,\n                      }}\n                      validationSchema={APPOINTMENT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          let frequencyInterval = values.frequencyInterval\n                          if (values.frequencyType == 'SPECIFIC')\n                            frequencyInterval = 0\n\n                          let dateEnd\n                            if (values.dateEnd) {\n                              dateEnd = dateToLocalISO(values.dateEnd)\n                            } else {\n                              dateEnd = values.dateEnd\n                            }  \n\n                          updateScheduleAppointment({ variables: {\n                            input: {\n                              id: id,\n                              displayPublic: values.displayPublic,\n                              frequencyType: values.frequencyType,\n                              frequencyInterval: frequencyInterval,\n                              organizationLocationRoom: values.organizationLocationRoom,\n                              dateStart: dateToLocalISO(values.dateStart),\n                              dateEnd: dateEnd,\n                              timeStart: dateToLocalISOTime(values.timeStart),\n                              timeEnd: dateToLocalISOTime(values.timeEnd)\n                            }\n                          }, refetchQueries: [\n                              {query: GET_APPOINTMENTS_QUERY, variables: get_list_query_variables()}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('schedule.appointments.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                        <ScheduleAppointmentForm\n                          inputData={inputData}\n                          isSubmitting={isSubmitting}\n                          setFieldValue={setFieldValue}\n                          setFieldTouched={setFieldTouched}\n                          errors={errors}\n                          values={values}\n                          touched={touched}\n                          return_url={return_url}\n                        >\n                          {console.log('########## v & e')}\n                          {console.log(values)}\n                          {console.log(errors)}\n                          {console.log(touched)}\n                        </ScheduleAppointmentForm>\n                      )}\n                    </Formik>\n                    )}\n                  </Mutation>\n                </AppointmentEditBase>\n            )}}\n           </Query>\n         </div>\n      </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleAppointmentEditAll))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    attendanceCountType: \"ATTENDING_AND_BOOKED\",\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  let messages\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status == 'CANCELED') {\n    return description\n  }\n}","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nconst ScheduleClassesFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Locations */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n      {data.organizationLocations.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n    {/* Classtypes */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n      {data.organizationClasstypes.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n    {/* Levels */}\n    <select \n      className={selectClass}\n      defaultValue={getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n      {data.organizationLevels.edges.map(({ node }) =>\n        <option value={node.id} key={v4()}>{node.name}</option>\n      )}\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleMenu from \"../ScheduleMenu\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <Button color=\"primary btn-block mb-1\"\n                        onClick={() => history.push(\"/schedule/classes/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n                </Button>\n              </HasPermissionWrapper>\n              {(data) ? \n                <div>\n                  <div>\n                    <Button\n                      className=\"float-right\"\n                      color=\"link\"\n                      size=\"sm\"\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n                        refetch(get_list_query_variables())\n                      }}\n                    >\n                      {t(\"general.clear\")}\n                    </Button>\n                  </div>\n                  <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n                  <ScheduleClassesFilter data={data} refetch={refetch} />\n                </div>\n              : \"\"}\n              <h5>{t(\"general.menu\")}</h5>\n              <ScheduleMenu activeLink='classes'/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table,\n  Text,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleMenu from \"../ScheduleMenu\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(classes.length) ? <Card.Body>{t('schedule.classes.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {classes.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      role,\n                      account2,\n                      role2,\n                      organizationLocationRoom, \n                      organizationClasstype, \n                      organizationLevel,\n                      timeStart, \n                      timeEnd,\n                      displayPublic }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_class_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Type and level */}\n                        {organizationClasstype.name} <br />\n                        <small className=\"text-muted\">\n                          {(organizationLevel) ? organizationLevel.name: \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? \n                            represent_instructor(account.fullName, role) : \n                            <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Public */}\n                        <BadgeBoolean value={displayPublic} />\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"bar-chart-2\">\n                                    {t(\"schedule.classes.class.attendance_chart.title\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.classes.all_classes_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                      {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      {organizationClasstype.Name}\n                                      </p>,\n                                    msgSuccess: t('schedule.classes.deleted'),\n                                    deleteFunction: deleteScheduleClass,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//                   <h5>{t(\"general.menu\")}</h5>\n//                   <ScheduleMenu activeLink='classes'/>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number(),\n    walkInSpaces: Yup.number(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType == \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType == \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ScheduleMenu from '../ScheduleMenu'\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} />\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n              <ScheduleMenu activeLink='classes'/>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\"\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType == 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: values.spaces,\n                  walkInSpaces: values.walkInSpaces\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../HasPermissionWrapper\"\n\nlet edit_active\nlet classpasses_active\nlet subscriptions_active\nlet instructors_active\nlet prices_active\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        {(activeLink === 'edit') ? edit_active = true: edit_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'instructors') ? instructors_active = true: instructors_active = false}\n        {(activeLink === 'prices') ? prices_active = true: prices_active = false}        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={edit_active}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/instructors/\" + classId}\n            icon=\"users\"\n            active={instructors_active}\n            >\n            {t('general.instructors')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/prices/\" + classId}\n            icon=\"dollar-sign\"\n            active={prices_active}\n            >\n            {t('general.prices')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/subscriptions/\" + classId}\n            icon=\"edit\"\n            active={subscriptions_active}\n            >\n            {t('general.subscriptions')}\n        </List.GroupItem>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/classpasses/\" + classId}\n            icon=\"edit\"\n            active={classpasses_active}\n            >\n            {t('general.classpasses')}\n        </List.GroupItem>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n      scheduleItemType\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst ClassEditBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/schedule/classes\" \n          className='btn btn-outline-secondary btn-sm'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('schedule.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(ClassEditBack)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\n\nimport ClassEditMenu from './ClassEditMenu'\nimport ClassEditBack from './ClassEditBack';\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", sidebarButton=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <ClassEditBack />\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                <Card.Body>\n                  {children}\n                </Card.Body>\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            {sidebarButton}\n            <h5>{t('general.menu')}</h5>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime}) {\n  return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' + moment(starttime).format('LT')\n}\n\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n      break\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n      break\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n      break\n    default:\n      return \"\"\n      break\n  }\n}\n","// @flow\n\nimport React, { Component } from 'react'\nimport { t } from 'i18next'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditMenu from './ClassEditMenu'\nimport ClassEditBack from './ClassEditBack'\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, sidebarButton=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      sidebarButton={sidebarButton}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      sidebarButton={sidebarButton}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      sidebarButton={sidebarButton}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink}>\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType == 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: values.spaces,\n                  walkInSpaces: values.walkInSpaces,\n                  infoMailContent: values.infoMailContent\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\n\n// import {\n//   Badge\n// } from \"tabler-react\"\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Form,\n  Table,\n  Text\n} from \"tabler-react\"\n\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const sidebarButton = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n    <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n      <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.classpasses.error_loading')}</p>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.classpasses.empty_list')}</p>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      sidebarButton={sidebarButton}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Form,\n  Table,\n  Text\n} from \"tabler-react\"\n\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","// @flow\n\nimport React, { Component } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const sidebarButton = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemsubscription\">\n    <Link to={\"/schedule/classes/all/subscriptions/\" + classId + \"/add\" } >\n      <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.subscriptions.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      sidebarButton={sidebarButton}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleiteminstructor\">\n    <Link to={`/schedule/classes/all/instructors/${classId}/add` } >\n      <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.instructors.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={ButtonAdd}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={ButtonAdd}\n    >\n      <p>{t('schedule.classes.instructors.error_loading')}</p>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={ButtonAdd}\n    >\n      <p>{t('schedule.classes.instructors.empty_list')}</p>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    sidebarButton={ButtonAdd}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format('LL')}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format('LL') : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <Link to={\"/schedule/classes/all/instructors/\" + classId } >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const sidebarButton = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      sidebarButton={sidebarButton}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const sidebarButton = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      sidebarButton={sidebarButton}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","import CSLS from \"../../../../../tools/cs_local_storage\"\nimport { withRouter } from \"react-router\"\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <Link to={\"/schedule/classes/\"} >\n    <Button color=\"link mr-2\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, class_date, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n  }\n\n  return (\n    <div>\n      <h5>{t(\"general.menu\")}</h5>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"general.edit\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance, { data }] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\n// import ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ]\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const return_url = \"/schedule/classes/\"\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { refetch: refetchAttendance, loading: queryAttendanceLoading, error: queryAttendanceError, data: queryAttendanceData } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date)\n    }\n  )\n  const [ updateAttendance, \n    { loading: mutationAttendanceLoading, error: mutationAttendanceError },\n  ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n         { refetch: refetchAccounts, \n           fetchMore: fetchMoreAccounts,\n           loading: queryAccountsLoading, \n           error: queryAccountsError, \n           data: queryAccountsData \n         }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  // const [createInvoice, { data }] = useMutation(CREATE_ACCOUNT_INVOICE, {\n  //   // onCompleted = () => history.push('/finance/invoices/edit/')\n  // }) \n\n  // Query\n  // Loading\n  if (queryAttendanceLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryAttendanceError) {\n    console.log(queryAttendanceError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n\n  const scheduleItem = queryAttendanceData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              <InputSearch \n                initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  console.log(value)\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n                  if (value) {\n                    // {console.log('showSearch')}\n                    // {console.log(showSearch)}\n                    setShowSearch(true)\n                    getAccounts({ variables: get_accounts_query_variables()})\n                  } else {\n                    setShowSearch(false)\n                  }\n                }}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={9}>\n                {/* Search results */}\n                {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n                  <ContentCard cardTitle={t('general.search_results')}\n                              pageInfo={queryAccountsData.accounts.pageInfo}\n                              onLoadMore={() => {\n                                fetchMoreAccounts({\n                                  variables: {\n                                  after: queryAccountsData.accounts.pageInfo.endCursor\n                                },\n                                updateQuery: (previousResult, { fetchMoreResult }) => {\n                                  const newEdges = fetchMoreResult.accounts.edges\n                                  const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                                  return newEdges.length\n                                    ? {\n                                        // Put the new accounts at the end of the list and update `pageInfo`\n                                        // so we have the new `endCursor` and `hasNextPage` values\n                                        queryAccountsData: {\n                                          accounts: {\n                                            __typename: previousResult.accounts.__typename,\n                                            edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      }\n                                    : previousResult\n                                }\n                              })\n                            }} >\n                    { (!queryAccountsData.accounts.edges.length) ? \n                      t('schedule.classes.class.attendance.search_result_empty') : \n                      <Table>\n                        <Table.Header>\n                          <Table.Row key={v4()}>\n                            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                            <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                            <Table.ColHeader></Table.ColHeader>\n                          </Table.Row>\n                        </Table.Header>\n                        <Table.Body>\n                          {queryAccountsData.accounts.edges.map(({ node }) => (\n                            <Table.Row key={v4()}>\n                              <Table.Col key={v4()}>\n                                {node.fullName}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {node.email}\n                              </Table.Col>\n                              <Table.Col key={v4()}>\n                                {(checkedInIds.includes(node.id)) ? \n                                 <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                                  <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                                    <Button color=\"secondary pull-right\">\n                                      {t('general.checkin')} <Icon name=\"chevron-right\" />\n                                    </Button>\n                                  </Link>       \n                                }   \n                              </Table.Col>\n                            </Table.Row>\n                          ))}\n                        </Table.Body>\n                      </Table>\n                    }\n                  </ContentCard>\n                  : \"\"\n                }\n                {/* Attendance */}\n                <ContentCard cardTitle={t('general.attendance')}\n                             pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                             onLoadMore={() => {\n                                fetchMoreAccounts({\n                                variables: {\n                                  after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                                },\n                                updateQuery: (previousResult, { fetchMoreResult }) => {\n                                  const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                                  const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                                  return newEdges.length\n                                    ? {\n                                        // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                                        // so we have the new `endCursor` and `hasNextPage` values\n                                        queryAttendanceData: {\n                                          scheduleItemAttendances: {\n                                            __typename: previousResult.scheduleItemAttendances.__typename,\n                                            edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                            pageInfo\n                                          }\n                                        }\n                                      }\n                                    : previousResult\n                                }\n                              })\n                            }} >\n                  <Table>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                        <Table.ColHeader></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col>\n                              {node.account.fullName}\n                            </Table.Col>\n                            <Table.Col>\n                              <BadgeBookingStatus status={node.bookingStatus} />\n                            </Table.Col>\n                            <Table.Col>\n                              {/* Delete */}\n                              <ScheduleClassAttendanceDelete node={node} />\n                              {/* Status dropdown */}\n                              <Dropdown\n                                key={v4()}\n                                className=\"pull-right\"\n                                type=\"button\"\n                                toggle\n                                color=\"secondary btn-sm\"\n                                triggerContent={t(\"general.status\")}\n                                items={[\n                                  // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                                  //   <Dropdown.Item\n                                  //     key={v4()}\n                                  //     icon=\"check\"\n                                  //     onClick={() => {\n                                  //       setAttendanceStatus({\n                                  //         t: t, \n                                  //         updateAttendance: updateAttendance,\n                                  //         node: node,\n                                  //         status: 'ATTENDING'\n                                  //       })\n                                  //       refetchAttendance()\n                                  //     }}>\n                                  //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                                  //   </Dropdown.Item>\n                                  // </HasPermissionWrapper>,\n                                  <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      icon=\"calendar\"\n                                      onClick={() => {\n                                        setAttendanceStatus({\n                                          t: t, \n                                          match: match,\n                                          updateAttendance: updateAttendance,\n                                          node: node,\n                                          status: 'BOOKED'\n                                        })\n                                      }}>\n                                        {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                                    </Dropdown.Item>\n                                  </HasPermissionWrapper>,\n                                  <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      icon=\"x\"\n                                      onClick={() => {\n                                        setAttendanceStatus({\n                                          t: t, \n                                          match: match,\n                                          updateAttendance: updateAttendance,\n                                          node: node,\n                                          status: 'CANCELLED'\n                                        })\n                                      }}>\n                                        {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                                    </Dropdown.Item>\n                                  </HasPermissionWrapper>,\n                                ]}\n                              />\n                              {(node.bookingStatus == \"BOOKED\") ?\n                                <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                                  <Button\n                                    key={v4()}\n                                    className=\"pull-right\"\n                                    color=\"success\"\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      setAttendanceStatus({\n                                        t: t, \n                                        match: match,\n                                        updateAttendance: updateAttendance,\n                                        node: node,\n                                        status: 'ATTENDING'\n                                      })\n                                    }}>\n                                      {t('general.checkin')}\n                                  </Button>\n                                </HasPermissionWrapper>  : \"\" }\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <ClassMenu \n                  scheduleItemId={schedule_item_id}\n                  class_date={class_date}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                class_date={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceQuery($year: Int!, $scheduleItem: ID!) {\n    insightClassAttendanceCountYear(year: $year, scheduleItem: $scheduleItem) {\n      description\n      dataCurrent\n      dataPrevious\n      year\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport C3Chart from \"react-c3js\"\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n\n  const year = parseInt(classDate.substring(0, 4))\n  console.log(year)\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  const dataLabelCurrentYear = year\n  const chartDataCurrentYear = data.insightClassAttendanceCountYear.dataCurrent\n  const dataLabelPreviousYear = year - 1\n  const chartDataPreviousYear = data.insightClassAttendanceCountYear.dataPrevious\n  const scheduleItem = data.scheduleItem\n  \n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  function range(size, startAt = 0) {\n    return [...Array(size).keys()].map(i => i + startAt);\n  }\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <Card.Body>\n          <C3Chart\n            style={{ height: \"16rem\" }}\n            data={{\n              x: 'x',\n              columns: [\n                // each columns data as array, starting with \"name\" and then containing data\n                [ 'x',\n                  ...range(54, 1) // This adds 1 .. 53\n                ],\n                [ 'current', ...chartDataCurrentYear],\n                [ 'previous', ...chartDataPreviousYear],\n              ],\n              type: \"bar\", // default type of chart\n              groups: [['current'], ['previous']],\n              colors: {\n                current: colors[\"azure\"],\n                previous: colors[\"azure-lighter\"],\n              },\n              names: {\n                // name of each serie\n                current: dataLabelCurrentYear,\n                previous: dataLabelPreviousYear\n              },\n              \n            }}\n            axis={{\n              y: {\n                padding: {\n                  bottom: 0,\n                },\n                show: true,\n                // Don't show decimals on ticks, only whole numbers\n                tick: {\n                  format: function (d) {\n                      return (parseInt(d) == d) ? d : null;\n                  }\n                }\n              },\n              x: {\n                padding: {\n                  left: 0,\n                  right: 0,\n                },\n                type: 'category',\n                show: true,\n              },\n            }}\n            tooltip={{\n              format: {\n                title: function(x) {\n                  return \"\";\n                },\n              },\n            }}\n            padding={{\n              bottom: 0,\n              // left: -1,\n              right: -1,\n            }}\n            point={{\n              show: false,\n            }}\n          />\n        </Card.Body>\n        <Card.Footer>\n          {/* {t(\"insight.revenue.total.explanation\")} */}\n        </Card.Footer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let return_url\n\n  if (returnTo == \"schedule_classes\") {\n    return_url = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo == \"selfcheckin\") {\n    return_url = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return return_url\n}","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { data, loading, error, onCompleted }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const return_url = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(return_url)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  List,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle, represent_instructor_role } from \"../../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { class_subtitle, get_accounts_query_variables } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n// import ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_BOOKING_OPTIONS_QUERY, CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { data, loading, error, onCompleted }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const return_url = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(return_url)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle, represent_instructor_role } from \"../../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { class_subtitle, get_accounts_query_variables } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\n// import ClassEditBase from \"../ClassEditBase\"\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { data, loading, error, onCompleted }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const return_url = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(return_url)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  List,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle, represent_instructor_role } from \"../../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { class_subtitle, get_accounts_query_variables } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n// import ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_BOOKING_OPTIONS_QUERY, CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  List,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle, represent_instructor_role } from \"../../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { class_subtitle, get_accounts_query_variables } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n// import ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_BOOKING_OPTIONS_QUERY, CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","// @flow\n\nimport React, { Component, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { Query, Mutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport { class_edit_all_subtitle, represent_instructor_role } from \"../../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport { class_subtitle, get_accounts_query_variables } from \"../tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\n// import ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const return_url = \"/schedule/classes/\"\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleClassWeeklyOTCInput!) {\n    deleteScheduleClassWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleClassWeeklyOTCInput!) {\n    updateScheduleClassWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, return_url }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(return_url)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC, { data }] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","// @flow\n\nimport React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\n\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n// import ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  console.log(schedule_item_id)\n  console.log(class_date)\n\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC, { data } ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: schedule_item_id,\n                            date: class_date,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: values.spaces,\n                            walkInSpaces: values.walkInSpaces,\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={schedule_item_id}\n                class_date={class_date}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import React from \"react\"\nimport { Link } from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button,\n  Icon, \n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nfunction ButtonAdd({t, classId}) {\n  return (\n    <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemprice\">\n      <Link to={\"/schedule/classes/all/prices/\" + classId + \"/add\" } >\n        <Button color=\"primary btn-block mb-6\">\n          <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.prices.add')}\n        </Button>\n      </Link>\n    </HasPermissionWrapper>\n  )\n} \n\nexport default withTranslation()(ButtonAdd)","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice, { data }] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <button className=\"icon btn btn-danger btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.prices.delete_success'),\n          deleteFunction: deleteClassPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"./ButtonAdd\"\nimport { class_edit_all_subtitle } from \"../tools\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const sidebarButton = <ButtonAdd classId={classId}/>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.prices.error_loading')}</p>\n    </ClassEditBase>\n  )\n\n\n  const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n  const subtitle = class_edit_all_subtitle({\n    t: t,\n    location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n    locationRoom: data.scheduleItem.organizationLocationRoom.name,\n    classtype: data.scheduleItem.organizationClasstype.name,\n    starttime: initialTimeStart\n  })\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('schedule.classes.prices.empty_list')}</p>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={t('schedule.classes.title_edit')}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format('LL') : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/schedule/classes/all/prices/\" + match.params.class_id + '/edit/' + node.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Table.Col>\n                <Table.Col>\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <Link to={\"/schedule/classes/all/prices/\" + classId } >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const sidebarButton = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const sidebarButton = <ScheduleClassPriceBack classId={match.params.class_id} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      sidebarButton={sidebarButton}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menu_activeLink={menuActiveLink}\n    sidebarButton={sidebarButton}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl + match.params.class_id}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","// @flow\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\nimport ScheduleMenu from \"../ScheduleMenu\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, sidebarContent=\"\", displayMenu=true }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} >\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              { sidebarContent }\n                  {/* <div>\n                    <Button\n                      className=\"pull-right\"\n                      color=\"link\"\n                      size=\"sm\"\n                      onClick={() => {\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n                        localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n                        refetch(get_list_query_variables())\n                      }}\n                    >\n                      {t(\"general.clear\")}\n                    </Button>\n                  </div> */}\n                  {/* <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n                  <ScheduleClassesFilter data={data} refetch={refetch} /> */}\n              {(displayMenu) ?\n                <span>\n                  <h5>{t(\"general.menu\")}</h5>\n                  <ScheduleMenu activeLink='events'/>\n                </span>\n                : \"\" }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport confirm_archive from \"../../../tools/confirm_archive\"\nimport confirm_unarchive from \"../../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <button className=\"icon btn btn-warning btn-sm mb-3 pull-right\" \n          title={t('general.unarchive')} \n          onClick={() => {\n            confirm_archive({\n              t: t,\n              msgConfirm: t(\"schedule.events.archive_confirm_msg\"),\n              msgDescription: <p></p>,\n              msgSuccess: t('general.archived'),\n              archiveFunction: archiveScheduleEvent,\n              functionVariables: { \n                variables: {\n                  input: {\n                    id: node.id,\n                    archived: true\n                  },\n                }, \n                refetchQueries: refetchQueries,\n              }\n            })\n        }}>\n        <span className=\"text-white\"><Icon prefix=\"fe\" name=\"inbox\" /> {\" \"} {t(\"\")}</span>\n      </button>\n    )\n\n  } else {\n    return (\n      <button className=\"icon btn btn-warning btn-sm mb-3 pull-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_unarchive({\n            t: t,\n            msgConfirm: t(\"schedule.events.unarchive_confirm_msg\"),\n            msgDescription: <p></p>,\n            msgSuccess: t('general.unarchived'),\n            archiveFunction: archiveScheduleEvent,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id,\n                  archived: false\n                },\n              }, \n              refetchQueries: refetchQueries,\n            }\n          })\n      }}>\n        <span className=\"text-white\"><Icon prefix=\"fe\" name=\"inbox\" /> {\" \"} {t(\"\")}</span>\n      </button>\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  const sidebarContent = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <Button color=\"primary btn-block mb-1\"\n            onClick={() => history.push(\"/schedule/events/add\")}>\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.events.add')}\n    </Button>\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase sidebarContent={sidebarContent}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase sidebarContent={sidebarContent}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/schedule/events/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//             <OrganizationMenu activeLink='levels'/>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Form,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport FormatISODateStr from '../../ui/ISODateString';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\nconst return_url = \"/organization/events\"\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const sidebarContent = <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase sidebarContent={sidebarContent}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase sidebarContent={sidebarContent}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase sidebarContent={sidebarContent}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nlet general_active\nlet tickets_active\nlet earlybirds_active\nlet activities_active\nlet media_active\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    {(activeLink === 'general') ? general_active = true: general_active = false}\n    {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n    {(activeLink === 'earlybirds') ? earlybirds_active = true: earlybirds_active = false}\n    {(activeLink === 'activities') ? activities_active = true: activities_active = false}\n    {(activeLink === 'media') ? media_active = true: media_active = false}\n    \n\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={general_active}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={tickets_active}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={earlybirds_active}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={activities_active}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={media_active}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst ScheduleEventEditBack = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/schedule/events\" \n          className='btn btn-link btn-sm mr-2'>\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back_to')} {t('schedule.events.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(ScheduleEventEditBack)","// @flow\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ScheduleEventEditBack from \"./ScheduleEventEditBack\"\n\n\nfunction ScheduleEventEditBaseBase({ t, match, history, children, pageHeaderOptions, sidebarContent=\"\", activeLink }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} >\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ScheduleEventEditBack />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              { sidebarContent }\n              <h5>{t(\"general.edit_menu\")}</h5>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n// import ScheduleEventEditTabs from \"./ScheduleEventEditTabs\"\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    sidebarContent, \n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} sidebarContent={sidebarContent} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} sidebarContent={sidebarContent} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase cardTitle={cardTitle} pageHeaderOptions={pageHeaderOptions} sidebarContent={sidebarContent} activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","// @flow\n\nimport React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendance\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({t, match, history, activeTab, pageInfo, onLoadMore, activeLink, children, sidebarContent=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n\n  const eventId = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase sidebarContent={sidebarContent} activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase sidebarContent={sidebarContent} activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase sidebarContent={sidebarContent} activeLink={activeLink}>\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity, { data }] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../ui/ButtonAddSecondaryMenu'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n\n  const sidebarContent = <Link to={`/schedule/events/edit/${eventId}/activities/add`}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.events.activities.add')}\n    </Button>\n  </Link>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} sidebarContent={sidebarContent}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: node.description}} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendance}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data, fetchMore } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: values.spaces,\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, active, eventId, scheduleItemId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\n// import ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: scheduleItem.dateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: values.spaces,\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Table\n} from \"tabler-react\"\n\n// import { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\n// import { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\n// import ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\n// import ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab} \n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird, { data }] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../ui/ButtonAddSecondaryMenu'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\n\nimport {\n  Avatar,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const sidebarContent = <Link to={`/schedule/events/edit/${eventId}/earlybirds/add`}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.events.earlybirds.add')}\n    </Button>\n  </Link>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.earlybirds.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} sidebarContent={sidebarContent}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdsBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdsBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEarlybirdBack from \"./ScheduleEventEarlybirdsBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  const sidebarContent = <ScheduleEventEarlybirdBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEarlybirdBack from \"./ScheduleEventEarlybirdsBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  const sidebarContent = <ScheduleEventEarlybirdBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: scheduleEventEarlybird.dateStart,\n          dateEnd: scheduleEventEarlybird.dateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia, { data }] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../ui/ButtonAddSecondaryMenu'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\n\nimport {\n  Avatar,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const sidebarContent = <Link to={`/schedule/events/edit/${eventId}/media/add`}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.events.media.add')}\n    </Button>\n  </Link>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.media.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} sidebarContent={sidebarContent}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","// @flow\n\nimport React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n\n\nfunction ScheduleEventTicketListBase({t, match, history, activeTab, pageInfo, onLoadMore, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const activeLink = \"tickets\"\n\n  const eventId = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const sidebarContent = <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n\nif (loading) {\n  return (\n    <ScheduleEventEditListBase sidebarContent={sidebarContent} activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditListBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditListBase sidebarContent={sidebarContent} activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditListBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditListBase sidebarContent={sidebarContent} activeLink={activeLink}>\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventTicket, { data }] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAddSecondaryMenu from '../../../ui/ButtonAddSecondaryMenu'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport moment from 'moment';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const sidebarContent = <Link to={`/schedule/events/edit/${eventId}/tickets/add`}>\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.events.tickets.add')}\n    </Button>\n  </Link>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} sidebarContent={sidebarContent}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: node.description}} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data, fetchMore } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\n\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} sidebarContent={sidebarContent}>\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n  console.log(scheduleEventTicketActivities)\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.included')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleEventTicketActivities.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.scheduleItem.name}\n                </Table.Col>  \n                <Table.Col>\n                  <Formik\n                    initialValues={{ \n                      included: node.included,\n                    }}\n                    validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                      console.log(\"submit values\")\n                      console.log(values)\n\n                      updateScheduleEventTicketScheduleItem({ variables: {\n                        input: {\n                            id: node.id,\n                            included: values.included\n                          }\n                        }, \n                        refetchQueries: [\n                            {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                              scheduleEventTicket: id\n                            }},\n                          ]\n                        })\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                      <ScheduleEventTicketEditActivityForm\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        disabled={node.scheduleEventTicket.fullEvent}\n                        setSubmitting={setSubmitting}\n                        submitForm={submitForm}\n                      >\n                        {/* {console.log(errors)}\n                        {console.log(values)} */}\n                      </ScheduleEventTicketEditActivityForm>\n                    )}\n                  </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card.Body>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import CSLS from \"../../../../../tools/cs_local_storage\"\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\n// import { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\nimport { get_accounts_query_variables } from \"./tools\"\n\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\n// import ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nconst ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [addAccountScheduleEventTicket] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n\n  const [ getAccounts, \n    { refetch: refetchAccounts, \n      fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  console.log(accountScheduleEventTickets)\n\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  const pageHeaderOptions = <InputSearch \n    initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n    placeholder=\"Search...\"\n    onChange={(value) => {\n      console.log(value)\n      localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n      if (value) {\n        // {console.log('showSearch')}\n        // {console.log(showSearch)}\n        setShowSearch(true)\n        getAccounts({ variables: get_accounts_query_variables()})\n      } else {\n        setShowSearch(false)\n      }\n    }}\n  />\n\n  // const searchResults = <div>hello world for search results</div>\n\n  // Search results\n  const searchResults = (showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n    <ContentCard cardTitle={t('general.search_results')}\n                pageInfo={queryAccountsData.accounts.pageInfo}\n                onLoadMore={() => {\n                  fetchMoreAccounts({\n                    variables: {\n                    after: queryAccountsData.accounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.accounts.edges\n                    const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                    return newEdges.length\n                      ? {\n                          // Put the new accounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          queryAccountsData: {\n                            accounts: {\n                              __typename: previousResult.accounts.__typename,\n                              edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                              pageInfo\n                            }\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n      { (!queryAccountsData.accounts.edges.length) ? \n        t('schedule.classes.class.attendance.search_result_empty') : \n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {queryAccountsData.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</span> :\n                    <Button \n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: id\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: id\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.events.tickets.customers.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setShowSearch(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setShowSearch(false)\n                          })\n                      }\n                    >\n                      {t(\"general.add\")}\n                    </Button>\n                    // <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                    //   <Button color=\"secondary pull-right\">\n                    //     {t('general.checkin')} <Icon name=\"chevron-right\" />\n                    //   </Button>\n                    // </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </ContentCard>\n    : \"\"\n\n  // Empty list\n  // if (!accountScheduleEventTickets.edges.length) {\n  //   <ScheduleEventTicketEditBase \n  //     sidebarContent={sidebarContent} \n  //     activeTab={activeTab} \n  //     activeLink={activeLink} \n  //     returnUrl={returnUrl}\n  //     pageHeaderOptions={pageHeaderOptions}\n  //     SearchResults={searchResults}\n  //   >\n  //     <Card.Body>\n  //       <Table>\n  //         <Table.Header>\n  //           <Table.Row>\n  //             <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n  //             <Table.ColHeader>{t('general.included')}</Table.ColHeader>\n  //           </Table.Row>\n  //         </Table.Header>\n  //         <Table.Body>\n  //           {accountScheduleEventTickets.edges.map(({ node }) => (\n  //             <Table.Row key={v4()}>\n  //               <Table.Col>\n  //                 {node.scheduleItem.name}\n  //               </Table.Col>  \n  //             </Table.Row>\n  //           ))}\n  //         </Table.Body>\n  //       </Table>\n  //     </Card.Body>\n  //   </ScheduleEventTicketEditBase>\n  // }\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n      searchResults={searchResults}\n    >\n      <Card.Body>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n              <Table.ColHeader></Table.ColHeader> \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accountScheduleEventTickets.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.account.fullName} <br />\n                  {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                </Table.Col>  \n                <Table.Col>\n\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.infoMailSent} /> <br />\n                  {/* TODO: resend link here */}\n                </Table.Col>\n                <Table.Col>\n                  {(node.cancelled) ?\n                    <Button \n                      className=\"pull-right\"\n                      color=\"warning\"\n                      onClick={() =>\n                        updateAccountScheduleEventTicket({ variables: {\n                          input: {\n                            id: node.id,\n                            cancelled: false\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: id\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setShowSearch(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setShowSearch(false)\n                          }\n                        )\n                      }\n                    >\n                      {t(\"general.uncancel\")}\n                    </Button>\n                  :\n                    <Button \n                      className=\"pull-right\"\n                      color=\"warning\"\n                      onClick={() =>\n                        updateAccountScheduleEventTicket({ variables: {\n                          input: {\n                            id: node.id,\n                            cancelled: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: id\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setShowSearch(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setShowSearch(false)\n                          })\n                        }\n                      >\n                        {t(\"general.cancel\")}\n                      </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card.Body>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","// @flow\n\nimport * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\nimport type { NotificationProps } from \"tabler-react\";\n\ntype Props = {|\n  +children: React.Node,\n|};\n\ntype State = {|\n  notificationsObjects: Array<NotificationProps>,\n|};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) \n   ){\n  items.push({\n    value: t(\"organization.title\"),\n    to: \"/organization\",\n    icon: \"feather\",\n    LinkComponent: withRouter(NavLink),\n  })\n}\n\n\n  return items\n\n}\n\nconst now = new Date()\n\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data, fetchMore } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://www.costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\nimport moment from 'moment'\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","// @flow\n\nimport React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport SelfCheckinBase from \"../SelfCheckinBase\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\nimport ScheduleClassAttendanceDelete from \"../../schedule/classes/class/attendance/ScheduleClassAttendanceDelete\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status}) {\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    }\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const class_date = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, class_date)\n    }\n  )\n\n  const [ updateAttendance, \n    { loading: mutationAttendanceLoading, error: mutationAttendanceError },\n  ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { refetch: refetchAccounts, \n      fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n          <Table>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus == \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                              refetchAttendance()\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={CSLS.SELFCHECKIN_CHECKIN_SEARCH}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            getAccounts({ variables: get_accounts_query_variables()})\n          } else {\n            setShowSearch(false)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            t('schedule.classes.class.attendance.search_result_empty') : \n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + class_date + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React, { useContext, useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Grid,\n} from \"tabler-react\";\nimport SelfCheckinBase from \"../SelfCheckinBase\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_accounts_query_variables } from \"../../schedule/classes/class/tools\"\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const return_url = \"/schedule/classes/\"\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          organizationlocationroomSet(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\nimport SelfCheckinBase from \"../SelfCheckinBase\"\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport SelfCheckinBase from \"../SelfCheckinBase\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n      attendanceCountType: \"ATTENDING_AND_BOOKED\"\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport HasPermissionWrapper from \"../HasPermissionWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsBase))","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(dataVersion)\n  console.log(dataPatch)\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { \n    loading: loading, \n    error: error, \n    data: data \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(data)\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(dataCurrency)\n  console.log(dataSymbol)\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: i.setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Grid,\n  Icon,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n// import RelationsMenu from \"../RelationsMenu\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\">\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport SettingsBack from \"../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.mail.templates.title\")} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  console.log(data)\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport SettingsBack from \"../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.mail.templates.title\")} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","// @flow\n\nimport React, {Component } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t('settings.mail.title')\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","import React from \"react\"\n\n\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(dataDaysAdvance)\n  console.log(dataCancelUntil)\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data settings')\n  console.log(dataSubscriptionPayment)\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(dataMinDuration)\n  console.log(dataMaxPauses)\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, return_url }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={return_url}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings, { data: updateData }] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  console.log('query data app settings')\n  console.log(dataTrialClassLimit)\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          let error = false\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","// @flow\n\nimport * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\nimport type { NotificationProps } from \"tabler-react\";\n\ntype Props = {|\n  +children: React.Node,\n|};\n\ntype State = {|\n  notificationsObjects: Array<NotificationProps>,\n|};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items: Array<navItem> = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  // const { error, loading, data, fetchMore } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","// @flow\n\nimport React, {Component } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  console.log(dataUser)\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","import React from 'react'\nimport moment from 'moment'\nimport { TimeStringToJSDateOBJ } from '../../tools/date_tools'\n\n\nexport function DisplayClassInfo({t, classDate, classData, dateFormat, timeFormat }) {\n    return (\n      <div>\n        <b>\n          {moment(classDate).format(dateFormat)} {' '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n        </b>\n        {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n          classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus == 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_already_cancelled\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.already_cancelled\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_cancelation_not_possible\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_cancel.title\")}>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h5>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h5>\n            <DisplayClassInfo\n              t={t}\n              classDate={date}\n              classData={dataAttendance}\n              dateFormat={dateFormat}\n              timeFormat={timeFormat}\n            />\n            <br />\n            <Button\n              className=\"mr-4\"\n              color=\"warning\"\n              onClick={() =>\n                updateScheduleItemAttendance({ variables: {\n                  input: {\n                    id: attendanceId,\n                    bookingStatus: \"CANCELLED\"\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(\"/shop/account/classes\")\n                    toast.success((t('shop.account.class_cancel.success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                  })\n                }\n            >\n              {t(\"shop.account.class_cancel.confirm_yes\")}\n            </Button>\n            <Link to={\"/shop/account/classes\"}>\n              {t(\"shop.account.class_cancel.confirm_no\")}\n            </Link>\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n\n\n{/* <Button \nclassName=\"pull-right\"\ncolor=\"warning\"\nonClick={() =>\n  updateAccountScheduleEventTicket({ variables: {\n    input: {\n      id: node.id,\n      cancelled: true\n    }\n  }, refetchQueries: [\n      {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n        scheduleEventTicket: id\n      }},\n  ]})\n  .then(({ data }) => {\n      console.log('got data', data);\n      toast.success((t('schedule.events.tickets.customers.cancelled')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      setShowSearch(false)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n      setShowSearch(false)\n    })\n  }\n>\n  {t(\"general.cancel\")}\n</Button> */}","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n\n  console.log(scheduleItemId)\n  console.log(date)\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n      t(\"general.loading_with_dots\")\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: data.scheduleClass.infoMailContent }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","// @flow\n\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            // headerContent={headerOptions}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(dataUser)\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            // headerContent={headerOptions}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","// @flow\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table,\n  Text\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              {/* <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div> */}\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table,\n  Text\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status == \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table,\n  Text\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Card.Title>{node.invoiceNumber}</Card.Title>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.balance\")}</Table.ColHeader>\n                            <Table.Col>{node.balanceDisplay}</Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {(node.status == \"SENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        color=\"secondary\"\n                        icon=\"printer\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>              \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                financeTaxRate {\n                  id\n                  name\n                  percentage\n                  rateType\n                }\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n          break\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n          break\n        case (\"PAID\"):\n          return \"green\"\n          break\n        case (\"DELIVERED\"):\n          return \"green\"\n          break\n        case \"CANCELLED\":\n          return \"orange\"\n          break\n        default:\n          return \"\"\n      }\n}","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status == \"RECEIVED\" || node.status == \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status == \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\n\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Card,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.subscriptions.title')}\n            // headerContent={headerOptions}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {subscriptions.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationSubscription.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      { (node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break      \n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\n\n\nfunction ShopBase({ t, match, history, children, title, return_url, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              {(return_url) ?\n                <Link to={return_url} \n                      className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n                : \"\"\n              }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.classes.book.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n// import CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  console.log(classpass)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { data, loading, error, onCompleted }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n// import CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  console.log(subscription)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { data, loading, error, onCompleted }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n  console.log(\"SUBSCRIPTIONS\")\n  console.log(subscriptions)\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={12} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={12} md={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Page,\n  Grid,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Container,\n  Table,\n  StampCard\n} from \"tabler-react\";\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n// import CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <p>{t('general.loading_with_dots')}</p>\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ', ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          { class_info }\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")}\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.classes.booked.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n// import { confirmAlert } from 'react-confirm-alert'; // Import\n// import { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\n// import CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"general.continue\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.classes.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    let orderBy\n    let organizationClasstype\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      attendanceCountType: \"ATTENDING_AND_BOOKED\",\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col md={4}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col md={4}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col md={4}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon,\n  List,\n  Media,\n  Table,\n} from \"tabler-react\";\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\n\nimport { get_list_query_variables } from './tools'\n\n\nfunction capitalize(word) {\n  const lower = word.toLowerCase();\n  return word.charAt(0).toUpperCase() + lower.slice(1);\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={\n        <Button.List className=\"schedule-list-page-options-btn-list\">\n          <Button \n            icon=\"chevron-left\"\n            color=\"secondary\"\n            disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n            onClick={ () => {\n              let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n              let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n              \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n              refetch(get_list_query_variables())\n          }} />\n          <Button \n            color=\"secondary\"\n            onClick={ () => {\n              let currentWeekFrom = moment()\n              let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n              \n              refetch(get_list_query_variables())\n          }} > \n            {t(\"general.today\")}\n          </Button>\n          <Button \n            icon=\"chevron-right\"\n            color=\"secondary\"\n            onClick={ () => {\n              let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n              let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n              \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n              localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n              refetch(get_list_query_variables())\n          }} />\n        </Button.List> \n      }\n    >\n      \n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h4>\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                            </h4> \n                            { organizationClasstype.name } { (account) ? ' ' + t(\"general.with\") + ' ' + account.fullName : \"\" } <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")} pageHeaderOptions={pageHeaderOptions}>\n      <h4>{t(\"shop.contact.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\n\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon,\n  List,\n  Media,\n  Table,\n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data, refetch } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  console.log(data)\n  console.log(data.organization)\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: organization.address}} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")}>\n      <h4>{t(\"shop.events.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Grid,\n  Icon,\n  List,\n  GalleryCard\n} from \"tabler-react\";\nimport ShopEventsBase from \"./ShopEventsBase\"\n// import ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={node.dateStart}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      return_url=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Grid,\n  Icon,\n  List,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n        {(eventTicket.isEarlybirdPrice) ? <div><Badge color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge></div> : \"\"}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price == 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        {(eventTicket.isEarlybirdPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  GalleryCard,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) return (\n    <ShopEventBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={title}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  console.log(data)\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n  console.log(event)\n\n  return (\n    <ShopEventBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{event.name}</h3>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: event.description}} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      return_url={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId }\n  })\n\n  const [createOrder, { data: createOrderData }] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  console.log(data)\n  const eventTicket = data.scheduleEventTicket\n  console.log(eventTicket)\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h3>{eventTicket.scheduleEvent.name}</h3>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: eventTicket.description}} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\n// import {\n//   Icon,\n//   List\n// } from \"tabler-react\";\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHomeBase))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\n\nimport ShopHomeBase from \"./ShopHomeBase\"\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html:node.content }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { DisplayClassInfo } from '../../tools'\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n      t(\"general.loading_with_dots\")\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  let classDate \n  let scheduleItemId\n  let item\n  console.log(\"Start looping\")\n  for (item of orderItems) {\n    let node = item.node\n    console.log(node)\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n  console.log('schedule item found!')\n  console.log(classDate)\n  console.log(scheduleItemId)\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col>{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col>\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      <Card.Body>\n        {(order.message) ?\n          <span className=\"text-muted\">\n            <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n            {/* Order message */}\n            {order.message}\n            <br /><br />\n          </span> \n          : \"\"\n        }\n        {(scheduleItemId && classDate) ?\n          <ShopCheckoutClassInfo \n            scheduleItemId={scheduleItemId}\n            date={classDate}\n            complete={complete}\n          />\n          : \"\"\n        }\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","// @flow\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","// @flow\n\nimport React, { useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status == \"DELIVERED\") {\n    // Thank you message\n    subHeader = t(\"shop.checkout.complete.success_subheader\") \n    // Something to explain the user what's next\n    contentText = t(\"shop.checkout.complete.success_content_text\")\n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total) {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total) {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  console.log(dataUser)\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classes.title')}\n            // headerContent={headerOptions}\n            pageInfo={scheduleItemAttendances.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleItemAttendances.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.schduleItemAttendances.edges\n                  const pageInfo = fetchMoreResult.schduleItemAttendances.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        schduleItemAttendances: {\n                          __typename: previousResult.schduleItemAttendances.__typename,\n                          edges: [ ...previousResult.schduleItemAttendances.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>  \n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      { moment(node.date).format(dateFormat) } <br />\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span>\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationClasstype.name }\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* TODO: improve this by adding a \"Can be cancelled field to GQL schema\" */}\n                      {((node.bookingStatus != \"CANCELLED\") && node.cancellationPossible) ?  \n                        <div>\n                          <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                            <Button \n                              className=\"pull-right mr-r\"\n                              color=\"warning\"\n                              >\n                              {t(\"general.cancel\")}\n                            </Button>\n                          </Link>\n                          <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                            <Button\n                              className=\"pull-right\"\n                              color=\"secondary\"\n                              icon=\"info\"\n                            >\n                              {t(\"general.info\")}\n                            </Button>\n                          </Link>\n                        </div> : \"\"\n                      }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")}>\n      <h4>{t(\"shop.classpasses.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      return_url=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      organizationMembership {\n        id\n        name\n      }\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Grid,\n  Icon,\n  List,\n  PricingCard\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassBase\"\n\nimport { GET_ORGANIZATION_CLASSPASS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes != 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity}</b> {' '} {classpass.validityUnitDisplay}\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          organizationMembership {\n            id\n            name\n          }\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Grid,\n  Icon,\n  List,\n  PricingCard\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  console.log(data)\n  const classpasses = data.organizationClasspasses\n  console.log(classpasses)\n\n  return (\n    <ShopClasspassesBase title={title}>\n        <Grid.Row>\n          {classpasses.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopClasspassPricingCard\n                classpass={node}\n                btnLink={\"/shop/classpass/\" + node.id}\n              />\n              {/* <PricingCard>\n                <PricingCard.Category>\n                  {node.name}\n                </PricingCard.Category>\n                <PricingCard.Price>\n                  {node.priceDisplay}\n                </PricingCard.Price>\n                <PricingCard.AttributeList>\n                  <PricingCard.AttributeItem>\n                    <b>{(node.unlimited) ? t('general.unlimited') : node.classes }</b> { \" \" }\n                    {((node.classes != 1) || (node.unlimited))? t('general.classes'): t('general.class')}\n                  </PricingCard.AttributeItem>\n                  <PricingCard.AttributeItem>\n                    {t('general.valid_for')} { \" \" }\n                    <b>{node.validity}</b> {' '} {node.validityUnitDisplay}\n                  </PricingCard.AttributeItem>\n                </PricingCard.AttributeList>\n                <Link to={\"/shop/classpass/\" + node.id}>\n                  <PricingCard.Button >\n                    {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n                  </PricingCard.Button>\n                </Link>\n              </PricingCard> */}\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder, { data: createOrderData }] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  console.log(data)\n  const classpass = data.organizationClasspass\n  const user = data.user\n  console.log(classpass)\n\n  console.log('DATA CLASS')\n  console.log(dataClass)\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase title={title}>\n        <Card title={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card title={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card title={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html:classpass.description}}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspass))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase title={t(\"shop.title\")}>\n      <h4>{t(\"shop.subscriptions.title\")}</h4>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Grid,\n  Icon,\n  List,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          {/* {((subscription.classes != 1) || (subscription.unlimited))? t('general.classes'): t('general.class')} / {t('general.month')} { \": \" } */}\n          {t('general.classes')} / {t('general.month')} { \": \" }\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> \n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \": \" }\n          <b>{subscription.minDuration} {(subscription.minDuration == 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          organizationMembership {\n            id\n            name\n          }\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","// @flow\n\nimport React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase title={title}>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  console.log(subscriptions)\n\n  return (\n    <ShopSubscriptionsBase title={title}>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\n\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder, { data: createOrderData }] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: organizationSubscription.termsAndConditions}} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      return_url=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      organizationMembership {\n        id\n        name\n      }\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n// import { GET_CLASS_QUERY } from \"../queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  // const scheduleItemId = match.params.class_id\n  // const classDate = match.params.date\n\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  console.log(data)\n  const subscription = data.organizationSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card title={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html:subscription.description}}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n\n\n{/* <Grid.Col sm={6} lg={3}>\n<PricingCard active>\n  <PricingCard.Category>{\"Premium\"}</PricingCard.Category>\n  <PricingCard.Price>{\"$49\"} </PricingCard.Price>\n  <PricingCard.AttributeList>\n    <PricingCard.AttributeItem>\n      <strong>10 </strong>\n      {\"Users\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Sharing Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available>\n      {\"Design Tools\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Private Messages\"}\n    </PricingCard.AttributeItem>\n    <PricingCard.AttributeItem hasIcon available={false}>\n      {\"Twitter API\"}\n    </PricingCard.AttributeItem>\n  </PricingCard.AttributeList>\n  <PricingCard.Button active>{\"Choose plan\"} </PricingCard.Button>\n</PricingCard>\n</Grid.Col> */}","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n// import { GET_CLASS_QUERY } from \"../queries\"\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  // const scheduleItemId = match.params.class_id\n  // const classDate = match.params.date\n\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, return_url, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  List,\n  StandaloneFormPage,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  let errorMessage\n  const [updatePassword, { data }] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH, TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  let errorMessage\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>    \n      <div className=\"text-center\">\n        <h5>{t('user.register.create_account')}</h5>\n        {t('user.register.create_account_msg')} <br />\n        {t('user.register.create_account_msg_click_below')} <br />\n      </div>\n      <Button \n        block\n        color=\"link\"\n        RootComponent=\"a\"\n        href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n          \"http://localhost:8000/d/accounts/signup/\" :\n          \"/d/accounts/signup/\"\n        } \n      >\n        {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","// @flow\n\nimport React, { useContext, useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { ToastContainer, Slide} from 'react-toastify'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Button,\n  Icon,\n  StandaloneFormPage,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n// import OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserLoginRequired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","// @flow\n\nimport React, { useContext, useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Card,\n  Button,\n  StandaloneFormPage,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","// @flow\n\nimport React, { useContext, useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { ToastContainer } from 'react-toastify'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Button,\n  Icon,\n  StandaloneFormPage,\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n// import OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Card,\n  Button,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"general.loading_with_dots\")}\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n  console.log(user)\n\n  if (!user.employee && !user.instructor) {\n    history.push(\"/\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\">\n          <Grid.Col md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","// @flow\n\nimport * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\ntype Props = {||}\n\nfunction Error404(props: Props): React.Node {\n  return <Error404Page />\n}\n\nexport default Error404\n","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React, { Component } from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\nimport moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionCreditExpiration \n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration'\nimport AutomationAccountSubscriptionCreditExpirationAdd\n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationMemberships from './components/organization/memberships/OrganizationMemberships'\nimport OrganizationMembershipAdd from './components/organization/memberships/OrganizationMembershipAdd'\nimport OrganizationMembershipEdit from './components/organization/memberships/OrganizationMembershipEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailTemplates from './components/settings/mail/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/SettingsMailTemplateEdit'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport c from './components/shop/account/bank_account/ShopAccountBankAccount'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (authTokenExpired) {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    if (refreshTokenExp == null) {\n      console.log(\"refresh token not found\")\n      SetCurrentUrlAsNext()\n      \n      return LoginRequired\n    } else if ((new Date() / 1000) >= refreshTokenExp) {\n      console.log(\"refresh token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n      SetCurrentUrlAsNext()\n\n      return SessionExpired\n    } else {\n      // Refresh token\n      console.log(\"auth token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n\n      const refreshToken = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n      doTokenRefresh({ variables: { refreshToken: refreshToken }}).then(({ data }) => {\n        console.log('got refresh data', data)\n        CSAuth.updateTokenInfo(data.refreshToken)\n        return ContinueAsYouAre\n      }).catch((error) => {\n        toast.error('general.toast_server_error' + ': ' +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        console.log('there was an error refreshing the token', error) \n        SetCurrentUrlAsNext()\n        console.log(\"REDIRECT BACK TO LOGIN\")\n        window.location.href = \"/#/user/login\"\n        window.location.reload()\n      })\n    }\n  } else {\n    return ContinueAsYouAre\n  }\n  return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message == \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  console.log(appSettings)\n  let organization = dataOrganization.organization\n  console.log(organization)\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration\" \n                                component={AutomationAccountSubscriptionCreditExpiration} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration/add\" \n                                component={AutomationAccountSubscriptionCreditExpirationAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} /> \n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <PrivateRoute exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { setContext } from '@apollo/client/link/context';\n// import ApolloClient from \"react\"\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n// Import moment locale\n// import moment from 'moment'\n// import 'moment/locale/nl'\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport CSEC from \"./tools/cs_error_codes\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next != \"/user/login\") && (next != \"/user/session/expired\") && (next != \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n  \n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message == \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Token refresh check\n  if (graphQLErrors && graphQLErrors[0].message == \"Signature has expired\") {\n    console.log(graphQLErrors[0])\n    console.log('Time to refresh the token')\n\n    let authTokenExpired = false\n    let refreshTokenExpired = false\n    const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n    if ((new Date() / 1000) >= tokenExp) {\n      authTokenExpired = true\n      \n      if ((new Date() / 1000) >= refreshTokenExp) {\n        refreshTokenExpired = true\n        // Remove any remaining token data\n        CSAuth.cleanup()\n        // Store current location, user has to login again\n        SetCurrentUrlAsNext()\n      }\n    }\n    \n    if (authTokenExpired && !refreshTokenExpired) {\n      console.log(\"refresh token... somehow...\")\n      console.log(localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN))\n\n      return new Observable(observer => {\n        client.mutate({\n          mutation: TOKEN_REFRESH,\n          variables: {\n            refreshToken: localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN)\n          }\n        })\n          .then(({ data }) => { \n            console.log(data)\n            CSAuth.updateTokenInfo(data.refreshToken)\n          })\n          .then(() => {\n            const subscriber = {\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer)\n            };\n\n            // Retry last failed request\n            forward(operation).subscribe(subscriber);\n          })\n          .catch(error => {\n            // No refresh or client token available, we force user to login, after a cleanup\n            console.log(\"Failed to refresh the token, onwards to the login page\")\n            observer.error(error);\n            CSAuth.cleanup()\n            window.location.href = \"/#/user/login\"\n            window.location.reload()\n          });\n      })\n    } else if (refreshTokenExpired) {\n      window.location.href = \"#/user/session/expired\"\n      window.location.reload()\n    } else {\n      window.location.href = \"#/user/login/required\"\n      window.location.reload()\n    }\n  }\n})\n    \n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n});\n\nconst authLink = setContext(async (request, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `JWT ${token}`: ''\n    }\n  }\n});\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([errorLink, authLink, httpLink]),\n  cache: new InMemoryCache(),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport \"./c3jscustom.css\"\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}