{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_error_codes.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/settings/shop/features/queries.js","components/SiteWrapperShop.js","components/shop/ShopCheckoutProgress.jsx","components/ui/ButtonBack.jsx","components/shop/ShopBase.jsx","components/shop/cookie_policy/CookiePolicyBase.jsx","components/shop/cookie_policy/CookiePolicy.jsx","components/home/home/queries.js","queries/system/get_user.js","tools/user_tools.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationBase.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration.jsx","components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/HasPermissionWrapper.js","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/ui/ButtonExport.jsx","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","tools/confirm_delete.js","components/finance/invoices/FinanceInvoices.jsx","tools/refresh_token_and_open_export_link.js","tools/date_tools.js","components/finance/invoices/export/yupSchema.js","components/ui/CSDatePicker.jsx","components/ui/ButtonFormCancel.jsx","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/yupSchema.js","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/inactive_accounts/InsightInactiveAccountsBase.jsx","components/insight/inactive_accounts/queries.js","components/insight/inactive_accounts/InsightInactiveAccounts.jsx","components/ui/ButtonFormSubmit.jsx","components/insight/inactive_accounts/InsightInactiveAccountsForm.jsx","components/insight/inactive_accounts/InsightInactiveAccountsAdd.jsx","components/ui/ButtonDelete.jsx","components/insight/inactive_accounts/InsightInactiveAccountsViewBase.jsx","components/insight/inactive_accounts/InsightInactiveAccountsView.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenueDisplay.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBranding.jsx","tools/custom_file_input_label_style.js","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/ui/FileProtectedDownloadTableButton.jsx","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","queries/accounts/get_account.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/ui/SubscriptionCreditsMutationType.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/schedule/home/ScheduleHome.jsx","tools/string_tools.js","components/ui/BadgePublic.jsx","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/queries.js","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/ui/ButtonEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","tools/confirm_action.js","components/ui/ButtonConfirm.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimpForm.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimp.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/mailchimp_lists/queries.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListsBase.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListDelete.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists.jsx","components/settings/mail/mailchimp_lists/yupSchema.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListForm.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit.jsx","components/settings/mail/templates/SettingsMailTemplatesBase.jsx","components/settings/mail/templates/queries.js","components/settings/mail/templates/SettingsMailTemplates.jsx","components/settings/mail/templates/SettingsMailTemplateEditBase.jsx","components/settings/mail/templates/SettingsMailTemplateEditForm.jsx","components/settings/mail/templates/SettingsMailTemplateEdit.jsx","components/settings/mail/templates/tools.js","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","queries/system/get_user_profile.js","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/invoice/queries.js","components/shop/account/invoice/ShopAccountInvoiceBase.jsx","components/shop/account/invoice/ShopAccountInvoice.jsx","components/shop/account/mailing_lists/queries.js","components/shop/account/mailing_lists/ShopAccountMailingListsBase.jsx","components/shop/account/mailing_lists/ShopAccountMailingListCard.jsx","components/shop/account/mailing_lists/ShopAccountMailingLists.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_error_codes","USER_NOT_LOGGED_IN","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","payload","exp","origIat","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","logout","expired","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","withTranslation","t","urlLogo","children","className","Row","src","alt","autoClose","transition","Slide","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","getNavBarItems","loading","error","data","shopFeatures","systemFeatureShop","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","subscriptions","classpasses","classes","events","refreshTokenExp","getItem","accountTitle","accountLink","Date","now","match","history","useQuery","organization","useContext","headerImageUrl","imageURL","urlLogoShopHeader","getHeaderImageUrl","Wrapper","headerProps","href","navItems","Item","type","user","instructor","employee","outline","size","color","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","target","rel","getFullYear","nav","Col","auto","checkoutProgress","color_order","color_payment","color_complete","List","addOn","name","returnUrl","title","subTitle","pageHeaderOptions","Header","md","Body","GET_BACKEND_ANNOUNCEMENTS_QUERY","GET_USER","get_all_permissions","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","avatarURL","urlImageThumbnailSmall","accountDropdown","firstName","lastName","description","options","isDivider","announcements","organizationAnnouncements","length","cards","deck","map","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","content","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","addEventListener","removeEventListener","cardTitle","headerContent","isLoadingMore","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","showNewTask","status","dateTimeFormatMoment","variables","taskName","pollInterval","fetchMore","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","ColHeader","v4","moment","dateDone","format","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","Group","label","autoComplete","component","disabled","ADD_TASK","useMutation","addTask","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","useState","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","hideLoading","check_permission","FinanceHome","linkTitleView","lg","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","buttonText","showBack","archived","setArchived","refetch","archiveCostcenter","headerOptions","Options","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","updateCostcenter","initialData","financeCostcenter","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","glaccounts","financeGlaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","financeGlaccount","get_list_query_variables","queryVars","undefined","url","getDefaultValue","defaultValue","onChange","event","key","updateLocalStorageAndRefetch","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","confirm_delete","msgConfirm","msgDescription","msgSuccess","deleteFunction","functionVariables","confirmAlert","customUI","onClose","location","dateFormat","pathname","fetchPolicy","deleteFinanceInvoice","invoices","financeInvoices","invoiceNumber","Small","summary","trunc","account","relationCompany","relationContactName","dateSent","dateDue","totalDisplay","balanceDisplay","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","refreshToken","dataurl","createElement","appendChild","click","removeChild","download","dateToLocalISO","date","dateToLocalISOTime","getHours","getMinutes","slice","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","getMonthNamesShort","INVOICES_EXPORT_SCHEMA","dateStart","dateEnd","selected","onBlur","isClearable","placeholderText","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","role","setFieldValue","setFieldTouched","frequencyType","startOf","setDateStart","endOf","setDateEnd","setStatus","prepared","setPrepared","setExportUrl","isoDateStart","isoDateEnd","touched","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","inputData","e","quantity","price","financeTaxRate","financeTaxRates","percentage","rateType","Object","keys","updateInvoiceItem","setTouched","refetchInvoice","updateItem","updating","setUpdating","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","setTimeout","updateLineNumber","statusColor","provided","snapshot","ref","innerRef","droppableProps","idx","draggableProps","dragHandleProps","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","initialTab","subtotalDisplay","taxDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","address","phone","email","registration","taxRegistration","creditInvoiceId","Link","creditInvoiceNumber","relationCompanyRegistration","relationCompanyTaxRegistration","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","cancelAndCreateCreditInvoice","export_url","payment_add_url","shopAccountInvoiceUrl","protocol","host","toggle","triggerContent","cancelAndCreateCreditFinanceInvoice","ml","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","showEditBack","archiveInvoiceGroup","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","Label","checked","addInvoiceGroup","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","fullName","amount","ADD_FINANCE_INVOICE_PAYMENT","onCompleted","addInvoicePayment","balance","GET_INVOICE_PAYMENT_QUERY","UPDATE_FINANCE_INVOICE_PAYMENT","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","orders","financeOrders","createdAt","batchType","toUpperCase","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","financePaymentBatches","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","RootComponent","appSettings","timeFormatMoment","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","create","category","financePaymentBatchCategories","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","order","financeOrder","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","updatePaymentMethod","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","TAX_SUMMARY_SCHEMA","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_INSIGHT_ACCOUNTS_INACTIVES","GET_INSIGHT_ACCOUNTS_INACTIVE","ADD_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS","deleteInsightAccountsInactive","insightAccountInactives","noActivityAfterDate","countInactiveAccounts","countDeletedInactiveAccounts","created_at","addInsightAccountsInactive","subtract","deleteFunctionVariables","buttonClass","buttonTextColor","pageHeaderButtonList","deleteAccounts","insightAccountInactive","accounts","lastLogin","GET_INSIGHT_CLASSPASSES_QUERY","previousYear","parseInt","currentYear","nextYear","export_url_active","export_url_sold","monthNames","chartData","insightAccountClasspasses","months","item","monthName","ResponsiveContainer","width","aspect","AreaChart","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Area","stroke","colors","fillOpacity","fill","GET_REVENUE_QUERY","BarChart","Bar","stackId","insightRevenueTotal","insightRevenueSubscriptions","insightRevenueClasspasses","insightRevenueEventTickets","insightRevenueOther","GET_INSIGHT_SUBSCRIPTIONS_QUERY","insightAccountSubscriptions","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","accountClasspasses","organizationClasspass","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","UPDATE_ORGANIZATION","updateOrganization","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoSelfCheckin","customFileInputLabelStyle","whiteSpace","display","overflow","formTitle","inputFileName","fileInputLabel","handleFileInputChange","style","updateField","update_field","fileName","setFileName","useRef","files","inputVars","reader","FileReader","onload","reader_event","b64_enc_file","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","file","current","readAsDataURL","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","announcementId","updateAnnouncement","organizationAnnouncement","Fragment","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","GET_INPUT_VALUES_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","organizationClasspasses","trialPass","unlimited","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","updateClasspass","initialTaxRate","initialGlaccount","initialCostcenter","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","classtypes","organizationClasstypes","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","organizationClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","organizationDocuments","ISODateString","urlDocument","addDocument","documentFileName","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday","holiday_locations","locationId","organizationLocation","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","archiveLocation","LOCATION_SCHEMA","addLocation","updateLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","updateLocationRoom","organizationLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","levels","organizationLevels","LEVEL_SCHEMA","addLevel","updateLevel","organizationLevel","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","shifts","organizationShifts","SHIFT_SCHEMA","addShift","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","creditAccumulationDays","createSubscription","organizationMembership","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteSubscriptionPrice","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","setState","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","setIsLoadingMore","onError","updateAccountActive","deleteAccount","subscriptionsLatest","subscription","classpassesLatest","classpass","classesRemainingDisplay","inline","placement","mobile","first_name","last_name","ACCOUNT_SCHEMA","addAccount","accountId","createAccount","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","keyNumber","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","avatarSize","activeLink","transparent","GroupItem","back","account_id","headerTitle","updateAccount","gender","input_vars","updateImage","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","accountBankAccount","accountBankAccounts","mandates","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE","timeFormat","deleteScheduleItemAttendance","scheduleItem","timeStart","scheduleItemAttendances","bookingStatus","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","protectedMediaUrl","deleteAccountDocument","accountDocuments","urlProtectedDocument","addAccountDocument","DOCUMENT_SCHEMA","accountDocument","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","FinanceInvoiceStatus","createInvoice","createFinanceInvoice","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","setNoteType","deleteAccountNote","notes","accountNotes","injury","noteBy","addNote","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrderDelete","GET_ACCOUNT","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","invoiceItems","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","Enddate","creditTotal","registrationFeePaid","createAccountSubscription","accountSubscription","tabs","class_tabs_position","activeTab","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","onLoaMore","deleteAccountSubscriptionAltPrice","query_vars","accountSubscriptionAltPrices","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","mutationType","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","mutationAmount","ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","addSubscriptionCredit","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","updateSubscriptionCredit","accountSubscriptionCredit","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","financeInvoiceId","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","appointments","education","bio","urlBio","updateAccountInstructorProfile","accountInstructorProfiles","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","businesses","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","business","emailContact","emailBilling","phone2","business_id","ScheduleHome","xs","sm","capitalize","word","lower","toLowerCase","charAt","isPublic","orderBy","attendanceCountType","dateFrom","dateUntil","represent_instructor","textColor","represent_class_status","get_class_messages","holidayName","selectClass","setLocation","classtype","setClasstype","level","setLevel","tooltip","nextWeekFrom","nextWeekUntil","currentWeekFrom","currentWeekUntil","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","DELETE_SCHEDULE_CLASS","deleteScheduleClass","scheduleClasses","scheduleItemId","account2","role2","timeEnd","spaces","countAttendance","ItemDivider","badge","badgeType","CLASS_SCHEMA","walkInSpaces","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","frequencyInterval","infoMailContent","createScheduleClass","classId","UPDATE_CLASS","defaultCard","menuActiveLink","class_id","represent_instructor_role","initialTimeStart","locationRoom","starttime","class_edit_all_subtitle","updateScheduleClass","menu_activeLink","initialLevelID","initialTimeEnd","getAccountsQueryVariables","getEnrollmentsListQueryVariables","showEnded","dateEnd_Isnull","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","deleteScheduleItemEnrollment","editUrl","showCurrent","setShowCurrent","ButtonAddEnrollment","enrollments","queryEnrollmentsData","scheduleItemEnrollments","setSearchName","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","updateScheduleClassEnrollment","scheduleItemEnrollment","allowed","scheduleClassEnrollmentOptions","shopBook","attend","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","addScheduleClassInstructor","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","confirm_action","actionFunction","actionFunctionVariables","buttonIcon","checkedInIds","classStatus","showSearchResults","setShowSearchResults","class_date","useLazyQuery","getAccounts","called","Search","queryAccountsData","includes","attendance_active","attendancechart_active","edit_active","pageSubTitle","classDate","class_subtitle","scheduleClass","setAttendanceStatus","updateAttendance","resendInfoMail","ButtonConfirm","GET_CLASS_ATTENDANCE_COUNT_YEAR","insightClassAttendanceCountYear","weeks","weekName","week","interval","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","blocked","paused","priceDropin","locationID","priceTrial","listType","scheduleClassBookingOptions","prices","scheduleItemPrices","subtitle","organizationClasspassDropin","organizationClasspassTrial","hasReachedTrialLimit","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","addScheduleClassPrice","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveScheduleEvent","cardHeaderContent","scheduleEvents","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","eventId","event_id","ScheduleEventEditMenu","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","scheduleItems","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","scheduleItemType","loadingActivity","errorActivity","dataActivity","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","updateMedia","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","deletable","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","initialFinanceTaxRate","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","a","represent_shift_status","shift","setShift","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","scheduleShifts","createScheduleShift","shiftId","shift_id","shift_edit_all_subtitle","updateScheduleShift","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","ButtonAdd","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","addScheduleShiftAccount","updateScheduleShiftAccount","showSearch","setShowSearch","refetchAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","settings","i","toString","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","DATETIME_SCHEMA","system_hostname","queryVariables","hostname","mailchimp_api_key","mailchimp_server_prefix","loadingUser","errorUser","dataUser","loadingKey","errorKey","mcUser","mcApiKey","mollie_api_key","mollieApiKey","H4","GET_MAILCHIMP_LISTS_QUERY","GET_MAILCHIMP_LIST_QUERY","ADD_MAILCHIMP_LIST","UPDATE_MAILCHIMP_LIST","DELETE_MAILCHIMP_LIST","deleteMailChimpList","mailchimpLists","systemMailchimpLists","organizationmailchimpLists","mailchimpListId","MAILCHIMP_LIST_SCHEMA","frequency","addMailChimpList","SettingsMailMailChimpListForm","updateMailchimpList","systemMailchimpList","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","SHOP_FEATURES_SCHEMA","memberships","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","GET_USER_PROFILE","DisplayClassInfo","classData","GET_ACCOUNT_CLASS_QUERY","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","scheduleItemAttendance","cancellationPossible","complete","QUERY_ACCOUNT_CLASSPASSES","skip","ShopAccountClasspassesBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","QUERY_ACCOUNT_INVOICE","parseFloat","QUERY_SYSTEM_MAILCHIMP_LISTS","UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS","mailingList","btnLink","updateSubscriptionStatus","doUpdateSubscriptionStatus","subscribed","mailingLists","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","cancelFunction","cancelOrder","UPDATE_PROFILE","updateProfile","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","xl","alreadyBooked","classType","class_info","bookingOpenOn","CREATE_ORDER","buttonBook","isBefore","notifyOnNetworkStatusChange","prevWeekFrom","prevWeekUntil","availableSpacesOnline","clear","media","urlImageThumbnailLarge","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","Category","isEarlybirdPrice","Price","totalPriceDisplay","AttributeList","AttributeItem","Button","tempTitle","tickets","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","GET_ORDER_QUERY","orderItems","attendanceDate","msgNextStep","buttonNext","total","createFinanceOrderPaymentLink","financeOrderPaymentLink","subHeader","contentText","paymentText","schduleItemAttendances","GET_ORGANIZATION_CLASSPASSES_QUERY","pageTitle","loadingClass","errorClass","dataClass","displayCheckoutInfo","unit","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","vars","messages","etFieldValue","esetFieldTouched","preventDefault","password","doTokenAuth","username","next","tokenAuth","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","SetCurrentUrlAsNext","PrivateRoute","rest","authTokenExpired","path","ContinueAsYouAre","render","LoginRequired","SessionExpired","tokenExp","reload","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","exact","CookiePolicy","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionCreditExpiration","AutomationAccountSubscriptionCreditExpirationAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointmentCategoryEdit","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentEdit","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationAppointmentPriceEdit","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountMembershipAdd","AccountMembershipEdit","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","ScheduleAppointments","ScheduleAppointmentAdd","ScheduleAppointmentEditAll","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightInactiveAccounts","InsightInactiveAccountsAdd","InsightInactiveAccountsView","InsightClasspasses","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountInvoice","ShopAccountMailingLists","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMailChimp","SettingsIntegrationMollie","SettingsMailMailChimpLists","SettingsMailMailChimpListAdd","SettingsMailMailChimpListEdit","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","csrftoken","errorLink","networkError","operation","forward","response","forEach","extensions","CSEC","refreshTokenExpired","Observable","observer","client","mutate","mutation","subscriber","subscribe","getCsrfToken","fetch","json","Cookies","get","httpLink","createHttpLink","uri","credentials","csrfMiddleware","ApolloLink","set","setContext","headers","ApolloClient","from","cache","InMemoryCache","typePolicies","Query","fields","relayStylePagination","App","ApolloProvider","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.fc07757f.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken {\n    refreshToken {\n      token\n      payload\n      refreshExpiresIn\n      refreshToken\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_error_codes = {\n    USER_NOT_LOGGED_IN: \"USER_NOT_LOGGED_IN\"\n}\n\nexport default cs_error_codes\n","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoiceEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        // localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        // localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        // localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        // localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items: Array<navItem> = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                <Link to=\"/cookie_policy\">\n                  {t(\"cookie_policy.title\")}\n                </Link>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction CookiePolicyBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"cookie_policy.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicyBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card, \n} from \"tabler-react\";\nimport CookiePolicyBase from \"./CookiePolicyBase\"\n\n\nfunction CookiePolicy({ t, match, history }) {\n  return (\n    <CookiePolicyBase>\n      <Card>\n        <Card.Body>\n          {t(\"cookie_policy.policy_text\")}\n        </Card.Body>\n      </Card>\n    </CookiePolicyBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicy))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://www.costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.announcements.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  // Data\n  return (\n    <HomeHomeBase>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits_expiration.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits_expiration.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits_expiration\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Dimmer,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const isLoadingMore = this.props.isLoadingMore\n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(isLoadingMore) ? <Dimmer active={true} loader={true}>loading</Dimmer> :\n              (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Button \n                    link\n                    onClick={onLoadMore} \n                    >\n                    {t('general.load_more')}\n                  </Button>\n                : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true,\n  isLoadingMore: false\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    },\n    pollInterval: 4000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\n\nfunction AutomationAccountSubscriptionCreditExpirationBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits_expiration/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationBase))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\nfunction AutomationAccountSubscriptionCreditExpiration({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n    },\n    pollInterval: 4000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditExpirationBase>\n    )\n  }\n\n  console.log(\"Automation credits data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits_expiration.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpiration))","import React, {useState} from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditExpirationBase from './AutomationAccountSubscriptionCreditExpirationBase'\n\n\nconst ADD_TASK = gql`\n  mutation ExpireAccountSubscriptionCredit($input: ExpireAccountSubscriptionCreditInput!) {\n    expireAccountSubscriptionCredit(input:$input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditExpirationAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  let [isSubmitting, setSubmitting] = useState(false)\n  const returnUrl = \"/automation/account/subscriptions/credits_expiration\"\n\n  return (\n    <AutomationAccountSubscriptionCreditExpirationBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits_expiration.title_add')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              {t(\"automation.account.subscriptions.credits_expiration.explanation_new_expiration\")}\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n          color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            onClick={() => {\n              setSubmitting(true)\n              addTask({ variables: {\n                input: {}\n              }, refetchQueries: [\n                {query: GET_TASK_RESULT_QUERY, \n                  variables: {\n                    taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_expire\"\n                }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits_expiration.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n          >\n            {t('general.run_task')} <Icon name=\"chevron-right\" />\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </AutomationAccountSubscriptionCreditExpirationBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditExpirationAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    },\n    pollInterval: 4000\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    },\n    pollInterval: 4000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({t, permission, resource, children, hideLoading=false}) {\n  const {loading, error, data} = useQuery(GET_USER)\n\n  if (loading) {\n    if (!hideLoading) {\n      return <p>{t(\"general.loading_with_dots\")}</p>\n    } else {\n      return \"\"\n    }\n  } \n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default withTranslation()(HasPermissionWrapper)","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: values.code\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"OVERDUE\" key={v4()}>{t('finance.invoices.statuses.overdue')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"OVERDUE\":\n        return <Badge color=\"danger\">{t('finance.invoices.status.OVERDUE')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      creditInvoiceId\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\n\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}\n                  hasCardBody={false}\n                  pageInfo={invoices.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: invoices.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoices.edges\n                        const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoices at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoices: {\n                                __typename: previousResult.financeInvoices.__typename,\n                                edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoicesStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      {node.invoiceNumber}\n                    </Link><br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.account) ? \n                      <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                        {(node.relationCompany) ? node.relationCompany: node.relationContactName}\n                      </Link> :\n                      (node.relationCompany) ? node.relationCompany: node.relationContactName\n                    }\n                    <br />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    {moment(node.dateDue).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/finance/invoices/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import { CSAuth } from './authentication';\nimport { toast } from 'react-toastify'\n\n// Create a link element and simulate a click. This prevents having to redirect creating a pop up that might be blocked.\nfunction download(dataurl) {\n  let link = document.createElement(\"a\");\n  link.href = dataurl\n  // Put the link in the DOM and click it\n  document.body.appendChild(link);\n  link.click();\n  // Cleanup the DOM\n  document.body.removeChild(link);\n}\n\nexport function refreshTokenAndOpenExportLinkInNewTab(t, doTokenRefresh, history, exportUrl) {  \n  doTokenRefresh()\n    .then(({data}) => {\n      console.log(data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n\n      // window.open(url, \"_blank\")\n      download(exportUrl);\n    }).catch((error) => {\n      console.log(error)\n      // history.push(\"/user/login\")\n      // Because safari doesn't deal with double clicks well, let the user refresh.\n      // If there is no valid session, the user will be redirected to the sign-in.\n      toast.error(t(\"general.error_try_refreshing\"), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    })\n}\n","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n\nexport function getMonthNamesShort(t) {\n    return [\n        t(\"datetime.months.short_january\"),\n        t(\"datetime.months.short_february\"),\n        t(\"datetime.months.short_march\"),\n        t(\"datetime.months.short_april\"),\n        t(\"datetime.months.short_may\"),\n        t(\"datetime.months.short_june\"),\n        t(\"datetime.months.short_july\"),\n        t(\"datetime.months.short_august\"),\n        t(\"datetime.months.short_september\"),\n        t(\"datetime.months.short_october\"),\n        t(\"datetime.months.short_november\"),\n        t(\"datetime.months.short_decemer\"),\n      ]\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  \n  console.log(\"########\")\n  console.log(initialData)\n  console.log(dateSent)\n  console.log(dateDue)\n\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, location, initialData}) {  \n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {(initialData.financeInvoice.creditInvoiceId) ?\n          <Alert type=\"warning\">\n            {t(\"finance.invoice.credit_invoice_for\")} { \" \" }\n            <Link to={`/finance/invoices/edit/${initialData.financeInvoice.creditInvoiceId}`}>\n              <Alert.Link>{initialData.financeInvoice.creditInvoiceNumber}</Alert.Link>\n            </Link>\n          </Alert>\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditToForm = ({ t, isSubmitting, errors, touched, handleChange, setFieldTouched }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t(\"finance.invoices.relation_company\")}>\n        <Field type=\"text\" \n                name=\"relationCompany\" \n                className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationCompany\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyRegistration\" \n                    className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyRegistartion\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n            <Field type=\"text\" \n                    name=\"relationCompanyTaxRegistration\" \n                    className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCompanyTaxRegistration\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n        <Field type=\"text\" \n                name=\"relationContactName\" \n                className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"relationContactName\", true, true)\n                }}\n        />\n        <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_address\")}>\n            <Field type=\"text\" \n                    name=\"relationAddress\" \n                    className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationAddress\", true, true)\n                    }} \n            />\n            <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n            <Field type=\"text\" \n                    name=\"relationPostcode\" \n                    className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationPostcode\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_city\")}>\n            <Field type=\"text\" \n                    name=\"relationCity\" \n                    className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCity\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={6}>\n          <Form.Group label={t(\"finance.invoices.relation_country\")}>\n            <Field type=\"text\" \n                    name=\"relationCountry\" \n                    className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"relationCountry\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Card\n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, initialData }) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card title={t('general.to')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            relationCompany: initialData.financeInvoice.relationCompany, \n            relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: initialData.financeInvoice.relationContactName, \n            relationAddress: initialData.financeInvoice.relationAddress, \n            relationPostcode: initialData.financeInvoice.relationPostcode, \n            relationCity: initialData.financeInvoice.relationCity, \n            relationCountry: initialData.financeInvoice.relationCountry, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n      {(!inputData.financeInvoice.payments.edges.length) ?\n        <Card.Body>\n          <p>{t('finance.invoice.payments.empty_list')}</p>\n        </Card.Body> :\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.note) }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n  const shopAccountInvoiceUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/invoice/${id}`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n        <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.invoice.account_profile_link\")}</b></div>\n          {shopAccountInvoiceUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.invoice.account_profile_link_explanation\")}</small></div>\n        </Alert>\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo initialData={data} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions\n            initialData={data}\n          />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { inputData.financeInvoice.account.fullName } <br />\n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nconst ADD_FINANCE_INVOICE_PAYMENT = gql`\n  mutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n    createFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  console.log(data)\n  const orders = data.financeOrders\n  console.log(orders)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber} <br />\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: String!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: String!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  \n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status !== \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_SUMMARY_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { TAX_SUMMARY_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                validationSchema={TAX_SUMMARY_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightclasspasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.classpasses.title\")}</h5>\n                      {t(\"insight.classpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightsubscriptions\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.subscriptions.title\")}</h5>\n                      {t(\"insight.subscriptions.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialpasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightrevenue\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.revenue.title\")}</h5>\n                      {t(\"insight.revenue.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightaccountsinactive\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.inactive_accounts.title\")}</h5>\n                      {t(\"insight.inactive_accounts.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/inactive_accounts\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction InsightInactiveAccountsBase({\n  t, \n  history, \n  match, \n  children, \n  showAdd=false, \n  showBack=false, \n  returnUrl=\"/insight/inactive_accounts\"}) \n{\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"insightaccountinactive\">\n                  <ButtonAdd addUrl={`/insight/inactive_accounts/add`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVES = gql`\n  query InsightAccountInactives {\n    insightAccountInactives(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          noActivityAfterDate \n          countInactiveAccounts\n          countDeletedInactiveAccounts\n          createdAt\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  query InsightAccountInactive($id: ID!) {\n    insightAccountInactive(id: $id) {\n      id\n      noActivityAfterDate\n      countInactiveAccounts\n      createdAt\n      accounts {\n        edges {\n          node {\n            account {\n              id\n              fullName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation CreateInsightAccountInactive($input: CreateInsightAccountInactiveInput!) {\n    createInsightAccountInactive(input: $input) {\n      insightAccountInactive {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation deleteInsightAccountInactive($input: DeleteInsightAccountInactiveInput!) {\n    deleteInsightAccountInactive(input: $input){\n      ok\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS = gql`\n  mutation deleteInsightAccountInactiveAccounts($input: DeleteInsightAccountInactiveAccountsInput!) {\n    deleteInsightAccountInactiveAccounts(input: $input){\n      ok\n    }\n  } \n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase'\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, DELETE_INSIGHT_ACCOUNTS_INACTIVE } from \"./queries\"\n\n\nfunction InsightInactiveAccounts({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const cardTitle = t(\"insight.inactive_accounts.title\")\n\n  const { loading, error, data, fetchMore } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVES)\n  const [deleteInsightAccountsInactive] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('insight.inactive_accounts.error_loading')}</p>\n      </ContentCard>\n      </InsightInactiveAccountsBase>\n  )\n\n  console.log(data)\n\n  const insightAccountInactives = data.insightAccountInactives\n  // Empty list\n  if (!insightAccountInactives.edges.length) { return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{t(\"insight.inactive_accounts.empty_list\")}</p>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )}\n\n  return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={insightAccountInactives.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: insightAccountInactives.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.insightAccountInactives.edges\n            const pageInfo = fetchMoreResult.insightAccountInactives.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  insightAccountInactives: {\n                    __typename: previousResult.insightAccountInactives.__typename,\n                    edges: [ ...previousResult.insightAccountInactives.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('insight.inactive_accounts.created_at')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.inactive_accounts.no_activity_after_date')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_deleted_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {insightAccountInactives.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.noActivityAfterDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.countInactiveAccounts}\n                </Table.Col>\n                <Table.Col>\n                  {node.countDeletedInactiveAccounts}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/insight/inactive_accounts/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('insight.inactive_accounts.btn_view_inactive_accounts')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"insight.inactive_accounts.delete_confirm_msg\"),\n                        msgDescription: <p>{moment(node.created_at).format(dateTimeFormatMoment)} { \" - \" } \n                          {moment(node.noActivityAfterDate).format(dateFormat)}</p>,\n                        msgSuccess: t('insight.inactive_accounts.deleted'),\n                        deleteFunction: deleteInsightAccountsInactive,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_INSIGHT_ACCOUNTS_INACTIVES } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccounts))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst InsightInactiveAccountsForm = ({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {console.log(values)}\n        <Form.Group label={t(\"insight.inactive_accounts.no_activity_after_date\")}>\n          <CSDatePicker \n            className={(errors.noActivityAfterDate) ? \"form-control is-invalid\" : \"form-control\"} \n            selected={values.noActivityAfterDate}\n            onChange={(date) => {\n              setFieldValue(\"noActivityAfterDate\", date)\n              setFieldTouched(\"noActivityAfterDate\", true)\n            }}\n            onBlur={() => setFieldTouched(\"noActivityAfterDate\", true)}\n          />\n          <ErrorMessage name=\"noActivityAfterDate\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, ADD_INSIGHT_ACCOUNTS_INACTIVE } from './queries'\n// import { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase';\nimport InsightInactiveAccountsForm from './InsightInactiveAccountsForm'\n\n\nfunction InsightInactiveAccountsAdd({ t, history }) {\n  const returnUrl = \"/insight/inactive_accounts\"\n  const [ addInsightAccountsInactive ] = useMutation(ADD_INSIGHT_ACCOUNTS_INACTIVE)\n\n  return (\n    <InsightInactiveAccountsBase showBack={true}>\n      <Card title={t('insight.inactive_accounts.title_add')}>\n        <Formik\n          initialValues={{ noActivityAfterDate: new Date(moment().subtract(1, \"year\")) }}\n          // validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInsightAccountsInactive({ variables: {\n                input: {\n                  noActivityAfterDate: dateToLocalISO(values.noActivityAfterDate), \n                }\n              }, refetchQueries: [\n                  {query: GET_INSIGHT_ACCOUNTS_INACTIVES}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('insight.inactive_accounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <InsightInactiveAccountsForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </InsightInactiveAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({\n  t, \n  match, \n  history, \n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  deleteFunction, \n  deleteFunctionVariables, \n  buttonClass=\"btn-link\",\n  buttonText=\"\",\n  buttonTextColor=\"text-red\"\n}) {\n  return (\n    <button className={`icon btn ${buttonClass} btn-sm`}\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        <Icon prefix=\"fe\" name=\"trash-2\" /> {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\n\nfunction InsightInactiveAccountsViewBase({t, history, match, children, subTitle, pageHeaderButtonList}) {\n  const returnUrl = `/insight/inactive_accounts`\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.inactive_accounts.title\")} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsViewBase))","\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\"\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVE, DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS } from './queries'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ButtonDelete from '../../ui/ButtonDelete'\nimport InsightInactiveAccountsViewBase from './InsightInactiveAccountsViewBase'\n\n\nfunction InsightInactiveAccountsView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const id = match.params.id\n\n  const { loading, error, data } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVE, {\n    variables: { id: id },\n    pollInterval: 5000\n  })\n  const [deleteAccounts] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsViewBase>\n      <Card title={t(\"insight.inactive_accounts.card_title\")}>\n        <Card.Body>\n          <Dimmer active={true} loader={true}/>\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsViewBase>\n      <p>{t('insight.inactive_accounts.error_loading')}</p>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  const insightAccountInactive = data.insightAccountInactive\n  console.log(insightAccountInactive)\n  const cardTitle = t(\"insight.inactive_accounts.card_title\") + \" \" + moment(insightAccountInactive.noActivityAfterDate).format(dateFormat)\n  const subTitle = t(\"general.generated on\") + \" \" + moment(insightAccountInactive.createdAt).format(dateTimeFormatMoment)\n\n  const pageHeaderButtonList = <ButtonDelete\n    msgConfirm={t(\"insight.inactive_accounts.accounts.delete_confirm_msg\")}\n    msgDescription={<p><b>{insightAccountInactive.countInactiveAccounts} {t(\"insight.inactive_accounts.accounts.count_will_be_deleted\")}</b></p>} \n    msgSuccess={t(\"insight.inactive_accounts.accounts.deleted\")}\n    deleteFunction={deleteAccounts} \n    deleteFunctionVariables={{\n      variables: {input: {id: id}}\n    }}\n    buttonClass=\"btn-danger ml-2\"\n    buttonText=\"Delete accounts\" \n    buttonTextColor=\"text-white\"\n  />\n\n  if (!insightAccountInactive.accounts.edges.length) return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"insight.inactive_accounts.accounts.empty_list\")}\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={cardTitle}>\n            {/* <Card.Alert color=\"primary\">\n              {t(\"insight.inactive_accounts.explanation_when_inactive\")}\n            </Card.Alert> */}\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.name\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.email\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.last_login\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.created_at\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {insightAccountInactive.accounts.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>\n                        {\n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.account.email}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.lastLogin).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.createdAt).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </InsightInactiveAccountsViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsView))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_CLASSPASSES_QUERY = gql`\nquery InsightAccountClasspasses($year: Int!) {\n  insightAccountClasspasses(year: $year) {\n    year\n    months {\n      month\n      sold\n      active\n    }\n  }\n}\n`\n","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n\n                    console.log(currentYear)\n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts'\n\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_CLASSPASSES_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR))\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_CLASSPASSES_QUERY, {\n    variables: { year: year },\n  })\n\n  if (loading) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          <Dimmer active={true} loader={true} />\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          {t(\"general.error_sad_smiley\")}\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountClasspasses.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <InsightClasspassesBase year={year} refetch={refetch}>\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <AreaChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"blue\"]} fillOpacity={0.4} fill={colors[\"blue\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"green\"]} fillOpacity={0.1} fill={colors[\"green\"]} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n    </InsightClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueClasspasses(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueSubscriptions(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueEventTickets(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueOther(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n            {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { getMonthNamesShort } from '../../../tools/date_tools'\n\n\nfunction InsightRevenueDisplay({ \n  t, \n  history, \n  error, \n  loading, \n  cardTitle,\n  data\n }) {\n\n  if (loading) {\n    return (\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <Card.Body>\n              <Dimmer loader={true} active={true} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n        </Grid.Col>\n      </Grid.Row>\n    )\n  }\n\n  if (error) {\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </Grid.Col>\n    </Grid.Row>\n  }\n\n\n\n  const monthNames = getMonthNamesShort(t)\n  // Add month name to data\n  const chartData = data.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <ResponsiveContainer width=\"100%\" aspect={2.6}>\n            <BarChart\n              width={500}\n              height={300}\n              data={chartData}\n              margin={{\n                top: 10,\n                right: 20,\n                left: 0,\n                bottom: 10,\n              }}\n            >\n              <XAxis dataKey=\"monthName\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total\" fill={colors['blue']} />\n              <Bar dataKey=\"subtotal\" stackId=\"a\" fill={colors['green']} />\n              <Bar dataKey=\"tax\" stackId=\"a\" fill={colors['orange']} />\n            </BarChart>\n          </ResponsiveContainer>\n          <Card.Footer>\n            {t(\"insight.revenue.total.explanation\")}\n          </Card.Footer>\n        </Card>\n      </Grid.Col>\n      <Grid.Col md={3}>\n        <Card title={t(\"general.data\")}>\n          <small>\n          <Table cards>\n            <Table.Body>\n              {data.months.map((item, index) => (\n                <Table.Row>\n                  <Table.Col className=\"cs-insight-data-table-cell\">\n                    {monthNames[index]}\n                  </Table.Col>\n                  <Table.Col className=\"cs-insight-data-table-cell text-right\">\n                    {item['totalDisplay']}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </small>\n        </Card>\n        {/* Export as sold as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_sold\n          )}\n        >\n          {t(\"insight.classpasses.sold.export_excel\")}\n        </Button> */}\n        {/* Export as active as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_active\n          )}\n        >\n          {t(\"insight.classpasses.active.export_excel\")}\n        </Button> */}\n      </Grid.Col>\n    </Grid.Row>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueDisplay))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\nimport InsightRevenueDisplay from './InsightRevenueDisplay'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR))\n\n  const { loading, error, data, refetch } = useQuery(GET_REVENUE_QUERY, {\n    variables: { year: year }\n  })\n\n  return (\n    <InsightRevenueBase year={year} refetch={refetch}>\n      {/* Total */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.total\")}\n        data={data && data.insightRevenueTotal}\n      />\n      {/* Subscriptions */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.subscriptions\")}\n        data={data && data.insightRevenueSubscriptions}\n      />\n      {/* Classpasses */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.classpasses\")}\n        data={data && data.insightRevenueClasspasses}\n      />\n      {/* Event tickets */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.event_tickets\")}\n        data={data && data.insightRevenueEventTickets}\n      />\n      {/* Other */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.other\")}\n        data={data && data.insightRevenueOther}\n      />\n    </InsightRevenueBase> \n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_SUBSCRIPTIONS_QUERY = gql`\n  query InsightAccountSubscriptions($year: Int!) {\n    insightAccountSubscriptions(year: $year) {\n      year\n      months {\n        month\n        sold\n        active\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Page,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetch=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts'\nimport moment from 'moment'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_SUBSCRIPTIONS_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\n\nfunction InsightSubscriptions ({ t, history }) {\n  const cardTitle = t('general.chart')\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR))\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  console.log(year)\n\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_SUBSCRIPTIONS_QUERY, {\n    variables: { year: year }\n  })\n\n  if (loading) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountSubscriptions.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetch={refetch}>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <AreaChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"blue\"]} fillOpacity={0.4} fill={colors[\"blue\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"green\"]} fillOpacity={0.1} fill={colors[\"green\"]} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </InsightSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Form.Group label={t('general.year')}>\n        <Field type=\"number\" \n                name=\"year\" \n                className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.month')}>\n        <Field component=\"select\" \n              name=\"month\" \n              className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              // onChange={(e) => {\n              //   handleChange(e)\n              //   setFieldTouched(\"financeTaxRate\", true, true)\n              // }}\n        >\n          <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n          <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n          <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n          <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n          <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n          <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n          <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n          <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n          <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n          <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n          <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n          <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n        </Field>\n        <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('insight.trialpasses.set_month')}\n      </Button>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Card,\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n  // Empty list\n  if (!accountClasspasses.edges.length) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t(\"insight.trialpasses.empty_list\")}</p>\n          </Card.Body>\n        </Card>\n      </InsightTrialpassesBase>\n    )\n  }\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { GET_ORGANIZATION_QUERY } from '../queries'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n      }\n    }\n  }\n`\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: parseInt(values.priority)\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: parseInt(values.priority)\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY, {\n    variables: { archived: archived },\n    fetchPolicy: \"network-only\"\n  })\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>      \n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayShop\" \n                    checked={values.displayShop} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: String!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditAccumulationDays\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditAccumulationDays\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived},\n    fetchPolicy: \"network-only\"\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_accumulation_days')}>\n                <Field type=\"text\" \n                      name=\"creditAccumulationDays\" \n                      className={(errors.creditAccumulationDays) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditAccumulationDays\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditAccumulationDays: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: parseInt(values.sortOrder),\n                    minDuration: parseInt(values.minDuration),\n                    classes: parseInt(values.classes),\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: parseInt(values.reconciliationClasses),\n                    creditAccumulationDays: parseInt(values.creditAccumulationDays),\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditAccumulationDays: initialData.organizationSubscription.creditAccumulationDays,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: parseInt(values.sortOrder),\n                  minDuration: parseInt(values.minDuration),\n                  classes: parseInt(values.classes),\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: parseInt(values.reconciliationClasses),\n                  creditAccumulationDays: parseInt(values.creditAccumulationDays),\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\n\nimport { TOKEN_REFRESH } from '../../../queries/system/auth'\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  const exportUrl = `/d/export/relations/accounts/active`\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              {/* Export Active Accounts */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"ml-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('relations.btn_export_active_accounts')} \n              </Button>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean\n  \n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        phone\n        mobile\n        isActive\n        urlImageThumbnailSmall\n        subscriptionsLatest {\n          organizationSubscription {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n        classpassesLatest {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemaining\n          classesRemainingDisplay\n          isExpired\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  List,\n  SocialNetworksList,\n  Table,\n  Tooltip\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, history}) {\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    onError: console.log,\n    // These options would be nice to enable, but behave strangely with current caching\n    // notifyOnNetworkStatusChange: true\n    // fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n  let pageInfo = accounts.pageInfo\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        isLoadingMore={isLoadingMore}\n        onLoadMore={async () => {\n          setIsLoadingMore(true)\n          if (pageInfo.hasNextPage) {\n            await fetchMore({\n              variables: {\n                after: pageInfo.endCursor,\n              },\n            });\n          }\n          setIsLoadingMore(false)\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.contact')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptionsLatest) ? \n                      node.subscriptionsLatest.map((subscription) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpassesLatest) ? \n                      node.classpassesLatest.map((classpass) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col>\n                    <SocialNetworksList className=\"mb-0 mt-2\">\n                      {\n                        (node.phone) ? \n                          <List.Item inline>\n                            <Tooltip content={node.phone} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"phone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item>\n                        // No phone number found\n                        : \"\"\n                      }\n                      {\n                        (node.mobile) ?\n                          <List.Item inline>\n                            <Tooltip content={node.mobile} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"smartphone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item> \n                          // No mobile number found\n                          : \"\"\n                      }\n\n                      <List.Item inline>\n                        <Tooltip content={node.email} placement=\"top\">\n                          <a href={\"mailto:\" + node.email}>\n                            <Icon prefix=\"fe\" name=\"mail\" />\n                          </a>\n                        </Tooltip>\n                      </List.Item>\n                    </SocialNetworksList>\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='lg' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\nexport const RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation ResendClassInfoMail($input: ResendInfoMailScheduleItemAttendanceInput!) {\n    resendInfoMailScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      {t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountClasspassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountClasspassForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: String, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Card,\n  Icon,\n  Button,\n  Table,\n  Text\n} from \"tabler-react\";\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../finance/invoices/queries\"\nimport FinanceInvoiceStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteFinanceInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceInvoiceStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceNumber} <br />\n                    <Text.Small color=\"gray\">{node.summary.trunc(35)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateSent).format(dateFormat)} <br />\n                    <Text.Small color=\"gray\">{moment(node.dateDue).format(dateFormat)}</Text.Small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.balanceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/finance/invoices/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                          msgDescription: <p>{node.invoiceNumber}</p>,\n                          msgSuccess: t('finance.invoices.deleted'),\n                          deleteFunction: deleteFinanceInvoice,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_ACCOUNT_INVOICES_QUERY, variables: {accountId: accountId}},\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  console.log(data)\n  const account = data.account\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: \"\",\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Body>\n                  {(!pageInfo) ? '':\n                    (pageInfo.hasNextPage) ? \n                      <Button \n                        link\n                        onClick={onLoadMore} \n                        >\n                        {t('general.load_more')}\n                      </Button>\n                    : t('general.loaded_all')\n                  }\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: String!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId,\n      // noteType: noteType\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  let [noteType, setNoteType] = useState(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) || \"BACKOFFICE\")\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n  } \n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(noteType === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        setNoteType(\"BACKOFFICE\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(noteType === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        setNoteType(\"INSTRUCTORS\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.note) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId, noteType) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationSubscription {\n          id\n          name\n        }\n        financePaymentMethod {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n        registrationFeePaid        \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.Enddate && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.creditTotal}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n  ){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {subscription.creditTotal} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoaMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\";\n\nfunction SubscriptionCreditsMutationType({ t, mutationType }) {\n  switch (mutationType) {\n    case \"ADD\":  \n      return <Badge color=\"success\">+</Badge>\n    case \"SUB\":\n      return <Badge color=\"secondary\">-</Badge>\n    default:\n      return \"\"\n  }\n}\n\nexport default withTranslation()(SubscriptionCreditsMutationType)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        mutationType\n        mutationAmount\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    mutationType\n    mutationAmount\n    description\n    createdAt\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport SubscriptionCreditsMutationType from \"../../../../../ui/SubscriptionCreditsMutationType\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.mutation')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col>\n                  {node.mutationAmount}\n                </Table.Col>\n                <Table.Col>\n                  <SubscriptionCreditsMutationType mutationType={node.mutationType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  mutationAmount: Yup.number()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.credits')}>\n              <Field type=\"number\" \n                      name=\"mutationAmount\" \n                      className={(errors.mutationAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mutationAmount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.subscriptions.credits.mutationType')}>\n              <Field component=\"select\" \n                     name=\"mutationType\" \n                     className={(errors.mutationType) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"ADD\">{t(\"general.add\")}</option>\n                <option value=\"SUB\">{t(\"general.subtract\")}</option>\n              </Field>\n              <ErrorMessage name=\"mutationType\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: \"ADD\",\n          mutationAmount: 0,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditForm from \"./AccountSubscriptionEditCreditForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          mutationType: accountSubscriptionCredit.mutationType,\n          mutationAmount: accountSubscriptionCredit.mutationAmount,\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              mutationType: values.mutationType,\n              mutationAmount: values.mutationAmount,\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction RelationsB2BEditBase({ t, match, history, children, cardTitle=\"\" }) {\n  const returnUrl = \"/relations/b2b\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{cardTitle}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>                                    \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase>\n      <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase>\n      <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n  console.log(initialData)\n\n  return (\n    <RelationsB2BEditBase cardTitle={t('relations.b2b.title_edit')}>\n      <Formik\n        initialValues={{ \n          name: initialData.name,\n          phone: initialData.phone,\n          phone2: initialData.phone2,\n          address: initialData.address,\n          postcode: initialData.postcode,\n          city: initialData.city,\n          country: initialData.country,\n          emailBilling: initialData.emailBilling,\n          emailContact: initialData.emailContact,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let input_vars = {\n              id: businessId,\n              name: values.name,\n              phone: values.phone,\n              phone2: values.phone2,\n              address: values.address,\n              postcode: values.postcode,\n              city: values.city,\n              country: values.country,\n              emailBilling: values.emailBilling,\n              emailContact: values.emailContact,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration\n            }\n\n            updateBusiness({ variables: {\n              input: input_vars\n            }, refetchQueries: [\n                // Refetch list\n                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                // Refresh local cached results for this account\n                {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <RelationsB2BEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6} md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","export function capitalize(word) {\n    const lower = word.toLowerCase();\n    return word.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgePublic = ({ t, className, isPublic }) => (\n    (isPublic) ?\n        <Badge className={className} color=\"success\">{t('general.public')}</Badge> :\n        <Badge className={className} color=\"danger\">{t('general.not_public')}</Badge> \n)\n\nexport default withTranslation()(BadgePublic)","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport {\n  Icon\n} from \"tabler-react\";\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    attendanceCountType: \"ATTENDING_AND_BOOKED\",\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}><Icon name=\"user\" /> {name}</span>\n  } else {\n    return <React.Fragment><Icon name=\"user\"/> {name}</React.Fragment>\n  }\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELLED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <div className=\"mb-4\">\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12}>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttendance\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Icon,\n  Card,\n  Grid,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { capitalize } from '../../../tools/string_tools'\nimport BadgePublic from '../../ui/BadgePublic'\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <React.Fragment key={v4()}>\n          <h3>\n            {capitalize(moment(date).format(\"dddd\"))} {' '}\n            <small className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n            </small>\n          </h3>\n          {!(classes.length) ? <Card>\n              <Card.Body>\n                <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n              </Card.Body>\n            </Card> \n          :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendance,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <div className='float-right'>\n                            <Dropdown\n                              key={v4()}\n                              className=\"pull-right\"\n                              type=\"button\"\n                              toggle\n                              color=\"secondary\"\n                              triggerContent={<React.Fragment>\n                                  <span className=\"d-xs-none\">{t(\"general.manage\")}</span>\n                                  <span className=\"d-sm-none d-md-none d-lg-none d-xl-none\"><Icon name=\"more-horizontal\" /></span>\n                                </React.Fragment>}\n                              items={[\n                                <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                  <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      icon=\"check-circle\"\n                                    >\n                                        {t(\"general.attendance\")}\n                                    </Dropdown.Item>\n                                  </Link>\n                                </HasPermissionWrapper>,\n                                <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                  <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      icon=\"bar-chart-2\">\n                                        {t(\"schedule.classes.class.attendance_chart.title\")}\n                                    </Dropdown.Item>\n                                  </Link>\n                                </HasPermissionWrapper>,\n                                <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                                  <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      icon=\"edit-3\"\n                                    >\n                                      {t(\"general.edit\")}\n                                    </Dropdown.Item>\n                                  </Link>\n                                </HasPermissionWrapper>,\n                                <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                  <Dropdown.ItemDivider key={v4()} />\n                                  <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                    <Dropdown.Item\n                                      key={v4()}\n                                      badge={t('schedule.classes.all_classes_in_series')}\n                                      badgeType=\"secondary\"\n                                      icon=\"edit-3\"\n                                    >\n                                        {t(\"general.edit\")}\n                                    </Dropdown.Item>\n                                  </Link>\n                                </HasPermissionWrapper>,\n                                <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                  <Dropdown.ItemDivider key={v4()} />\n                                  <span className=\"text-red\">\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    badge={t('schedule.classes.all_classes_in_series')}\n                                    badgeType=\"danger\"\n                                    icon=\"trash-2\"\n                                    onClick={() => {\n                                      confirm_delete({\n                                        t: t,\n                                        msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                        msgDescription: <p key={v4()}>\n                                          {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                          {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                          {organizationLocationRoom.organizationLocation.name} {' '}\n                                          {organizationLocationRoom.name}\n                                          {organizationClasstype.Name}\n                                          </p>,\n                                        msgSuccess: t('schedule.classes.deleted'),\n                                        deleteFunction: deleteScheduleClass,\n                                        functionVariables: { variables: {\n                                          input: {\n                                            id: scheduleItemId\n                                          }\n                                        }, refetchQueries: [\n                                          { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                        ]}\n                                      })\n                                    }}>\n                                  {t(\"general.delete\")}\n                                  </Dropdown.Item>\n                                  </span>\n                                </HasPermissionWrapper>\n                              ]}\n                              />\n                            </div>\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"SUB\") ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.sub_instructor')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendance}/{spaces}</small>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n            )}\n        </React.Fragment >\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n            <option value=\"LAST_WEEKDAY_OF_MONTH\" key={v4()}>{t('schedule.classes.select_last_weekday_of_month')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\"\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces)\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n      scheduleItemType\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"copy\"\n              active={activeLink === 'prices'}\n              >\n              {t('schedule.classes.prices.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime}) {\n  return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' + moment(starttime).format('LT')\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  const pageHeaderButtonList = <ButtonBack returnUrl=\"/schedule/classes\" />\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  infoMailContent: values.infoMailContent\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          fullName\n        }\n      }   \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = match.params.class_id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId)},\n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch(getAccountsQueryVariables(value))\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n\n  \n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","export function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_action = ({t, msgConfirm, msgDescription, msgSuccess, actionFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_action_no')}</button>\n            <button\n              className=\"btn btn-success\"\n              onClick={() => {\n                actionFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"check\" /> {t('general.confirm_action_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_action\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_action from \"../../tools/confirm_action\"\n\n// import {\n//   Icon\n// } from \"tabler-react\"\n\n\nfunction ButtonConfirmAction({\n  t, \n  match, \n  history, \n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  actionFunction, \n  actionFunctionVariables, \n  buttonClass=\"btn-link\",\n  buttonIcon=\"\",\n  buttonText=\"\",\n  buttonTextColor=\"\"\n}) {\n  return (\n    <button className={`icon btn ${buttonClass} btn-sm`}\n      // title={t('')} \n      onClick={() => {\n        confirm_action({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          actionFunction: actionFunction,\n          functionVariables: actionFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        {buttonIcon} {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonConfirmAction))","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, class_date, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + class_date}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const exportUrl = `/d/export/schedule_item_attendance/mailinglist/${scheduleItemId}/${classDate}`\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              {/* Export Mailinglist */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"mr-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('general.mailing_list')} \n              </Button>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col xs={12} sm={12} md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col xs={12} sm={12} md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  class_date={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ButtonConfirm from '../../../../ui/ButtonConfirm'\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport { \n  GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n  UPDATE_SCHEDULE_ITEM_ATTENDANCE,\n  RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE \n} from \"./queries\"\n\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ]\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date)\n    }\n  )\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n  const [ resendInfoMail ] = useMutation(RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  return (\n    <ScheduleClassAttendanceBase>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      <ScheduleClassAttendanceDelete node={node} />\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary btn-sm\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          //   <Dropdown.Item\n                          //     key={v4()}\n                          //     icon=\"check\"\n                          //     onClick={() => {\n                          //       setAttendanceStatus({\n                          //         t: t, \n                          //         updateAttendance: updateAttendance,\n                          //         node: node,\n                          //         status: 'ATTENDING'\n                          //       })\n                          //       refetchAttendance()\n                          //     }}>\n                          //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                          //   </Dropdown.Item>\n                          // </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                match: match,\n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                        <ButtonConfirm \n                            msgConfirm={t(\"schedule.classes.class.attendance.confirm_resending_info_mail_to\")}\n                            msgDescription={<p><b>{node.account.fullName}</b></p>}\n                            msgSuccess={t(\"schedule.classes.class.attendance.resend_success\")}\n                            actionFunction={resendInfoMail}\n                            actionFunctionVariables={{variables: {input: {id: node.id}}}}\n                            buttonClass=\"btn-link\"\n                            buttonIcon={<Icon name=\"send\" />}\n                            buttonText={t(\"schedule.classes.class.attendance.resend_info_mail\")}\n                            buttonTextColor=\"\"\n                        />\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={9} md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col xs={12} sm={3} md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                class_date={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceCountYear($scheduleItem:ID!, $year: Int!) {\n    insightClassAttendanceCountYear(scheduleItem: $scheduleItem, year: $year) {\n      year\n      scheduleItem {\n        id\n      }\n      weeks {\n        week\n        attendanceCountCurrentYear\n        attendanceCountPreviousYear\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n  const year = parseInt(classDate.substring(0, 4))\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  // Add month name to data\n  const chartData = data.insightClassAttendanceCountYear.weeks.map((item, index) => (\n    { ...item, weekName: `${t(\"general.week\")} ${item.week}` }\n  ))\n\n  const scheduleItem = data.scheduleItem\n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <ResponsiveContainer width=\"100%\" aspect={2.6}>\n          <BarChart\n            width={500}\n            height={300}\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 20,\n              left: 0,\n              bottom: 10,\n            }}\n          >\n            <XAxis dataKey=\"weekName\" interval={4} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"attendanceCountCurrentYear\" name={year} fill={colors['azure']} />\n            <Bar dataKey=\"attendanceCountPreviousYear\" name={year-1} fill={colors['azure-lighter']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let returnUrl\n\n  if (returnTo === \"schedule_classes\") {\n    returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo === \"selfcheckin\") {\n    returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  console.log(schedule_item_id)\n  console.log(class_date)\n\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: schedule_item_id,\n                            date: class_date,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: parseInt(values.spaces),\n                            walkInSpaces: parseInt(values.walkInSpaces),\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col xs={12} sm={12} md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={schedule_item_id}\n                class_date={class_date}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n      <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendance\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.tickets.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendance}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, \n    `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName} <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges && <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link>\n                }\n                <small className=\"text-muted\">\n                  {node.invoiceItems.edges && node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) } <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n  console.log(shifts)\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://www.costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\nimport moment from 'moment'\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  Card,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status}) {\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    }\n  }).then(({ data }) => {\n    console.log('got data', data);\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const class_date = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, class_date)\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED'\n                                })\n                                refetchAttendance()\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING'\n                              })\n                              refetchAttendance()\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={CSLS.SELFCHECKIN_CHECKIN_SEARCH}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            getAccounts({ variables: get_accounts_query_variables()})\n          } else {\n            setShowSearch(false)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + class_date + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n      $attendanceCountType: String!\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        attendanceCountType: $attendanceCountType\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n      attendanceCountType: \"ATTENDING_AND_BOOKED\"\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value.toString(),\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.mailchimp_lists.title\")}</h5>\n                  {t(\"settings.mail.mailchimp_lists.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/mailchimp_lists\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mailchimp.title\")}</h5>\n                  {t(\"settings.integration.mailchimp.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mailchimp/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMailChimpForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group label={t('settings.integration.mailchimp.api_key')}>\n          <Field type=\"text\" \n            name=\"mailchimp_api_key\" \n            className={(errors.mailchimp_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_api_key\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('settings.integration.mailchimp.server_prefix')}>\n          <Field type=\"text\" \n            name=\"mailchimp_server_prefix\" \n            className={(errors.mailchimp_server_prefix) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_server_prefix\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimpForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMailChimpForm from \"./SettingsIntegrationMailChimpForm\"\n\n\nfunction SettingsIntegrationMailChimp({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mailchimp.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingUser, \n    error: errorUser, \n    data: dataUser\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_server_prefix\"\n    }\n  })\n  const { \n    loading: loadingKey, \n    error: errorKey, \n    data: dataKey\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_api_key\"\n    }\n  })\n\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(dataUser)\n  console.log(dataKey)\n\n  if (loadingUser || loadingKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorUser || errorKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mcUser = \"\"\n  if (dataUser.systemSettings.edges.length) {\n    mcUser = dataUser.systemSettings.edges[0].node.value\n  }\n\n  let mcApiKey = \"\"\n  if (dataKey.systemSettings.edges.length) {\n    mcApiKey = dataKey.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >\n    <Formik\n      initialValues={{ \n        mailchimp_server_prefix: mcUser,\n        mailchimp_api_key: mcApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"integration_mailchimp_server_prefix\", value: values.mailchimp_server_prefix },\n            { setting: \"integration_mailchimp_api_key\", value: values.mailchimp_api_key },\n          ]\n\n          for (let i in settings) {\n            console.log(i)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMailChimpForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMailChimpForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimp))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import { gql } from \"@apollo/client\"\n\nexport const GET_MAILCHIMP_LISTS_QUERY = gql`\n  query systemMailchimpLists($after: String, $before: String) {\n    systemMailchimpLists(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          mailchimpListId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MAILCHIMP_LIST_QUERY = gql`\n  query SystemMailchimpList($id: ID!) {\n    systemMailchimpList(id:$id) {\n      id\n      name\n      description\n      frequency\n      mailchimpListId\n    }\n  }\n`\n\nexport const ADD_MAILCHIMP_LIST = gql`\n  mutation CreateSystemMailChimpList($input:CreateSystemMailChimpListInput!) {\n    createSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST = gql`\n  mutation UpdateSystemMailChimpList($input:UpdateSystemMailChimpListInput!) {\n    updateSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_MAILCHIMP_LIST = gql`\nmutation DeleteSystemMailChimpList($input: DeleteSystemMailChimpListInput!) {\n  deleteSystemMailchimpList(input: $input) {\n    ok\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailMailChimpListsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/mailchimp_lists\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"systemmailchimplist\">\n                  <ButtonAdd addUrl=\"/settings/mail/mailchimp_lists/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListsBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_MAILCHIMP_LIST, GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../ui/ButtonDelete';\n\n\nfunction SettingsMailMailChimpListDelete({t, match, node}) {\n  const [ deleteMailChimpList ] = useMutation(DELETE_MAILCHIMP_LIST)\n\n  return <ButtonDelete\n    msgConfirm={t(\"settings.mail.mailchimp_lists.delete_confirm_msg\")}\n    msgDescription={<p>{node.name}</p>}\n    msgSuccess={t('settings.mail.mailchimp_lists.delete_success')}\n    deleteFunction={deleteMailChimpList}\n    deleteFunctionVariables={{ \n        variables: {\n          input: {\n            id: node.id\n          }\n        }, \n        refetchQueries: [\n          { query: GET_MAILCHIMP_LISTS_QUERY },\n        ]\n      }}\n  />\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListDelete))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ButtonEdit from \"../../../ui/ButtonEdit\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase'\nimport SettingsMailMailChimpListDelete from './SettingsMailMailChimpListDelete'\n\n\nfunction SettingsMailMailChimpLists({ t, history }) {\n  const cardTitle = t('settings.mail.mailchimp_lists.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_MAILCHIMP_LISTS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.mailchimp_lists.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  const mailchimpLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailchimpLists.edges.length) { return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.mailchimp_lists.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )}\n\n  return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={mailchimpLists.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: mailchimpLists.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationmailchimpLists.edges\n                        const pageInfo = fetchMoreResult.organizationmailchimpLists.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationmailchimpLists: {\n                                __typename: previousResult.organizationmailchimpLists.__typename,\n                                edges: [ ...previousResult.organizationmailchimpLists.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('settings.mail.mailchimp_lists.mailchimp_list_id')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {mailchimpLists.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.mailchimpListId}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <ButtonEdit editUrl={`/settings/mail/mailchimp_lists/edit/${node.id}`} />\n                    <SettingsMailMailChimpListDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpLists))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MAILCHIMP_LIST_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    frequency: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    mailchimpListId: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\nconst SettingsMailChimpListForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('settings.mail.mailchimp_lists.mailchimp_list_id')}>\n                <Field type=\"text\" \n                        name=\"mailchimpListId\" \n                        className={(errors.mailchimpListId) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"mailchimpListId\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n            <Form.Group label={t('general.frequency')}>\n              <Field type=\"text\" \n                      name=\"frequency\" \n                      className={(errors.frequency) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"frequency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(SettingsMailChimpListForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_MAILCHIMP_LISTS_QUERY, ADD_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\n\n\nfunction SettingsMailMailChimpListAdd({t, history}) {\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const [ addMailChimpList ] = useMutation(ADD_MAILCHIMP_LIST)\n  \n  return (\n   <SettingsMailMailChimpListsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('settings.mail.mailchimp_lists.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', frequency: '', mailchimpListId: '' }}\n          validationSchema={MAILCHIMP_LIST_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addMailChimpList({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                  frequency: values.frequency, \n                  mailchimpListId: values.mailchimpListId, \n                }\n              }, refetchQueries: [\n                  {query: GET_MAILCHIMP_LISTS_QUERY }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('settings.mail.mailchimp_lists.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n            <SettingsMailMailChimpListForm \n              isSubmitting={isSubmitting}\n              values={values}\n              errors={errors}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </SettingsMailMailChimpListsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_MAILCHIMP_LISTS_QUERY, GET_MAILCHIMP_LIST_QUERY, UPDATE_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction SettingsMailMailChimpListEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const cardTitle = t('settings.mail.mailchimp_lists.title_edit')\n  const { loading, error, data } = useQuery(GET_MAILCHIMP_LIST_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateMailchimpList ] = useMutation(UPDATE_MAILCHIMP_LIST)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n                    \n  const initialData = data.systemMailchimpList;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description, \n              frequency: initialData.frequency, \n              mailchimpListId: initialData.mailchimpListId, \n            }}\n            validationSchema={MAILCHIMP_LIST_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateMailchimpList({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name, \n                    description: values.description, \n                    frequency: values.frequency, \n                    mailchimpListId: values.mailchimpListId, \n                  }\n                }, refetchQueries: [\n                    {query: GET_MAILCHIMP_LISTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('settings.mail.mailchimp_lists.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n              <SettingsMailMailChimpListForm \n                isSubmitting={isSubmitting}\n                values={values}\n                errors={errors}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </SettingsMailMailChimpListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle=\"\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t(\"settings.mail.title\")} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t('settings.mail.title')} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t(\"settings.mail.templates.title\")\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.mailing_lists.title\")}</h5>\n              {t(\"shop.account.mailing_lists.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton \n                link=\"/shop/account/mailing_lists\" \n                buttonText={t(\"shop.account.btn_text_manage\")} \n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport { TimeStringToJSDateOBJ } from '../../tools/date_tools'\n\n\nexport function DisplayClassInfo({t, classDate, classData, dateFormat, timeFormat }) {\n    return (\n      <div>\n        <b>\n          {moment(classDate).format(dateFormat)} {' '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n          {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n        </b>\n        {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n          classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_already_cancelled\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.already_cancelled\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card title={t(\"shop.account.class_cancel.title_cancelation_not_possible\")}>\n          <Card.Body>\n            <h5>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h5>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_cancel.title\")}>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h5>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h5>\n            <DisplayClassInfo\n              t={t}\n              classDate={date}\n              classData={dataAttendance}\n              dateFormat={dateFormat}\n              timeFormat={timeFormat}\n            />\n            <br />\n            <Button\n              className=\"mr-4\"\n              color=\"warning\"\n              onClick={() =>\n                updateScheduleItemAttendance({ variables: {\n                  input: {\n                    id: attendanceId,\n                    bookingStatus: \"CANCELLED\"\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(\"/shop/account/classes\")\n                    toast.success((t('shop.account.class_cancel.success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                  })\n                }\n            >\n              {t(\"shop.account.class_cancel.confirm_yes\")}\n            </Button>\n            <Link to={\"/shop/account/classes\"}>\n              {t(\"shop.account.class_cancel.confirm_no\")}\n            </Link>\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Dimmer,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(data.scheduleClass.infoMailContent) }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.invoices.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Card.Title>{node.invoiceNumber}</Card.Title>\n                      </Link>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                            <Table.Col><b>{node.balanceDisplay}</b></Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {(node.status === \"SENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        outline\n                        color=\"primary\"\n                        icon=\"printer\"\n                        className=\"mr-2\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>    \n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Button \n                          outline\n                          color=\"primary\"\n                          icon=\"file-text\"\n                          className=\"mr-2\"\n                        >\n                          {t('general.details')}\n                        </Button>\n                      </Link>                  \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICE = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id: $id) {\n      id\n      invoiceNumber\n      status\n      summary\n      relationCompany\n      relationContactName\n      dateSent\n      dateDue\n      total\n      totalDisplay\n      balance\n      balanceDisplay\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoiceBase({ t, match, history, children, pageHeaderButtonList, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\" />\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoiceBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n// import { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICE } from \"./queries\"\n\nimport ShopAccountInvoiceBase from \"./ShopAccountInvoiceBase\"\n\n\nfunction ShopAccountInvoice({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const invoiceId = match.params.id\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading, error, data } = useQuery(QUERY_ACCOUNT_INVOICE, {\n    variables: {\n      id: invoiceId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading) return (\n    <ShopAccountInvoiceBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoiceBase>\n  )\n  if (error) return (\n    <ShopAccountInvoiceBase>\n      {t(\"shop.account.invoice.error_loading_data\")}\n    </ShopAccountInvoiceBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = data.user\n  const invoice = data.financeInvoice\n\n  const pageHeaderButtonList = (invoice.status === \"SENT\" && onlinePaymentsAvailable) ?\n    <Link to={\"/shop/account/invoice_payment/\" + invoice.id}>\n      <Button\n        className=\"float-right ml-2\"\n        color=\"success\"\n      >\n        {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n    : \"\"\n    \n\n  return (\n    <ShopAccountInvoiceBase accountName={user.fullName} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <div className='float-right'>\n            <FinanceInvoicesStatus status={invoice.status}/>\n          </div>\n          <h4>{t(\"shop.account.invoice.title\")} {invoice.invoiceNumber}</h4>\n          <Card>\n            <Card.Body>\n              {invoice.summary}\n            </Card.Body>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateSent).format(dateFormat)}</Table.Col>\n                  <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateDue).format(dateFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.Col>{invoice.totalDisplay}</Table.Col>\n                  <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                  <Table.Col><b>{invoice.balanceDisplay}</b></Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n          <h4>{t('general.items')}</h4>\n          {invoice.items.edges.map(({ node }) => (\n            <Card>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} sm={12} md={6}>\n                    <h6>{node.productName}</h6>\n                    {node.description}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={4}>\n                    {(parseFloat(node.quantity) > 1.00) ? <div>\n                      <b>{node.quantity} {t(\"shop.account.invoice.pieces\")} </b><br />\n                      {node.priceDisplay} {t(\"general.each\")}\n                    </div> : \"\"}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={2}>\n                    <div className=\"float-right\">\n                      <b>{node.totalDisplay}</b><br />\n                    </div>\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n          {(invoice.payments.edges.length) ?\n            <React.Fragment>\n              <h4>{t(\"general.payments\")}</h4>\n              {invoice.payments.edges.map(({ node }) => (\n              <Card>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} sm={12} md={8}>\n                      <h6>{moment(node.date).format(dateFormat)}</h6>\n                      {node.financePaymentMethod.name}\n                    </Grid.Col>\n                    <Grid.Col xs={12} sm={12} md={4}>\n                      <div className=\"float-right\">\n                        <b>{node.amountDisplay}</b><br />\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n            </React.Fragment>\n          : \"\"}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoiceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoice))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_SYSTEM_MAILCHIMP_LISTS = gql`\n  query SystemMailchimpLists($before: String, $after: String) {\n    systemMailchimpLists(first: 100, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          subscribed\n          mailchimpListId\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS = gql`\n  mutation updateSystemMailchimpListSubscriptionStatus($input: UpdateSystemMailChimpListSubscriptionStatusInput!) {\n    updateSystemMailchimpListSubscriptionStatus(input: $input) {\n      subscriptionStatus\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountMailingListsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListsBase))","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  GalleryCard,\n  Button,\n  Badge,\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS, UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS } from './queries'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopAccountMailingListCard({ t, mailingList, btnLink, active=false }) {\n  let [isSubmitting, setSubmitting] = useState(false)\n  const [ updateSubscriptionStatus ] = useMutation(UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS)\n\n  function doUpdateSubscriptionStatus(mailchimpListId) {\n    setSubmitting(true)\n\n    updateSubscriptionStatus({ variables: {\n      input: {\n        mailchimpListId: mailchimpListId\n      }\n    }, refetchQueries: [\n      {query: QUERY_SYSTEM_MAILCHIMP_LISTS}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data)\n        toast.success((t('shop.account.mailing_lists.toast_update_subscription_status_success')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        setSubmitting(false)\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        setSubmitting(false)\n      })\n    }  \n\n  return (\n    <GalleryCard>\n      <GalleryCard.Details>\n        <div>\n        <span className='float-right'>\n        {(mailingList.subscribed) ? <Badge color=\"success\">Subscribed</Badge> : \"\"}\n        </span>\n        <h4>{mailingList.name}</h4>\n        </div>\n        \n        <h6>{mailingList.frequency}</h6>\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(mailingList.description) }} />\n\n        {(mailingList.subscribed) ? \n              <Button\n                color=\"secondary\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.unsubscribing\") : \n                  t(\"shop.account.mailing_lists.unsubscribe\") \n                }\n              </Button> :\n              <Button\n                color=\"success\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.subscribing\") : \n                  t(\"shop.account.mailing_lists.subscribe\") \n                }\n              </Button>\n        }\n      </GalleryCard.Details>\n    </GalleryCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListCard))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountMailingListsBase from \"./ShopAccountMailingListsBase\"\nimport ShopAccountMailingListCard from \"./ShopAccountMailingListCard\"\n\n\nfunction ShopAccountMailingLists({t, match, history}) {\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(QUERY_SYSTEM_MAILCHIMP_LISTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountMailingListsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountMailingListsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountMailingListsBase>\n      {t(\"shop.account.mailing_lists.error_loading_data\")}\n    </ShopAccountMailingListsBase>\n  )\n\n  const user = data.user\n  const mailingLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailingLists.edges.length) {\n    return (\n      <ShopAccountMailingListsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.mailing_lists.title')} >\n              <Card.Body>\n                {t('shop.account.mailing_lists.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountMailingListsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountMailingListsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.mailing_lists.title')}</h4>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        {mailingLists.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={4}>\n            <ShopAccountMailingListCard\n              mailingList={node}\n              // btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopAccountMailingListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountMailingLists))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                financeTaxRate {\n                  id\n                  name\n                  percentage\n                  rateType\n                }\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = data.user\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.subscriptions.title')}\n            hasCardBody={false}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {subscriptions.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationSubscription.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      { (node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.book.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {t(\"general.credits_remaining\")}: {subscription.accountSubscription.creditTotal}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ' ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h5>{ class_info }</h5>\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")}\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.booked.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"shop.classes.booked.to_profile\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      attendanceCountType: \"ATTENDING_AND_BOOKED\",\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={4}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Dimmer,\n  Grid,\n  Icon,\n  Progress,\n  Table,\n} from \"tabler-react\";\n\nimport { capitalize } from '../../../../tools/string_tools'\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    // https://github.com/apollographql/react-apollo/issues/321\n    // Set loading to true when refetching\n    notifyOnNetworkStatusChange: true\n  })\n\n  console.log(loading)\n\n  const pageHeaderOptions = <Button.List className=\"schedule-list-page-options-btn-list\">\n    <Button \n      icon=\"chevron-left\"\n      color=\"secondary\"\n      disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n      onClick={ () => {\n        let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n        let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n    <Button \n      color=\"secondary\"\n      onClick={ () => {\n        let currentWeekFrom = moment()\n        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n        \n        refetch(get_list_query_variables())\n    }} > \n      {t(\"general.today\")}\n    </Button>\n    <Button \n      icon=\"chevron-right\"\n      color=\"secondary\"\n      onClick={ () => {\n        let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n  </Button.List>\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions} >\n      <br /><br /><br /><br />    \n      <Dimmer active={true} loader={true} />\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n  \n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        spaces,\n                        availableSpacesOnline,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h5>\n                              { organizationClasstype.name } { ' ' }\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n\n                            </h5> \n                             <span className=\"mr-2\">{ (account) ? account.fullName : \"\" }</span>\n                             <span className=\"text-muted\">{organizationLevel && organizationLevel.name}</span>\n                             <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                              {(bookingStatus !== \"FINISHED\" && status !== \"CANCELLED\") ? \n                                <React.Fragment>\n                                  <div style={{clear: \"both\"}} />\n                                    <div className=\"cs-shop-classes-schedule-business-indicator mt-2\">\n                                      <div className=\"float-right\"><small><Icon name=\"users\" className=\"text-muted\" /></small></div>\n                                      <Progress size=\"xs\" className=\"cs-shop-classes-schedule-business-indicator\">\n                                        {/* This strange calculation shows online spaces in the progress bar, not all spaces. */}\n                                        <Progress.Bar color=\"primary\" width={((spaces-availableSpacesOnline)/spaces) * 100} /> \n                                      </Progress>\n                                  </div>\n                                </React.Fragment>\n                                : \"\"\n                              }\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  console.log(data)\n  console.log(data.organization)\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address) }} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventsBase from \"./ShopEventsBase\"\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`#/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={moment(node.dateStart).format(dateFormat)}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children, title=\"\" }) {\n  \n  return (\n    <ShopBase \n      title={title}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n        {(eventTicket.isEarlybirdPrice) ? <div><Badge color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge></div> : \"\"}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        {(eventTicket.isEarlybirdPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let tempTitle = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) return (\n    <ShopEventBase title={tempTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={tempTitle}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n\n  return (\n    <ShopEventBase title={event.name}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(event.description) }} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children, subTitle }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.events.ticket.title\")}\n      subTitle={subTitle}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  let title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  console.log(data)\n  const eventTicket = data.scheduleEventTicket\n  console.log(eventTicket)\n  const subTitle = eventTicket.scheduleEvent.name\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title} subTitle={subTitle}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title} subTitle={subTitle}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(eventTicket.description) }} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","// @flow\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classes.title')}\n            hasCardBody={false}\n            pageInfo={scheduleItemAttendances.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleItemAttendances.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.schduleItemAttendances.edges\n                  const pageInfo = fetchMoreResult.schduleItemAttendances.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        schduleItemAttendances: {\n                          __typename: previousResult.schduleItemAttendances.__typename,\n                          edges: [ ...previousResult.schduleItemAttendances.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>  \n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      { moment(node.date).format(dateFormat) } <br />\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span>\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationClasstype.name }\n                    </Table.Col>\n                    <Table.Col>\n                      { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* TODO: improve this by adding a \"Can be cancelled field to GQL schema\" */}\n                      {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                        <div>\n                          <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                            <Button \n                              className=\"pull-right mr-r\"\n                              color=\"warning\"\n                              >\n                              {t(\"general.cancel\")}\n                            </Button>\n                          </Link>\n                          <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                            <Button\n                              className=\"pull-right\"\n                              color=\"secondary\"\n                              icon=\"info\"\n                            >\n                              {t(\"general.info\")}\n                            </Button>\n                          </Link>\n                        </div> : \"\"\n                      }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity} {' '} {classpass.validityUnitDisplay}</b>\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(classpass.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptionPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // subscription should be an object with at least the following values from an organizationSubscription object:\n  // id, name, priceTodayDisplay, subscriptionUnit, unlimited, minDuration, priceFirstMonthDisplay, \n  // accountRegistrationfee\n\n  let unit = t(\"general.month\")\n  if (!subscription.unlimited && subscription.subscriptionUnit === 'WEEK') {\n    unit = t(\"general.week\")\n  }\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> { \" \" }\n          {t('general.classes')} / {unit}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \" \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organizationSubscription.termsAndConditions) }} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(subscription.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>    \n      <div className=\"text-center\">\n        <h5>{t('user.register.create_account')}</h5>\n        {t('user.register.create_account_msg')} <br />\n        {t('user.register.create_account_msg_click_below')} <br />\n      </div>\n      <Button \n        block\n        color=\"link\"\n        RootComponent=\"a\"\n        href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n          \"http://localhost:8000/d/accounts/signup/\" :\n          \"/d/accounts/signup/\"\n        } \n      >\n        {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE, {\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <Dimmer active={true} loader={true} />\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n  console.log(user)\n\n  // Push the user to the shop in case they're not an employee or instructor\n  if (!user.employee && !user.instructor) {\n    history.push(\"/shop/account\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\" hideLoading={true}>\n          <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport CookiePolicy from './components/shop/cookie_policy/CookiePolicy'\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionCreditExpiration \n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpiration'\nimport AutomationAccountSubscriptionCreditExpirationAdd\n  from './components/automation/account/subscription/credits_expiration/AutomationAccountSubscriptionCreditExpirationAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightInactiveAccounts from './components/insight/inactive_accounts/InsightInactiveAccounts'\nimport InsightInactiveAccountsAdd from './components/insight/inactive_accounts/InsightInactiveAccountsAdd'\nimport InsightInactiveAccountsView from './components/insight/inactive_accounts/InsightInactiveAccountsView'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMailChimp from './components/settings/integration/mailchimp/SettingsIntegrationMailChimp'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailMailChimpLists from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists'\nimport SettingsMailMailChimpListAdd from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd'\nimport SettingsMailMailChimpListEdit from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit'\nimport SettingsMailTemplates from './components/settings/mail/templates/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/templates/SettingsMailTemplateEdit'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountInvoice from './components/shop/account/invoice/ShopAccountInvoice'\nimport ShopAccountMailingLists from './components/shop/account/mailing_lists/ShopAccountMailingLists'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (authTokenExpired) {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    if (refreshTokenExp == null) {\n      console.log(\"refresh token not found\")\n      SetCurrentUrlAsNext()\n      \n      return LoginRequired\n    } else if ((new Date() / 1000) >= refreshTokenExp) {\n      console.log(\"refresh token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n      SetCurrentUrlAsNext()\n\n      return SessionExpired\n    } else {\n      // Refresh token\n      console.log(\"auth token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n\n      doTokenRefresh().then(({ data }) => {\n        console.log('got refresh data', data)\n        CSAuth.updateTokenInfo(data.refreshToken)\n        return ContinueAsYouAre\n      }).catch((error) => {\n        toast.error(error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        console.log('there was an error refreshing the token', error) \n        SetCurrentUrlAsNext()\n        console.log(\"REDIRECT BACK TO LOGIN\")\n        window.location.href = \"/#/user/login\"\n        window.location.reload()\n      })\n    }\n  } else {\n    return ContinueAsYouAre\n  }\n  return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  let organization = dataOrganization.organization\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* COOKIE POLICY */}\n            <Route exact path=\"/cookie_policy\" component={CookiePolicy} />\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration\" \n                                component={AutomationAccountSubscriptionCreditExpiration} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits_expiration/add\" \n                                component={AutomationAccountSubscriptionCreditExpirationAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts\" component={InsightInactiveAccounts} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/add\" component={InsightInactiveAccountsAdd} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/view/:id\" component={InsightInactiveAccountsView} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/invoice/:id\" component={ShopAccountInvoice} />\n            <PrivateRoute exact path = \"/shop/account/mailing_lists\" component={ShopAccountMailingLists} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <PrivateRoute exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mailchimp\" component={SettingsIntegrationMailChimp} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists\" component={SettingsMailMailChimpLists} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/add\" component={SettingsMailMailChimpListAdd} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/edit/:id\" component={SettingsMailMailChimpListEdit} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\nimport { onError } from \"@apollo/client/link/error\";\n// import { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSEC from \"./tools/cs_error_codes\"\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n  \n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Token refresh check\n  // if (graphQLErrors && graphQLErrors[0].message === \"Signature has expired\") {\n  if (response) {\n    let i\n    for (i = 0; i < response.errors.length; i++) {\n      if (response.errors[i].extensions && response.errors[i].extensions.code === CSEC.USER_NOT_LOGGED_IN) {\n        console.log(graphQLErrors[0])\n        console.log('Time to refresh the token')\n\n        let authTokenExpired = false\n        let refreshTokenExpired = false\n        const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n        const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n        if ((new Date() / 1000) >= tokenExp) {\n          authTokenExpired = true\n          \n          if ((new Date() / 1000) >= refreshTokenExp) {\n            refreshTokenExpired = true\n            // Remove any remaining token data\n            CSAuth.cleanup()\n            // Store current location, user has to login again\n            SetCurrentUrlAsNext()\n          }\n        }\n        \n        if (authTokenExpired && !refreshTokenExpired) {\n          console.log(\"refresh token... somehow...\")\n          console.log(localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN))\n\n          return new Observable(observer => {\n            client.mutate({\n              mutation: TOKEN_REFRESH,\n            })\n              .then(({ data }) => { \n                console.log(data)\n                CSAuth.updateTokenInfo(data.refreshToken)\n              })\n              .then(() => {\n                const subscriber = {\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                };\n\n                // Retry last failed request\n                forward(operation).subscribe(subscriber);\n              })\n              .catch(error => {\n                // No refresh or client token available, we force user to login, after a cleanup\n                console.log(\"Failed to refresh the token, onwards to the login page\")\n                observer.error(error);\n                CSAuth.cleanup()\n                window.location.href = \"/#/user/login\"\n                window.location.reload()\n              });\n          })\n        } else if (refreshTokenExpired) {\n          window.location.href = \"#/user/session/expired\"\n          window.location.reload()\n        } else {\n          window.location.href = \"#/user/login/required\"\n          window.location.reload()\n        }\n      }\n    }\n  }\n})\n\n   \n// // Fetch CSRF Token\n// let csrftoken\n// async function getCsrfToken() {\n//   if (csrftoken) return csrftoken\n\n//   csrftoken = await fetch('/d/csrf/')\n//     .then(response => response.json())\n//     .then(data => data.csrfToken)\n\n//   return await csrftoken\n// }\n\n// Fetch CSRF Token from Cookie\nlet csrftoken\nasync function getCsrfToken() {\n  if (csrftoken) return csrftoken\n\n  await fetch('/d/csrf/')\n    .then(response => response.json())\n\n  // For troubleshooting\n  // const result =  await fetch('/d/csrf/')\n  //   .then(response => response.json())\n  // console.log(reuslt)\n\n  csrftoken = Cookies.get('csrftoken');\n  \n  return await csrftoken\n}\n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n  // request: async (operation) => {\n  //   const csrftoken = await getCsrfToken();\n  //   Cookies.set('csrftoken', csrftoken);\n  //   // set the cookie 'csrftoken'\n  //   operation.setContext({\n  //       // set the 'X-CSRFToken' header to the csrftoken\n  //       headers: {\n  //           'X-CSRFToken': csrftoken,\n  //       },\n  //   })}\n});\n\nconst csrfMiddleware = new ApolloLink(async (operation, forward) => {\n  const csrftoken = await getCsrfToken();\n  Cookies.set('csrftoken', csrftoken);\n\n  operation.setContext({\n    // set the 'X-CSRFToken' header to the csrftoken\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n  })\n\n  return forward(operation)\n})\n\n// const authLink = setContext(async (request, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   // const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       // Authorization: token ? `JWT ${token}`: ''\n//     }\n//   }\n// });\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([csrfMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          accounts: relayStylePagination(),\n        },\n      },\n    },\n  }),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}