{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_error_codes.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/settings/shop/features/queries.js","components/SiteWrapperShop.js","components/shop/ShopCheckoutProgress.jsx","components/ui/ButtonBack.jsx","components/shop/ShopBase.jsx","components/shop/cookie_policy/CookiePolicyBase.jsx","components/shop/cookie_policy/CookiePolicy.jsx","tools/string_tools.js","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","queries/system/get_user.js","tools/user_tools.js","components/HasPermissionWrapper.js","queries/system/get_user_profile.js","components/home/home/queries.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/ui/ButtonExport.jsx","components/finance/expenses/FinanceExpensesBase.jsx","tools/refresh_token_and_open_export_link.js","components/ui/FileProtectedDownloadTableButton.jsx","components/finance/expenses/queries.js","tools/confirm_delete.js","components/finance/expenses/FinanceExpensesList.jsx","components/finance/expenses/FinanceExpenses.jsx","tools/date_tools.js","components/finance/expenses/yupSchema.js","tools/custom_file_input_label_style.js","components/ui/CSDatePicker.jsx","components/ui/ButtonFormSubmit.jsx","components/ui/ButtonFormCancel.jsx","components/finance/expenses/FinanceExpenseForm.jsx","components/finance/expenses/FinanceExpenseAdd.jsx","components/finance/expenses/FinanceExpenseEdit.jsx","components/finance/expenses/export/yupSchema.js","components/finance/expenses/export/FinanceExpensesExportForm.jsx","components/finance/expenses/export/FinanceExpensesExport.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/finance/invoices/tools.js","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","components/finance/invoices/FinanceInvoicesList.jsx","components/finance/invoices/FinanceInvoices.jsx","components/finance/invoices/export/yupSchema.js","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToBase.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditTo.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/quotes/tools.js","components/finance/quotes/FinanceQuotesFilter.jsx","components/finance/quotes/FinanceQuotesBase.jsx","components/ui/FinanceQuoteStatus.jsx","components/finance/quotes/queries.js","components/finance/quotes/FinanceQuotesList.jsx","components/finance/quotes/FinanceQuotes.jsx","components/finance/quotes/export/yupSchema.js","components/finance/quotes/export/FinanceQuotesExportForm.jsx","components/finance/quotes/export/FinanceQuotesExport.jsx","components/finance/quotes/edit/FinanceQuoteEditBase.jsx","components/finance/quotes/edit/FinanceQuoteItemAdd.jsx","components/finance/quotes/edit/FinanceQuoteItemDelete.jsx","components/finance/quotes/edit/FinanceQuoteItemEditForm.jsx","components/finance/quotes/edit/FinanceQuoteItemEdit.jsx","components/finance/quotes/edit/FinanceQuoteEditItems.jsx","components/finance/quotes/edit/FinanceQuoteEditTermsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditFooterForm.jsx","components/finance/quotes/edit/FinanceQuoteEditNoteForm.jsx","components/finance/quotes/edit/FinanceQuoteEditAdditional.jsx","components/finance/quotes/edit/FinanceQuoteEditBalance.jsx","components/finance/quotes/edit/FinanceQuoteEditOptionsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditOptions.jsx","components/finance/quotes/edit/FinanceQuoteEditOrganization.jsx","components/finance/quotes/edit/FinanceQuoteEditSummaryForm.jsx","components/finance/quotes/edit/FinanceQuoteEditSummary.jsx","components/finance/quotes/edit/FinanceQuoteEditTo.jsx","components/finance/quotes/edit/FinanceQuoteEdit.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToBase.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToForm.jsx","components/finance/quotes/edit_to/FinanceQuoteEditTo.jsx","components/finance/quotes/groups/queries.js","components/finance/quotes/groups/FinanceQuoteGroupsBase.jsx","components/finance/quotes/groups/FinanceQuoteGroups.jsx","components/finance/quotes/groups/yupSchema.js","components/finance/quotes/groups/FinanceQuoteGroupForm.jsx","components/finance/quotes/groups/FinanceQuoteGroupAdd.jsx","components/finance/quotes/groups/FinanceQuoteGroupEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/yupSchema.js","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/inactive_accounts/InsightInactiveAccountsBase.jsx","components/insight/inactive_accounts/queries.js","components/insight/inactive_accounts/InsightInactiveAccounts.jsx","components/insight/inactive_accounts/InsightInactiveAccountsForm.jsx","components/insight/inactive_accounts/InsightInactiveAccountsAdd.jsx","components/ui/ButtonDelete.jsx","components/insight/inactive_accounts/InsightInactiveAccountsViewBase.jsx","components/insight/inactive_accounts/InsightInactiveAccountsView.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenueDisplay.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/instructor_classes/yupSchema.js","components/insight/instructor_classes/queries.js","components/insight/instructor_classes/InsightInstructorClassesMonthBase.jsx","components/insight/instructor_classes/InsightInstructorClassesForm.jsx","components/insight/instructor_classes/InsightInstructorClassesMonth.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBrandingEditColorsForm.jsx","components/organization/organization/branding/OrganizationBranding.jsx","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/ui/ButtonEdit.jsx","components/organization/products/queries.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/organization/products/OrganizationProductArchive.jsx","components/organization/products/OrganizationProductsBase.jsx","components/organization/products/OrganizationProducts.jsx","components/organization/products/yupSchema.js","components/organization/products/OrganizationProductForm.jsx","components/organization/products/OrganizationProductAdd.jsx","components/organization/products/OrganizationProductEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/general/InputSearch.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/relations/accounts/classes/AccountClasses.jsx","components/relations/accounts/enrollments/AccountEnrollmentsBase.jsx","components/schedule/classes/all/enrollments/queries.js","components/relations/accounts/enrollments/queries.js","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/relations/accounts/enrollments/AccountEnrollments.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/relations/accounts/enrollments/AccountEnrollmentBack.jsx","components/relations/accounts/enrollments/AccountEnrollmentEdit.jsx","queries/accounts/get_account.js","components/ui/BadgePublic.jsx","components/schedule/classes/queries.js","components/ui/SearchClassesOnDate.jsx","components/relations/accounts/enrollments/AccountEnrollmentFindClass.jsx","components/relations/accounts/tools/queries.js","components/relations/accounts/tools/RelationsAccountPasswordForm.jsx","components/relations/accounts/tools/RelationsAccountTools.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","components/relations/accounts/products/queries.js","components/relations/accounts/products/AccountProducts.jsx","components/ui/CSStoreCard.jsx","components/relations/accounts/products/AccountProductAdd.jsx","components/relations/accounts/quotes/queries.js","components/relations/accounts/quotes/AccountQuotesBase.jsx","components/relations/accounts/quotes/AccountQuotes.jsx","components/relations/accounts/quotes/AccountQuoteAddForm.jsx","components/relations/accounts/quotes/AccountQuoteAdd.jsx","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAddForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditMenu.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/relations/b2b/invoices/queries.js","components/relations/b2b/invoices/RelationsB2BInvoices.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAddForm.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAdd.jsx","components/schedule/home/ScheduleHome.jsx","components/ui/ButtonListWeekChooser.jsx","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/tools.js","tools/confirm_action.js","components/ui/ButtonConfirm.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/subscription_group_discounts/queries.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountDelete.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts.jsx","components/schedule/events/subscription_group_discounts/yupSchema.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountForm.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimpForm.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimp.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/mailchimp_lists/queries.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListsBase.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListDelete.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists.jsx","components/settings/mail/mailchimp_lists/yupSchema.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListForm.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit.jsx","components/settings/mail/notifications/queries.js","components/settings/mail/notifications/SettingsMailNotificationsBase.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonDeleteAccount.jsx","components/settings/mail/notifications/SettingsMailNotifications.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonAddAccount.jsx","components/ui/SearchAccounts.jsx","components/settings/mail/notifications/SettingsMailNotificationsAddAccount.jsx","components/settings/mail/templates/SettingsMailTemplatesBase.jsx","components/settings/mail/templates/queries.js","components/settings/mail/templates/SettingsMailTemplates.jsx","components/settings/mail/templates/SettingsMailTemplateEditBase.jsx","components/settings/mail/templates/SettingsMailTemplateEditForm.jsx","components/settings/mail/templates/SettingsMailTemplateEdit.jsx","components/settings/mail/templates/tools.js","components/settings/shop/account_profiles/SettingsShopAccountProfileForm.jsx","components/settings/shop/account_profiles/SettingsShopAccountProfile.jsx","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/account/class_uncancel/queries.js","components/shop/account/class_uncancel/ShopAccountClassUnCancelBase.jsx","components/shop/account/class_uncancel/ShopAccountClassUnCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/invoice/queries.js","components/shop/account/invoice/ShopAccountInvoiceBase.jsx","components/shop/account/invoice/ShopAccountInvoice.jsx","components/shop/account/mailing_lists/queries.js","components/shop/account/mailing_lists/ShopAccountMailingListsBase.jsx","components/shop/account/mailing_lists/ShopAccountMailingListCard.jsx","components/shop/account/mailing_lists/ShopAccountMailingLists.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/account/subscriptions/credits/queries.js","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCreditsBase.jsx","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_error_codes","USER_NOT_LOGGED_IN","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_QUOTES_EDIT_RETURN","FINANCE_QUOTES_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_ACCOUNT_PROFILE_RETURN","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_INSTRUCTOR","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_ENROLLMENT_RETURN","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_ACCOUNT_PROFILE_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_INSTRUCTOR","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","payload","exp","origIat","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","logout","expired","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","UPDATE_ORGANIZATION","withTranslation","t","urlLogo","children","className","Row","src","alt","autoClose","transition","Slide","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","getNavBarItems","loading","error","data","shopFeatures","systemFeatureShop","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","subscriptions","classpasses","classes","events","refreshTokenExp","getItem","accountTitle","accountLink","Date","now","match","history","useQuery","organization","useContext","headerImageUrl","imageURL","urlLogoShopHeader","getHeaderImageUrl","Wrapper","headerProps","href","navItems","Item","type","user","instructor","employee","outline","size","color","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","target","rel","getFullYear","nav","Col","auto","checkoutProgress","color_order","color_payment","color_complete","List","addOn","name","returnUrl","title","subTitle","pageHeaderOptions","Header","md","Body","capitalize","word","lower","toLowerCase","charAt","toUpperCase","slice","get_list_query_variables","orderBy","organizationClasstype","organizationLevel","organizationLocation","queryVars","dateFrom","dateUntil","represent_instructor","role","badge","Fragment","represent_class_status","status","get_class_messages","description","holiday","holidayName","GET_USER","get_all_permissions","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","hideLoading","check_permission","GET_USER_PROFILE","GET_BACKEND_ANNOUNCEMENTS_QUERY","avatarURL","urlImageThumbnailSmall","accountDropdown","firstName","lastName","options","isDivider","timeFormat","timeFormatMoment","loadingUser","errorUser","dataUser","skip","variables","accountId","moment","format","fetchPolicy","announcements","organizationAnnouncements","length","upcomingClasses","i","scheduleClasses","cards","deck","map","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","content","v4","date","scheduleItemId","frequencyType","organizationLocationRoom","timeStart","timeEnd","spaces","countAttendingAndBooked","xs","sm","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","addEventListener","removeEventListener","cardTitle","headerContent","isLoadingMore","cardTabs","hasCardBody","Title","Footer","onClick","Component","defaultProps","f","GET_TASK_RESULT_QUERY","showNewTask","dateTimeFormatMoment","taskName","pollInterval","fetchMore","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","ColHeader","dateDone","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","Group","label","autoComplete","component","disabled","ADD_TASK","useMutation","addTask","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","FinanceHome","linkTitleView","lg","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","buttonText","showBack","useState","archived","setArchived","refetch","archiveCostcenter","headerOptions","Options","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","parseInt","updateCostcenter","initialData","financeCostcenter","url","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","refreshToken","dataurl","createElement","appendChild","click","removeChild","download","protectedMediaUrl","RootComponent","GET_EXPENSES_QUERY","GET_EXPENSE_QUERY","GET_INPUT_VALUES_QUERY","CREATE_FINANCE_EXPENSE","UPDATE_FINANCE_EXPENSE","DELETE_FINANCE_EXPENSE","confirm_delete","msgConfirm","msgDescription","msgSuccess","deleteFunction","functionVariables","confirmAlert","customUI","onClose","expenses","showColRelation","dateFormat","deleteFinanceExpense","summary","supplier","amountDisplay","taxDisplay","financeGlaccount","urlProtectedDocument","expenseNumber","location","financeExpenses","dateToLocalISO","dateToLocalISOTime","getHours","getMinutes","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","getWeekdayNames","getMonthNamesShort","EXPENSE_SCHEMA","dateStart","amount","tax","financeTaxRate","customFileInputLabelStyle","whiteSpace","display","overflow","selected","onChange","onBlur","isClearable","placeholderText","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","inputData","setFieldTouched","setFieldValue","inputFileName","fileInputLabel","handleFileInputChange","businesses","financeGlaccounts","ref","style","createFinanceExpense","fileName","setFileName","useRef","event","files","inputVars","documentFileName","reader","FileReader","onload","reader_event","b64_enc_file","file","current","readAsDataURL","updateFinanceExpense","initialSupplier","initialGlaccount","initialCostcenter","financeExpense","doUpdate","EXPENSES_EXPORT_SCHEMA","dateEnd","startOf","setDateStart","endOf","setDateEnd","prepared","setPrepared","setExportUrl","isoDateStart","isoDateEnd","touched","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","glaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","undefined","getDefaultValue","defaultValue","key","updateLocalStorageAndRefetch","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","invoices","showBtnPDF","deleteFinanceInvoice","business","invoiceNumber","Small","trunc","account","fullName","dateSent","dateDue","totalDisplay","balanceDisplay","pathname","financeInvoices","INVOICES_EXPORT_SCHEMA","setStatus","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","e","quantity","price","financeTaxRates","percentage","rateType","Object","keys","updateInvoiceItem","setTouched","refetchInvoice","updateItem","updating","setUpdating","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","setTimeout","updateLineNumber","statusColor","provided","snapshot","innerRef","droppableProps","idx","draggableProps","dragHandleProps","placeholder","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","tinymceScriptSrc","textareaName","initialValue","terms","getContent","footer","submitForm","note","updateInvoice","initialTab","subtotalDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","address","phone","email","registration","taxRegistration","creditInvoiceId","Link","creditInvoiceNumber","relationCompany","relationCompanyRegistration","relationCompanyTaxRegistration","relationContactName","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","paymentAddUrl","payments","onlinePaymentId","cancelAndCreateCreditInvoice","export_url","payment_add_url","shopAccountInvoiceUrl","protocol","host","toggle","triggerContent","cancelAndCreateCreditFinanceInvoice","ml","pageTitle","Label","checked","customTo","initialBusiness","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","showEditBack","archiveInvoiceGroup","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","addInvoiceGroup","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","GET_INVOICE_PAYMENT_QUERY","ADD_FINANCE_INVOICE_PAYMENT","UPDATE_FINANCE_INVOICE_PAYMENT","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","relationName","onCompleted","addInvoicePayment","balance","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","orders","financeOrders","createdAt","batchType","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","msgEmptyList","deletePaymentBatch","financePaymentBatches","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","appSettings","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","create","category","financePaymentBatchCategories","batchCategoryType","category_type","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","order","financeOrder","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","updatePaymentMethod","FinanceQuoteStatus","GET_QUOTES_QUERY","GET_QUOTE_QUERY","UPDATE_QUOTE","DELETE_FINANCE_QUOTE","CREATE_QUOTE_ITEM","UPDATE_QUOTE_ITEM","DELETE_QUOTE_ITEM","quotes","deleteFinanceQuote","quoteNumber","dateExpire","financeQuotes","QUOTES_EXPORT_SCHEMA","addQuoteItem","financeQuote","deleteQuoteItem","updateQuoteItem","refetchQuote","updateQuote","GET_QUOTE_GROUPS_QUERY","GET_QUOTE_GROUP_QUERY","UPDATE_QUOTE_GROUP","ADD_QUOTE_GROUP","ARCHIVE_QUOTE_GROUP","archiveQuoteGroup","quoteGroups","financeQuoteGroups","expiresAfterDays","QUOTE_GROUP_SCHEMA","addQuoteGroup","FinanceQuoteGroupForm","updateQuoteGroup","financeQuoteGroup","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","TAX_SUMMARY_SCHEMA","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_INSIGHT_ACCOUNTS_INACTIVES","GET_INSIGHT_ACCOUNTS_INACTIVE","ADD_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS","deleteInsightAccountsInactive","insightAccountInactives","noActivityAfterDate","countInactiveAccounts","countDeletedInactiveAccounts","created_at","addInsightAccountsInactive","subtract","deleteFunctionVariables","buttonClass","buttonTextColor","pageHeaderButtonList","deleteAccounts","insightAccountInactive","accounts","Alert","lastLogin","GET_INSIGHT_CLASSPASSES_QUERY","previousYear","currentYear","nextYear","export_url_active","export_url_sold","monthNames","chartData","insightAccountClasspasses","months","item","monthName","ResponsiveContainer","width","aspect","AreaChart","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Area","stroke","colors","fillOpacity","fill","GET_REVENUE_QUERY","BarChart","Bar","stackId","insightRevenueTotal","insightRevenueSubscriptions","insightRevenueClasspasses","insightRevenueEventTickets","insightRevenueOther","INSIGHT_INSTRUCTOR_CLASSES_SCHEMA","GET_INSTRUCTORS_QUERY","GET_INSTRUCTORS_CLASSES_MONTH_CLASSES","instructors","useLazyQuery","getInstructoClassesInMonth","calledReport","called","loadingReport","errorReport","dataReport","insightInstructorClassesMonth","GET_INSIGHT_SUBSCRIPTIONS_QUERY","export_url_stopped","insightAccountSubscriptions","LineChart","CartesianGrid","strokeDasharray","Line","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","accountClasspasses","organizationClasspass","organizationSubscription","OrganizationHome","ORGANIZATION_SCHEMA","updateOrganization","formTitle","colorBackground","colorText","colorAccent","colorSecondary","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoSelfCheckin","brandingColorBackground","brandingColorText","brandingColorAccent","brandingColorSecondary","updateField","update_field","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","announcementId","updateAnnouncement","organizationAnnouncement","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","organizationClasspasses","trialPass","unlimited","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","updateClasspass","initialTaxRate","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","classtypes","organizationClasstypes","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","organizationDocuments","ISODateString","urlDocument","addDocument","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday_locations","locationId","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","archiveLocation","LOCATION_SCHEMA","addLocation","updateLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","updateLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","levels","organizationLevels","LEVEL_SCHEMA","addLevel","updateLevel","editUrl","GET_ORGANIZATION_PRODUCTS_QUERY","GET_ORGANIZATION_PRODUCT_QUERY","ADD_ORGANIZATION_PRODUCT","UPDATE_ORGANIZATION_PRODUCT","ARCHIVE_ORGANIZATION_PRODUCT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveProduct","products","organizationProducts","PRODUCT_SCHEMA","addOrganizationProduct","updateOrganizationProduct","organizationProduct","updateProduct","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","shifts","organizationShifts","SHIFT_SCHEMA","addShift","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","createSubscription","organizationMembership","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteSubscriptionPrice","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","InputSearch","inputValue","createRef","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","setState","onKeyUp","onInputKeyUp","bind","onInputChange","onClear","isActive","customer","search","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","setIsLoadingMore","onError","updateAccountActive","deleteAccount","subscriptionsLatest","subscription","classpassesLatest","classpass","classesRemainingDisplay","inline","placement","mobile","first_name","last_name","ACCOUNT_SCHEMA","addAccount","createAccount","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","invoiceToBusiness","keyNumber","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","avatarSize","activeLink","transparent","GroupItem","back","account_id","headerTitle","updateAccount","gender","input_vars","updateImage","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","accountBankAccount","accountBankAccounts","mandates","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE","deleteScheduleItemAttendance","scheduleItem","scheduleItemAttendances","bookingStatus","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","GET_ACCOUNT_ENROLLMENTS_QUERY","getAccountsQueryVariables","getEnrollmentsListQueryVariables","showEnded","dateEnd_Isnull","deleteScheduleItemEnrollment","accountSubscription","weekdayNames","scheduleItemEnrollments","frequencyInterval","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","menuActiveLink","updateScheduleClassEnrollment","scheduleItemEnrollment","GET_ACCOUNT","isPublic","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","get_classes_query_variables","searchDate","btnAction","localStorateKeySearchValue","btnDisableClassesIds","btnDisabledMessage","selectedDate","setSelectedDate","renderActionButton","scheduleClassId","Search","account2","role2","passwordNew","updateAccountPassword","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","deleteAccountDocument","accountDocuments","addAccountDocument","DOCUMENT_SCHEMA","accountDocument","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","createInvoice","firstInvoiceGroup","createFinanceInvoice","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","setNoteType","deleteAccountNote","notes","accountNotes","injury","noteBy","addNote","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrderDelete","GET_ACCOUNT_PRODUCTS_QUERY","CREATE_ACCOUNT_PRODUCT","DELETE_ACCOUNT_PRODUCT","deleteAccountProduct","accountProducts","invoiceItems","subtitle","imgUrl","imgAlt","buttonOnClick","classname","buttonTextAdd","createAccountProduct","urlImageThumbnailLarge","GET_ACCOUNT_QUOTES_QUERY","CREATE_ACCOUNT_QUOTE","createQuote","quoteToBusiness","firstQuoteGroup","createFinanceQuote","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","accountSubscriptions","table","creditTotal","registrationFeePaid","createAccountSubscription","tabs","class_tabs_position","activeTab","credits","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","deleteAccountSubscriptionAltPrice","query_vars","accountSubscriptionAltPrices","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","reconciled","expiration","scheduleItemAttendance","ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA","ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA","addSubscriptionCredit","updateSubscriptionCredit","accountSubscriptionCredit","AccountSubscriptionEditCreditEditForm","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","financeInvoiceId","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","appointments","education","bio","urlBio","updateAccountInstructorProfile","accountInstructorProfiles","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","vip","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","business_id","titleB2B","emailContact","emailBilling","phone2","CREATE_B2B_INVOICE","ScheduleHome","onClickPrevious","onClickNext","onClickCurrent","showCurrent","selectClass","setLocation","classtype","setClasstype","setInstructor","level","setLevel","tooltip","nextWeekFrom","nextWeekUntil","currentWeekFrom","currentWeekUntil","DELETE_SCHEDULE_CLASS","deleteScheduleClass","ItemDivider","badgeType","CLASS_SCHEMA","walkInSpaces","enrollmentSpaces","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","infoMailEnabled","infoMailContent","createScheduleClass","classId","UPDATE_CLASS","defaultCard","class_id","represent_instructor_role","initialTimeStart","locationRoom","starttime","weekdayName","isoWeekday","class_edit_all_subtitle","updateScheduleClass","menu_activeLink","initialLevelID","initialTimeEnd","setShowCurrent","ButtonAddEnrollment","enrollments","countEnrollments","queryEnrollmentsData","setSearchName","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","allowed","scheduleClassEnrollmentOptions","shopBook","attend","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","awaitRefetchQueries","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","addScheduleClassInstructor","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","confirm_action","actionFunction","actionFunctionVariables","buttonIcon","checkedInIds","classStatus","showSearchResults","setShowSearchResults","class_date","getAccounts","queryAccountsData","includes","classDate","attendance_active","attendancechart_active","edit_active","pageSubTitle","previousWeek","class_subtitle","scheduleClass","setAttendanceStatus","updateAttendance","setAttendanceRefetching","attendanceRefetching","resendInfoMail","countAttending","countBooked","ButtonConfirm","GET_CLASS_ATTENDANCE_COUNT_YEAR","insightClassAttendanceCountYear","weeks","weekName","week","interval","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","blocked","paused","creditsOnDate","priceDropin","locationID","priceTrial","listType","scheduleClassBookingOptions","prices","scheduleItemPrices","organizationClasspassDropin","organizationClasspassTrial","hasReachedTrialLimit","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","addScheduleClassPrice","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","DUPLICATE_SCHEDULE_EVENT","archiveScheduleEvent","duplicateScheduleEvent","cardHeaderContent","scheduleEvents","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","eventId","event_id","ScheduleEventEditMenu","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","scheduleItems","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","scheduleItemType","loadingActivity","errorActivity","dataActivity","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","updateMedia","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY","ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","deleteScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscounts","SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA","scheduleEventSubscriptionGroupDiscountId","updateScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscount","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","deletable","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","initialFinanceTaxRate","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","a","represent_shift_status","shift","setShift","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","scheduleShifts","createScheduleShift","shiftId","shift_id","shift_edit_all_subtitle","updateScheduleShift","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","ButtonAdd","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","addScheduleShiftAccount","updateScheduleShiftAccount","setRefetchingAttendance","showSearch","setShowSearch","refetchingAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","setting","loadingVersion","errorVersion","dataVersion","loadingPatch","errorPatch","dataPatch","patch","systemSettings","finance_bank_accounts_iban","updateSettings","iban","settings","toString","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","DATETIME_SCHEMA","system_hostname","queryVariables","hostname","mailchimp_api_key","mailchimp_server_prefix","loadingKey","errorKey","mcUser","mcApiKey","mollie_api_key","mollieApiKey","H4","GET_MAILCHIMP_LISTS_QUERY","GET_MAILCHIMP_LIST_QUERY","ADD_MAILCHIMP_LIST","UPDATE_MAILCHIMP_LIST","DELETE_MAILCHIMP_LIST","deleteMailChimpList","mailchimpLists","systemMailchimpLists","organizationmailchimpLists","mailchimpListId","MAILCHIMP_LIST_SCHEMA","frequency","addMailChimpList","SettingsMailMailChimpListForm","updateMailchimpList","systemMailchimpList","GET_NOTIFICATIONS_QUERY","CREATE_NOTIFICATION_ACCOUNT","DELETE_NOTIFICATION_ACCOUNT","notificationId","deleteNotificationAccount","systemNotification","notifications","systemNotifications","accountNode","SettingsMailNotificationButtonDeleteAccount","createNotificationAccount","placeholderSearch","btnDisableAccountIds","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","shop_account_profile_required_fields","SHOP_FEATURES_SCHEMA","memberships","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","DisplayClassInfo","classData","showTimeEnd","GET_ACCOUNT_CLASS_QUERY","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","cancellationPossible","uncancellationPossible","complete","QUERY_ACCOUNT_CLASSPASSES","ShopAccountClasspassesBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","QUERY_ACCOUNT_INVOICE","parseFloat","QUERY_SYSTEM_MAILCHIMP_LISTS","UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS","mailingList","btnLink","updateSubscriptionStatus","doUpdateSubscriptionStatus","subscribed","mailingLists","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","cancelFunction","cancelOrder","UPDATE_PROFILE","ACCOUNT_SCHEMA_MINIMAL","ACCOUNT_SCHEMA_CONTACT","updateProfile","profilePolicy","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","QUERY_ACCOUNT_SUBSCRIPTION_CREDITS","subscriptionCredits","xl","extensions","alreadyBooked","classType","class_info","bookingOpenOn","CREATE_ORDER","buttonBook","isBefore","notifyOnNetworkStatusChange","prevWeekFrom","prevWeekUntil","availableSpacesOnline","clear","media","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","Category","Price","totalPriceDisplay","AttributeList","AttributeItem","isEarlybirdPrice","isSubscriptionDiscountPrice","Button","tempTitle","userIsAuthenticated","tickets","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","GET_ORDER_QUERY","orderItems","attendanceDate","msgNextStep","buttonNext","total","hasCompleteEnoughProfile","createFinanceOrderPaymentLink","financeOrderPaymentLink","subHeader","contentText","paymentText","GET_ORGANIZATION_CLASSPASSES_QUERY","loadingClass","errorClass","dataClass","displayCheckoutInfo","unit","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","vars","messages","etFieldValue","esetFieldTouched","preventDefault","password","accountSignupEnabled","doTokenAuth","username","next","tokenAuth","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","SetCurrentUrlAsNext","PrivateRoute","rest","authTokenExpired","path","ContinueAsYouAre","render","LoginRequired","SessionExpired","tokenExp","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","exact","CookiePolicy","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceExpenses","FinanceExpenseAdd","FinanceExpenseEdit","FinanceExpensesExport","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceEditTo","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceQuotes","FinanceQuotesExport","FinanceQuoteEdit","FinanceQuoteEditTo","FinanceQuoteGroups","FinanceQuoteGroupAdd","FinanceQuoteGroupEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointmentCategoryEdit","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentEdit","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationAppointmentPriceEdit","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationProducts","OrganizationProductAdd","OrganizationProductEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","RelationsAccountEnrollments","RelationsAccountEnrollmentEdit","RelationsAccountEnrollmentFindClass","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountMembershipAdd","AccountMembershipEdit","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountProducts","AccountProductAdd","AccountQuotes","AccountQuoteAdd","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountTools","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","RelationsB2BInvoices","RelationsB2BInvoiceAdd","ScheduleAppointments","ScheduleAppointmentAdd","ScheduleAppointmentEditAll","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventSubscriptionGroupDiscounts","ScheduleEventSubscriptionGroupDiscountAdd","ScheduleEventSubscriptionGroupDiscountEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightInactiveAccounts","InsightInactiveAccountsAdd","InsightInactiveAccountsView","InsightClasspasses","InsightInstructorClassesMonth","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassUnCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountInvoice","ShopAccountMailingLists","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopAccountSubscriptionCredits","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMailChimp","SettingsIntegrationMollie","SettingsMailMailChimpLists","SettingsMailMailChimpListAdd","SettingsMailMailChimpListEdit","SettingsMailNotifications","SettingsMailNotificationsAddAccount","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopAccountProfile","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","csrftoken","errorLink","networkError","operation","forward","response","user_nog_logged_in_within_response_errors","forEach","CSEC","refreshTokenExpired","Observable","observer","client","mutate","mutation","subscriber","subscribe","reload","getCsrfToken","fetch","json","Cookies","get","httpLink","createHttpLink","uri","credentials","csrfMiddleware","ApolloLink","set","setContext","headers","ApolloClient","from","cache","InMemoryCache","typePolicies","Query","fields","relayStylePagination","App","ApolloProvider","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.d5832afe.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken {\n    refreshToken {\n      token\n      payload\n      refreshExpiresIn\n      refreshToken\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_error_codes = {\n    USER_NOT_LOGGED_IN: \"USER_NOT_LOGGED_IN\"\n}\n\nexport default cs_error_codes\n","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoicesEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_QUOTES_EDIT_RETURN: 'costasiella:financeQuotesEditReturn',\n    FINANCE_QUOTES_FILTER_STATUS: 'costasiella:financeQuotesFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_ACCOUNT_PROFILE_RETURN: 'costasiella:relationsAccountProfileReturn',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_INSTRUCTOR: 'costasiella:scheduleClassesFilterInstructor',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_ENROLLMENT_RETURN: 'costasiella:scheduleClassesEnrollmentReturn',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_ACCOUNT_PROFILE_NEXT: 'costasiella:ShopAccountProfileNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_INSTRUCTOR: 'costasiella:shopClassesFilterInstructor',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        // localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        // localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        // localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        // localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n      accountSignupEnabled\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n      brandingColorBackground\n      brandingColorText\n      brandingColorAccent\n      brandingColorSecondary\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION = gql`\nmutation UpdateOrganization($input: UpdateOrganizationInput!) {\n  updateOrganization(input: $input) {\n    organization {\n      id\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items: Array<navItem> = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                <Link to=\"/cookie_policy\">\n                  {t(\"cookie_policy.title\")}\n                </Link>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction CookiePolicyBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"cookie_policy.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicyBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card, \n} from \"tabler-react\";\nimport CookiePolicyBase from \"./CookiePolicyBase\"\n\n\nfunction CookiePolicy({ t, match, history }) {\n  return (\n    <CookiePolicyBase>\n      <Card>\n        <Card.Body>\n          {t(\"cookie_policy.policy_text\")}\n        </Card.Body>\n      </Card>\n    </CookiePolicyBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicy))\n","export function capitalize(word) {\n    const lower = word.toLowerCase();\n    return word.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport {\n  Badge,\n  Icon\n} from \"tabler-react\";\n\nimport StatusIcon from \"../../ui/StatusIcon\"\nimport { t } from \"i18next\";\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let instructor\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  instructor = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR)\n  if (instructor) {\n    queryVars.instructor = instructor\n  } else {\n    queryVars.instructor = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let badge\n\n  switch (role) {\n    case \"SUB\":\n      badge = <Badge color=\"primary\">{t(\"schedule.classes.instructor_roles.sub\")}</Badge>\n      break\n    case \"ASSISTANT\":\n      badge = <Badge color=\"success\">{t(\"schedule.classes.instructor_roles.assistant\")}</Badge>\n      break\n    case \"KARMA\":\n      badge = <Badge color=\"warning\">{t(\"schedule.classes.instructor_roles.karma\")}</Badge>\n      break\n    default:\n      break\n  }\n\n  return <React.Fragment><Icon name=\"user\"/> {name} {badge}</React.Fragment>\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELLED') {\n    return description\n  }\n}","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({t, permission, resource, children, hideLoading=false}) {\n  const {loading, error, data} = useQuery(GET_USER)\n\n  if (loading) {\n    if (!hideLoading) {\n      return <p>{t(\"general.loading_with_dots\")}</p>\n    } else {\n      return \"\"\n    }\n  } \n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default withTranslation()(HasPermissionWrapper)","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      profilePolicy\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $instructor: ID!\n  ) {\n    organizationAnnouncements(first: 100 displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n  }\n`\n\n\n// Example vars:\n// {\n//   \"dateFrom\": \"2022-08-17\",\n//   \"dateUntil\": \"2022-08-20\",\n//   \"orderBy\": \"starttime\",\n//   \"instructor\": \"QWNjb3VudE5vZGU6Mg==\",\n// }","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\ntype subNavItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +LinkComponent?: React.ElementType,\n|};\n\ntype navItem = {|\n  +value: string,\n  +to?: string,\n  +icon?: string,\n  +active?: boolean,\n  +LinkComponent?: React.ElementType,\n  +subItems?: Array<subNavItem>,\n  +useExact?: boolean,\n|};\n\n\nconst getNavBarItems = (t, user) => {\n  let items: Array<navItem> = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.home.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\nimport {\n  Badge,\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { capitalize } from \"../../../tools/string_tools\"\nimport { represent_class_status, get_class_messages } from '../../schedule/classes/tools'\nimport HasPermissionWrapper from '../../HasPermissionWrapper'\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      instructor: dataUser && dataUser.user ? dataUser.user.accountId : null,\n      dateFrom: moment().format('YYYY-MM-DD'),\n      dateUntil: moment().add(2, 'days').format('YYYY-MM-DD'),\n      orderBy: \"starttime\"\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading || loadingUser ) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error || errorUser ) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  console.log(data)\n  let upcomingClasses = false\n  for ( let i=0; i<data.scheduleClasses.length; i++ ) {\n    if (data.scheduleClasses[i]['classes'].length) {\n      upcomingClasses = true\n    }\n  }\n    \n\n  // Data\n  return (\n    <HomeHomeBase>\n      <h4>{t(\"organization.announcements.title\")}</h4>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n      \n      { upcomingClasses && <React.Fragment>\n        <h4>{t(\"organization.home.upcoming_classes.title\")}</h4>\n          { data.scheduleClasses.map(({ date, classes }) => (\n            !classes.length ? \"\" : <React.Fragment key={v4()}>\n              <h5>\n                {capitalize(moment(date).format(\"dddd\"))} {' '}\n                <small className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                </small>\n              </h5>\n              {classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  holiday,\n                  holidayName,\n                  description,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  spaces,\n                  countAttendingAndBooked }) => (\n                    <Card key={v4()}>\n                      <Card.Body>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                <h5>\n                                  {represent_class_status(status)}\n                                  <span className='mr-2'>\n                                  {/* Class type */}\n                                  {organizationClasstype.name} { ' ' }\n                                  {/* Start & end time */}\n                                  {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                  {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                  </span>\n                                  {organizationLevel && <small className=\"text-muted\">\n                                    {organizationLevel.name}\n                                  </small>}\n                                </h5>\n                              </Grid.Col>\n                            </Grid.Row>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                {/* Location */}\n                                <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                                <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                              </Grid.Col>\n                            </Grid.Row>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link className=\"float-right\" to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Button\n                                  size=\"sm\"\n                                  color=\"secondary\"\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Button>\n                              </Link>\n                            </HasPermissionWrapper>\n                          </Grid.Col>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <div className=\"mt-1\">\n                              {/* <BadgePublic className=\"mr-2\" isPublic={displayPublic} /> */}\n                              {(frequencyType === 'SPECIFIC') ? \n                                <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                                null } \n                              {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                                <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                                null } \n                              {(status === \"CANCELLED\") ? \n                                <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                                null } \n                                <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                            </div>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            {/* Attendance */}\n                            <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                          </Grid.Col>\n                        </Grid.Row>\n                      </Card.Body>\n                    </Card>\n                  )\n                )}\n            </React.Fragment >\n          ))}\n        </React.Fragment> \n      }  {/* End upcoming classes check */}\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Dimmer,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const isLoadingMore = this.props.isLoadingMore\n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(isLoadingMore) ? <Dimmer active={true} loader={true}>loading</Dimmer> :\n              (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Button \n                    link\n                    onClick={onLoadMore} \n                    >\n                    {t('general.load_more')}\n                  </Button>\n                : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true,\n  isLoadingMore: false\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.general.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financequote\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.quotes.title\")}</h5>\n                      {t(\"finance.quotes.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/quotes\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financeexpense\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.expenses.title\")}</h5>\n                      {t(\"finance.expenses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/expenses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.structure.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.taxes.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.batches.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { Link } from \"react-router-dom\"\n\nimport {\n  // Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonBack from '../../ui/ButtonBack';\nimport ButtonExport from '../../ui/ButtonExport';\n\n\nfunction FinanceExpensesBase ({ t, history, children, refetch, returnUrl }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {returnUrl && <ButtonBack returnUrl={returnUrl} />}\n              {/* <FinanceInvoicesFilter refetch={refetch}/> */}\n              <ButtonExport url=\"/finance/expenses/export\" className='mr-2' />\n              <ButtonAdd addUrl=\"/finance/expenses/add\" className='mr-2' />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesBase))","import { CSAuth } from './authentication';\nimport { toast } from 'react-toastify'\n\n// Create a link element and simulate a click. This prevents having to redirect creating a pop up that might be blocked.\nfunction download(dataurl) {\n  let link = document.createElement(\"a\");\n  link.href = dataurl\n  // Put the link in the DOM and click it\n  document.body.appendChild(link);\n  link.click();\n  // Cleanup the DOM\n  document.body.removeChild(link);\n}\n\nexport function refreshTokenAndOpenExportLinkInNewTab(t, doTokenRefresh, history, exportUrl) {  \n  doTokenRefresh()\n    .then(({data}) => {\n      console.log(data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n\n      // window.open(url, \"_blank\")\n      download(exportUrl);\n    }).catch((error) => {\n      console.log(error)\n      // history.push(\"/user/login\")\n      // Because safari doesn't deal with double clicks well, let the user refresh.\n      // If there is no valid session, the user will be redirected to the sign-in.\n      toast.error(t(\"general.error_try_refreshing\"), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    })\n}\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      {t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_EXPENSES_QUERY = gql`\n  query FinanceExpenses($after: String, $before: String) {\n    financeExpenses(first: 15, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          date\n          summary\n          description\n          amountDisplay\n          taxDisplay\n          totalDisplay\n          supplier {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n            code\n          }\n          financeCostcenter {\n            id\n            name\n            code\n          }\n          urlProtectedDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_EXPENSE_QUERY = gql`\n  query FinanceExpense($id: ID!) {\n    financeExpense(id:$id) {\n      id\n      date\n      summary\n      description\n      amount\n      tax\n      total\n      supplier {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n      document\n    }\n    businesses(first: 100, archived: false, supplier: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ExpenseInputValues {\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100, supplier: true, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    \n  }\n`\n\nexport const CREATE_FINANCE_EXPENSE = gql`\n  mutation CreateFinanceExpense($input: CreateFinanceExpenseInput!) {\n    createFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_EXPENSE = gql`\n  mutation UpdateFinanceExpense($input: UpdateFinanceExpenseInput!) {\n    updateFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_EXPENSE = gql`\n  mutation DeleteFinanceExpense($input: DeleteFinanceExpenseInput!) {\n    deleteFinanceExpense(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","\nimport React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FileProtectedDownloadTableButton from '../../ui/FileProtectedDownloadTableButton'\n// import { get_list_query_variables } from \"./tools\"\n// import FinanceExpensesStatus from \"../../ui/FinanceExpenseStatus\"\nimport { GET_EXPENSES_QUERY, DELETE_FINANCE_EXPENSE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceExpensesList({t, history, match, expenses, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ deleteFinanceExpense ] = useMutation(DELETE_FINANCE_EXPENSE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.summary')} & {t('general.description')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('general.supplier')}</Table.ColHeader>}\n            <Table.ColHeader>{t('general.amount')} & {t(\"general.tax\")}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {expenses.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                {moment(node.date).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {node.summary} <br />\n                <small className='text-muted'>{node.description}</small>\n              </Table.Col>\n              <Table.Col>\n                {node.supplier && node.supplier.name}\n              </Table.Col>\n              <Table.Col>\n                {node.amountDisplay} <br />\n                <small className=\"text-small\">{node.taxDisplay}</small>\n              </Table.Col>\n              <Table.Col>\n                {node.financeGlaccount && <span>\n                  {node.financeGlaccount.name} {node.financeGlaccount.code && <span>({node.financeGlaccount.code})</span>}\n                </span>}\n              </Table.Col>\n              <Table.Col>\n                {node.financeCostcenter && <span>\n                  {node.financeCostcenter.name} {node.financeCostcenter.code && <span>({node.financeCostcenter.code})</span>}\n                </span>}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                <Link to={\"/finance/expenses/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.expenses.delete_confirm_msg\"),\n                      msgDescription: <p>{node.expenseNumber}</p>,\n                      msgSuccess: t('finance.expenses.deleted'),\n                      deleteFunction: deleteFinanceExpense,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_EXPENSES_QUERY } \n                          // {query: GET_EXPENSES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesList))","\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceExpensesBase from \"./FinanceExpensesBase\"\nimport FinanceExpensesList from './FinanceExpensesList'\n\n// import { get_list_query_variables } from \"./tools\"\nimport { GET_EXPENSES_QUERY } from \"./queries\"\n\n\nfunction FinanceExpenses({ t, location, history }) {\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_EXPENSES_QUERY, {\n    // variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>{t('finance.expenses.error_loading')}</p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n\n  const expenses = data.financeExpenses\n\n  // Empty list\n  if (!expenses.edges.length) { return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>\n          {t('finance.expenses.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )}\n\n  return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.expenses.title')}\n        hasCardBody={false}\n        pageInfo={expenses.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: expenses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeExpenses.edges\n              const pageInfo = fetchMoreResult.financeExpenses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new expenses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeExpenses: {\n                      __typename: previousResult.financeExpenses.__typename,\n                      edges: [ ...previousResult.financeExpenses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceExpensesList \n          expenses={expenses} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceExpenses))","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n\nexport function getWeekdayNames(t) {\n    return [\n        t(\"datetime.isoweekdays.monday\"),\n        t(\"datetime.isoweekdays.tuesday\"),\n        t(\"datetime.isoweekdays.wednesday\"),\n        t(\"datetime.isoweekdays.thursday\"),\n        t(\"datetime.isoweekdays.friday\"),\n        t(\"datetime.isoweekdays.saturday\"),\n        t(\"datetime.isoweekdays.sunday\"),\n    ]\n}\n\nexport function getMonthNamesShort(t) {\n    return [\n        t(\"datetime.months.short_january\"),\n        t(\"datetime.months.short_february\"),\n        t(\"datetime.months.short_march\"),\n        t(\"datetime.months.short_april\"),\n        t(\"datetime.months.short_may\"),\n        t(\"datetime.months.short_june\"),\n        t(\"datetime.months.short_july\"),\n        t(\"datetime.months.short_august\"),\n        t(\"datetime.months.short_september\"),\n        t(\"datetime.months.short_october\"),\n        t(\"datetime.months.short_november\"),\n        t(\"datetime.months.short_decemer\"),\n      ]\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n  .required(t('yup.field_required')),\n  summary: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  tax: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})\n","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"  \nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\n\nfunction FinanceExpenseForm({ \n  t, \n  history, \n  errors, \n  values, \n  inputData,\n  isSubmitting, \n  setFieldTouched,\n  setFieldValue,\n  returnUrl, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f, \n}) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.date) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.date}\n                onChange={(date) => {\n                  setFieldValue(\"date\", date)\n                  setFieldTouched(\"date\", true)\n                }}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.summary')}>\n              <Field type=\"text\" \n                    name=\"summary\" \n                    className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.tax')}>\n                <Field type=\"text\" \n                    name=\"tax\" \n                    className={(errors.tax) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"tax\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.supplier')}>\n              <Field component=\"select\" \n                      name=\"supplier\" \n                      className={(errors.supplier) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"supplier\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpenseForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseAdd({t, match, history}) {\n  const cardTitle = t('finance.expenses.title_add')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createFinanceExpense] = useMutation(CREATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n  \n  const inputData = data\n\n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              createFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseAdd))\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_EXPENSE_QUERY, UPDATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.expenses.title_edit')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_EXPENSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateFinanceExpense ] = useMutation(UPDATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  const financeExpense = data.financeExpense\n\n  let initialSupplier\n  let initialGlaccount\n  let initialCostcenter\n\n  if ( financeExpense.supplier ) { \n    initialSupplier = financeExpense.supplier.id\n  }\n\n  if ( financeExpense.financeGlaccount ) { \n    initialGlaccount = financeExpense.financeGlaccount.id\n  }\n\n  if ( financeExpense.financeCostcenter ) { \n    initialCostcenter = financeExpense.financeCostcenter.id\n  }\n  \n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            // DatePicker doesn't like a string as an initial value\n            // This makes it a happy DatePicker :)\n            date: new Date(financeExpense.date),\n            summary: financeExpense.summary,\n            description: financeExpense.description,\n            amount: financeExpense.amount,\n            tax: financeExpense.tax,\n            supplier: initialSupplier,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: id,\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n            }\n\n            function doUpdate() {\n              updateFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n              inputVars.documentFileName = fileName\n              \n              doUpdate()              \n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              doUpdate()\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseEdit))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSES_EXPORT_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\n// import { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceExpensesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceExpensesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { EXPENSES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceExpensesExportForm from './FinanceExpensesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceExpensesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.expenses.export.title\")\n  const returnUrl = \"/finance/expenses\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd\n            }}\n            validationSchema={EXPENSES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/finance_expenses/excel/${isoDateStart}/${isoDateEnd}`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceExpensesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.expenses.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.expenses.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesExport))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: parseInt(values.code)\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: parseInt(initialData.code)\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceInvoicesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_INVOICES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n      <option value=\"OVERDUE\" key={v4()}>{t('finance.invoices.statuses.overdue')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceInvoicesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"OVERDUE\":\n        return <Badge color=\"danger\">{t('finance.invoices.status.OVERDUE')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      creditInvoiceId\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceInvoicesList({\n  t, \n  history, \n  match, \n  invoices, \n  showBtnPDF=false,\n  showColRelation=false,\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.invoices.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {invoices.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceInvoicesStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  {node.invoiceNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateDue).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.balanceDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                {(showBtnPDF) && <Button\n                  color=\"secondary\"\n                  icon=\"printer\"\n                  className=\"mr-2\"\n                  size=\"sm\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                  )}\n                >\n                  {t('general.pdf')} \n                </Button>}\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                      msgDescription: <p>{node.invoiceNumber}</p>,\n                      msgSuccess: t('finance.invoices.deleted'),\n                      deleteFunction: deleteFinanceInvoice,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesList from './FinanceInvoicesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_INVOICES_QUERY } from \"./queries\"\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.invoices.title')}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showBtnPDF={true}\n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, location, initialData}) {  \n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {(initialData.financeInvoice.creditInvoiceId) ?\n          <Alert type=\"warning\">\n            {t(\"finance.invoice.credit_invoice_for\")} { \" \" }\n            <Link to={`/finance/invoices/edit/${initialData.financeInvoice.creditInvoiceId}`}>\n              <Alert.Link>{initialData.financeInvoice.creditInvoiceNumber}</Alert.Link>\n            </Link>\n          </Alert>\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, financeInvoice }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/invoices/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeInvoice.relationCompany}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeInvoice.relationContactName}\n          </div>\n          <div>\n            {financeInvoice.relationAddress}\n          </div>\n          <div>\n            {financeInvoice.relationPostcode} {financeInvoice.relationCity}\n          </div>\n          <div>\n            {financeInvoice.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeInvoice.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeInvoice.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeInvoice.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeInvoice.account) && <Link to={`/relations/accounts/${financeInvoice.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeInvoice.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n      {(!inputData.financeInvoice.payments.edges.length) ?\n        <Card.Body>\n          <p>{t('finance.invoice.payments.empty_list')}</p>\n        </Card.Body> :\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.note) }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n  const shopAccountInvoiceUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/invoice/${id}`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n        <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.invoice.account_profile_link\")}</b></div>\n          {shopAccountInvoiceUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.invoice.account_profile_link_explanation\")}</small></div>\n        </Alert>\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo financeInvoice={data.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditToBase({t, match, history, children, invoiceNumber}) {\n  const pageTitle = t('finance.invoice.edit_to.title') + ' #' + invoiceNumber && invoiceNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceInvoiceEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.invoices.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.invoice_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              {(inputData.financeInvoice.account) &&\n                <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}: {inputData.financeInvoice.account.fullName}</option>\n              }\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.invoices.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToBase from \"./FinanceInvoiceEditToBase\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/invoices/edit/${id}`\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  // Loading\n  if (loading) return <FinanceInvoiceEditToBase>{t('general.loading_with_dots')}</FinanceInvoiceEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditToBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeInvoice.business) {\n    initialBusiness = data.financeInvoice.business.id\n  }\n\n  return (\n    <FinanceInvoiceEditToBase invoiceNumber={data.financeInvoice.invoiceNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeInvoice.customTo,\n            relationCompany: data.financeInvoice.relationCompany, \n            relationCompanyRegistration: data.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: data.financeInvoice.relationContactName, \n            relationAddress: data.financeInvoice.relationAddress, \n            relationPostcode: data.financeInvoice.relationPostcode, \n            relationCity: data.financeInvoice.relationCity, \n            relationCountry: data.financeInvoice.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id:id}},\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceEditToBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const ADD_FINANCE_INVOICE_PAYMENT = gql`\nmutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n  createFinanceInvoicePayment(input:$input) {\n    financeInvoicePayment {\n      id\n    } \n  }\n}\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { (inputData.financeInvoice.relationCompany) && <span>{inputData.financeInvoice.relationCompany}<br /></span> } \n                { (inputData.financeInvoice.relationName) && <span>{inputData.financeInvoice.relationName}<br /></span> } \n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { ADD_FINANCE_INVOICE_PAYMENT } from \"./queries\"\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          financeInvoice {\n            id\n            invoiceNumber\n          }\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  const orders = data.financeOrders\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      # {node.orderNumber} <br />\n                    </Link>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.financeInvoice) && \n                      <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                        {node.financeInvoice.invoiceNumber}\n                      </Link>}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: CostasiellaFinancePaymentBatchBatchTypeChoices!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: String!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.invoice\")}</Table.ColHeader>\n                  <Table.Col>\n                    {(order.financeInvoice && \n                      <Link to={`/finance/invoices/edit/${order.financeInvoice.id}`}>\n                        {order.financeInvoice.invoiceNumber}\n                      </Link>\n                    )}\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status !== \"DELIVERED\") ? \n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            :     \n            <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card>\n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_QUOTES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceQuotesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_QUOTES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_QUOTES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.quotes.status.ALL\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n      <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n      <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceQuotesFilter))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceQuotesFilter from \"./FinanceQuotesFilter\"\n\n\nfunction FinanceQuotesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceQuotesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/quotes/export\" className='mr-2' />\n              <Link to=\"/finance/quotes/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceQuoteStatus extends Component {\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.quotes.status.SENT')}</Badge>\n      case \"ACCEPTED\":\n        return <Badge color=\"success\">{t('finance.quotes.status.ACCEPTED')}</Badge>\n      case \"REJECTED\":\n        return <Badge color=\"danger\">{t('finance.quotes.status.REJECTED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.quotes.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.quotes.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_QUERY = gql`\n  query FinanceQuote($id: ID!, $before: String, $after: String) {\n    financeQuote(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      quoteNumber\n      dateSent\n      dateExpire\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE = gql`\n  mutation UpdateFinanceQuote($input: UpdateFinanceQuoteInput!) {\n    updateFinanceQuote(input: $input) {\n      financeQuote {\n        id\n        summary\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_QUOTE = gql`\n  mutation DeleteFinanceQuote($input: DeleteFinanceQuoteInput!) {\n    deleteFinanceQuote(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_QUOTE_ITEM = gql`\n  mutation CreateFinanceQuoteItem($input: CreateFinanceQuoteItemInput!) {\n    createFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_QUOTE_ITEM = gql`\n  mutation DeleteFinanceQuoteItem($input: DeleteFinanceQuoteItemInput!) {\n    deleteFinanceQuoteItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceQuoteStatus from \"../../ui/FinanceQuoteStatus\"\nimport { GET_QUOTES_QUERY, DELETE_FINANCE_QUOTE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceQuotesList({t, history, match, quotes, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ deleteFinanceQuote ] = useMutation(DELETE_FINANCE_QUOTE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.quotes.quote_number')} & {t('finance.quotes.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.quotes.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.quotes.date')} & {t('finance.quotes.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {quotes.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceQuoteStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  {node.quoteNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateExpire).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.quotes.delete_confirm_msg\"),\n                      msgDescription: <p>{node.quoteNumber}</p>,\n                      msgSuccess: t('finance.quotes.deleted'),\n                      deleteFunction: deleteFinanceQuote,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_QUOTES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceQuotesBase from \"./FinanceQuotesBase\"\nimport FinanceQuotesList from './FinanceQuotesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_QUOTES_QUERY } from \"./queries\"\n\n\nfunction FinanceQuotes({ t, location, history }) {\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>{t('finance.quotes.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n\n  const quotes = data.financeQuotes\n\n  // Empty list\n  if (!quotes.edges.length) { return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>\n          {t('finance.quotes.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )}\n\n  return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.quotes.title')}\n        hasCardBody={false}\n        pageInfo={quotes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: quotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new quotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList \n          quotes={quotes} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceQuotes))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceQuotesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n                <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n                <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.quotes.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceQuotesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { QUOTES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceQuotesExportForm from './FinanceQuotesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceQuotesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.quotes.export.title\")\n  const returnUrl = \"/finance/quotes\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={QUOTES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/quotes/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceQuotesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.quotes.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.quotes.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.quotes.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemAdd({t, match}) {\n  const [ addQuoteItem ] = useMutation(CREATE_QUOTE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addQuoteItem({ variables: {\n            input: {\n              financeQuote: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.quote.item_add')}\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_QUOTE_ITEM, GET_QUOTES_QUERY, GET_QUOTE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemDelete({t, match, node}) {\n  const [deleteQuoteItem] = useMutation(DELETE_QUOTE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.quotes.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.quotes.item_deleted'),\n            deleteFunction: deleteQuoteItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables() },\n                {query: GET_QUOTE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceQuoteItemDelete from './FinanceQuoteItemDelete'\n\n\nconst FinanceQuoteItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceQuoteItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteItemEditForm from './FinanceQuoteItemEditForm'\n\n\nfunction FinanceQuoteItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateQuoteItem] = useMutation(UPDATE_QUOTE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={QUOTE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateQuoteItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceQuoteItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceQuoteItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceQuoteItemAdd from \"./FinanceQuoteItemAdd\"\nimport { GET_QUOTE_QUERY } from '../queries'\n\nimport FinanceQuoteItemEdit from './FinanceQuoteItemEdit'\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceQuoteEditItems ({ t, history, match, refetchQuote, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_QUOTE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_QUOTE_QUERY, variables: { id: inputData.financeQuote.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.quote.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceQuoteItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"quote_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeQuote.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceQuoteItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditItems))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\nconst FinanceQuoteEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteEditTermsForm from \"./FinanceQuoteEditTermsForm\"\nimport FinanceQuoteEditFooterForm from \"./FinanceQuoteEditFooterForm\"\nimport FinanceQuoteEditNoteForm from \"./FinanceQuoteEditNoteForm\"\n\n\nfunction FinanceQuoteEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeQuote.terms, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeQuote.footer, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeQuote.note, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditAdditional))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditBalance = ({ t, history, financeQuote }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.totalDisplay}\n        </span>\n      </div><br />\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBalance))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceQuoteEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.quotes.quote_number')}>\n        <Field type=\"text\" \n                name=\"quoteNumber\" \n                className={(errors.quoteNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"quoteNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"quoteNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.expiration')}>\n        <CSDatePicker \n          className={(errors.dateExpire) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateExpire}\n          onChange={(date) => {\n            setFieldValue(\"dateExpire\", date)\n            setFieldTouched(\"dateExpire\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.quotes.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.quotes.status.SENT')}</option>\n          <option value=\"ACCEPTED\">{t('finance.quotes.status.ACCEPTED')}</option>\n          <option value=\"REJECTED\">{t('finance.quotes.status.REJECTED')}</option>\n          <option value=\"CANCELLED\">{t('finance.quotes.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptionsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditOptionsForm from \"./FinanceQuoteEditOptionsForm\"\n\n\nfunction FinanceQuoteEditOptions({t, match, initialData}) {\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeQuote.dateSent) {\n    dateSent = new Date(initialData.financeQuote.dateSent)\n  }\n  let dateExpire = null\n  if (initialData.financeQuote.dateExpire) {\n    dateExpire = new Date(initialData.financeQuote.dateExpire)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            quoteNumber: initialData.financeQuote.quoteNumber, \n            dateSent: dateSent,\n            dateExpire: dateExpire,\n            status: initialData.financeQuote.status,\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                quoteNumber: values.quoteNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateExpire: dateToLocalISO(values.dateExpire),\n                status: values.status,\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceQuoteEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditSummaryForm from \"./FinanceQuoteEditSummaryForm\"\n\n\nfunction FinanceQuoteEditSummary({t, history, match, location, initialData}) {  \n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeQuote.summary, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceQuoteEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditSummaryForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummary))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match, financeQuote }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/quotes/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeQuote.relationCompany}\n          </div>\n          <div>\n            {financeQuote.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeQuote.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeQuote.relationContactName}\n          </div>\n          <div>\n            {financeQuote.relationAddress}\n          </div>\n          <div>\n            {financeQuote.relationPostcode} {financeQuote.relationCity}\n          </div>\n          <div>\n            {financeQuote.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeQuote.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeQuote.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeQuote.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeQuote.account) && <Link to={`/relations/accounts/${financeQuote.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeQuote.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\n\nimport { GET_QUOTE_QUERY } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceQuoteEditBase from \"./FinanceQuoteEditBase\"\nimport FinanceQuoteEditItems from \"./FinanceQuoteEditItems\"\nimport FinanceQuoteEditAdditional from \"./FinanceQuoteEditAdditional\"\nimport FinanceQuoteEditBalance from \"./FinanceQuoteEditBalance\"\nimport FinanceQuoteEditOptions from \"./FinanceQuoteEditOptions\"\nimport FinanceQuoteEditOrganization from \"./FinanceQuoteEditOrganization\"\nimport FinanceQuoteEditSummary from \"./FinanceQuoteEditSummary\"\nimport FinanceQuoteEditTo from \"./FinanceQuoteEditTo\"\n\nfunction FinanceQuoteEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceQuoteEditBase>{t('general.loading_with_dots')}</FinanceQuoteEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditBase>{t('general.error_sad_smiley')}</FinanceQuoteEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/quotes\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_QUOTES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/quotes\"\n  }\n  const export_url = \"/d/export/quote/pdf/\" + id\n  // const shopAccountQuoteUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/quote/${id}`\n\n  return (\n    <FinanceQuoteEditBase>\n      <Page.Header title={t('finance.quote.title') + ' #' + data.financeQuote.quoteNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceQuoteEditSummary \n            initialData={data}\n          />\n          {/* Activate code below once quotes are in shop accounts */}\n        {/* <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.quote.account_profile_link\")}</b></div>\n          {shopAccountQuoteUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.quote.account_profile_link_explanation\")}</small></div>\n        </Alert> */}\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditTo financeQuote={data.financeQuote} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceQuoteEditBalance financeQuote={data.financeQuote} />\n          <FinanceQuoteEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceQuoteEditItems inputData={data} refetchQuote={refetch} />\n          <FinanceQuoteEditAdditional initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceQuoteEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditToBase({t, match, history, children, quoteNumber}) {\n  const pageTitle = t('finance.quote.edit_to.title') + ' #' + quoteNumber && quoteNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceQuoteEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.quotes.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.quote_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}: {inputData.financeQuote.account.fullName}</option>\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.quotes.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.quotes.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditToBase from \"./FinanceQuoteEditToBase\"\nimport FinanceQuoteEditToForm from \"./FinanceQuoteEditToForm\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/quotes/edit/${id}`\n  const { loading, error, data } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  // Loading\n  if (loading) return <FinanceQuoteEditToBase>{t('general.loading_with_dots')}</FinanceQuoteEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditToBase>{t('general.error_sad_smiley')}</FinanceQuoteEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeQuote.business) {\n    initialBusiness = data.financeQuote.business.id\n  }\n\n  return (\n    <FinanceQuoteEditToBase quoteNumber={data.financeQuote.quoteNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeQuote.customTo,\n            relationCompany: data.financeQuote.relationCompany, \n            relationCompanyRegistration: data.financeQuote.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeQuote.relationCompanyTaxRegistration, \n            relationContactName: data.financeQuote.relationContactName, \n            relationAddress: data.financeQuote.relationAddress, \n            relationPostcode: data.financeQuote.relationPostcode, \n            relationCity: data.financeQuote.relationCity, \n            relationCountry: data.financeQuote.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id:id}},\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.quote.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceQuoteEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteEditToBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTE_GROUPS_QUERY = gql`\n  query FinanceQuoteGroupsQuery($archived: Boolean!) {\n    financeQuoteGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          expiresAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_GROUP_QUERY = gql`\n  query FinanceQuoteGroup($id: ID!) {\n    financeQuoteGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      expiresAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_QUOTE_GROUP = gql`\nmutation UpdateFinanceQuoteGroup($input: UpdateFinanceQuoteGroupInput!) {\n  updateFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_QUOTE_GROUP = gql`\nmutation CreateFinanceQuoteGroup($input:CreateFinanceQuoteGroupInput!) {\n  createFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup{\n      id\n    }\n  }\n}\n`\n\nexport const ARCHIVE_QUOTE_GROUP = gql`\nmutation ArchiveFinanceQuoteGroup($input: ArchiveFinanceQuoteGroupInput!) {\n  archiveFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceQuoteGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/quotes/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/quotes\" className=\"mr-2\" />\n              }\n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financequotegroup\">\n                <ButtonAdd addUrl=\"/finance/quotes/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_QUOTE_GROUPS_QUERY, ARCHIVE_QUOTE_GROUP } from \"./queries\"\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase'\n\n\nfunction FinanceQuoteGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.quote_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveQuoteGroup ] = useMutation(ARCHIVE_QUOTE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  const quoteGroups = data.financeQuoteGroups\n\n  return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={t('finance.quote_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={quoteGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: quoteGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeQuoteGroups.edges\n                        const pageInfo = fetchMoreResult.financeQuoteGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new quoteGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeQuoteGroups: {\n                                __typename: previousResult.financeQuoteGroups.__typename,\n                                edges: [ ...previousResult.financeQuoteGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.expires_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {quoteGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.expiresAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.quote_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/quotes/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveQuoteGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    expiresAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.expires_after_days')}>\n            <Field type=\"text\" \n                    name=\"expiresAfterDays\" \n                    className={(errors.expiresAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"expiresAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, ADD_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\n\n\nfunction FinanceQuoteGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/quotes/groups\"\n  const [addQuoteGroup] = useMutation(ADD_QUOTE_GROUP)\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={t('finance.quote_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            expiresAfterDays: 30,\n            prefix: 'QUO',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addQuoteGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  expiresAfterDays: values.expiresAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceQuoteGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, GET_QUOTE_GROUP_QUERY, UPDATE_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\n\n\nfunction FinanceQuoteGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/quotes/groups\"\n  const cardTitle = t('finance.quote_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_QUOTE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateQuoteGroup ] = useMutation(UPDATE_QUOTE_GROUP)\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n                    \n  const initialData = data.financeQuoteGroup;\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            expiresAfterDays: initialData.expiresAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateQuoteGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: parseInt(values.nextId),\n                  expiresAfterDays: parseInt(values.expiresAfterDays),\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_SUMMARY_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { TAX_SUMMARY_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* <Link to=\"/finance/invoices/groups\" \n                    className='btn btn-outline-secondary btn-sm'>\n                <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n              </Link> */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                validationSchema={TAX_SUMMARY_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightclasspasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.classpasses.title\")}</h5>\n                      {t(\"insight.classpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightsubscriptions\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.subscriptions.title\")}</h5>\n                      {t(\"insight.subscriptions.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialpasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightrevenue\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.revenue.title\")}</h5>\n                      {t(\"insight.revenue.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightaccountsinactive\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.inactive_accounts.title\")}</h5>\n                      {t(\"insight.inactive_accounts.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/inactive_accounts\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightinstructorclassesmonth\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.instructor_classes_month.title\")}</h5>\n                      {t(\"insight.instructor_classes_month.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/instructor_classes_month\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction InsightInactiveAccountsBase({\n  t, \n  history, \n  match, \n  children, \n  showAdd=false, \n  showBack=false, \n  returnUrl=\"/insight/inactive_accounts\"}) \n{\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"insightaccountinactive\">\n                  <ButtonAdd addUrl={`/insight/inactive_accounts/add`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVES = gql`\n  query InsightAccountInactives {\n    insightAccountInactives(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          noActivityAfterDate \n          countInactiveAccounts\n          countDeletedInactiveAccounts\n          createdAt\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  query InsightAccountInactive($id: ID!) {\n    insightAccountInactive(id: $id) {\n      id\n      noActivityAfterDate\n      countInactiveAccounts\n      createdAt\n      accounts {\n        edges {\n          node {\n            account {\n              id\n              fullName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation CreateInsightAccountInactive($input: CreateInsightAccountInactiveInput!) {\n    createInsightAccountInactive(input: $input) {\n      insightAccountInactive {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation deleteInsightAccountInactive($input: DeleteInsightAccountInactiveInput!) {\n    deleteInsightAccountInactive(input: $input){\n      ok\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS = gql`\n  mutation deleteInsightAccountInactiveAccounts($input: DeleteInsightAccountInactiveAccountsInput!) {\n    deleteInsightAccountInactiveAccounts(input: $input){\n      ok\n    }\n  } \n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase'\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, DELETE_INSIGHT_ACCOUNTS_INACTIVE } from \"./queries\"\n\n\nfunction InsightInactiveAccounts({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const cardTitle = t(\"insight.inactive_accounts.title\")\n\n  const { loading, error, data, fetchMore } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVES)\n  const [deleteInsightAccountsInactive] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('insight.inactive_accounts.error_loading')}</p>\n      </ContentCard>\n      </InsightInactiveAccountsBase>\n  )\n\n  console.log(data)\n\n  const insightAccountInactives = data.insightAccountInactives\n  // Empty list\n  if (!insightAccountInactives.edges.length) { return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{t(\"insight.inactive_accounts.empty_list\")}</p>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )}\n\n  return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={insightAccountInactives.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: insightAccountInactives.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.insightAccountInactives.edges\n            const pageInfo = fetchMoreResult.insightAccountInactives.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  insightAccountInactives: {\n                    __typename: previousResult.insightAccountInactives.__typename,\n                    edges: [ ...previousResult.insightAccountInactives.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('insight.inactive_accounts.created_at')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.inactive_accounts.no_activity_after_date')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_deleted_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {insightAccountInactives.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.noActivityAfterDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.countInactiveAccounts}\n                </Table.Col>\n                <Table.Col>\n                  {node.countDeletedInactiveAccounts}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/insight/inactive_accounts/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('insight.inactive_accounts.btn_view_inactive_accounts')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"insight.inactive_accounts.delete_confirm_msg\"),\n                        msgDescription: <p>{moment(node.created_at).format(dateTimeFormatMoment)} { \" - \" } \n                          {moment(node.noActivityAfterDate).format(dateFormat)}</p>,\n                        msgSuccess: t('insight.inactive_accounts.deleted'),\n                        deleteFunction: deleteInsightAccountsInactive,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_INSIGHT_ACCOUNTS_INACTIVES } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccounts))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst InsightInactiveAccountsForm = ({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {console.log(values)}\n        <Form.Group label={t(\"insight.inactive_accounts.no_activity_after_date\")}>\n          <CSDatePicker \n            className={(errors.noActivityAfterDate) ? \"form-control is-invalid\" : \"form-control\"} \n            selected={values.noActivityAfterDate}\n            onChange={(date) => {\n              setFieldValue(\"noActivityAfterDate\", date)\n              setFieldTouched(\"noActivityAfterDate\", true)\n            }}\n            onBlur={() => setFieldTouched(\"noActivityAfterDate\", true)}\n          />\n          <ErrorMessage name=\"noActivityAfterDate\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, ADD_INSIGHT_ACCOUNTS_INACTIVE } from './queries'\n// import { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase';\nimport InsightInactiveAccountsForm from './InsightInactiveAccountsForm'\n\n\nfunction InsightInactiveAccountsAdd({ t, history }) {\n  const returnUrl = \"/insight/inactive_accounts\"\n  const [ addInsightAccountsInactive ] = useMutation(ADD_INSIGHT_ACCOUNTS_INACTIVE)\n\n  return (\n    <InsightInactiveAccountsBase showBack={true}>\n      <Card title={t('insight.inactive_accounts.title_add')}>\n        <Formik\n          initialValues={{ noActivityAfterDate: new Date(moment().subtract(1, \"year\")) }}\n          // validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInsightAccountsInactive({ variables: {\n                input: {\n                  noActivityAfterDate: dateToLocalISO(values.noActivityAfterDate), \n                }\n              }, refetchQueries: [\n                  {query: GET_INSIGHT_ACCOUNTS_INACTIVES}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('insight.inactive_accounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <InsightInactiveAccountsForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </InsightInactiveAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({\n  t, \n  match, \n  history, \n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  deleteFunction, \n  deleteFunctionVariables, \n  className=\"\",\n  buttonClass=\"btn-link\",\n  buttonText=\"\",\n  buttonTextColor=\"text-red\"\n}) {\n  return (\n    <button className={`icon btn ${buttonClass} btn-sm ${className}`}\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        <Icon prefix=\"fe\" name=\"trash-2\" /> {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\n\nfunction InsightInactiveAccountsViewBase({t, history, match, children, subTitle, pageHeaderButtonList}) {\n  const returnUrl = `/insight/inactive_accounts`\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.inactive_accounts.title\")} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsViewBase))","\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\"\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVE, DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS } from './queries'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ButtonDelete from '../../ui/ButtonDelete'\nimport InsightInactiveAccountsViewBase from './InsightInactiveAccountsViewBase'\n\n\nfunction InsightInactiveAccountsView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const id = match.params.id\n\n  const { loading, error, data } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVE, {\n    variables: { id: id },\n    pollInterval: 5000\n  })\n  const [deleteAccounts] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsViewBase>\n      <Card title={t(\"insight.inactive_accounts.card_title\")}>\n        <Card.Body>\n          <Dimmer active={true} loader={true}/>\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsViewBase>\n      <p>{t('insight.inactive_accounts.error_loading')}</p>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  const insightAccountInactive = data.insightAccountInactive\n  console.log(insightAccountInactive)\n  const cardTitle = t(\"insight.inactive_accounts.card_title\") + \" \" + moment(insightAccountInactive.noActivityAfterDate).format(dateFormat)\n  const subTitle = t(\"general.generated on\") + \" \" + moment(insightAccountInactive.createdAt).format(dateTimeFormatMoment)\n\n  const pageHeaderButtonList = <ButtonDelete\n    msgConfirm={t(\"insight.inactive_accounts.accounts.delete_confirm_msg\")}\n    msgDescription={<p><b>{insightAccountInactive.countInactiveAccounts} {t(\"insight.inactive_accounts.accounts.count_will_be_deleted\")}</b></p>} \n    msgSuccess={t(\"insight.inactive_accounts.accounts.deleted\")}\n    deleteFunction={deleteAccounts} \n    deleteFunctionVariables={{\n      variables: {input: {id: id}}\n    }}\n    buttonClass=\"btn-danger ml-2\"\n    buttonText=\"Delete accounts\" \n    buttonTextColor=\"text-white\"\n  />\n\n  if (!insightAccountInactive.accounts.edges.length) return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"insight.inactive_accounts.accounts.empty_list\")}\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={cardTitle}>\n            <Card.Alert color=\"primary\">\n              {t(\"insight.inactive_accounts.explanation_when_inactive\")}\n            </Card.Alert>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.name\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.email\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.last_login\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.created_at\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {insightAccountInactive.accounts.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>\n                        {\n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.account.email}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.lastLogin).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.createdAt).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </InsightInactiveAccountsViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsView))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_CLASSPASSES_QUERY = gql`\nquery InsightAccountClasspasses($year: Int!) {\n  insightAccountClasspasses(year: $year) {\n    year\n    months {\n      month\n      sold\n      active\n    }\n  }\n}\n`\n","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n\n                    console.log(currentYear)\n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts'\n\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_CLASSPASSES_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR))\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_CLASSPASSES_QUERY, {\n    variables: { year: year },\n  })\n\n  if (loading) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          <Dimmer active={true} loader={true} />\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          {t(\"general.error_sad_smiley\")}\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountClasspasses.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <InsightClasspassesBase year={year} refetch={refetch}>\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <AreaChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"blue\"]} fillOpacity={0.4} fill={colors[\"blue\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"green\"]} fillOpacity={0.1} fill={colors[\"green\"]} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n    </InsightClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueClasspasses(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueSubscriptions(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueEventTickets(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueOther(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n            {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { getMonthNamesShort } from '../../../tools/date_tools'\n\n\nfunction InsightRevenueDisplay({ \n  t, \n  history, \n  error, \n  loading, \n  cardTitle,\n  data\n }) {\n\n  if (loading) {\n    return (\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <Card.Body>\n              <Dimmer loader={true} active={true} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n        </Grid.Col>\n      </Grid.Row>\n    )\n  }\n\n  if (error) {\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </Grid.Col>\n    </Grid.Row>\n  }\n\n\n\n  const monthNames = getMonthNamesShort(t)\n  // Add month name to data\n  const chartData = data.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <ResponsiveContainer width=\"100%\" aspect={2.6}>\n            <BarChart\n              width={500}\n              height={300}\n              data={chartData}\n              margin={{\n                top: 10,\n                right: 20,\n                left: 0,\n                bottom: 10,\n              }}\n            >\n              <XAxis dataKey=\"monthName\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total\" fill={colors['blue']} />\n              <Bar dataKey=\"subtotal\" stackId=\"a\" fill={colors['green']} />\n              <Bar dataKey=\"tax\" stackId=\"a\" fill={colors['orange']} />\n            </BarChart>\n          </ResponsiveContainer>\n          <Card.Footer>\n            {t(\"insight.revenue.total.explanation\")}\n          </Card.Footer>\n        </Card>\n      </Grid.Col>\n      <Grid.Col md={3}>\n        <Card title={t(\"general.data\")}>\n          <small>\n          <Table cards>\n            <Table.Body>\n              {data.months.map((item, index) => (\n                <Table.Row>\n                  <Table.Col className=\"cs-insight-data-table-cell\">\n                    {monthNames[index]}\n                  </Table.Col>\n                  <Table.Col className=\"cs-insight-data-table-cell text-right\">\n                    {item['totalDisplay']}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </small>\n        </Card>\n        {/* Export as sold as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_sold\n          )}\n        >\n          {t(\"insight.classpasses.sold.export_excel\")}\n        </Button> */}\n        {/* Export as active as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_active\n          )}\n        >\n          {t(\"insight.classpasses.active.export_excel\")}\n        </Button> */}\n      </Grid.Col>\n    </Grid.Row>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueDisplay))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\nimport InsightRevenueDisplay from './InsightRevenueDisplay'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR))\n\n  const { loading, error, data, refetch } = useQuery(GET_REVENUE_QUERY, {\n    variables: { year: year }\n  })\n\n  return (\n    <InsightRevenueBase year={year} refetch={refetch}>\n      {/* Total */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.total\")}\n        data={data && data.insightRevenueTotal}\n      />\n      {/* Subscriptions */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.subscriptions\")}\n        data={data && data.insightRevenueSubscriptions}\n      />\n      {/* Classpasses */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.classpasses\")}\n        data={data && data.insightRevenueClasspasses}\n      />\n      {/* Event tickets */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.event_tickets\")}\n        data={data && data.insightRevenueEventTickets}\n      />\n      {/* Other */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.other\")}\n        data={data && data.insightRevenueOther}\n      />\n    </InsightRevenueBase> \n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INSIGHT_INSTRUCTOR_CLASSES_SCHEMA = Yup.object().shape({\n    year: Yup.number()\n      .required(t('yup.field_required')),\n    month: Yup.number()\n      .required(t('yup.field_required')),\n    instructor: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INSTRUCTORS_QUERY = gql`\nquery Instructors {\n    instructors(first: 1000) {\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n}\n`\n\nexport const GET_INSTRUCTORS_CLASSES_MONTH_CLASSES = gql`\nquery InsightInstructorClassesMonth($year:Int!, $month:Int!, $instructor: ID!) {\n  insightInstructorClassesMonth(year: $year, month:$month, instructor: $instructor) {\n    year\n    month\n    instructor\n    classes {\n      scheduleItemId,\n      frequencyType,\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      date\n    \ttimeStart\n      status\n      description\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\"\n\nimport SiteWrapper from '../../SiteWrapper'\nimport InsightBackHome from '../InsightBackHome'\n\n\nfunction InsightInstructorClassesMonthBase({t, history, children}) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonthBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst InsightInstructorClassesForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.year')}>\n              <Field type=\"number\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.month')}>\n              <Field component=\"select\" \n                    name=\"month\" \n                    className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"\n              >\n                <option value=\"1\" key={v4()}>{t(\"datetime.months.january\")}</option>\n                <option value=\"2\" key={v4()}>{t(\"datetime.months.february\")}</option>\n                <option value=\"3\" key={v4()}>{t(\"datetime.months.march\")}</option>\n                <option value=\"4\" key={v4()}>{t(\"datetime.months.april\")}</option>\n                <option value=\"5\" key={v4()}>{t(\"datetime.months.may\")}</option>\n                <option value=\"6\" key={v4()}>{t(\"datetime.months.june\")}</option>\n                <option value=\"7\" key={v4()}>{t(\"datetime.months.july\")}</option>\n                <option value=\"8\" key={v4()}>{t(\"datetime.months.august\")}</option>\n                <option value=\"9\" key={v4()}>{t(\"datetime.months.september\")}</option>\n                <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n                <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n                <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n              </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                    name=\"instructor\" \n                    className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.instructors.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n            >\n              {t('insight.instructor_classes_month.find_classes')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(InsightInstructorClassesForm))","import React, { useContext } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { represent_class_status } from '../../schedule/classes/tools'\n\nimport { INSIGHT_INSTRUCTOR_CLASSES_SCHEMA } from './yupSchema'\nimport { GET_INSTRUCTORS_QUERY, GET_INSTRUCTORS_CLASSES_MONTH_CLASSES } from './queries'\nimport InsightInstructorClassesMonthBase from './InsightInstructorClassesMonthBase'\nimport InsightInstructorClassesForm from './InsightInstructorClassesForm';\n\n\nfunction InsightInstructorClassesMonth({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  // const [prepared, setPrepared] = useState(false)\n  const cardTitle = t(\"insight.instructor_classes_month.title\")\n\n  const { loading, error, data } = useQuery(GET_INSTRUCTORS_QUERY)\n  const [ getInstructoClassesInMonth, { \n    called: calledReport, \n    loading: loadingReport, \n    error: errorReport, \n    data: dataReport, \n  } ] = useLazyQuery( GET_INSTRUCTORS_CLASSES_MONTH_CLASSES )\n\n  if (loading) {\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  if (error || errorReport) {\n    console.error(error)\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  return (\n    <InsightInstructorClassesMonthBase>\n      <Card title={cardTitle}>\n        <Formik\n        initialValues={{ \n          year: moment().year(),\n          month: moment().month()+1,\n          instructor: \"\"\n        }}\n        validationSchema={INSIGHT_INSTRUCTOR_CLASSES_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            // execute lazy query to fetch classes for instructor\n            getInstructoClassesInMonth({\n              variables: { \n                year: parseInt(values.year),\n                month: parseInt(values.month),\n                instructor: values.instructor\n              }\n            })\n\n            setSubmitting(false)\n            // setPrepared(true)  \n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n          <InsightInstructorClassesForm\n            inputData={data}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n          )\n        }\n      </Formik>\n    </Card>\n\n    {/* Show loader */}\n    {(calledReport && loadingReport) ? <Card>\n      <Card.Body>\n        <Dimmer active={true} loader={true} /><br />\n        <div className=\"text-center\">\n          Loading...\n        </div>\n      </Card.Body>\n      </Card> : \"\"}\n    {/* Prepared & loaded lazy query */}\n    {(calledReport && dataReport) ? \n    // List instructor classes in this card\n      <Card title={t(\"\")}>\n        {console.log(dataReport)}\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {dataReport.insightInstructorClassesMonth.classes.map(({ \n              description,\n              date,\n              timeStart,\n              organizationClasstype,\n              organizationLocationRoom,\n              status\n             }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {represent_class_status(status)} {\" \"}\n                  {moment(date).format(dateFormat)} - {moment(`${date} ${timeStart}`).format(timeFormat)} <br />\n                  <small className=\"text-muted\">\n                    {description}\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {organizationClasstype.name}\n                </Table.Col>\n                <Table.Col>\n                  {organizationLocationRoom.organizationLocation.name} - {organizationLocationRoom.name}\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card>\n      : \"\"}\n    </InsightInstructorClassesMonthBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonth))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_SUBSCRIPTIONS_QUERY = gql`\n  query InsightAccountSubscriptions($year: Int!) {\n    insightAccountSubscriptions(year: $year) {\n      year\n      months {\n        month\n        sold\n        stopped\n        active\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Page,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetch=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { CartesianGrid, XAxis, YAxis, Legend, LineChart, Line, Tooltip, ResponsiveContainer } from 'recharts'\nimport moment from 'moment'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_SUBSCRIPTIONS_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\n\nfunction InsightSubscriptions ({ t, history }) {\n  const cardTitle = t('general.chart')\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR))\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n  const export_url_stopped = \"/d/export/insight/subscriptions/stopped/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  console.log(year)\n\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_SUBSCRIPTIONS_QUERY, {\n    variables: { year: year }\n  })\n\n  if (loading) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountSubscriptions.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetch={refetch}>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <LineChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                {/* <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} fillOpacity={0.4} fill={colors[\"green\"]} />\n                <Area type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} fillOpacity={0.4} fill={colors[\"red\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} fillOpacity={0.1} fill={colors[\"blue\"]} /> */}\n                <Line type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} />\n                <Line type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} />\n                <Line type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_stopped\n            )}\n          >\n            {t(\"insight.subscriptions.stopped.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </InsightSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card>\n        <Card.Body>\n          <Form.Group label={t('general.year')}>\n            <Field type=\"number\" \n                    name=\"year\" \n                    className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.month')}>\n            <Field component=\"select\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  // onChange={(e) => {\n                  //   handleChange(e)\n                  //   setFieldTouched(\"financeTaxRate\", true, true)\n                  // }}\n            >\n              <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n              <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n              <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n              <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n              <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n              <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n              <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n              <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n              <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n              <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n              <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n              <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n            </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('insight.trialpasses.set_month')}\n          </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Card,\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n  // Empty list\n  if (!accountClasspasses.edges.length) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t(\"insight.trialpasses.empty_list\")}</p>\n          </Card.Body>\n        </Card>\n      </InsightTrialpassesBase>\n    )\n  }\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.products.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationproduct\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.products.title\")}</h5>\n                      {t(\"organization.products.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/products\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.scheduling.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.accounts.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.about.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Card,\n    Form,\n    Grid,\n    Icon,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nfunction OrganizationBrandingEditColorsForm({ t, history, errors, formTitle, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Card.Alert color=\"info\">\n            <Icon name=\"info\" /> {t(\"organization.branding.colors_explanation\")}\n          </Card.Alert>\n        </Card.Body>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_background')}>\n                <Field type=\"color\" \n                      name=\"colorBackground\" \n                      className={(errors.colorBackground) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorBackground\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_text')}>\n                <Field type=\"color\" \n                      name=\"colorText\" \n                      className={(errors.colorText) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorText\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_accent')}>\n                <Field type=\"color\" \n                      name=\"colorAccent\" \n                      className={(errors.colorAccent) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorAccent\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>   \n              <Form.Group label={t('organization.branding.color_secondary')}>\n                <Field type=\"color\" \n                      name=\"colorSecondary\" \n                      className={(errors.colorSecondary) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorSecondary\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditColorsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditColorsForm from \"./OrganizationBrandingEditColorsForm\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n  const [ updateOrganization ] = useMutation(UPDATE_ORGANIZATION)\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n        {/* Colors */}\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <h3>{t('organization.branding.title_colors')}</h3>\n            <Formik\n              initialValues={{ \n                colorBackground: organization.brandingColorBackground, \n                colorText: organization.brandingColorText, \n                colorAccent: organization.brandingColorAccent, \n                colorSecondary: organization.brandingColorSecondary, \n              }}\n              // validationSchema={LEVEL_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  updateOrganization({ variables: {\n                    input: {\n                      id: id,\n                      brandingColorBackground: values.colorBackground,\n                      brandingColorText: values.colorText,\n                      brandingColorAccent: values.colorAccent,\n                      brandingColorSecondary: values.colorSecondary,\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORGANIZATION_QUERY, variables: {id: id }}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data);\n                      setSubmitting(false)\n                      toast.success((t('organization.branding.toast_save_colors_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors }) => (\n                <OrganizationBrandingEditColorsForm \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                />\n              )}\n            </Formik>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: parseInt(values.priority)\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: parseInt(values.priority)\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY, {\n    variables: { archived: archived },\n    fetchPolicy: \"network-only\"\n  })\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"displayPublic\" \n                      checked={values.displayPublic} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                </Form.Group>      \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                    <Form.Label className=\"custom-switch\">\n                        <Field \n                        className=\"custom-switch-input\"\n                        type=\"checkbox\" \n                        name=\"displayShop\" \n                        checked={values.displayShop} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                    </Form.Label>\n                    <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group> \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: CostasiellaOrganizationDocumentDocumentTypeChoices!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_PRODUCTS_QUERY = gql`\n  query OrganizationProducts($before:String, $after:String, $archived: Boolean) {\n    organizationProducts(first: 100, before:$before, after:$after, archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImage\n          urlImageThumbnailSmall\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_ORGANIZATION_PRODUCT_QUERY = gql`\n  query OrganizationProduct($id:ID!) {\n    organizationProduct(id: $id) {\n      id\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ORGANIZATION_PRODUCT = gql`\n  mutation CreateOrganizationProduct($input:CreateOrganizationProductInput!) {\n    createOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION_PRODUCT = gql`\n  mutation UpdateOrganizationProduct($input:UpdateOrganizationProductInput!) {\n    updateOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_ORGANIZATION_PRODUCT   = gql`\n  mutation ArchiveOrganizationProduct($input: ArchiveOrganizationProductInput!) {\n    archiveOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n        archived\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCTS_QUERY } from \"./queries\"\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction OrganizationProductArchive({t, match, history, node}) {\n  const [archiveProduct] = useMutation(ARCHIVE_ORGANIZATION_PRODUCT)\n  const refetchQueries = [\n    { query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: node.archived } },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"organization.products.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveProduct}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"organization.products.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveProduct}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(OrganizationProductArchive))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationProductsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/products\" />           \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationproduct\">\n                  <ButtonAdd addUrl=\"/organization/products/add\" />\n                </HasPermissionWrapper>    \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationProductsBase))","import React, { useState } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Avatar,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ButtonEdit from \"../../ui/ButtonEdit\"\nimport { GET_ORGANIZATION_PRODUCTS_QUERY  } from \"./queries\"\nimport OrganizationProductArchive from './OrganizationProductArchive'\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\n\n\nfunction OrganizationProducts({t, history}) {\n  const cardTitle = t('organization.products.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_ORGANIZATION_PRODUCTS_QUERY, { \n    variables: {archived: archived}\n  })\n\n  if (loading) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.products.error_loading')}</p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const products = data.organizationProducts\n  // Empty list\n  if (!products.edges.length) { return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.products.empty_list') : t(\"organization.products.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )}   \n\n  return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={products.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: products.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationProducts.edges\n                        const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationProducts: {\n                                __typename: previousResult.organizationProducts.__typename,\n                                edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {products.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name} <br />\n                    <small className=\"text-muted\">{node.description.trunc(46)}</small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <ButtonEdit editUrl={`/organization/products/edit/${node.id}`} />\n                    }\n                    <OrganizationProductArchive node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProducts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PRODUCT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    price: Yup.number(),\n    // sortOrder: Yup.number()\n    //   .min(0),\n    // minDuration: Yup.number()\n    //   .min(0),\n    // classes: Yup.number()\n    //   .min(0),\n    // subscriptionUnit: Yup.string(),\n    // creditValidity: Yup.number()\n    //   .min(0),\n    // reconciliationClasses: Yup.number()\n    //   .min(0),\n    // quickStatsAmount: Yup.number()\n    //   .min(0),\n    // termsAndConditions: Yup.string()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationProductForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  returnUrl,\n  initialData,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              {console.log(\"query data in classpass add:\")}\n              {console.log(initialData)}\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, ADD_ORGANIZATION_PRODUCT, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductAdd({ t, history, match }) {\n  const returnUrl = `/organization/products/`\n  const cardTitle = t(\"organization.products.add\")\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addOrganizationProduct] = useMutation(ADD_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n              imageFileName: fileName,\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n\n              addOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: {archived: false}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.products.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductAdd))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, UPDATE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCT_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\n// import ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductEdit({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/organization/products/`\n  // const activeLink = 'media'\n  const cardTitle = t(\"organization.products.edit\")\n\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_PRODUCT_QUERY, { \n    variables: { id: id }\n  })\n  const [ updateOrganizationProduct ] = useMutation(UPDATE_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  const organizationProduct = data.organizationProduct\n\n  // Initial finance tax rate\n  let initialTaxRate = \"\"\n  if ( organizationProduct.financeTaxRate ) {\n    initialTaxRate = organizationProduct.financeTaxRate.id\n  }\n  // Initial finance GLaccount\n  let initialGlaccount = \"\"\n  if ( organizationProduct.financeGlaccount ) {\n    initialGlaccount = organizationProduct.financeGlaccount.id\n  }\n  // Initial finance cost center\n  let initialCostcenter = \"\"\n  if ( organizationProduct.financeCostcenter ) {\n    initialCostcenter = organizationProduct.financeCostcenter.id\n  }\n\n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: organizationProduct.name,\n            description: organizationProduct.description,\n            price: organizationProduct.price,\n            financeTaxRate: initialTaxRate,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter,\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              id: id,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n            }\n  \n            function updateProduct() {\n              updateOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.products.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n              inputVars.imageFileName = fileName\n  \n              updateProduct()\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              // No file provided, update the data by calling updateProduct\n              updateProduct()\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditValidity\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditValidity\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived},\n    fetchPolicy: \"network-only\"\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_validity')}>\n                <Field type=\"text\" \n                      name=\"creditValidity\" \n                      className={(errors.creditValidity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditValidity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditValidity: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: parseInt(values.sortOrder),\n                    minDuration: parseInt(values.minDuration),\n                    classes: parseInt(values.classes),\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: parseInt(values.reconciliationClasses),\n                    creditValidity: parseInt(values.creditValidity),\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditValidity: initialData.organizationSubscription.creditValidity,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: parseInt(values.sortOrder),\n                  minDuration: parseInt(values.minDuration),\n                  classes: parseInt(values.classes),\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: parseInt(values.reconciliationClasses),\n                  creditValidity: parseInt(values.creditValidity),\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined,\n    orderBy: \"-createdAt\"\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  if (search) {\n    queryVars.orderBy = \"fullName\"\n  }\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\n\nimport { TOKEN_REFRESH } from '../../../queries/system/auth'\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  const exportUrl = `/d/export/relations/accounts/active`\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              {/* Export Active Accounts */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"ml-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('relations.btn_export_active_accounts')} \n              </Button>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean,\n  $orderBy: String!\n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee,\n    orderBy: $orderBy,\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        phone\n        mobile\n        isActive\n        urlImageThumbnailSmall\n        subscriptionsLatest {\n          organizationSubscription {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n        classpassesLatest {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemaining\n          classesRemainingDisplay\n          isExpired\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n      invoiceToBusiness {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  List,\n  SocialNetworksList,\n  Table,\n  Tooltip\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, location}) {\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    onError: console.log,\n    // These options would be nice to enable, but behave strangely with current caching\n    // notifyOnNetworkStatusChange: true\n    // fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n  let pageInfo = accounts.pageInfo\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        isLoadingMore={isLoadingMore}\n        onLoadMore={async () => {\n          setIsLoadingMore(true)\n          if (pageInfo.hasNextPage) {\n            await fetchMore({\n              variables: {\n                after: pageInfo.endCursor,\n              },\n            });\n          }\n          setIsLoadingMore(false)\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.contact')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptionsLatest) ? \n                      node.subscriptionsLatest.map((subscription) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpassesLatest) ? \n                      node.classpassesLatest.map((classpass) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col>\n                    <SocialNetworksList className=\"mb-0 mt-2\">\n                      {\n                        (node.phone) ? \n                          <List.Item inline>\n                            <Tooltip content={node.phone} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"phone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item>\n                        // No phone number found\n                        : \"\"\n                      }\n                      {\n                        (node.mobile) ?\n                          <List.Item inline>\n                            <Tooltip content={node.mobile} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"smartphone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item> \n                          // No mobile number found\n                          : \"\"\n                      }\n\n                      <List.Item inline>\n                        <Tooltip content={node.email} placement=\"top\">\n                          <a href={\"mailto:\" + node.email}>\n                            <Icon prefix=\"fe\" name=\"mail\" />\n                          </a>\n                        </Tooltip>\n                      </List.Item>\n                    </SocialNetworksList>\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.invoice_to_business')}>\n              <Field component=\"select\" \n                    name=\"invoiceToBusiness\" \n                    className={(errors.invoiceToBusiness) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"relations.accounts.invoice_to_account\")}</option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"invoiceToBusiness\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='lg' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemenrollment\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/enrollments\"}\n                icon=\"refresh-cw\"\n                active={activeLink === 'enrollments'}\n                >\n            {t('relations.account.enrollments.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountproduct\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/products\"}\n                icon=\"package\"\n                active={(activeLink === 'products')}\n                >\n            {t('relations.account.products.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financequote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/quotes\"}\n                icon=\"file\"\n                active={(activeLink === \"quotes\")}\n                >\n            {t('relations.account.quotes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"change\"\n            resource=\"account\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/tools\"}\n                icon=\"settings\"\n                active={(activeLink === 'tools')}\n                >\n            {t('relations.account.tools.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  returnUrl = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN)\n  if (!returnUrl) {\n    returnUrl = '/relations/accounts'\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  if (account.invoiceToBusiness) {\n    initialValues.invoiceToBusiness = account.invoiceToBusiness.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage,\n                  invoiceToBusiness: values.invoiceToBusiness\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    }\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId }\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n      countAttending\n      countBooked\n      spaces\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\nexport const RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation ResendClassInfoMail($input: ResendInfoMailScheduleItemAttendanceInput!) {\n    resendInfoMailScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const account_id = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemAttendances.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                { console.log(node) }\n                { console.log(account) }\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) } <br />\n                  <span className=\"text-muted\">\n                    {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                  </span>\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  <BadgeBookingStatus status={node.bookingStatus} />\n                </Table.Col>\n                <Table.Col>\n                  <AccountClassDelete account={account} node={node} />\n                </Table.Col>\n                {/* <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                </Table.Col> */}\n                {/* <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n                  {(deleteAccountClasspass, { data }) => (\n                    <Table.Col className=\"text-right\" key={v4()}>\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                            msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                            msgSuccess: t('relations.account.classpasses.deleted'),\n                            deleteFunction: deleteAccountClasspass,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  )}\n                </Mutation> */}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountEnrollmentsBase({ t, match, history, children, account={}, pageHeaderButtonList }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='enrollments' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountEnrollmentsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollmentSpaces\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull, orderBy: \"fullName\") {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            scheduleItem {\n              id\n            }\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          firstName\n          lastName\n          fullName\n          email\n          phone\n          mobile\n          isActive\n          urlImageThumbnailSmall\n        }\n      }\n      scheduleItem {\n        id\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }  \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($account: ID!, $before: String, $after: String) {\n    scheduleItemEnrollments(first: 20, before: $before, after: $after, accountSubscription_Account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          accountSubscription {\n            id\n            dateStart\n            organizationSubscription {\n              id\n              name\n            }\n            account {\n              id\n              fullName\n            }\n          }\n          scheduleItem {\n            id\n            dateStart\n            timeStart\n            timeEnd\n            frequencyInterval\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"../../../../relations/accounts/enrollments/queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = node.scheduleItem.id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        className=\"float-right\"\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId) },\n              { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                variables: { account: node.accountSubscription.account.id }}  \n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport { getWeekdayNames } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../ui/ButtonEdit'\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ScheduleClassEnrollmentDelete from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete'\n// import AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction AccountEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.enrollments.title')\n\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/enrollment_find_class`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ENROLLMENTS_QUERY, {\n    variables: {'account': accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Return here after adding an enrollment\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return (\n    <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemEnrollments = data.scheduleItemEnrollments\n  \n  // Empty list\n  if (!scheduleItemEnrollments.edges.length) {\n    return (\n      <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.enrollments.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemEnrollments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemEnrollments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemEnrollments.edges\n              const pageInfo = fetchMoreResult.scheduleItemEnrollments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemEnrollments: {\n                      __typename: previousResult.scheduleItemEnrollments.__typename,\n                      edges: [ ...previousResult.scheduleItemEnrollments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('relations.account.enrollments.dateStart')}</Table.ColHeader>\n              <Table.ColHeader>{t('relations.account.enrollments.dateEnd')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemEnrollments.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { (node.dateEnd) && moment(node.dateEnd).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name } <br />\n                  <span className=\"text-muted\">\n                    <Icon name=\"clock\" /> { \" \" }\n                      { weekdayNames[node.scheduleItem.frequencyInterval - 1] } { \" \" }\n                      { moment(`${node.scheduleItem.dateStart} ${node.scheduleItem.timeStart}`).format(timeFormat) } <br />\n                    <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  { node.accountSubscription.organizationSubscription.name } ({ moment(node.accountSubscription.dateStart).format(dateFormat) })\n                </Table.Col>\n                <Table.Col>\n                  <ScheduleClassEnrollmentDelete node={node} />\n                  <ButtonEdit className='float-right' editUrl={`/relations/accounts/${accountId}/enrollments/edit/${node.id}`} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountEnrollmentsBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountEnrollments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n          {(isSubmitting) ? \n            <Alert type=\"primary\" hasExtraSpace>\n              <strong>{t('general.please_wait')}</strong> {t('schedule.classes.enrollments.toast_creating_might_take_a_while')}\n            </Alert> : \n          \"\"\n          }\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst AccountEnrollmentBack = ({ t, accountId }) => (\n  <ButtonBack returnUrl={ `/relations/accounts/${accountId}/enrollments` } />\n)\n\nexport default withTranslation()(withRouter(AccountEnrollmentBack))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport { Card, Icon } from 'tabler-react';\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from '../../../schedule/classes/all/enrollments/queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from '../../../schedule/classes/all/enrollments/yupSchema'\nimport ScheduleClassEnrollmentForm from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentForm'\nimport { dateToLocalISO, getWeekdayNames } from '../../../../tools/date_tools'\n\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from \"./AccountEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"../../../schedule/classes/all/enrollments/tools\"\n\n\nfunction AccountEnrollmentEdit({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/enrollments`\n  let cardTitle = t('relations.account.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n  if (error) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n//   { node.scheduleItem.organizationClasstype.name } <br />\n//   <span className=\"text-muted\">\n//     <Icon name=\"clock\" /> { weekdayNames[node.scheduleItem.frequencyInterval] } { moment(node.timeStart).format(timeFormat) } <br />\n//     <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n\n  console.log('query data')\n  console.log(data)\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  const account = data.scheduleItemEnrollment.accountSubscription.account\n  const scheduleItem = data.scheduleItemEnrollment.scheduleItem\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  console.log(scheduleItem)\n\n  return (\n    <AccountEnrollmentsBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n      account={account}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n        <Card.Alert color=\"primary\">\n          <b>{scheduleItem.organizationClasstype.name}</b><br />\n          <Icon name=\"clock\" /> {\" \"} \n              { weekdayNames[scheduleItem.frequencyInterval - 1 ] } {\" \"}\n              { moment(`${scheduleItem.dateStart} ${scheduleItem.timeStart}`).format(timeFormat) } <br />\n            <Icon name=\"home\" /> {\" \"}\n            { scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n            { scheduleItem.organizationLocationRoom.name }\n        </Card.Alert>\n        </Card.Body>\n          <Formik\n            initialValues={{  \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n            }}\n            validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n\n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateScheduleClassEnrollment({ variables: {\n                  input: {\n                    id: match.params.id,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd\n                  }\n                }, refetchQueries: [\n                    { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                      variables: { account: accountId }},\n                    // Also update enrollment list under schedule\n                    {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                      variables: getEnrollmentsListQueryVariables(scheduleItem.id)},\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ScheduleClassEnrollmentForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </ScheduleClassEnrollmentForm>\n            )}\n          </Formik>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgePublic = ({ t, className, isPublic }) => (\n    (isPublic) ?\n        <Badge className={className} color=\"success\">{t('general.public')}</Badge> :\n        <Badge className={className} color=\"danger\">{t('general.not_public')}</Badge> \n)\n\nexport default withTranslation()(BadgePublic)","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $instructor: ID,\n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttending\n        countBooked\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    instructors(first: 100) {\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      enrollmentSpaces\n      infoMailEnabled\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\n\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../context/AppSettingsContext'\nimport { dateToLocalISO } from \"../../tools/date_tools\"\nimport { capitalize } from '../../tools/string_tools'\nimport { \n  get_class_messages,\n  represent_class_status,\n  represent_instructor \n} from '../schedule/classes/tools'\n\nimport BadgePublic from './BadgePublic'\nimport CSDatePicker from './CSDatePicker'\nimport { GET_CLASSES_QUERY } from \"../schedule/classes/queries\"\n\n// Action buttons\n// import SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_classes_query_variables(date) {\n  let queryVars = {}\n\n  if (date) {\n    const searchDate = dateToLocalISO(date)\n\n    queryVars.dateFrom = searchDate\n    queryVars.dateUntil = searchDate\n  }\n\n  return queryVars\n}\n\n\nfunction SearchClassesOnDate({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  btnDisableClassesIds=[],\n  btnDisabledMessage=\"\",\n  btnAction,\n }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  // const [showSearchResults, setShowSearchResults] = useState(false)\n\n  const { loading, error, data, refetch } = useQuery( GET_CLASSES_QUERY, {\n    variables: get_classes_query_variables(selectedDate)\n  } )\n\n  function renderActionButton(scheduleClassId) {\n    switch(btnAction) {\n      case \"accountEnrollmentAdd\":\n        const accountId = match.params.account_id\n        return <Link to={`/schedule/classes/all/enrollments/${scheduleClassId}/options/${accountId}`}>\n          <Button color=\"primary\" outline size=\"sm\">\n            <Icon name=\"plus\" /> {t(\"general.enroll\")}\n          </Button>\n        </Link>\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <CSDatePicker \n      // className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n      className={\"form-control\"} \n      selected={selectedDate}\n      onChange={(date) => {\n        if (date) {\n          // setShowSearchResults(true)\n          setSelectedDate(date)\n          refetch(get_classes_query_variables(date))\n        } else {\n          // showSearchResults(false)\n        }\n      }}\n      // onBlur={() => setFieldTouched(\"dateStart\", true)}\n    />\n\n    // return <InputSearch \n    //   className=\"mb-2\"\n    //   initialValueKey={localStorateKeySearchValue}\n    //   placeholder={placeholderSearch}\n    //   onChange={(value) => {\n    //     localStorage.setItem(localStorateKeySearchValue, value)\n    //     if (value && !called) {\n    //       setShowSearchResults(true)\n    //       getAccounts({ variables: get_accounts_query_variables(value)})\n    //     } else if (value) {\n    //       // This is important, as the current relayStylePagination doesn't include args.\n    //       // Don't use getAccounts again, but refetch with different vars.\n    //       setShowSearchResults(true)\n    //       refetch(get_accounts_query_variables(value))\n    //     } else {\n    //       setShowSearchResults(false)\n    //     }\n    //   }}\n    // />\n  }\n\n  // if (!showSearchResults) {\n  //   return <Search />\n  // }\n\n  if (loading) return (\n    <React.Fragment>\n      <Search />\n      <div>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </React.Fragment>\n  )\n\n  if (error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (!data.scheduleClasses.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_no_classes_found\")}</strong>\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(data) ?\n      <div className='mt-4'>\n        {data.scheduleClasses.map(({ date, classes }) => (\n          <React.Fragment key={v4()}>\n            <h3>\n              {capitalize(moment(date).format(\"dddd\"))} {' '}\n              <small className=\"text-muted\">\n                    {moment(date).format(\"LL\")} \n              </small>\n            </h3>\n            {!(classes.length) ? <Card>\n                <Card.Body>\n                  <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n                </Card.Body>\n              </Card> \n            :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <span className=\"float-right\">{renderActionButton(scheduleItemId)}</span>\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n              )\n            }\n          </React.Fragment>\n        ))}\n      </div>\n      // <ContentCard cardTitle={t('general.search_results')}\n      //             pageInfo={data.accounts.pageInfo}\n      //             hasCardBody={false}\n      //             onLoadMore={() => {\n      //               fetchMore({\n      //                 variables: {\n      //                 after: data.accounts.pageInfo.endCursor\n      //               },\n      //               updateQuery: (previousResult, { fetchMoreResult }) => {\n      //                 const newEdges = fetchMoreResult.accounts.edges\n      //                 const pageInfo = fetchMoreResult.accounts.pageInfo \n\n      //                 return newEdges.length\n      //                   ? {\n      //                       // Put the new accounts at the end of the list and update `pageInfo`\n      //                       // so we have the new `endCursor` and `hasNextPage` values\n      //                       queryAccountsData: {\n      //                         accounts: {\n      //                           __typename: previousResult.accounts.__typename,\n      //                           edges: [ ...previousResult.accounts.edges, ...newEdges ],\n      //                           pageInfo\n      //                         }\n      //                       }\n      //                     }\n      //                   : previousResult\n      //               }\n      //             })\n      //           }} >\n      //   <Table cards>\n      //     <Table.Header>\n      //       <Table.Row key={v4()}>\n      //         <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n      //         <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n      //         <Table.ColHeader></Table.ColHeader>\n      //       </Table.Row>\n      //     </Table.Header>\n      //     <Table.Body>\n      //       {data.accounts.edges.map(({ node }) => (\n      //         <Table.Row key={v4()}>\n      //           <Table.Col key={v4()}>\n      //             {node.fullName}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {node.email}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {(btnDisableAccountIds.includes(node.id)) ? \n      //               <span className=\"pull-right\">{btnDisabledMessage}</span> :\n      //               <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n      //             }   \n      //           </Table.Col>\n      //         </Table.Row>\n      //       ))}\n      //     </Table.Body>\n      //   </Table>\n      // </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(SearchClassesOnDate))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT } from '../../../../queries/accounts/get_account'\n\nimport SearchClassesOnDate from '../../../ui/SearchClassesOnDate'\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from './AccountEnrollmentBack'\n\nfunction AccountEnrollmentFindClass({ t, match, location }) {\n  const accountId = match.params.account_id\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: { accountId: accountId }})\n\n  if (loading) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <Dimmer active={true} loader={true} />\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  if (error) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList} >\n      <h5>{t('relations.account.enrollments.title_add_search_class')}</h5>\n      <SearchClassesOnDate btnAction=\"accountEnrollmentAdd\" />\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentFindClass))\n","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input:UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountPasswordForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.set_password')}>\n              <Field type=\"password\" \n                      name=\"passwordNew\" \n                      className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>  \n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountPasswordForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\nimport { UPDATE_ACCOUNT_PASSWORD } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport RelationsAccountPasswordForm from \"./RelationsAccountPasswordForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountTools({t, match}) {\n  const accountId = match.params.account_id\n  const cardTitle = t(\"relations.account.tools.title\")\n  const activeLink = \"tools\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountPassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer loader={true} active={true} />\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t(\"relations.accounts.set_password\")}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  passwordNew: values.passwordNew\n                }\n\n                updateAccountPassword({ variables: {\n                  input: input_vars\n                }})\n                .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.accounts.toast_edit_password_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                }\n              )\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountPasswordForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountTools))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    }\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountDocumentForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountDocumentForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId }\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.financePaymentBatchCategory.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: values.year,\n                  month: values.month,\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n\n  // Empty list\n  if (!financeInvoices.edges.length) {\n    return (\n      <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList invoices={financeInvoices} />\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.invoice_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.invoiceToBusiness ? account.invoiceToBusiness.id : null\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {/* { account.invoiceToBusiness && \n          <Card.Alert color=\"primary\">\n           <b><Icon name=\"home\" /> {account.invoiceToBusiness.name}</b> {' '}\n           {t(\"relations.account.invoices.is_the_default_billing_address_for_this_account\")}\n          </Card.Alert>\n        } */}\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.toast_title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              { (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Card>\n                    <Card.Body>\n                      <Button \n                        color=\"secondary\"\n                        outline\n                        onClick={onLoadMore} \n                      >\n                        {t('general.load_more')}\n                      </Button>\n                    </Card.Body>\n                  </Card>\n                : <span className=\"text-muted\">{t(\"general.loaded_all\")}</span>\n              }\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: CostasiellaAccountNoteNoteTypeChoices!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId,\n      // noteType: noteType\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  let [noteType, setNoteType] = useState(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) || \"BACKOFFICE\")\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n  } \n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId)\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(noteType === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        setNoteType(\"BACKOFFICE\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(noteType === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        setNoteType(\"INSTRUCTORS\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.note) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId, noteType) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_PRODUCTS_QUERY = gql`\n  query AccountProducts($after: String, $before: String, $accountId: ID!) {\n    accountProducts(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationProduct {\n            id\n            name\n            description\n            urlImageThumbnailSmall\n          }\n          quantity\n          createdAt\n          invoiceItems {\n            edges {\n              node {\n                financeInvoice {\n                  invoiceNumber\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_PRODUCT_QUERY = gql`\n//   query AccountProduct($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountProduct(id:$id) {\n//       id\n//       organizationProduct {\n//         id\n//         name\n//       }\n//       quantity\n//       createdAt\n//     }\n//     organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//       urlImageThumbnailSmall\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ProductInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationProducts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_PRODUCT = gql`\n  mutation CreateAccountProduct($input: CreateAccountProductInput!) {\n    createAccountProduct(input: $input) {\n      accountProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_PRODUCT = gql`\n  mutation DeleteAccountProduct($input: DeleteAccountProductInput!) {\n    deleteAccountProduct(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Icon,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, DELETE_ACCOUNT_PRODUCT } from \"./queries\"\n\n\nfunction AccountProducts({t, match, location}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountproduct\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/products/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_PRODUCTS_QUERY, {\n    variables: { accountId: accountId }\n  })\n  const [deleteAccountProduct] = useMutation(DELETE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountProducts = data.accountProducts\n\n    // Empty list\n    if (!accountProducts.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.products.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.products.title')}\n        pageInfo={accountProducts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountProducts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountProducts.edges\n              const pageInfo = fetchMoreResult.accountProducts.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountProducts.__typename,\n                      edges: [ ...previousResult.accountProducts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader />\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.quantity')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_purchased')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountProducts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.organizationProduct.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.organizationProduct.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.quantity}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceItems.edges.length && \n                      <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                        {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                      </Link>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.products.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationProduct.name} {moment(node.createdAt).format(dateTimeFormatMoment)}</p>,\n                          msgSuccess: t('relations.account.products.deleted'),\n                          deleteFunction: deleteAccountProduct,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountProducts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Text\n} from \"tabler-react\"\n\n\nfunction CSStoreCard({ t, title, subtitle, price, imgUrl, imgAlt, buttonText=\"placeholder\", buttonOnClick=f=>f }) {\n  return (\n      <Card>\n        <Card.Body>\n          <div className='mb-4 text-center'>\n            <img src={imgUrl} alt={imgAlt} />\n          </div>\n          <Card.Title>{title}</Card.Title>\n          <Text className=\"card-subtitle\">{subtitle}</Text>\n\n          <div classname=\"mt-5 d-flex align-items-center\">\n            <div className=\"mt-5 d-flex align-items-center\">\n              <div className=\"product-price\">\n                <strong>{price}</strong>\n              </div>\n              <div className=\"ml-auto\">\n                <Button color=\"primary\" onClick={buttonOnClick}>\n                  <Icon prefix=\"fe\" name=\"plus\" />\n                  {buttonText}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(CSStoreCard)\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_PRODUCT } from './queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\n// import AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSStoreCard from '../../../ui/CSStoreCard'\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\n\nfunction AccountProductAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/products`\n\n  const buttonTextAdd = t(\"general.add\")\n\n  \n  const {loading, error, data, fetchMore} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountProduct] = useMutation(CREATE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const organizationProducts = data.organizationProducts\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t(\"relations.account.products.title_add\")}</h4>\n        </Grid.Col>\n      </Grid.Row>\n\n        <LoadMoreOnBottomScroll \n          pageInfo={organizationProducts.pageInfo}\n          onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: organizationProducts.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationProducts.edges\n                const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationProducts: {\n                        __typename: previousResult.organizationProducts.__typename,\n                        edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} \n        >\n          <Grid.Row>\n            {organizationProducts.edges.map(({ node }) => (\n              <Grid.Col md={4}>\n                {console.log(node)}\n                <CSStoreCard\n                  title={node.name}\n                  subtitle={node.description}\n                  price={node.priceDisplay}\n                  imgUrl={node.urlImageThumbnailLarge}\n                  imgAlt={node.name}\n                  buttonText={buttonTextAdd}\n                  buttonOnClick={() => {\n                    createAccountProduct({ variables: {\n                      input: {\n                        account: accountId,\n                        organizationProduct: node.id,\n                        quantity: 1,\n                      }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data);\n                        history.push(`/relations/accounts/${accountId}/products`)\n                        toast.success((t('relations.account.products.toast_add_success')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}\n                />\n              </Grid.Col>\n            ))}\n          </Grid.Row>\n        </LoadMoreOnBottomScroll>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card> */}\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountProductAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices, $accountId: ID!) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeQuoteGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_QUOTE = gql`\n  mutation CreateFinanceQuote($input: CreateFinanceQuoteInput!) {\n    createFinanceQuote(input: $input) {\n      financeQuote {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountQuotesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='quotes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuotesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_QUOTES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceQuotesList from '../../../finance/quotes/FinanceQuotesList'\nimport AccountQuotesBase from './AccountQuotesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountQuotes({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.quotes.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/quotes/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_QUOTES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountQuotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  let financeQuotes = data.financeQuotes\n  const account = data.account\n\n  // Empty list\n  if (!financeQuotes.edges.length) {\n    return (\n      <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.quotes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n  \n  return (\n    <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeQuotes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeQuotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeQuotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList quotes={financeQuotes} />\n      </ContentCard>\n    </AccountQuotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountQuotes))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountQuoteAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.quote_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_quote_group')}>\n        <Field component=\"select\" \n              name=\"financeQuoteGroup\" \n              className={(errors.financeQuoteGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeQuoteGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeQuoteGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountQuoteAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_QUOTE } from './queries'\nimport AccountQuoteAddForm from './AccountQuoteAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountQuoteAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"quotes\"\n  const cardTitle = t('relations.account.quotes.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/quotes`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createQuote] = useMutation(CREATE_ACCOUNT_QUOTE, {\n    // onCompleted = () => history.push('/finance/quotes/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.quoteToBusiness ? account.quoteToBusiness.id : null\n  const financeQuoteGroups = data.financeQuoteGroups\n  const firstQuoteGroup = financeQuoteGroups && financeQuoteGroups.edges && financeQuoteGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeQuoteGroup: firstQuoteGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createQuote({ variables: {\n              input: {\n                account: account_id, \n                financeQuoteGroup: values.financeQuoteGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.quotes.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/quotes/edit/' + data.createFinanceQuote.financeQuote.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountQuoteAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountQuoteAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='quotes'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuoteAdd))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { variables: {\n    account: accountId\n  }})\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id    \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id  \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId}\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  // Empty list\n  if (!accountSubscriptions.edges.length) {\n    return (\n      <RelationsAccountProfileBase\n        activeLink={activeLink}\n        user={account}\n        pageHeaderButtonList={pageHeaderButtonList}\n      >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.subscriptions.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  console.table(accountSubscriptions.edges)\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    { (node.organizationSubscription.unlimited) ? t(\"general.unlimited\") : node.creditTotal }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n\n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  \n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        advance\n        reconciled\n        accountSubscription {\n          id\n        }\n        description\n        expiration\n        expired\n        scheduleItemAttendance {\n          id\n          date\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationClasstype {\n              id\n              name\n            }\n            organizationLocationRoom {\n              id \n              name\n              organizationLocation {\n                id\n                name\n              }\n            }\n\n          }\n        }\n        createdAt\n      }\n    } \n  }\n  accountSubscription(id: $accountSubscription) {\n    id\n    organizationSubscription {\n      id\n      name\n      unlimited\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    expiration\n    description\n    createdAt\n  }\n}\n`\n\nexport const ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const accountSubscription = data.accountSubscription\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // unlimited\n  if (accountSubscription.organizationSubscription.unlimited) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <Card.Alert color=\"primary\">\n          <Icon name=\"check\" /> {t('relations.account.subscriptions.credits.unlimited')}\n        </Card.Alert>\n      </Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  console.table(data)\n\n  function onLoadMore() {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.credit')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateFormat)} <br />\n                  <small className=\"text-muted\">\n                    <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                  </small>\n                  {(node.reconciled) && <small className=\"text-muted\">Reconciled at {moment(node.reconciled).format(dateFormat)}</small>}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.expiration).format(dateFormat)} <br />\n                  {node.expired && <Badge color=\"danger\">{t(\"general.expired\")}</Badge>}\n                </Table.Col>\n                <Table.Col>\n                  {/* TODO class info here */}\n                  { node.scheduleItemAttendance && <span>\n                    {moment(node.scheduleItemAttendance.date).format(dateFormat)} {\" \"}\n                    {moment(`${node.scheduleItemAttendance.date} ${node.scheduleItemAttendance.scheduleItem.timeStart}`)\n                      .format(timeFormat)} {\" \"}\n                    {\" - \"}\n                    {node.scheduleItemAttendance.scheduleItem.organizationClasstype.name} <br />\n                    <small className='text-muted'>\n                      {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                    </small>\n                    </span>}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA = Yup.object().shape({\n  amount: Yup.number()\n    .required(t('yup.field_required'))\n    .min(1)\n    .max(200)\n  })\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA = Yup.object().shape({\n  expiration: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditCreditAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{t('relations.account.subscriptions.credits.add')}</h5>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.amount')}>\n              <Field type=\"number\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAddForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, ADD_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditAddForm from \"./AccountSubscriptionEditCreditAddForm\"\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          amount: 1,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              amount: parseInt(values.amount),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditAddForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from '../../../../../ui/CSDatePicker';\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n        {/* TODO: Add expiration date field here */}\n          <Grid.Col>\n            <Form.Group label={t('general.expiration')}>\n              <CSDatePicker \n                className={(errors.expiration) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.expiration}\n                onChange={(date) => {\n                  setFieldValue(\"expiration\", date)\n                  setFieldTouched(\"expiration\", true)\n                }}\n                onBlur={() => setFieldTouched(\"expiration\", true)}\n              />\n              <ErrorMessage name=\"expiration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { \n  GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, \n  GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY,\n  UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditEditForm from \"./AccountSubscriptionEditCreditEditForm\"\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          expiration: new Date(accountSubscriptionCredit.expiration),\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              expiration: dateToLocalISO(values.expiration),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId }\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      supplier\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.vip) ? <span>\n                      <Badge color=\"warning\" className=\"mr-1\"><Icon name=\"star\"/> {t(\"general.vip\")}</Badge>\n                    </span> : null}\n                    {(node.supplier) ? <span>\n                      <Badge color=\"primary\" className=\"mr-1\">{t(\"general.supplier\")}</Badge>\n                    </span> : null}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nfunction RelationsB2BEditMenu({t, businessId, activeLink}) {\n    return (\n      <List.Group transparent={true}>     \n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/b2b/\" + businessId + \"/edit\"}\n            icon=\"home\"\n            active={(activeLink === 'edit')}\n        >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/b2b/\" + businessId + \"/invoices\"}\n                icon=\"file-text\"\n                active={(activeLink === 'invoices')}\n                >\n            {t('general.invoices')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(RelationsB2BEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport RelationsB2BEditMenu from './RelationsB2BEditMenu'\n\n\nfunction RelationsB2BEditBase({ \n  t, match, history, children, pageTitle=\"\", activeLink=\"\", returnUrl=\"/relations/b2b\", pageHeaderButtonList=\"\" \n}) {\n  const businessId = match.params.business_id\n  const titleB2B = t(\"relations.b2b.title\")\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={`${titleB2B} - ${pageTitle}`}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col> \n            <Grid.Col md={3}>\n              <RelationsB2BEditMenu businessId={businessId} activeLink={activeLink} />\n            </Grid.Col>                               \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"vip\" \n                  checked={values.vip} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.vip')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"vip\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"supplier\" \n                  checked={values.supplier} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.supplier')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"supplier\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'edit'\n  const cardTitle = t('relations.b2b.title_edit')\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body><Dimmer active={true} loader={true} /></Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={initialData.name}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            vip: initialData.vip,\n            supplier: initialData.supplier,\n            name: initialData.name,\n            phone: initialData.phone,\n            phone2: initialData.phone2,\n            address: initialData.address,\n            postcode: initialData.postcode,\n            city: initialData.city,\n            country: initialData.country,\n            emailBilling: initialData.emailBilling,\n            emailContact: initialData.emailContact,\n            registration: initialData.registration,\n            taxRegistration: initialData.taxRegistration\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: businessId,\n                vip: values.vip,\n                supplier: values.supplier,\n                name: values.name,\n                phone: values.phone,\n                phone2: values.phone2,\n                address: values.address,\n                postcode: values.postcode,\n                city: values.city,\n                country: values.country,\n                emailBilling: values.emailBilling,\n                emailContact: values.emailContact,\n                registration: values.registration,\n                taxRegistration: values.taxRegistration\n              }\n\n              updateBusiness({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refetch list\n                  {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                  // Refresh local cached results for this account\n                  {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.b2b.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsB2BEditForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $business: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, business: $business) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $business: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const CREATE_B2B_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport ContentCard from '../../../general/ContentCard';\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\nimport { GET_INVOICES_QUERY } from './queries'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\nfunction RelationsB2BInvoices({ t, match, location, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'invoices'\n  const cardTitle = t('finance.invoices.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: {\n      business: businessId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const pageHeaderButtonList = <ButtonAdd \n    className='ml-2'\n    addUrl={`/relations/b2b/${businessId}/invoices/add`} \n  />\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const business = data.business\n  const invoices = data.financeInvoices\n  \n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.b2b.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n    )\n  } \n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst B2BInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(B2BInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_B2B_INVOICE, GET_INVOICES_QUERY } from './queries'\nimport B2BInvoiceAddForm from './RelationsB2BInvoiceAddForm'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\n\nfunction RelationsB2BInvoiceAdd({ t, match, history }) {\n  const businessId = match.params.business_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.b2b.invoices.title_add')\n  const returnUrl = `/relations/b2b/${businessId}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        business: businessId\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_B2B_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loader={true} active={true} />\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  \n  const business = data.business\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                business: businessId, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n              {query: GET_INVOICES_QUERY, variables: {business: businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.invoices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <B2BInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </B2BInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoiceAdd))\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6} md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\"\n\nfunction ButtonListWeekChooser({ t, className, onClickPrevious=f=>f, onClickNext=f=>f, onClickCurrent=f=>f, showCurrent=true}) {\n  return (\n    <Button.List className={className}>\n      <Button \n        icon=\"chevron-left\"\n        color=\"secondary\"\n        onClick={ onClickPrevious }\n      />\n      { showCurrent && \n      <Button \n        icon=\"sunset\"\n        color=\"secondary\"\n        onClick={ onClickCurrent }\n      /> }\n      <Button \n        icon=\"chevron-right\"\n        color=\"secondary\"\n        onClick={ onClickNext }\n      />\n    </Button.List> \n  )\n}\n\nexport default withTranslation()(withRouter(ButtonListWeekChooser))","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [instructor, setInstructor] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <div className=\"mb-4\">\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setInstructor(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12}>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            value={instructor}\n            onChange={ (event) => {\n              setInstructor(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonListWeekChooser from '../../ui/ButtonListWeekChooser';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  function onClickPrevious() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickNext() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickCurrent() {\n    let currentWeekFrom = moment()\n    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n    \n    refetch(get_list_query_variables())\n  }\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <ButtonListWeekChooser \n                className=\"schedule-list-page-options-btn-list\"\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n                onClickCurrent={onClickCurrent}\n              />\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { capitalize } from '../../../tools/string_tools'\nimport BadgePublic from '../../ui/BadgePublic'\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <React.Fragment key={v4()}>\n          <h3>\n            {capitalize(moment(date).format(\"dddd\"))} {' '}\n            <small className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n            </small>\n          </h3>\n          {!(classes.length) ? <Card>\n              <Card.Body>\n                <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n              </Card.Body>\n            </Card> \n          :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <Dropdown\n                            key={v4()}\n                            className=\"float-right\"\n                            type=\"link\"\n                            position=\"left\"\n                            toggle={false}\n                            // color=\"secondary\"\n                            // triggerClassName=\"btn btn-pill btn-outline-primary btn-sm \"\n                            triggerContent={                                \n                              <Button \n                                outline\n                                color=\"primary\"\n                                size=\"sm\"\n                              > \n                                <span className=\"d-xs-none\">{t(\"general.manage\")}</span>\n                                <span className=\"d-sm-none d-md-none d-lg-none d-xl-none\"><Icon name=\"more-vertical\" /></span>\n                              </Button>\n                            }\n                            items={[\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"check-circle\"\n                                  >\n                                      {t(\"general.attendance\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"bar-chart-2\">\n                                      {t(\"schedule.classes.class.attendance_chart.title\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                                <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"edit-3\"\n                                  >\n                                    {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    badge={t('schedule.classes.all_classes_in_series')}\n                                    badgeType=\"secondary\"\n                                    icon=\"edit-3\"\n                                  >\n                                      {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <span className=\"text-red\">\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"danger\"\n                                  icon=\"trash-2\"\n                                  onClick={() => {\n                                    confirm_delete({\n                                      t: t,\n                                      msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                      msgDescription: <p key={v4()}>\n                                        {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                        {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                        {organizationLocationRoom.organizationLocation.name} {' '}\n                                        {organizationLocationRoom.name}\n                                        {organizationClasstype.Name}\n                                        </p>,\n                                      msgSuccess: t('schedule.classes.deleted'),\n                                      deleteFunction: deleteScheduleClass,\n                                      functionVariables: { variables: {\n                                        input: {\n                                          id: scheduleItemId\n                                        }\n                                      }, refetchQueries: [\n                                        { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                      ]}\n                                    })\n                                  }}>\n                                {t(\"general.delete\")}\n                                </Dropdown.Item>\n                                </span>\n                              </HasPermissionWrapper>\n                            ]}\n                            />\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <HasPermissionWrapper permission=\"view\" resource=\"scheduleitemattendance\">\n                            <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                              <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                            </Link>\n                          </HasPermissionWrapper>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n            )}\n        </React.Fragment >\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n    enrollmentSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n            <option value=\"LAST_WEEKDAY_OF_MONTH\" key={v4()}>{t('schedule.classes.select_last_weekday_of_month')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_enrollments')}>\n              <Field type=\"text\" \n                    name=\"enrollmentSpaces\" \n                    className={(errors.enrollmentSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"enrollmentSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\",\n            enrollmentSpaces: 0\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval && parseInt(frequencyInterval),\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"copy\"\n              active={activeLink === 'prices'}\n              >\n              {t('schedule.classes.prices.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nimport { getWeekdayNames } from '../../../../tools/date_tools'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime, dateStart}) {\n  const weekdayNames = getWeekdayNames(t)\n  const isoWeekday = moment(dateStart).isoWeekday()\n  const weekdayName = weekdayNames[isoWeekday-1]\n\n  // return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' +  moment(starttime).format('LT')\n  return t('general.class') + ': ' + weekdayName + ' ' + moment(starttime).format('LT') + ' - ' + classtype + ' - ' + location + ' [' + locationRoom + ']'\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart,\n    dateStart: initialValues.dateStart\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  const pageHeaderButtonList = <ButtonBack returnUrl=\"/schedule/classes\" />\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            enrollmentSpaces: initialValues.enrollmentSpaces,\n            infoMailEnabled: initialValues.infoMailEnabled,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailEnabled: values.infoMailEnabled,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n//   const headerOptions = <Card.Options>\n//   <div className='float-right'>\n//     <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n//     <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n//     {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n//   </div>\n// </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n  const countEnrollments = enrollments.edges.length\n\n  const headerOptions = <Card.Options>\n    <div className='mr-2'>\n      <Badge color=\"success\">{countEnrollments} {t(\"schedule.classes.enrollments.enrolled\")}</Badge> {\" \"}\n      <Badge color=\"default\">{scheduleItem.enrollmentSpaces - countEnrollments} {t(\"schedule.classes.enrollments.available_enrollment_spaces\")}</Badge> {\" \"}\n    </div>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch(getAccountsQueryVariables(value))\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport CSLS from '../../../../../tools/cs_local_storage';\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN) || `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }],\n                          // Mutation is \"complete\" when refetchQueries finish\n                          awaitRefetchQueries: true\n                        })\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }],\n                            // Mutation is \"complete\" when refetchQueries finish\n                            awaitRefetchQueries: true\n                          })\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","export function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_action = ({t, title, msgConfirm, msgDescription, msgSuccess, actionFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{title}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_action_no')}</button>\n            <button\n              className=\"btn btn-success\"\n              onClick={() => {\n                actionFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"check\" /> {t('general.confirm_action_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_action\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_action from \"../../tools/confirm_action\"\n\n// import {\n//   Icon\n// } from \"tabler-react\"\n\n\nfunction ButtonConfirmAction({\n  t, \n  match, \n  history, \n  title,\n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  actionFunction, \n  actionFunctionVariables, \n  buttonClass=\"btn-link\",\n  buttonIcon=\"\",\n  buttonText=\"\",\n  buttonTextColor=\"\"\n}) {\n  return (\n    <button className={`btn ${buttonClass} btn-sm`}\n      // title={t('')} \n      onClick={() => {\n        confirm_action({\n          t: t,\n          title: title,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          actionFunction: actionFunction,\n          functionVariables: actionFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        {buttonIcon} {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonConfirmAction))","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, classDate, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser';\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle, refetch=f=>f }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const exportUrl = `/d/export/schedule_item_attendance/mailinglist/${scheduleItemId}/${classDate}`\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              {/* Export Mailinglist */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"mr-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('general.mailing_list')} \n              </Button>\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col xs={12} sm={12} md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col xs={12} sm={12} md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  classDate={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children, refetch }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}  refetch={refetch}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ButtonConfirm from '../../../../ui/ButtonConfirm'\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport { \n  GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n  UPDATE_SCHEDULE_ITEM_ATTENDANCE,\n  RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE \n} from \"./queries\"\n\n\n// function sleepFor(sleepDuration){\n//   var now = new Date().getTime();\n//   while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }\n// }\n\nfunction setAttendanceStatus({t, match, updateAttendance, node, status, setAttendanceRefetching=f=>f}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  setAttendanceRefetching(true)\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    ], \n    // Mutation is \"complete\" when refetchQueries finish\n    awaitRefetchQueries: true\n  }).then(({ data }) => {\n    console.log('got data', data);\n    // sleepFor(1000)\n    setAttendanceRefetching(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setAttendanceRefetching(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendance({ t, match, history }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [attendanceRefetching, setAttendanceRefetching] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date),\n      fetchPolicy: \"network-only\"\n    }\n  )\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n  const [ resendInfoMail ] = useMutation(RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  const headerOptions = <Card.Options>\n    <div className='float-right'>\n      <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n      <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n      {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n    </div>\n  </Card.Options>\n\n\n  return (\n    <ScheduleClassAttendanceBase refetch={refetch}>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Dimmer active={attendanceRefetching} loader={true}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {data.scheduleItemAttendances.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.account.fullName}\n                      </Table.Col>\n                      <Table.Col>\n                        <BadgeBookingStatus status={node.bookingStatus} />\n                        <ButtonConfirm \n                              title={t(\"schedule.classes.class.attendance.confirm_resending_info_mail_title\")}\n                              msgConfirm={<p>{t(\"schedule.classes.class.attendance.confirm_resending_info_mail_to\")}</p>}\n                              msgDescription={<p><b>{node.account.fullName}</b></p>}\n                              msgSuccess={t(\"schedule.classes.class.attendance.resend_success\")}\n                              actionFunction={resendInfoMail}\n                              actionFunctionVariables={{variables: {input: {id: node.id}}}}\n                              buttonClass=\"btn-link float-right\"\n                              buttonIcon={<Icon name=\"send\" />}\n                              buttonText={t(\"schedule.classes.class.attendance.resend_info_mail\")}\n                              buttonTextColor=\"\"\n                          />\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Delete */}\n                        <ScheduleClassAttendanceDelete node={node} />\n                        {/* Status dropdown */}\n                        <Dropdown\n                          key={v4()}\n                          className=\"float-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.status\")}\n                          items={[\n                            // <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            //   <Dropdown.Item\n                            //     key={v4()}\n                            //     icon=\"check\"\n                            //     onClick={() => {\n                            //       setAttendanceStatus({\n                            //         t: t, \n                            //         updateAttendance: updateAttendance,\n                            //         node: node,\n                            //         status: 'ATTENDING'\n                            //       })\n                            //       refetchAttendance()\n                            //     }}>\n                            //       {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            //   </Dropdown.Item>\n                            // </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                              <Dropdown.Item\n                                key={v4()}\n                                icon=\"calendar\"\n                                onClick={() => {\n                                  setAttendanceStatus({\n                                    t: t, \n                                    match: match,\n                                    updateAttendance: updateAttendance,\n                                    node: node,\n                                    status: 'BOOKED',\n                                    setAttendanceRefetching: setAttendanceRefetching\n                                  })\n                                }}>\n                                  {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                              </Dropdown.Item>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                              <Dropdown.Item\n                                key={v4()}\n                                icon=\"x\"\n                                onClick={() => {\n                                  setAttendanceStatus({\n                                    t: t, \n                                    match: match,\n                                    updateAttendance: updateAttendance,\n                                    node: node,\n                                    status: 'CANCELLED',\n                                    setAttendanceRefetching: setAttendanceRefetching\n                                  })\n                                }}>\n                                  {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                              </Dropdown.Item>\n                            </HasPermissionWrapper>,\n                          ]}\n                        />\n                        {(node.bookingStatus === \"BOOKED\") ?\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Button\n                              key={v4()}\n                              className=\"float-right\"\n                              color=\"success\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  match: match,\n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING',\n                                  setAttendanceRefetching: setAttendanceRefetching\n                                })\n                              }}>\n                                {t('general.checkin')}\n                            </Button>\n                          </HasPermissionWrapper>  : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n          </Dimmer>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={9} md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col xs={12} sm={3} md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceCountYear($scheduleItem:ID!, $year: Int!) {\n    insightClassAttendanceCountYear(scheduleItem: $scheduleItem, year: $year) {\n      year\n      scheduleItem {\n        id\n      }\n      weeks {\n        week\n        attendanceCountCurrentYear\n        attendanceCountPreviousYear\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n  const year = parseInt(classDate.substring(0, 4))\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  // Add month name to data\n  const chartData = data.insightClassAttendanceCountYear.weeks.map((item, index) => (\n    { ...item, weekName: `${t(\"general.week\")} ${item.week}` }\n  ))\n\n  const scheduleItem = data.scheduleItem\n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <ResponsiveContainer width=\"100%\" aspect={2.6}>\n          <BarChart\n            width={500}\n            height={300}\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 20,\n              left: 0,\n              bottom: 10,\n            }}\n          >\n            <XAxis dataKey=\"weekName\" interval={4} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"attendanceCountCurrentYear\" name={year} fill={colors['azure']} />\n            <Bar dataKey=\"attendanceCountPreviousYear\" name={year-1} fill={colors['azure-lighter']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ScheduleClassBookBack = ({ t, classId, date }) => (\n  <Link to={\"/schedule/classes/class/attendance/\" + classId + \"/\" + date} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","export function getUrlFromReturnTo({returnTo, schedule_item_id, class_date, locationId}) {\n  let returnUrl\n\n  if (returnTo === \"schedule_classes\") {\n    returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  } else if (returnTo === \"selfcheckin\") {\n    returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  }\n  \n  return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return \"Please wait...\"\n  }\n\n  if (error) {\n    return \"uh oh... error found\"\n  }\n\n  const returnUrl = getUrlFromReturnTo({\n    returnTo: returnTo,\n    schedule_item_id: schedule_item_id,\n    class_date: class_date,\n    locationId: locationId\n  })\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailEnabled\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser'\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  console.log(scheduleItemId)\n  console.log(classDate)\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: classDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailEnabled) {\n      initialValues.infoMailEnabled = initialData.infoMailEnabled\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailEnabled = false\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: scheduleItemId,\n                            date: classDate,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: parseInt(values.spaces),\n                            walkInSpaces: parseInt(values.walkInSpaces),\n                            infoMailEnabled: values.infoMailEnabled,\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col xs={12} sm={12} md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationClasspassDropin.name}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n\nexport const DUPLICATE_SCHEDULE_EVENT = gql`\n  mutation DuplicateScheduleEvent($input: DuplicateScheduleEventInput!) {\n    duplicateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonConfirm from '../../ui/ButtonConfirm'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY, DUPLICATE_SCHEDULE_EVENT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [duplicateScheduleEvent] = useMutation(DUPLICATE_SCHEDULE_EVENT)\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <HasPermissionWrapper key={v4()} permission=\"add\" resource=\"scheduleevent\">\n                    <ButtonConfirm\n                      title={t(\"schedule.events.confirm_duplicate\")}\n                      msgConfirm={<p>{node.name} { moment(node.dateStart).format(dateFormat) }</p>}\n                      msgSuccess={(t(\"schedule.events.toast_duplicate_success\"))}\n                      actionFunction={duplicateScheduleEvent} \n                      actionFunctionVariables={{\n                        variables: {input: {id: node.id}},\n                        refetchQueries: [\n                          { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n                        ]\n                      }}\n                      buttonClass=\"btn-secondary\"\n                      buttonIcon={<Icon name=\"copy\" />}\n                      buttonText={t(\"general.duplicate\")}\n                      buttonTextColor=\"\"\n                    />\n                  </HasPermissionWrapper>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventsubscriptiongroupdiscount\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/subscription_group_discounts`}\n          icon=\"edit\"\n          active={(activeLink === 'subscription_group_discounts')}\n          >\n          {t('schedule.events.subscription_group_discounts.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendingAndBooked\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendingAndBooked}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          timeStart: '',\n          timeEnd: '',\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventSubscriptionGroupDiscounts(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          discountPercentage\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query OrganizationSubscriptionGroups {\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY = gql`\n  query ScheduleEventSubscriptionGroupDiscount($id:ID!) {\n    scheduleEventSubscriptionGroupDiscount(id: $id) {\n      id\n      discountPercentage\n      organizationSubscriptionGroup {\n        id\n        name\n      }\n    }\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation CreateScheduleEventSubscriptionGroupDiscount($input:CreateScheduleEventSubscriptionGroupDiscountInput!) {\n    createScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation UpdateScheduleEventSubscriptionGroupDiscount($input:UpdateScheduleEventSubscriptionGroupDiscountInput!) {\n    updateScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT   = gql`\n  mutation DeleteScheduleEventSubscriptionGroupDiscount($input: DeleteScheduleEventSubscriptionGroupDiscountInput!) {\n    deleteScheduleEventSubscriptionGroupDiscount(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { \n  DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY \n} from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountDelete({t, match, history, node}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventSubscriptionGroupDiscount] = useMutation(\n    DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n  )\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.subscription_group_discounts.delete_confirm_msg\"),\n          msgDescription: <p>{node.organizationSubscriptionGroup.name} - {node.discountPercentage} %</p>,\n          msgSuccess: t('schedule.events.subscription_group_discounts.delete_success'),\n          deleteFunction: deleteScheduleEventSubscriptionGroupDiscount,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventSubscriptionGroupDiscountDelete from \"./ScheduleEventSubscriptionGroupDiscountDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventSubscriptionGroupDiscounts({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"subscription_group_discounts\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/subscription_group_discounts/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventSubscriptionGroupDiscounts = data.scheduleEventSubscriptionGroupDiscounts\n  const pageInfo = data.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n  // Empty list\n  if (!scheduleEventSubscriptionGroupDiscounts.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.subscription_group_discounts.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventSubscriptionGroupDiscounts.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.edges\n        const pageInfo = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventSubscriptionGroupDiscounts: {\n                __typename: previousResult.scheduleEventSubscriptionGroupDiscounts.__typename,\n                edges: [ ...previousResult.scheduleEventSubscriptionGroupDiscounts.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase \n      activeLink={activeLink} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventSubscriptionGroupDiscounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {/* {moment(node.dateStart).format(dateFormat)} */}\n                  {node.organizationSubscriptionGroup.name}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/subscription_group_discounts/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventSubscriptionGroupDiscountDelete node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscounts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA = Yup.object().shape({\n  organizationSubscriptionGroup: Yup.string()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n    .required(t('yup.field_required')),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputData,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_group')}>\n              <Field component=\"select\" \n                    name=\"organizationSubscriptionGroup\" \n                    className={(errors.organizationSubscriptionGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationSubscriptionGroups.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationSubscriptionGroup\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountForm))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { \n  Card,\n  Dimmer\n} from 'tabler-react'\n\nimport { \n  ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY,\n  GET_INPUT_VALUES_QUERY\n} from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\n\nfunction ScheduleEventSubscriptionGroupDiscountAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.add\")\n\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer loader={true} active={true} />\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react'\n\nimport { \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY,\n  UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n } from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventSubscriptionGroupDiscountForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\nfunction ScheduleEventSubscriptionGroupEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventSubscriptionGroupDiscountId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'subscription_group_discounts'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.edit\")\n\n  const [updateScheduleEventSubscriptionGroupDiscount] = useMutation(UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY, {\n    variables: {\n      id: scheduleEventSubscriptionGroupDiscountId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventSubscriptionGroupDiscount = data.scheduleEventSubscriptionGroupDiscount\n\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          organizationSubscriptionGroup: scheduleEventSubscriptionGroupDiscount.organizationSubscriptionGroup.id,\n          discountPercentage: scheduleEventSubscriptionGroupDiscount.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventSubscriptionGroupDiscount({ variables: {\n            input: {\n              id: scheduleEventSubscriptionGroupDiscountId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventSubscriptionGroupDiscountForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, \n    `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.account.fullName} <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges && <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link>\n                }\n                <small className=\"text-muted\">\n                  {node.invoiceItems.edges && node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) } <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n  console.log(shifts)\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\nimport moment from 'moment'\n\nexport function get_accounts_query_variables() {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  let search = localStorage.getItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n  queryVars.searchName = search\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(scheduleItemId, date) {\n  return {\n    scheduleItem: scheduleItemId,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status, scheduleItemId, classDate, setRefetchingAttendance}) {\n  setRefetchingAttendance(true)\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(scheduleItemId, classDate)}\n    ],\n    awaitRefetchQueries: true,\n  }).then(({ data }) => {\n    console.log('got data', data);\n    setRefetchingAttendance(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setRefetchingAttendance(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, history }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const [refetchingAttendance, setRefetchingAttendance] = useState(false)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const { \n    // refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, classDate),\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    classDate,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Dimmer active={refetchingAttendance} loader={true} >\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName}\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING',\n                                scheduleItemId: scheduleItemId,\n                                classDate: classDate,\n                                setRefetchingAttendance: setRefetchingAttendance\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n          </Dimmer>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={CSLS.SELFCHECKIN_CHECKIN_SEARCH}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            getAccounts({ variables: get_accounts_query_variables()})\n          } else {\n            setShowSearch(false)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + classDate + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    <Icon name=\"home\" /> {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value.toString(),\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.mailchimp_lists.title\")}</h5>\n                  {t(\"settings.mail.mailchimp_lists.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/mailchimp_lists\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.notifications.title\")}</h5>\n                  {t(\"settings.mail.notifications.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/notifications\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.account_profiles.title\")}</h5>\n                  {t(\"settings.shop.account_profiles.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/account_profiles/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mailchimp.title\")}</h5>\n                  {t(\"settings.integration.mailchimp.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mailchimp/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMailChimpForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group label={t('settings.integration.mailchimp.api_key')}>\n          <Field type=\"text\" \n            name=\"mailchimp_api_key\" \n            className={(errors.mailchimp_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_api_key\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('settings.integration.mailchimp.server_prefix')}>\n          <Field type=\"text\" \n            name=\"mailchimp_server_prefix\" \n            className={(errors.mailchimp_server_prefix) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_server_prefix\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimpForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMailChimpForm from \"./SettingsIntegrationMailChimpForm\"\n\n\nfunction SettingsIntegrationMailChimp({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mailchimp.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingUser, \n    error: errorUser, \n    data: dataUser\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_server_prefix\"\n    }\n  })\n  const { \n    loading: loadingKey, \n    error: errorKey, \n    data: dataKey\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_api_key\"\n    }\n  })\n\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(dataUser)\n  console.log(dataKey)\n\n  if (loadingUser || loadingKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorUser || errorKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mcUser = \"\"\n  if (dataUser.systemSettings.edges.length) {\n    mcUser = dataUser.systemSettings.edges[0].node.value\n  }\n\n  let mcApiKey = \"\"\n  if (dataKey.systemSettings.edges.length) {\n    mcApiKey = dataKey.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >\n    <Formik\n      initialValues={{ \n        mailchimp_server_prefix: mcUser,\n        mailchimp_api_key: mcApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"integration_mailchimp_server_prefix\", value: values.mailchimp_server_prefix },\n            { setting: \"integration_mailchimp_api_key\", value: values.mailchimp_api_key },\n          ]\n\n          for (let i in settings) {\n            console.log(i)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMailChimpForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMailChimpForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimp))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import { gql } from \"@apollo/client\"\n\nexport const GET_MAILCHIMP_LISTS_QUERY = gql`\n  query systemMailchimpLists($after: String, $before: String) {\n    systemMailchimpLists(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          mailchimpListId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MAILCHIMP_LIST_QUERY = gql`\n  query SystemMailchimpList($id: ID!) {\n    systemMailchimpList(id:$id) {\n      id\n      name\n      description\n      frequency\n      mailchimpListId\n    }\n  }\n`\n\nexport const ADD_MAILCHIMP_LIST = gql`\n  mutation CreateSystemMailChimpList($input:CreateSystemMailChimpListInput!) {\n    createSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST = gql`\n  mutation UpdateSystemMailChimpList($input:UpdateSystemMailChimpListInput!) {\n    updateSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_MAILCHIMP_LIST = gql`\nmutation DeleteSystemMailChimpList($input: DeleteSystemMailChimpListInput!) {\n  deleteSystemMailchimpList(input: $input) {\n    ok\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailMailChimpListsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/mailchimp_lists\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"systemmailchimplist\">\n                  <ButtonAdd addUrl=\"/settings/mail/mailchimp_lists/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListsBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_MAILCHIMP_LIST, GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../ui/ButtonDelete';\n\n\nfunction SettingsMailMailChimpListDelete({t, match, node}) {\n  const [ deleteMailChimpList ] = useMutation(DELETE_MAILCHIMP_LIST)\n\n  return <ButtonDelete\n    msgConfirm={t(\"settings.mail.mailchimp_lists.delete_confirm_msg\")}\n    msgDescription={<p>{node.name}</p>}\n    msgSuccess={t('settings.mail.mailchimp_lists.delete_success')}\n    deleteFunction={deleteMailChimpList}\n    deleteFunctionVariables={{ \n        variables: {\n          input: {\n            id: node.id\n          }\n        }, \n        refetchQueries: [\n          { query: GET_MAILCHIMP_LISTS_QUERY },\n        ]\n      }}\n  />\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListDelete))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ButtonEdit from \"../../../ui/ButtonEdit\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase'\nimport SettingsMailMailChimpListDelete from './SettingsMailMailChimpListDelete'\n\n\nfunction SettingsMailMailChimpLists({ t, history }) {\n  const cardTitle = t('settings.mail.mailchimp_lists.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_MAILCHIMP_LISTS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.mailchimp_lists.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  const mailchimpLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailchimpLists.edges.length) { return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.mailchimp_lists.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )}\n\n  return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={mailchimpLists.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: mailchimpLists.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationmailchimpLists.edges\n                        const pageInfo = fetchMoreResult.organizationmailchimpLists.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationmailchimpLists: {\n                                __typename: previousResult.organizationmailchimpLists.__typename,\n                                edges: [ ...previousResult.organizationmailchimpLists.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('settings.mail.mailchimp_lists.mailchimp_list_id')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {mailchimpLists.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.mailchimpListId}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <ButtonEdit editUrl={`/settings/mail/mailchimp_lists/edit/${node.id}`} />\n                    <SettingsMailMailChimpListDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpLists))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MAILCHIMP_LIST_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    frequency: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    mailchimpListId: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\nconst SettingsMailChimpListForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('settings.mail.mailchimp_lists.mailchimp_list_id')}>\n                <Field type=\"text\" \n                        name=\"mailchimpListId\" \n                        className={(errors.mailchimpListId) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"mailchimpListId\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n            <Form.Group label={t('general.frequency')}>\n              <Field type=\"text\" \n                      name=\"frequency\" \n                      className={(errors.frequency) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"frequency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(SettingsMailChimpListForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_MAILCHIMP_LISTS_QUERY, ADD_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\n\n\nfunction SettingsMailMailChimpListAdd({t, history}) {\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const [ addMailChimpList ] = useMutation(ADD_MAILCHIMP_LIST)\n  \n  return (\n   <SettingsMailMailChimpListsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('settings.mail.mailchimp_lists.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', frequency: '', mailchimpListId: '' }}\n          validationSchema={MAILCHIMP_LIST_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addMailChimpList({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                  frequency: values.frequency, \n                  mailchimpListId: values.mailchimpListId, \n                }\n              }, refetchQueries: [\n                  {query: GET_MAILCHIMP_LISTS_QUERY }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('settings.mail.mailchimp_lists.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n            <SettingsMailMailChimpListForm \n              isSubmitting={isSubmitting}\n              values={values}\n              errors={errors}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </SettingsMailMailChimpListsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_MAILCHIMP_LISTS_QUERY, GET_MAILCHIMP_LIST_QUERY, UPDATE_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction SettingsMailMailChimpListEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const cardTitle = t('settings.mail.mailchimp_lists.title_edit')\n  const { loading, error, data } = useQuery(GET_MAILCHIMP_LIST_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateMailchimpList ] = useMutation(UPDATE_MAILCHIMP_LIST)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n                    \n  const initialData = data.systemMailchimpList;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description, \n              frequency: initialData.frequency, \n              mailchimpListId: initialData.mailchimpListId, \n            }}\n            validationSchema={MAILCHIMP_LIST_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateMailchimpList({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name, \n                    description: values.description, \n                    frequency: values.frequency, \n                    mailchimpListId: values.mailchimpListId, \n                  }\n                }, refetchQueries: [\n                    {query: GET_MAILCHIMP_LISTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('settings.mail.mailchimp_lists.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n              <SettingsMailMailChimpListForm \n                isSubmitting={isSubmitting}\n                values={values}\n                errors={errors}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </SettingsMailMailChimpListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_NOTIFICATIONS_QUERY = gql`\n  query systemNotifications($after: String, $before: String) {\n    systemNotifications(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          accounts {\n            edges {\n              node {\n                id\n                fullName\n                email\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_NOTIFICATION_ACCOUNT = gql`\n  mutation CreateSystemNotificationAccount($input:CreateSystemNotificationAccountInput!) {\n    createSystemNotificationAccount(input:$input) {\n      systemNotificationAccount {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_NOTIFICATION_ACCOUNT = gql`\n  mutation DeleteSystemNotificationAccount($input:DeleteSystemNotificationAccountInput!) {\n    deleteSystemNotificationAccount(input:$input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailNotificationsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/notifications\" />  \n              : \"\"\n                // <HasPermissionWrapper permission=\"add\"\n                //                       resource=\"systemnotification\">\n                //   <ButtonAdd addUrl=\"/settings/mail/notifications/add\" />\n                // </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport confirm_delete from '../../../../tools/confirm_delete';\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction SettingsMailNotificationsDeleteAccount({t, match, node, accountId, notificationId}) {\n  const [deleteNotificationAccount ] = useMutation(DELETE_NOTIFICATION_ACCOUNT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"settings.mail.notifications.delete_confirm_msg\"),\n            msgDescription: <p>{node.fullName}</p>,\n            msgSuccess: t('settings.mail.notifications.delete_success'),\n            deleteFunction: deleteNotificationAccount,\n            functionVariables: { \n              variables: {\n                input: {\n                  account: accountId,\n                  systemNotification: notificationId\n                }\n              }, \n              refetchQueries: [\n                { query: GET_NOTIFICATIONS_QUERY },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsDeleteAccount))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Button,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\n// import ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SettingsMailNotificationButtonDeleteAccount from './SettingsMailNotificationButtonDeleteAccount'\n\n\nfunction SettingsMailNotifications({ t, history }) {\n  const cardTitle = t('settings.mail.notifications.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_NOTIFICATIONS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  if (error) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.notifications.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  const notifications = data.systemNotifications\n\n  // Empty list\n  if (!notifications.edges.length) { return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.notifications.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )}\n\n  console.log(notifications)\n\n  return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={notifications.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: notifications.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.systemNotifications.edges\n                        const pageInfo = fetchMoreResult.systemNotifications.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              systemNotifications: {\n                                __typename: previousResult.systemNotifications.__typename,\n                                edges: [ ...previousResult.systemNotifications.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('settings.mail.notifications.accounts')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {notifications.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <div className='float-right'>\n                      {node.accounts.edges.map(({ node: accountNode }) => (\n                        // TODO: Add a delete button to the right of each account\n                        // console.log(accountNode)\n                        <div>\n                          <div className='float-right'>\n                            <SettingsMailNotificationButtonDeleteAccount\n                              node={accountNode}\n                              notificationId={node.id}\n                              accountId={accountNode.id}\n                            />\n                          </div>\n                          {accountNode.fullName}<br />\n                          <span className='text-muted'>{accountNode.email}</span>\n                        </div>\n                      ))}\n                      <Link to={`/settings/mail/notifications/add_account/${node.id}`}>\n                        <Button\n                          color=\"link\"\n                          icon=\"plus-circle\">\n                            {t(\"settings.mail.notifications.add_account\")}\n                        </Button>\n                      </Link>\n                    </div>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotifications))\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\nimport { CREATE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\n\n\nfunction SettingsMailNotificationButtonAddAccount({ t, match, history, accountId })  {\n  const notificationId = match.params.id\n  const [ createNotificationAccount ] = useMutation(CREATE_NOTIFICATION_ACCOUNT)\n  \n  return (\n    <Button\n      color=\"secondary\"\n      onClick={ () => (\n        createNotificationAccount({ variables: {\n          input: {\n            systemNotification: notificationId,\n            account: accountId\n          }}, \n          refetchQueries: [\n            {query: GET_NOTIFICATIONS_QUERY}\n        ]})\n        .then(({ data }) => {\n          console.log('got data', data)\n          history.push(`/settings/mail/notifications`)\n          toast.success((t('settings.mail.notifications.toast_add_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        }).catch((error) => {\n          toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n          console.log('there was an error sending the query', error)\n          // setSubmitting(false)\n        })\n      )}\n    >\n      <Icon name=\"plus-circle\" /> {t(\"settings.mail.notifications.btn_add_account\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationButtonAddAccount))\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../general/ContentCard\"\nimport InputSearch from '../general/InputSearch'\nimport { GET_ACCOUNTS_QUERY } from '../../queries/accounts/account_search_queries'\n\n// Action buttons\nimport SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\n\nfunction SearchAccounts({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  placeholderSearch=\"\", \n  btnDisableAccountIds=[],\n  btnDisabledMessage=\"\",\n  btnAction,\n }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function renderActionButton(accountId) {\n    switch(btnAction) {\n      case \"settingsMailNotificationAddAccount\":\n        return <SettingsMailNotificationButtonAddAccount accountId={accountId} />\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={localStorateKeySearchValue}\n      placeholder={placeholderSearch}\n      onChange={(value) => {\n        localStorage.setItem(localStorateKeySearchValue, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_account_not_found\")}</strong> {\" - \"}\n        {t(\"general.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(btnDisableAccountIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{btnDisabledMessage}</span> :\n                    <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SearchAccounts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SearchAccounts from '../../../ui/SearchAccounts'\n\n\nfunction SettingsMailNotificationsAddAccount({ t, match, history }) {\n\n  return (\n    <SettingsMailNotificationsBase showBack={true}>\n      <SearchAccounts\n        localStorateKeySearchValue=\"\" \n        placeholderSearch={t(\"settings.mail.notifications.placeholder_search_account\")} \n        btnDisableAccountIds={[1]}\n        btnDisabledMessage=\"already notified!\"\n        btnAction=\"settingsMailNotificationAddAccount\"\n      />\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsAddAccount))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle=\"\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t(\"settings.mail.title\")} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t('settings.mail.title')} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t(\"settings.mail.templates.title\")\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.shop.account_profiles.required_fields')}>\n            <Field component=\"select\" \n              name=\"shop_account_profile_required_fields\" \n              className={(errors.shop_account_profile_required_fields) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MINIMAL\">{t(\"settings.shop.account_profiles.options.minimal\")}</option>\n                <option value=\"CONTACT\">{t(\"settings.shop.account_profiles.options.contact\")}</option>\n            </Field>\n            <ErrorMessage name=\"shop_account_profile_required_fields\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfileForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopAccountProfileForm from \"./SettingsShopAccountProfileForm\"\n\n\nfunction SettingsShopAccountProfile({ t, match, history }) {\n  const headerSubTitle = t('settings.shop.title')\n  const cardTitle = t(\"settings.shop.account_profiles.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"shop_account_profile_required_fields\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    shop_account_profile_required_fields: \"\",\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['shop_account_profile_required_fields'] = data.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        shop_account_profile_required_fields: initialValues['shop_account_profile_required_fields'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"shop_account_profile_required_fields\", \n              value: values.shop_account_profile_required_fields },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopAccountProfileForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopAccountProfileForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfile))","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n  // Unset any next link for profile that might have come from /shop/checkout/payment\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.mailing_lists.title\")}</h5>\n              {t(\"shop.account.mailing_lists.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton \n                link=\"/shop/account/mailing_lists\" \n                buttonText={t(\"shop.account.btn_text_manage\")} \n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport {\n  Icon,\n} from \"tabler-react\"\n\nexport function DisplayClassInfo({\n  t, \n  classDate, \n  classData,\n  dateFormat,\n  timeFormat,\n  showTimeEnd,\n}) {\n    return (\n      <>\n        <h6>{classData.organizationClasstype.name}</h6>\n        <Icon name=\"clock\" /> { moment(classDate).format(dateFormat) } { \" \" }\n        <span className=\"text-muted\">\n          {moment(classDate + ' ' + classData.timeStart).format(timeFormat)} \n          {(showTimeEnd) && <>{ \" - \" }{moment(classDate + ' ' + classData.timeEnd).format(timeFormat)}</>}\n        </span><br />\n        <Icon name=\"home\" /> { classData.organizationLocationRoom.organizationLocation.name } { \" \" }\n        <span className=\"text-muted\">\n          { classData.organizationLocationRoom.name }\n        </span> \n      </>\n      // <div>\n      //   <b>\n      //     {moment(classDate).format(dateFormat)} {' '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n      //   </b>\n      //   {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n      //     classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      // </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.already_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"warning\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"CANCELLED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_cancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_cancel.confirm_yes\")}\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      uncancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassUnCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassUnCancelBase from \"./ShopAccountClassUnCancelBase\"\n\n\n\nfunction ShopAccountClassUnCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassUnCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassUnCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus !== 'CANCELLED') {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.not_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.uncancellationPossible) {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.uncancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassUnCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_uncancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"primary\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"BOOKED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_uncancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_uncancel.confirm_yes\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassUnCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Dimmer,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data.scheduleClass} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(data.scheduleClass.infoMailContent) }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.invoices.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Card.Title>{node.invoiceNumber}</Card.Title>\n                      </Link>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    { node.business && \n                      <Card.Alert color=\"primary\">\n                        {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{node.business.name}</b>\n                      </Card.Alert> \n                    }\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                            <Table.Col><b>{node.balanceDisplay}</b></Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {((node.status === \"SENT\" || node.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        outline\n                        color=\"primary\"\n                        icon=\"printer\"\n                        className=\"mr-2\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>    \n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Button \n                          outline\n                          color=\"primary\"\n                          icon=\"file-text\"\n                          className=\"mr-2\"\n                        >\n                          {t('general.details')}\n                        </Button>\n                      </Link>                  \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICE = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id: $id) {\n      id\n      business {\n        id\n        name\n      }\n      invoiceNumber\n      status\n      summary\n      relationCompany\n      relationContactName\n      dateSent\n      dateDue\n      total\n      totalDisplay\n      balance\n      balanceDisplay\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            priceDisplay\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoiceBase({ t, match, history, children, pageHeaderButtonList, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\" />\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoiceBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICE } from \"./queries\"\n\nimport ShopAccountInvoiceBase from \"./ShopAccountInvoiceBase\"\n\n\nfunction ShopAccountInvoice({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const invoiceId = match.params.id\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading, error, data } = useQuery(QUERY_ACCOUNT_INVOICE, {\n    variables: {\n      id: invoiceId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading) return (\n    <ShopAccountInvoiceBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoiceBase>\n  )\n  if (error) return (\n    <ShopAccountInvoiceBase>\n      {t(\"shop.account.invoice.error_loading_data\")}\n    </ShopAccountInvoiceBase>\n  )\n\n  const user = data.user\n  const invoice = data.financeInvoice\n\n  const pageHeaderButtonList = ((invoice.status === \"SENT\" || invoice.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n    <Link to={\"/shop/account/invoice_payment/\" + invoice.id}>\n      <Button\n        className=\"float-right ml-2\"\n        color=\"success\"\n      >\n        {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n    : \"\"\n    \n\n  return (\n    <ShopAccountInvoiceBase accountName={user.fullName} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <div className='float-right'>\n            <FinanceInvoicesStatus status={invoice.status}/>\n          </div>\n          <h4>{t(\"shop.account.invoice.title\")} {invoice.invoiceNumber}</h4>\n          { invoice.business && \n              <Alert type=\"primary\">\n                {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{invoice.business.name}</b>\n              </Alert> \n          }\n          <Card>\n            <Card.Body>\n              {invoice.summary}\n            </Card.Body>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateSent).format(dateFormat)}</Table.Col>\n                  <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateDue).format(dateFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.Col>{invoice.totalDisplay}</Table.Col>\n                  <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                  <Table.Col><b>{invoice.balanceDisplay}</b></Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n          <h4>{t('general.items')}</h4>\n          {invoice.items.edges.map(({ node }) => (\n            <Card>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} sm={12} md={6}>\n                    <h6>{node.productName}</h6>\n                    {node.description}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={4}>\n                    {(parseFloat(node.quantity) > 1.00) ? <div>\n                      <b>{node.quantity} {t(\"shop.account.invoice.pieces\")} </b><br />\n                      {node.priceDisplay} {t(\"general.each\")}\n                    </div> : \"\"}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={2}>\n                    <div className=\"float-right\">\n                      <b>{node.totalDisplay}</b><br />\n                    </div>\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n          {(invoice.payments.edges.length) ?\n            <React.Fragment>\n              <h4>{t(\"general.payments\")}</h4>\n              {invoice.payments.edges.map(({ node }) => (\n              <Card>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} sm={12} md={8}>\n                      <h6>{moment(node.date).format(dateFormat)}</h6>\n                      {node.financePaymentMethod.name}\n                    </Grid.Col>\n                    <Grid.Col xs={12} sm={12} md={4}>\n                      <div className=\"float-right\">\n                        <b>{node.amountDisplay}</b><br />\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n            </React.Fragment>\n          : \"\"}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoiceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoice))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_SYSTEM_MAILCHIMP_LISTS = gql`\n  query SystemMailchimpLists($before: String, $after: String) {\n    systemMailchimpLists(first: 100, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          subscribed\n          mailchimpListId\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS = gql`\n  mutation updateSystemMailchimpListSubscriptionStatus($input: UpdateSystemMailChimpListSubscriptionStatusInput!) {\n    updateSystemMailchimpListSubscriptionStatus(input: $input) {\n      subscriptionStatus\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountMailingListsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListsBase))","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  GalleryCard,\n  Button,\n  Badge,\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS, UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS } from './queries'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopAccountMailingListCard({ t, mailingList, btnLink, active=false }) {\n  let [isSubmitting, setSubmitting] = useState(false)\n  const [ updateSubscriptionStatus ] = useMutation(UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS)\n\n  function doUpdateSubscriptionStatus(mailchimpListId) {\n    setSubmitting(true)\n\n    updateSubscriptionStatus({ variables: {\n      input: {\n        mailchimpListId: mailchimpListId\n      }\n    }, refetchQueries: [\n      {query: QUERY_SYSTEM_MAILCHIMP_LISTS}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data)\n        toast.success((t('shop.account.mailing_lists.toast_update_subscription_status_success')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        setSubmitting(false)\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        setSubmitting(false)\n      })\n    }  \n\n  return (\n    <GalleryCard>\n      <GalleryCard.Details>\n        <div>\n        <span className='float-right'>\n        {(mailingList.subscribed) ? <Badge color=\"success\">Subscribed</Badge> : \"\"}\n        </span>\n        <h4>{mailingList.name}</h4>\n        </div>\n        \n        <h6>{mailingList.frequency}</h6>\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(mailingList.description) }} />\n\n        {(mailingList.subscribed) ? \n              <Button\n                color=\"secondary\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.unsubscribing\") : \n                  t(\"shop.account.mailing_lists.unsubscribe\") \n                }\n              </Button> :\n              <Button\n                color=\"success\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.subscribing\") : \n                  t(\"shop.account.mailing_lists.subscribe\") \n                }\n              </Button>\n        }\n      </GalleryCard.Details>\n    </GalleryCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListCard))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountMailingListsBase from \"./ShopAccountMailingListsBase\"\nimport ShopAccountMailingListCard from \"./ShopAccountMailingListCard\"\n\n\nfunction ShopAccountMailingLists({t, match, history}) {\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(QUERY_SYSTEM_MAILCHIMP_LISTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountMailingListsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountMailingListsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountMailingListsBase>\n      {t(\"shop.account.mailing_lists.error_loading_data\")}\n    </ShopAccountMailingListsBase>\n  )\n\n  const user = data.user\n  const mailingLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailingLists.edges.length) {\n    return (\n      <ShopAccountMailingListsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.mailing_lists.title')} >\n              <Card.Body>\n                {t('shop.account.mailing_lists.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountMailingListsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountMailingListsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.mailing_lists.title')}</h4>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        {mailingLists.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={4}>\n            <ShopAccountMailingListCard\n              mailingList={node}\n              // btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopAccountMailingListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountMailingLists))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n  if (!returnUrl) {\n    returnUrl = \"/shop/account\"\n  }\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack returnUrl={returnUrl} />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA_MINIMAL = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n\nexport const ACCOUNT_SCHEMA_CONTACT = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n    address: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    postcode: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    city: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    country: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    phone: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA_MINIMAL, ACCOUNT_SCHEMA_CONTACT } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n// TODO: Fetch required level or profile completeness and set correct YupSchema for it.\n\n  const user = data.user\n\n  let validationSchema = ACCOUNT_SCHEMA_MINIMAL\n  if (user.profilePolicy === \"CONTACT\") {\n    validationSchema = ACCOUNT_SCHEMA_CONTACT\n  }\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n            unlimited\n          }\n          creditTotal\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptions.edges.map(({ node }) => (\n              <Card key={v4()}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={10}>\n                      <div className='mb-xs-3'>\n                        <h6>\n                          { node.organizationSubscription.name }\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                        </h6>\n                        <Icon name=\"calendar\" /> { moment(node.dateStart).format(dateFormat) } \n                        { (node.dateEnd) && <span> - {moment(node.dateEnd).format(dateFormat)}</span> }\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={2}>\n                      <Link to={`/shop/account/subscriptions/${node.id}/credits`}>\n                        <Button\n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                        >\n                          {(node.organizationSubscription.unlimited) ? \n                            t(\"general.unlimited\") : node.creditTotal } {\" \"}\n                          {t(\"general.credits\")}\n                        </Button>\n                      </Link>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTION_CREDITS = gql`\n  query AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n    accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          advance\n          reconciled\n          createdAt\n          description\n          expiration\n          scheduleItemAttendance {\n            id\n            date\n            scheduleItem {\n              id\n              timeStart\n              timeEnd\n              organizationClasstype {\n                id\n                name\n              }\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id \n                  name\n                }\n              }\n            }\n          }\n          accountSubscription {\n            id\n            organizationSubscription {\n              name\n              unlimited\n            }\n            creditTotal\n            dateStart\n            dateEnd\n          }\n        }\n      }\n    }\n    accountSubscription(id: $accountSubscription) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../../SiteWrapperShop\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ShopAccountSubscriptionCreditsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ButtonBack returnUrl={`/shop/account/subscriptions`} />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCreditsBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../../general/LoadMoreOnBottomScroll'\n\nimport { QUERY_ACCOUNT_SUBSCRIPTION_CREDITS } from \"./queries\"\nimport ShopAccountSubscriptionCreditsBase from \"./ShopAccountSubscriptionCreditsBase\"\n\n\nfunction ShopAccountSubscriptionCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const subscriptionId = match.params.subscription_id\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTION_CREDITS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      accountSubscription: subscriptionId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionCreditsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionCreditsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionCreditsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionCreditsBase>\n  )\n\n  const user = dataUser.user\n  const subscriptionCredits = data.accountSubscriptionCredits\n  const organizationSubscription = data.accountSubscription.organizationSubscription\n\n  // Unlimited credits, no need to go into details.\n  if (organizationSubscription.unlimited) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                <Card.Alert color=\"primary\"><Icon name=\"check\" /> {t('shop.account.subscriptions.credits.unlimited')}</Card.Alert>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n  // Empty list\n  if (!subscriptionCredits.edges.length) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.credits.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.credits.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptionCredits.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptionCredits.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscription credits at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptionCredits: {\n                          __typename: previousResult.accountSubscriptionCredits.__typename,\n                          edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptionCredits.edges.map(({ node }) => (\n              <Card key={v4()} statusColor={(!node.scheduleItemAttendance) ? \"success\" : \"default\"}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.added_on\")}\n                        </small>\n                        <h6>\n                          { moment(node.createdAt).format(dateFormat) }\n                          <div><small className='text-muted'> {node.description}</small></div>\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                          { (node.reconciled) && <div>\n                            <small className='text-muted'>\n                              {t(\"shop.account.subscriptions.credits.reconciled_on\")} { moment(node.reconciled).format(dateFormat) }\n                            </small>\n                          </div>}\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.expiration\")}\n                        </small>\n                        <h6>\n                          { moment(node.expiration).format(dateFormat) }\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.status\")}\n                        </small>\n                        {(!node.scheduleItemAttendance) ?\n                          // No attendance recorded yet, show available or expired\n                          ( moment() > moment(node.expiration) ) ? \n                          <h6><Badge color=\"danger\">{t(\"shop.account.subscriptions.credits.expired\")}</Badge></h6> :\n                          <h6><Badge color=\"success\">{t(\"shop.account.subscriptions.credits.available\")}</Badge></h6>\n                          : \n                          <h6><Badge color=\"default\">{t(\"shop.account.subscriptions.credits.used\")}</Badge></h6>\n                        }\n                        \n                        {(node.scheduleItemAttendance) && <small className='text-muted'>\n                          <div>\n                            {`${moment(node.scheduleItemAttendance.date).format(dateFormat)} \n                            ${moment(node.scheduleItemAttendance.date + \" \" + node.scheduleItemAttendance.scheduleItem.timeStart).format(timeFormat)}\n                            - ${node.scheduleItemAttendance.scheduleItem.organizationClasstype.name}`}\n                          </div> \n                          {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                        </small>}\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionCreditsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCredits))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.book.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    console.log(error.graphQLErrors)\n    if (error.graphQLErrors && error.graphQLErrors[0].extensions) {\n      if (error.graphQLErrors[0].extensions.code === \"CLASS_DOESNT_TAKE_PLACE_ON_DATE\") {\n        return (\n          <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n            <p>\n              <Alert type=\"warning\">\n                <strong>{(t(\"shop.classes.book.class_doesnt_take_place_on_this_date\"))}</strong>\n              </Alert>\n            </p>\n          </ShopClassBookBase>\n        )\n      }\n    } \n      \n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ' ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED\")\n  console.log(alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h5>{ class_info }</h5>\n          <div className=\"mt-6\">\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")} <br /><br />\n                <Link to='/shop/account/classes'>\n                  <Button\n                    color=\"primary\"\n                    outline\n                  >\n                    {t('shop.account.classes.title')} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Alert>\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.booked.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data.scheduleClass} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"shop.classes.booked.to_profile\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let instructor\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    instructor = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)\n    if (instructor) {\n      queryVars.instructor = instructor\n    } else {\n      queryVars.instructor = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)}\n            onChange={ (event) => {\n              updateLocalStorageAndRefetch(\n                CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Dimmer,\n  Grid,\n  Icon,\n  Progress,\n  Table,\n} from \"tabler-react\";\n\nimport { capitalize } from '../../../../tools/string_tools'\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    // https://github.com/apollographql/react-apollo/issues/321\n    // Set loading to true when refetching\n    notifyOnNetworkStatusChange: true\n  })\n\n  console.log(loading)\n\n  const pageHeaderOptions = <Button.List className=\"schedule-list-page-options-btn-list\">\n    <Button \n      icon=\"chevron-left\"\n      color=\"secondary\"\n      disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n      onClick={ () => {\n        let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n        let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n    <Button \n      color=\"secondary\"\n      onClick={ () => {\n        let currentWeekFrom = moment()\n        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n        \n        refetch(get_list_query_variables())\n    }} > \n      {t(\"general.today\")}\n    </Button>\n    <Button \n      icon=\"chevron-right\"\n      color=\"secondary\"\n      onClick={ () => {\n        let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n  </Button.List>\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions} >\n      <br /><br /><br /><br />    \n      <Dimmer active={true} loader={true} />\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n  \n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        spaces,\n                        availableSpacesOnline,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h5>\n                              { organizationClasstype.name } { ' ' }\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n\n                            </h5> \n                             <span className=\"mr-2\">{ (account) ? account.fullName : \"\" }</span>\n                             <span className=\"text-muted\">{organizationLevel && organizationLevel.name}</span>\n                             <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                              {(bookingStatus !== \"FINISHED\" && status !== \"CANCELLED\") ? \n                                <React.Fragment>\n                                  <div style={{clear: \"both\"}} />\n                                    <div className=\"cs-shop-classes-schedule-business-indicator mt-2\">\n                                      <div className=\"float-right\"><small><Icon name=\"users\" className=\"text-muted\" /></small></div>\n                                      <Progress size=\"xs\" className=\"cs-shop-classes-schedule-business-indicator\">\n                                        {/* This strange calculation shows online spaces in the progress bar, not all spaces. */}\n                                        <Progress.Bar color=\"primary\" width={((spaces-availableSpacesOnline)/spaces) * 100} /> \n                                      </Progress>\n                                  </div>\n                                </React.Fragment>\n                                : \"\"\n                              }\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card, Grid, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address) }} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n        <Card.Footer>\n          <Grid.Row>\n            <Grid.Col xs={12}>\n              <a href=\"/d/export/terms-and-conditions\" target=\"_blank\">\n                {t(\"general.terms_and_conditions\")}\n              </a>\n            </Grid.Col>\n            <Grid.Col xs={12}>\n              <a className=\"float-sm-right float-md-right float-lg-right float-xl-right\" \n                href=\"/d/export/privacy-policy\" target=\"_blank\">\n                {t(\"general.privacy_policy\")}\n              </a>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Footer>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventsBase from \"./ShopEventsBase\"\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`#/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={moment(node.dateStart).format(dateFormat)}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children, title=\"\" }) {\n  \n  return (\n    <ShopBase \n      title={title}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          {(eventTicket.isEarlybirdPrice) ? <span>\n            <Badge className=\"mr-2\" color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge>\n          </span> : \"\"}\n          {(eventTicket.isSubscriptionDiscountPrice) ? <span>\n            <Badge color=\"success\">{t(\"shop.event.ticket.subscription_discount\")}</Badge>\n          </span> : \"\"}\n        </PricingCard.AttributeItem>\n        {(eventTicket.isEarlybirdPrice || eventTicket.isSubscriptionDiscountPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          isSubscriptionDiscountPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Alert,\n  Card,\n  Dimmer,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let tempTitle = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  // Check if refresh token is present and if so, hasn't expired\n  // To see whether a user is signed in now\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let userIsAuthenticated = true\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    userIsAuthenticated = false\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopEventBase title={tempTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={tempTitle}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n\n  return (\n    <ShopEventBase title={event.name}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(event.description) }} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          {(!userIsAuthenticated) ? <Alert type=\"primary\">\n              <Link to=\"/user/login\">\n                <b>{t(\"general.sign_in\")}</b>\n              </Link> {t(\"shop.events.sign_in_to_see_discounts\")}\n            </Alert>\n            : \"\"}\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children, subTitle }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.events.ticket.title\")}\n      subTitle={subTitle}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      isSubscriptionDiscountPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  let title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  const eventTicket = data.scheduleEventTicket\n  const subTitle = eventTicket.scheduleEvent.name\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title} subTitle={subTitle}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title} subTitle={subTitle}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(eventTicket.description) }} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n        hasCompleteEnoughProfile\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","import React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  localStorage.setItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT, location.pathname)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  const account = data.financeOrder.account\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems) \n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  // Check profile complete enough\n  if (!account.hasCompleteEnoughProfile) {\n    // If not, show message that a more complete profile is required\n    msgNextStep = t(\"shop.checkout.payment.profile_not_complete_enough\")\n    buttonNext = <Link to=\"/shop/account/profile\">\n      <Button\n        block\n        color=\"primary\"\n      >\n        {t(\"shop.checkout.payment.update_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  } else if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          uncancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\n\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <h4>{t(\"shop.account.classes.title\")}</h4>\n      <LoadMoreOnBottomScroll\n        // headerContent={headerOptions}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n          {/* <Grid.Row> */}\n          { scheduleItemAttendances.edges.map(({ node }) => (\n            <Card key={v4()}>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} md={10}>\n                    <div className='mb-xs-3'>\n                      <h6>\n                        { node.scheduleItem.organizationClasstype.name }\n                        <span className='float-xs-right'> <BadgeBookingStatus status={node.bookingStatus} /></span>\n                      </h6>\n                      <Icon name=\"clock\" /> { moment(node.date).format(dateFormat) } { \" \" }\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span><br />\n                      <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } { \" \" }\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </div>\n                  </Grid.Col>\n                  <Grid.Col xs={12} md={2}>\n                    {(node.bookingStatus !== \"CANCELLED\") ?\n                      <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                          className=\"\"\n                          >\n                          {t(\"general.info\")}\n                        </Button>\n                      </Link>\n                      : \"\"\n                    }\n                    {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                      <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          className=\"mt-3\"\n                          >\n                          {t(\"general.cancel\")}\n                        </Button>\n                      </Link>\n                      : (node.uncancellationPossible) ? \n                        <Link to={`/shop/account/class_uncancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                          <Button \n                            block\n                            outline\n                            color=\"primary\"\n                            size=\"sm\"\n                            className=\"mt-3\"\n                            >\n                            {t(\"general.book\")}\n                          </Button>\n                        </Link>\n                      : \"\"\n                    }\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n      </LoadMoreOnBottomScroll>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity} {' '} {classpass.validityUnitDisplay}</b>\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(classpass.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptionPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // subscription should be an object with at least the following values from an organizationSubscription object:\n  // id, name, priceTodayDisplay, subscriptionUnit, unlimited, minDuration, priceFirstMonthDisplay, \n  // accountRegistrationfee\n\n  let unit = t(\"general.month\")\n  if (!subscription.unlimited && subscription.subscriptionUnit === 'WEEK') {\n    unit = t(\"general.week\")\n  }\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> { \" \" }\n          {t('general.classes')} / {unit}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.min_duration')} { \" \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organizationSubscription.termsAndConditions) }} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for bank account details, if not set, \n    if (!account.hasBankAccountInfo) {\n      // Create local storage back url for account bank account component    \n      localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n      // Show bank account requird \n      CheckoutCard = <CheckoutCardBankAccountRequired />\n    } else {\n      // Allow customer to create a subscription\n      CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(subscription.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const appSettings = useContext(AppSettingsContext)\n  const accountSignupEnabled = appSettings.accountSignupEnabled\n\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  // Do an auth cleanup, so we start clean when signing in\n  CSAuth.cleanup()\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>\n      {\n        (accountSignupEnabled) && <React.Fragment>\n          <div className=\"text-center\">\n            <h5>{t('user.register.create_account')}</h5>\n            {t('user.register.create_account_msg')} <br />\n            {t('user.register.create_account_msg_click_below')} <br />\n          </div>\n          <Button \n            block\n            color=\"link\"\n            RootComponent=\"a\"\n            href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n              \"http://localhost:8000/d/accounts/signup/\" :\n              \"/d/accounts/signup/\"\n            } \n          >\n            {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n          </Button>\n        </React.Fragment>\n      }\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE, {\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <Dimmer active={true} loader={true} />\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n\n  // Push the user to the shop in case they're not an employee or instructor\n  if (!user.employee && !user.instructor) {\n    history.push(\"/shop/account\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\" hideLoading={true}>\n          <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport CookiePolicy from './components/shop/cookie_policy/CookiePolicy'\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceExpenses from './components/finance/expenses/FinanceExpenses'\nimport FinanceExpenseAdd from './components/finance/expenses/FinanceExpenseAdd'\nimport FinanceExpenseEdit from './components/finance/expenses/FinanceExpenseEdit'\nimport FinanceExpensesExport from './components/finance/expenses/export/FinanceExpensesExport'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceEditTo from './components/finance/invoices/edit_to/FinanceInvoiceEditTo'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceQuotes from './components/finance/quotes/FinanceQuotes'\nimport FinanceQuotesExport from './components/finance/quotes/export/FinanceQuotesExport'\nimport FinanceQuoteEdit from './components/finance/quotes/edit/FinanceQuoteEdit'\nimport FinanceQuoteEditTo from './components/finance/quotes/edit_to/FinanceQuoteEditTo'\nimport FinanceQuoteGroups from './components/finance/quotes/groups/FinanceQuoteGroups'\nimport FinanceQuoteGroupAdd from './components/finance/quotes/groups/FinanceQuoteGroupAdd'\nimport FinanceQuoteGroupEdit from './components/finance/quotes/groups/FinanceQuoteGroupEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightInactiveAccounts from './components/insight/inactive_accounts/InsightInactiveAccounts'\nimport InsightInactiveAccountsAdd from './components/insight/inactive_accounts/InsightInactiveAccountsAdd'\nimport InsightInactiveAccountsView from './components/insight/inactive_accounts/InsightInactiveAccountsView'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightInstructorClassesMonth from './components/insight/instructor_classes/InsightInstructorClassesMonth'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationProducts from './components/organization/products/OrganizationProducts'\nimport OrganizationProductAdd from './components/organization/products/OrganizationProductAdd'\nimport OrganizationProductEdit from './components/organization/products/OrganizationProductEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport RelationsAccountEnrollments from './components/relations/accounts/enrollments/AccountEnrollments'\nimport RelationsAccountEnrollmentEdit from './components/relations/accounts/enrollments/AccountEnrollmentEdit'\nimport RelationsAccountEnrollmentFindClass from './components/relations/accounts/enrollments/AccountEnrollmentFindClass'\nimport RelationsAccountTools from './components/relations/accounts/tools/RelationsAccountTools'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountProducts from './components/relations/accounts/products/AccountProducts'\nimport AccountProductAdd from './components/relations/accounts/products/AccountProductAdd'\nimport AccountQuotes from './components/relations/accounts/quotes/AccountQuotes'\nimport AccountQuoteAdd from './components/relations/accounts/quotes/AccountQuoteAdd'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\nimport RelationsB2BInvoices from './components/relations/b2b/invoices/RelationsB2BInvoices'\nimport RelationsB2BInvoiceAdd from './components/relations/b2b/invoices/RelationsB2BInvoiceAdd'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventSubscriptionGroupDiscounts from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts'\nimport ScheduleEventSubscriptionGroupDiscountAdd from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd'\nimport ScheduleEventSubscriptionGroupDiscountEdit from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMailChimp from './components/settings/integration/mailchimp/SettingsIntegrationMailChimp'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailMailChimpLists from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists'\nimport SettingsMailMailChimpListAdd from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd'\nimport SettingsMailMailChimpListEdit from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit'\nimport SettingsMailNotifications from './components/settings/mail/notifications/SettingsMailNotifications'\nimport SettingsMailNotificationsAddAccount from './components/settings/mail/notifications/SettingsMailNotificationsAddAccount'\nimport SettingsMailTemplates from './components/settings/mail/templates/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/templates/SettingsMailTemplateEdit'\nimport SettingsShopAccountProfile from './components/settings/shop/account_profiles/SettingsShopAccountProfile'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassUnCancel from './components/shop/account/class_uncancel/ShopAccountClassUnCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountInvoice from './components/shop/account/invoice/ShopAccountInvoice'\nimport ShopAccountMailingLists from './components/shop/account/mailing_lists/ShopAccountMailingLists'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopAccountSubscriptionCredits from './components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n}\n\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (authTokenExpired) {\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    if (refreshTokenExp == null) {\n      console.log(\"refresh token not found\")\n      SetCurrentUrlAsNext()\n      CSAuth.cleanup()\n      \n      return LoginRequired\n    } else if ((new Date() / 1000) >= refreshTokenExp) {\n      console.log(\"refresh token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n      SetCurrentUrlAsNext()\n      CSAuth.cleanup()\n\n      return SessionExpired\n    } else {\n      // Refresh token\n      console.log(\"auth token expired\")\n      console.log(new Date() / 1000)\n      console.log(refreshTokenExp)\n\n      doTokenRefresh().then(({ data }) => {\n        console.log('got refresh data', data)\n        CSAuth.updateTokenInfo(data.refreshToken)\n        return ContinueAsYouAre\n      }).catch((error) => {\n        toast.error(error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        console.log('there was an error refreshing the token', error) \n        SetCurrentUrlAsNext()\n        // As there was an issue detected with the refresh token, clear all.\n        CSAuth.cleanup()\n        return LoginRequired\n      })\n    }\n  } else {\n    return ContinueAsYouAre\n  }\n  // return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  let organization = dataOrganization.organization\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* COOKIE POLICY */}\n            <Route exact path=\"/cookie_policy\" component={CookiePolicy} />\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/expenses\" component={FinanceExpenses} />\n            <PrivateRoute exact path=\"/finance/expenses/add\" component={FinanceExpenseAdd} />\n            <PrivateRoute exact path=\"/finance/expenses/edit/:id\" component={FinanceExpenseEdit} />\n            <PrivateRoute exact path=\"/finance/expenses/export\" component={FinanceExpensesExport} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id/to\" component={FinanceInvoiceEditTo} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/quotes\" component={FinanceQuotes} />\n            <PrivateRoute exact path=\"/finance/quotes/export\" component={FinanceQuotesExport} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id\" component={FinanceQuoteEdit} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id/to\" component={FinanceQuoteEditTo} />\n            <PrivateRoute exact path=\"/finance/quotes/groups\" component={FinanceQuoteGroups} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/add\" component={FinanceQuoteGroupAdd} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/edit/:id\" component={FinanceQuoteGroupEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/products\" component={OrganizationProducts} />\n            <PrivateRoute exact path=\"/organization/products/add\" component={OrganizationProductAdd} />\n            <PrivateRoute exact path=\"/organization/products/edit/:id\" component={OrganizationProductEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments\" component={RelationsAccountEnrollments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments/edit/:id\" component={RelationsAccountEnrollmentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollment_find_class\" component={RelationsAccountEnrollmentFindClass} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products\" component={AccountProducts} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products/add\" component={AccountProductAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes\" component={AccountQuotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes/add\" component={AccountQuoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/tools\" component={RelationsAccountTools} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices\" component={RelationsB2BInvoices} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices/add\" component={RelationsB2BInvoiceAdd} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts\" \n                          component={ScheduleEventSubscriptionGroupDiscounts} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/add\" \n                          component={ScheduleEventSubscriptionGroupDiscountAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/edit/:id\" \n                          component={ScheduleEventSubscriptionGroupDiscountEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts\" component={InsightInactiveAccounts} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/add\" component={InsightInactiveAccountsAdd} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/view/:id\" component={InsightInactiveAccountsView} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/instructor_classes_month\" component={InsightInstructorClassesMonth} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_uncancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassUnCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/invoice/:id\" component={ShopAccountInvoice} />\n            <PrivateRoute exact path = \"/shop/account/mailing_lists\" component={ShopAccountMailingLists} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions/:subscription_id/credits\" component={ShopAccountSubscriptionCredits} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <Route exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mailchimp\" component={SettingsIntegrationMailChimp} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists\" component={SettingsMailMailChimpLists} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/add\" component={SettingsMailMailChimpListAdd} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/edit/:id\" component={SettingsMailMailChimpListEdit} />\n            <PrivateRoute exact path=\"/settings/mail/notifications\" component={SettingsMailNotifications} />\n            <PrivateRoute exact path=\"/settings/mail/notifications/add_account/:id\" component={SettingsMailNotificationsAddAccount} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/account_profiles\" component={SettingsShopAccountProfile} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\nimport { onError } from \"@apollo/client/link/error\";\n// import { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSEC from \"./tools/cs_error_codes\"\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } \n}\n  \n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  console.log(response)\n\n  let user_not_logged_in_within_graphql_errors = false\n  let user_nog_logged_in_within_response_errors = false\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n      // Catch broken promises (Check needed since django-graphene 3.0.0b8)\n      // Instead of adding a graphql error, there's a broken promise on an exception raised.\n      // if (message.includes(CSEC.USER_NOT_LOGGED_IN)) {\n      //   user_not_logged_in_within_graphql_errors = true\n      // }\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // Catch errors in response\n  if (response) {\n    let i\n    for (i = 0; i < response.errors.length; i++) {\n      if (response.errors[i].extensions && response.errors[i].extensions.code === CSEC.USER_NOT_LOGGED_IN) {\n        user_nog_logged_in_within_response_errors = true\n      }\n    }\n  }\n\n  if (user_nog_logged_in_within_response_errors || user_not_logged_in_within_graphql_errors) {\n    console.log('Time to refresh the token')\n\n    let authTokenExpired = false\n    let refreshTokenExpired = false\n    const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n\n    if ((new Date() / 1000) >= tokenExp) {\n      authTokenExpired = true\n      \n      if ((new Date() / 1000) >= refreshTokenExp) {\n        refreshTokenExpired = true\n        // Remove any remaining token data\n        CSAuth.cleanup()\n        // Store current location, user has to login again\n        SetCurrentUrlAsNext()\n      }\n    }\n    \n    if (authTokenExpired && !refreshTokenExpired) {\n      console.log(\"refresh token... somehow...\")\n      console.log(localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN))\n\n      return new Observable(observer => {\n        client.mutate({\n          mutation: TOKEN_REFRESH,\n        })\n          .then(({ data }) => { \n            console.log(data)\n            CSAuth.updateTokenInfo(data.refreshToken)\n          })\n          .then(() => {\n            const subscriber = {\n              next: observer.next.bind(observer),\n              error: observer.error.bind(observer),\n              complete: observer.complete.bind(observer)\n            };\n\n            // Retry last failed request\n            forward(operation).subscribe(subscriber);\n          })\n          .catch(error => {\n            // No refresh or client token available, we force user to login, after a cleanup\n            console.log(\"Failed to refresh the token, onwards to the login page\")\n            observer.error(error);\n            CSAuth.cleanup()\n            window.location.href = \"/#/user/login\"\n            window.location.reload()\n          });\n      })\n    } else if (refreshTokenExpired) {\n      window.location.href = \"#/user/session/expired\"\n      window.location.reload()\n    } else {\n      window.location.href = \"#/user/login/required\"\n      window.location.reload()\n    }\n  }\n})\n\n\n   \n// // Fetch CSRF Token\n// let csrftoken\n// async function getCsrfToken() {\n//   if (csrftoken) return csrftoken\n\n//   csrftoken = await fetch('/d/csrf/')\n//     .then(response => response.json())\n//     .then(data => data.csrfToken)\n\n//   return await csrftoken\n// }\n\n// Fetch CSRF Token from Cookie\nlet csrftoken\nasync function getCsrfToken() {\n  if (csrftoken) return csrftoken\n\n  await fetch('/d/csrf/')\n    .then(response => response.json())\n\n  // For troubleshooting\n  // const result =  await fetch('/d/csrf/')\n  //   .then(response => response.json())\n  // console.log(reuslt)\n\n  csrftoken = Cookies.get('csrftoken');\n  \n  return await csrftoken\n}\n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n  // request: async (operation) => {\n  //   const csrftoken = await getCsrfToken();\n  //   Cookies.set('csrftoken', csrftoken);\n  //   // set the cookie 'csrftoken'\n  //   operation.setContext({\n  //       // set the 'X-CSRFToken' header to the csrftoken\n  //       headers: {\n  //           'X-CSRFToken': csrftoken,\n  //       },\n  //   })}\n});\n\nconst csrfMiddleware = new ApolloLink(async (operation, forward) => {\n  const csrftoken = await getCsrfToken();\n  Cookies.set('csrftoken', csrftoken);\n\n  operation.setContext({\n    // set the 'X-CSRFToken' header to the csrftoken\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n  })\n\n  return forward(operation)\n})\n\n// const authLink = setContext(async (request, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   // const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       // Authorization: token ? `JWT ${token}`: ''\n//     }\n//   }\n// });\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([csrfMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          accounts: relayStylePagination(),\n        },\n      },\n    },\n  }),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  // moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}